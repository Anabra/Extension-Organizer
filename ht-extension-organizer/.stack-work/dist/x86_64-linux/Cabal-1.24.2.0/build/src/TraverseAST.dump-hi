
==================== FINAL INTERFACE ====================
2017-09-20 22:58:25.43338 UTC

interface ht-extension-organizer-0.1.0.0-y3uypH7gCtA60AaWeuyZL:TraverseAST 8002
  interface hash: 0092bae3bbe8102a7c20e5d92b96902b
  ABI hash: 79558d01680b5677b4dadc7757e88c58
  export-list hash: aee07235b6b1241d28e3091e2b799ca6
  orphan hash: 2e3a69b312621bf2fccc738781d90043
  flag hash: 1b6e0e485aafb528ac0398d1e3625507
  sig of: Nothing
  used TH splices: False
  where
exports:
  Control.Monad.<$!>
  Control.Monad.<=<
  Control.Monad.>=>
  Control.Monad.filterM
  Control.Monad.foldM
  Control.Monad.foldM_
  Control.Monad.forever
  Control.Monad.guard
  Control.Monad.mapAndUnzipM
  Control.Monad.mfilter
  Control.Monad.replicateM
  Control.Monad.replicateM_
  Control.Monad.unless
  Control.Monad.zipWithM
  Control.Monad.zipWithM_
  Data.Foldable.forM_
  Data.Foldable.mapM_
  Data.Foldable.msum
  Data.Foldable.sequence_
  Data.Function.fix
  Data.Functor.void
  Data.Traversable.forM
  GHC.Base.=<<
  GHC.Base.ap
  GHC.Base.join
  GHC.Base.liftM
  GHC.Base.liftM2
  GHC.Base.liftM3
  GHC.Base.liftM4
  GHC.Base.liftM5
  GHC.Base.when
  ExtMonad.addOccurence
  ExtMonad.addOccurence'
  ExtMonad.addOccurence_
  ExtMonad.conditional
  ExtMonad.conditionalAny
  ExtMonad.isTurnedOn
  ExtMonad.runExtMonadGHC
  ExtMonad.runExtMonadIO
  TraverseAST.chkDecl
  TraverseAST.chkExpr
  TraverseAST.chkFieldUpdate
  TraverseAST.chkPattern
  TraverseAST.chkPatternField
  TraverseAST.chkPatternSynonym
  TraverseAST.chkType
  TraverseAST.traverseAlt
  TraverseAST.traverseAssertion
  TraverseAST.traverseBracket
  TraverseAST.traverseCaseRhs
  TraverseAST.traverseClassBody
  TraverseAST.traverseClassElem
  TraverseAST.traverseCmd
  TraverseAST.traverseCompStmt
  TraverseAST.traverseContext
  TraverseAST.traverseDecl
  TraverseAST.traverseExpr
  TraverseAST.traverseFieldUpdate
  TraverseAST.traverseFixitySignature
  TraverseAST.traverseGuardedCaseRhs
  TraverseAST.traverseGuardedRhs
  TraverseAST.traverseInstBody
  TraverseAST.traverseInstBodyDecl
  TraverseAST.traverseKind
  TraverseAST.traverseKindContraint
  TraverseAST.traverseListCompBody
  TraverseAST.traverseLiteral
  TraverseAST.traverseLocalBind
  TraverseAST.traverseLocalBinds
  TraverseAST.traverseMatch
  TraverseAST.traverseMatchLhs
  TraverseAST.traverseModule
  TraverseAST.traverseName
  TraverseAST.traverseOperator
  TraverseAST.traversePattern
  TraverseAST.traversePatternField
  TraverseAST.traversePatternSynonym
  TraverseAST.traversePromoted
  TraverseAST.traverseQuasiQuote
  TraverseAST.traverseRhs
  TraverseAST.traverseRhsGuard
  TraverseAST.traverseSplice
  TraverseAST.traverseStmt
  TraverseAST.traverseTupSecElem
  TraverseAST.traverseTyVar
  TraverseAST.traverseType
  TraverseAST.traverseTypeEqn
  TraverseAST.traverseTypeSignature
  TraverseAST.traverseValueBind
  Control.Monad.Reader.Class.asks
  Control.Monad.State.Class.gets
  Control.Monad.State.Class.modify
  Control.Monad.State.Class.modify'
  Control.Monad.Trans.Reader.mapReader
  Control.Monad.Trans.Reader.mapReaderT
  Control.Monad.Trans.Reader.runReader
  Control.Monad.Trans.Reader.withReader
  Control.Monad.Trans.Reader.withReaderT
  Control.Monad.Trans.State.Lazy.evalState
  Control.Monad.Trans.State.Lazy.evalStateT
  Control.Monad.Trans.State.Lazy.execState
  Control.Monad.Trans.State.Lazy.execStateT
  Control.Monad.Trans.State.Lazy.mapState
  Control.Monad.Trans.State.Lazy.mapStateT
  Control.Monad.Trans.State.Lazy.runState
  Control.Monad.Trans.State.Lazy.withState
  Control.Monad.Trans.State.Lazy.withStateT
  Control.Monad.Fix.MonadFix{Control.Monad.Fix.mfix}
  Control.Monad.IO.Class.MonadIO{Control.Monad.IO.Class.liftIO}
  Data.Traversable.Traversable|{Data.Traversable.mapM Data.Traversable.sequence}
  GHC.Base.Functor{GHC.Base.fmap}
  GHC.Base.Monad{GHC.Base.>> GHC.Base.>>= GHC.Base.fail GHC.Base.return}
  GHC.Base.MonadPlus{GHC.Base.mplus GHC.Base.mzero}
  GHC.LanguageExtensions.Type.Extension{GHC.LanguageExtensions.Type.AllowAmbiguousTypes GHC.LanguageExtensions.Type.AlternativeLayoutRule GHC.LanguageExtensions.Type.AlternativeLayoutRuleTransitional GHC.LanguageExtensions.Type.ApplicativeDo GHC.LanguageExtensions.Type.Arrows GHC.LanguageExtensions.Type.AutoDeriveTypeable GHC.LanguageExtensions.Type.BangPatterns GHC.LanguageExtensions.Type.BinaryLiterals GHC.LanguageExtensions.Type.CApiFFI GHC.LanguageExtensions.Type.ConstrainedClassMethods GHC.LanguageExtensions.Type.ConstraintKinds GHC.LanguageExtensions.Type.Cpp GHC.LanguageExtensions.Type.DataKinds GHC.LanguageExtensions.Type.DatatypeContexts GHC.LanguageExtensions.Type.DefaultSignatures GHC.LanguageExtensions.Type.DeriveAnyClass GHC.LanguageExtensions.Type.DeriveDataTypeable GHC.LanguageExtensions.Type.DeriveFoldable GHC.LanguageExtensions.Type.DeriveFunctor GHC.LanguageExtensions.Type.DeriveGeneric GHC.LanguageExtensions.Type.DeriveLift GHC.LanguageExtensions.Type.DeriveTraversable GHC.LanguageExtensions.Type.DisambiguateRecordFields GHC.LanguageExtensions.Type.DoAndIfThenElse GHC.LanguageExtensions.Type.DuplicateRecordFields GHC.LanguageExtensions.Type.EmptyCase GHC.LanguageExtensions.Type.EmptyDataDecls GHC.LanguageExtensions.Type.ExistentialQuantification GHC.LanguageExtensions.Type.ExplicitForAll GHC.LanguageExtensions.Type.ExplicitNamespaces GHC.LanguageExtensions.Type.ExtendedDefaultRules GHC.LanguageExtensions.Type.FlexibleContexts GHC.LanguageExtensions.Type.FlexibleInstances GHC.LanguageExtensions.Type.ForeignFunctionInterface GHC.LanguageExtensions.Type.FunctionalDependencies GHC.LanguageExtensions.Type.GADTSyntax GHC.LanguageExtensions.Type.GADTs GHC.LanguageExtensions.Type.GHCForeignImportPrim GHC.LanguageExtensions.Type.GeneralizedNewtypeDeriving GHC.LanguageExtensions.Type.ImplicitParams GHC.LanguageExtensions.Type.ImplicitPrelude GHC.LanguageExtensions.Type.ImpredicativeTypes GHC.LanguageExtensions.Type.IncoherentInstances GHC.LanguageExtensions.Type.InstanceSigs GHC.LanguageExtensions.Type.InterruptibleFFI GHC.LanguageExtensions.Type.JavaScriptFFI GHC.LanguageExtensions.Type.KindSignatures GHC.LanguageExtensions.Type.LambdaCase GHC.LanguageExtensions.Type.LiberalTypeSynonyms GHC.LanguageExtensions.Type.MagicHash GHC.LanguageExtensions.Type.MonadComprehensions GHC.LanguageExtensions.Type.MonadFailDesugaring GHC.LanguageExtensions.Type.MonoLocalBinds GHC.LanguageExtensions.Type.MonoPatBinds GHC.LanguageExtensions.Type.MonomorphismRestriction GHC.LanguageExtensions.Type.MultiParamTypeClasses GHC.LanguageExtensions.Type.MultiWayIf GHC.LanguageExtensions.Type.NPlusKPatterns GHC.LanguageExtensions.Type.NamedWildCards GHC.LanguageExtensions.Type.NegativeLiterals GHC.LanguageExtensions.Type.NondecreasingIndentation GHC.LanguageExtensions.Type.NullaryTypeClasses GHC.LanguageExtensions.Type.NumDecimals GHC.LanguageExtensions.Type.OverlappingInstances GHC.LanguageExtensions.Type.OverloadedLabels GHC.LanguageExtensions.Type.OverloadedLists GHC.LanguageExtensions.Type.OverloadedStrings GHC.LanguageExtensions.Type.PackageImports GHC.LanguageExtensions.Type.ParallelArrays GHC.LanguageExtensions.Type.ParallelListComp GHC.LanguageExtensions.Type.PartialTypeSignatures GHC.LanguageExtensions.Type.PatternGuards GHC.LanguageExtensions.Type.PatternSynonyms GHC.LanguageExtensions.Type.PolyKinds GHC.LanguageExtensions.Type.PostfixOperators GHC.LanguageExtensions.Type.QuasiQuotes GHC.LanguageExtensions.Type.RankNTypes GHC.LanguageExtensions.Type.RebindableSyntax GHC.LanguageExtensions.Type.RecordPuns GHC.LanguageExtensions.Type.RecordWildCards GHC.LanguageExtensions.Type.RecursiveDo GHC.LanguageExtensions.Type.RelaxedLayout GHC.LanguageExtensions.Type.RelaxedPolyRec GHC.LanguageExtensions.Type.RoleAnnotations GHC.LanguageExtensions.Type.ScopedTypeVariables GHC.LanguageExtensions.Type.StandaloneDeriving GHC.LanguageExtensions.Type.StaticPointers GHC.LanguageExtensions.Type.Strict GHC.LanguageExtensions.Type.StrictData GHC.LanguageExtensions.Type.TemplateHaskell GHC.LanguageExtensions.Type.TemplateHaskellQuotes GHC.LanguageExtensions.Type.TraditionalRecordSyntax GHC.LanguageExtensions.Type.TransformListComp GHC.LanguageExtensions.Type.TupleSections GHC.LanguageExtensions.Type.TypeApplications GHC.LanguageExtensions.Type.TypeFamilies GHC.LanguageExtensions.Type.TypeFamilyDependencies GHC.LanguageExtensions.Type.TypeInType GHC.LanguageExtensions.Type.TypeOperators GHC.LanguageExtensions.Type.TypeSynonymInstances GHC.LanguageExtensions.Type.UnboxedTuples GHC.LanguageExtensions.Type.UndecidableInstances GHC.LanguageExtensions.Type.UndecidableSuperClasses GHC.LanguageExtensions.Type.UnicodeSyntax GHC.LanguageExtensions.Type.UnliftedFFITypes GHC.LanguageExtensions.Type.ViewPatterns}
  ExtMap.ExtMap
  ExtMap.LogicalRelation{ExtMap.:&&: ExtMap.:||: ExtMap.LVar ExtMap.Not}
  ExtMonad.CheckNode
  ExtMonad.CheckUNode
  ExtMonad.ExtDomain
  ExtMonad.ExtMonad
  TraverseAST.AltG
  TraverseAST.CaseRhsG
  TraverseAST.GuardedCaseRhsG
  TraverseAST.PromotedG
  TraverseAST.StmtG
  Control.Monad.Reader.Class.MonadReader{Control.Monad.Reader.Class.ask Control.Monad.Reader.Class.local Control.Monad.Reader.Class.reader}
  Control.Monad.State.Class.MonadState{Control.Monad.State.Class.get Control.Monad.State.Class.put Control.Monad.State.Class.state}
  Control.Monad.Trans.Class.MonadTrans{Control.Monad.Trans.Class.lift}
  Control.Monad.Trans.Reader.Reader
  Control.Monad.Trans.Reader.ReaderT{Control.Monad.Trans.Reader.ReaderT runReaderT}
  Control.Monad.Trans.State.Lazy.State
  Control.Monad.Trans.State.Lazy.StateT{Control.Monad.Trans.State.Lazy.StateT runStateT}
module dependencies: BangPatternsChecker DerivingsChecker ExtMap
                     ExtMonad FlexibleInstancesChecker LambdaCaseChecker
                     PatternSynonymsChecker RecordWildCardsChecker
                     TemplateHaskellChecker TupleSectionsChecker UnboxedTuplesChecker
                     ViewPatternsChecker
package dependencies: array-0.5.1.1@array-0.5.1.1 base-4.9.1.0
                      binary-0.8.3.0@binary-0.8.3.0
                      bytestring-0.10.8.1@bytestring-0.10.8.1
                      containers-0.5.7.1@containers-0.5.7.1
                      deepseq-1.4.2.0@deepseq-1.4.2.0 directory-1.3.0.0@directory-1.3.0.0
                      either-4.4.1.1@either-4.4.1.1-6PiwKYkn4v6B4KO2R2Fu1b
                      filepath-1.4.1.1@filepath-1.4.1.1 ghc-8.0.2
                      ghc-boot-8.0.2@ghc-boot-8.0.2 ghc-boot-th-8.0.2@ghc-boot-th-8.0.2
                      ghc-paths-0.1.0.9@ghc-paths-0.1.0.9-AhaDlGOsRAepox069XzG
                      ghc-prim-0.5.0.0 ghci-8.0.2@ghci-8.0.2
                      hashable-1.2.6.1@hashable-1.2.6.1-2ZLNuHq395GGIHwEHuqZol
                      haskell-tools-ast-0.8.1.0@haskell-tools-ast-0.8.1.0-I9ZMaCkuuwT3FoQkwMjyW6
                      haskell-tools-backend-ghc-0.8.1.0@haskell-tools-backend-ghc-0.8.1.0-DqHnbK8OPi6CBD5cIPITWq
                      haskell-tools-prettyprint-0.8.1.0@haskell-tools-prettyprint-0.8.1.0-F9iWkGq5ppnLH6whHm0DlC
                      haskell-tools-refactor-0.8.1.0@haskell-tools-refactor-0.8.1.0-AF8Q4cA8mAnLNwu5t0Icw8
                      haskell-tools-rewrite-0.8.1.0@haskell-tools-rewrite-0.8.1.0-85A6q9dMQgvKEKG9I8fxVU
                      hoopl-3.10.2.1@hoopl-3.10.2.1 hpc-0.6.0.3@hpc-0.6.0.3
                      instance-control-0.1.1.1@instance-control-0.1.1.1-1defRS82vAAEmZKRhe67aa
                      integer-gmp-1.0.0.1 mtl-2.2.1@mtl-2.2.1-BLKBelFsPB3BoFeSWSOYj6
                      pretty-1.1.3.3@pretty-1.1.3.3 process-1.4.3.0@process-1.4.3.0
                      references-0.3.2.2@references-0.3.2.2-y362bKYomIKNQKMTfOWVo
                      safe-0.3.15@safe-0.3.15-2Yd45VWFfdcKqKyispOifY
                      split-0.2.3.2@split-0.2.3.2-CJl40zTyCIV16Pr60nb7CT
                      syb-0.7@syb-0.7-4OKdCpwGutyB1rNRmoa0ya template-haskell-2.11.1.0
                      text-1.2.2.2@text-1.2.2.2-9UQZjEJZQFSGMffj1Z5g00
                      time-1.6.0.1@time-1.6.0.1 transformers-0.5.2.0@transformers-0.5.2.0
                      uniplate-1.6.12@uniplate-1.6.12-4PyZX21trQJ5lfk0CDvC7U
                      unix-2.7.2.1@unix-2.7.2.1
                      unordered-containers-0.2.8.0@unordered-containers-0.2.8.0-Bp9XgxjuHxcI4tFehVMDGC
orphans: base-4.9.1.0:GHC.Base base-4.9.1.0:GHC.Float
         binary-0.8.3.0@binary-0.8.3.0:Data.Binary.Generic
         bytestring-0.10.8.1@bytestring-0.10.8.1:Data.ByteString.Builder
         ghc-8.0.2:BlockId ghc-8.0.2:DsMonad ghc-8.0.2:LoadIface
         ghc-8.0.2:PPC.Ppr ghc-8.0.2:PprCmm ghc-8.0.2:PprCmmDecl
         ghc-8.0.2:PprCmmExpr ghc-8.0.2:PprCore ghc-8.0.2:SPARC.Ppr
         ghc-8.0.2:TcEnv ghc-8.0.2:TcRnMonad ghc-8.0.2:X86.Ppr
         ghc-boot-8.0.2@ghc-boot-8.0.2:GHC.LanguageExtensions
         ghci-8.0.2@ghci-8.0.2:GHCi.Message
         ghci-8.0.2@ghci-8.0.2:GHCi.TH.Binary
         hashable-1.2.6.1@hashable-1.2.6.1-2ZLNuHq395GGIHwEHuqZol:Data.Hashable.Generic
         haskell-tools-ast-0.8.1.0@haskell-tools-ast-0.8.1.0-I9ZMaCkuuwT3FoQkwMjyW6:Language.Haskell.Tools.AST.Instances.Data
         haskell-tools-ast-0.8.1.0@haskell-tools-ast-0.8.1.0-I9ZMaCkuuwT3FoQkwMjyW6:Language.Haskell.Tools.AST.Instances.Eq
         haskell-tools-ast-0.8.1.0@haskell-tools-ast-0.8.1.0-I9ZMaCkuuwT3FoQkwMjyW6:Language.Haskell.Tools.AST.Instances.Generic
         haskell-tools-ast-0.8.1.0@haskell-tools-ast-0.8.1.0-I9ZMaCkuuwT3FoQkwMjyW6:Language.Haskell.Tools.AST.Instances.SemanticTraversal
         haskell-tools-ast-0.8.1.0@haskell-tools-ast-0.8.1.0-I9ZMaCkuuwT3FoQkwMjyW6:Language.Haskell.Tools.AST.Instances.Show
         haskell-tools-ast-0.8.1.0@haskell-tools-ast-0.8.1.0-I9ZMaCkuuwT3FoQkwMjyW6:Language.Haskell.Tools.AST.Instances.SourceInfoTraversal
         haskell-tools-ast-0.8.1.0@haskell-tools-ast-0.8.1.0-I9ZMaCkuuwT3FoQkwMjyW6:Language.Haskell.Tools.AST.SemaInfoTypes
         haskell-tools-ast-0.8.1.0@haskell-tools-ast-0.8.1.0-I9ZMaCkuuwT3FoQkwMjyW6:Language.Haskell.Tools.AST.Utils.GHCInstances
         haskell-tools-backend-ghc-0.8.1.0@haskell-tools-backend-ghc-0.8.1.0-DqHnbK8OPi6CBD5cIPITWq:Language.Haskell.Tools.AST.FromGHC.Utils
         haskell-tools-prettyprint-0.8.1.0@haskell-tools-prettyprint-0.8.1.0-F9iWkGq5ppnLH6whHm0DlC:Language.Haskell.Tools.Transform.RangeTemplate
         haskell-tools-prettyprint-0.8.1.0@haskell-tools-prettyprint-0.8.1.0-F9iWkGq5ppnLH6whHm0DlC:Language.Haskell.Tools.Transform.SourceTemplate
         haskell-tools-prettyprint-0.8.1.0@haskell-tools-prettyprint-0.8.1.0-F9iWkGq5ppnLH6whHm0DlC:Language.Haskell.Tools.Transform.SourceTemplateHelpers
         haskell-tools-refactor-0.8.1.0@haskell-tools-refactor-0.8.1.0-AF8Q4cA8mAnLNwu5t0Icw8:Language.Haskell.Tools.Refactor.RefactorBase
         ht-extension-organizer-0.1.0.0-y3uypH7gCtA60AaWeuyZL:ExtMonad
         references-0.3.2.2@references-0.3.2.2-y362bKYomIKNQKMTfOWVo:Control.Reference.Predefined.Containers.Tree
         references-0.3.2.2@references-0.3.2.2-y362bKYomIKNQKMTfOWVo:Control.Reference.TH.Records
         syb-0.7@syb-0.7-4OKdCpwGutyB1rNRmoa0ya:Data.Generics.Instances
         text-1.2.2.2@text-1.2.2.2-9UQZjEJZQFSGMffj1Z5g00:Data.Text
         text-1.2.2.2@text-1.2.2.2-9UQZjEJZQFSGMffj1Z5g00:Data.Text.Lazy
         text-1.2.2.2@text-1.2.2.2-9UQZjEJZQFSGMffj1Z5g00:Data.Text.Show
         time-1.6.0.1@time-1.6.0.1:Data.Time.Calendar.Gregorian
         time-1.6.0.1@time-1.6.0.1:Data.Time.Format.Parse
         time-1.6.0.1@time-1.6.0.1:Data.Time.LocalTime.LocalTime
         transformers-0.5.2.0@transformers-0.5.2.0:Control.Monad.Trans.Error
         uniplate-1.6.12@uniplate-1.6.12-4PyZX21trQJ5lfk0CDvC7U:Data.Generics.Uniplate.Data
family instance modules: base-4.9.1.0:Control.Applicative
                         base-4.9.1.0:Data.Complex base-4.9.1.0:Data.Either
                         base-4.9.1.0:Data.Functor.Compose base-4.9.1.0:Data.Functor.Const
                         base-4.9.1.0:Data.Functor.Identity
                         base-4.9.1.0:Data.Functor.Product base-4.9.1.0:Data.Functor.Sum
                         base-4.9.1.0:Data.List.NonEmpty base-4.9.1.0:Data.Monoid
                         base-4.9.1.0:Data.Semigroup base-4.9.1.0:Data.Type.Equality
                         base-4.9.1.0:Data.Version base-4.9.1.0:Data.Void
                         base-4.9.1.0:GHC.Exts base-4.9.1.0:GHC.Generics
                         base-4.9.1.0:GHC.IO.Exception base-4.9.1.0:GHC.TypeLits
                         containers-0.5.7.1@containers-0.5.7.1:Data.IntMap.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.IntSet.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.Map.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.Sequence
                         containers-0.5.7.1@containers-0.5.7.1:Data.Set.Base
                         ghc-8.0.2:PlaceHolder ghc-8.0.2:TrieMap
                         ghc-boot-th-8.0.2@ghc-boot-th-8.0.2:GHC.LanguageExtensions.Type
                         ghci-8.0.2@ghci-8.0.2:GHCi.FFI ghci-8.0.2@ghci-8.0.2:GHCi.Message
                         ghci-8.0.2@ghci-8.0.2:GHCi.ResolvedBCO
                         ghci-8.0.2@ghci-8.0.2:SizedSeq
                         haskell-tools-ast-0.8.1.0@haskell-tools-ast-0.8.1.0-I9ZMaCkuuwT3FoQkwMjyW6:Language.Haskell.Tools.AST.Ann
                         haskell-tools-ast-0.8.1.0@haskell-tools-ast-0.8.1.0-I9ZMaCkuuwT3FoQkwMjyW6:Language.Haskell.Tools.AST.Instances.Generic
                         haskell-tools-prettyprint-0.8.1.0@haskell-tools-prettyprint-0.8.1.0-F9iWkGq5ppnLH6whHm0DlC:Language.Haskell.Tools.Transform.RangeTemplate
                         haskell-tools-prettyprint-0.8.1.0@haskell-tools-prettyprint-0.8.1.0-F9iWkGq5ppnLH6whHm0DlC:Language.Haskell.Tools.Transform.SourceTemplate
                         hoopl-3.10.2.1@hoopl-3.10.2.1:Compiler.Hoopl.Block
                         hoopl-3.10.2.1@hoopl-3.10.2.1:Compiler.Hoopl.Dataflow
                         hoopl-3.10.2.1@hoopl-3.10.2.1:Compiler.Hoopl.Fuel
                         hoopl-3.10.2.1@hoopl-3.10.2.1:Compiler.Hoopl.Label
                         hoopl-3.10.2.1@hoopl-3.10.2.1:Compiler.Hoopl.Unique
                         pretty-1.1.3.3@pretty-1.1.3.3:Text.PrettyPrint.Annotated.HughesPJ
                         pretty-1.1.3.3@pretty-1.1.3.3:Text.PrettyPrint.HughesPJ
                         references-0.3.2.2@references-0.3.2.2-y362bKYomIKNQKMTfOWVo:Control.Reference.Predefined.Containers
                         references-0.3.2.2@references-0.3.2.2-y362bKYomIKNQKMTfOWVo:Control.Reference.Predefined.Containers.Tree
                         references-0.3.2.2@references-0.3.2.2-y362bKYomIKNQKMTfOWVo:Control.Reference.Types
                         template-haskell-2.11.1.0:Language.Haskell.TH.Syntax
                         text-1.2.2.2@text-1.2.2.2-9UQZjEJZQFSGMffj1Z5g00:Data.Text
                         text-1.2.2.2@text-1.2.2.2-9UQZjEJZQFSGMffj1Z5g00:Data.Text.Lazy
                         unordered-containers-0.2.8.0@unordered-containers-0.2.8.0-Bp9XgxjuHxcI4tFehVMDGC:Data.HashMap.Base
                         unordered-containers-0.2.8.0@unordered-containers-0.2.8.0-Bp9XgxjuHxcI4tFehVMDGC:Data.HashSet
import  -/  base-4.9.1.0:Control.Monad a6784c5dab0d75c63dabec5a37843f98
import  -/  base-4.9.1.0:Data.Foldable 3e0b6967a1da89945d0e2d47266337a2
import  -/  base-4.9.1.0:Data.Functor 5ab1dc703df5b482e77efb697833ca3c
import  -/  base-4.9.1.0:Data.Traversable 556020d7cf3c4a34a774600512918a37
import  -/  base-4.9.1.0:Debug.Trace a9edf3aec504f4423d8ba829ab373a25
import  -/  base-4.9.1.0:GHC.Base c4231c43c07e46080a26bf94094c7aa1
import  -/  base-4.9.1.0:Prelude 22dd289b8469a8fa8dc81cab7b237771
import  -/  ghc-boot-th-8.0.2@ghc-boot-th-8.0.2:GHC.LanguageExtensions.Type 92441ea50916fa3940e20fae60f255d7
import  -/  haskell-tools-ast-0.8.1.0@haskell-tools-ast-0.8.1.0-I9ZMaCkuuwT3FoQkwMjyW6:Language.Haskell.Tools.AST 3560a1061fd66e2c7888fe18991ca1cc
import  -/  haskell-tools-ast-0.8.1.0@haskell-tools-ast-0.8.1.0-I9ZMaCkuuwT3FoQkwMjyW6:Language.Haskell.Tools.AST.Ann 07e8f66a2b6d7f18951fb774264c8644
import  -/  haskell-tools-ast-0.8.1.0@haskell-tools-ast-0.8.1.0-I9ZMaCkuuwT3FoQkwMjyW6:Language.Haskell.Tools.AST.References 46cb31a69f53297ab865876852473aa3
import  -/  haskell-tools-ast-0.8.1.0@haskell-tools-ast-0.8.1.0-I9ZMaCkuuwT3FoQkwMjyW6:Language.Haskell.Tools.AST.Representation.Exprs b23d8cf73adba2681e60d36c0a6f14a3
import  -/  haskell-tools-ast-0.8.1.0@haskell-tools-ast-0.8.1.0-I9ZMaCkuuwT3FoQkwMjyW6:Language.Haskell.Tools.AST.Representation.Kinds 1a97b6c44d7377ab5ff260b770ca4661
import  -/  haskell-tools-ast-0.8.1.0@haskell-tools-ast-0.8.1.0-I9ZMaCkuuwT3FoQkwMjyW6:Language.Haskell.Tools.AST.Representation.Stmts 5e2214d0839f02b86c37355caa69e034
import  -/  haskell-tools-prettyprint-0.8.1.0@haskell-tools-prettyprint-0.8.1.0-F9iWkGq5ppnLH6whHm0DlC:Language.Haskell.Tools.PrettyPrint da7dea6ac299ef1620d7160216fb97b0
import  -/  haskell-tools-refactor-0.8.1.0@haskell-tools-refactor-0.8.1.0-AF8Q4cA8mAnLNwu5t0Icw8:Language.Haskell.Tools.Refactor 84acc8d60e278de91351468f26f90e1c
import  -/  haskell-tools-refactor-0.8.1.0@haskell-tools-refactor-0.8.1.0-AF8Q4cA8mAnLNwu5t0Icw8:Language.Haskell.Tools.Refactor.RefactorBase d8cc79a36102a900280f4d51e9bf8f8a
import  -/  haskell-tools-rewrite-0.8.1.0@haskell-tools-rewrite-0.8.1.0-85A6q9dMQgvKEKG9I8fxVU:Language.Haskell.Tools.AST.ElementTypes df954b524d036aee274d8ad0f571417a
import  -/  BangPatternsChecker 79fc278df5854f4e562680fa7afa40cc
  exports: b384d4aba88e8297ccfed74c60cab264
  chkBangPatterns 0b6d3d89d712cda762aef76f1ed9f58c
import  -/  DerivingsChecker 8e1f2c0a55518acd3303c01e5ff11788
  exports: c9c99a13421ec9464a9b0877252e817a
  chkDerivings 7bf09d95e3066f04c34261ae98a558e3
import  -/  ExtMap ce208fa2f233772cc4b03c60efef446e
  :&&: 4a12e4fbb68353aea1ce40a572e2a5f4
  :||: b024d415aaaed601318f0e8fa0ffaa04
  ExtMap 86d8b8e09d7cd6f6e3831751b6397a46
  LVar c2b251913343abac99e887c1b70f0c95
  LogicalRelation 244102f8a6d7434a090b758121b05523
  Not a790822a2ae7d0c293b41158b7bc0e52
import  -/  ExtMonad af7b60a65d818af19a46d996e27297ca
  exports: 7f69547596e05261c6f5806398624025
  CheckNode d2a8a000f373c241c0362787c4b3f842
  CheckUNode 9a3c78de9fdd35033f52f4944cc68138
  ExtDomain 7fc7ae623015a9d2031eb05f95b73507
  ExtMonad 6ab37cbe93709f9dcdeffcf18c24ce9b
  addOccurence c9603992ac2a28741343ebc5c8fe7b56
  addOccurence' 806962a54b1c16e16558458575c9a479
  addOccurence_ 0a70efda5e7142f7b588f7458ea99597
  conditional 179fcfe6ec57edddd9abe173be82121d
  conditionalAny 53eb934c9b54c6f8fe1c33689d0d30d5
  isTurnedOn 58326d046a06fcac13f090ffdee96f9d
  runExtMonadGHC 64013254a8a069463528a96ade6c9f65
  runExtMonadIO 7d696a7ab8d541e03e4a3c0a61328a95
import  -/  FlexibleInstancesChecker 613725654704abee4fd54b0f4775ba97
  exports: e3e5947061f31e3de9af61a2611cb8cf
  chkFlexibleInstances 47a0a59ad7f63fe78f39f3c4ef8608df
import  -/  LambdaCaseChecker 9bef6f4d1c8853a02b7aecb5ad3eca10
  exports: b8919690d6074d4c7e5908898ab36358
  chkLambdaCase b6d6029edc4d05f26e678f04f73b7824
import  -/  PatternSynonymsChecker 209b276d2c449fd9cc90bf0a43b54cce
  exports: cc58466d11f708e17113e46f0997b812
  chkPatternSynonyms c03f09ba5b7466131e6959a62459e2ec
import  -/  RecordWildCardsChecker e2f49d4df4442f9537924c3d04d106da
  exports: e1d6c5023d5d4bebad625065ab76cd62
  chkRecordWildCardsFieldUpdate 4ce49b110f7017fd4d53c3e26084f75a
  chkRecordWildCardsPatField ea9d5814572d9012b3c7b47299adb40c
import  -/  TemplateHaskellChecker 3c89e361079b926599f42291f89d0476
  exports: 6b876baa0770906a0f5ca7b25a09757f
  chkTemplateHaskellBracket 867a06769c3118999b210d4241bee5de
  chkTemplateHaskellQuasiQuote 5d7156feb2d88253be3c9044f2711921
  chkTemplateHaskellSplice 150bb6855f9042fc1e7ba4288a85f2b6
import  -/  TupleSectionsChecker 6fe9d90cb9da783ceb3b4731c0bc7213
  exports: 13861fe7b22363e74cf528c304f1cb04
  chkTupleSections 6fa6e67f1d0884322c19bcf913792c56
import  -/  UnboxedTuplesChecker 2faf3e71416cce6539237d5c66935953
  exports: d18fdf9fb7c81b960769b8c94b8a37be
  chkUnboxedTuplesExpr 3043db734f280dc9d910a533a3270aca
  chkUnboxedTuplesPat 075b8d2c1d590fb228bb475825badd2d
  chkUnboxedTuplesType f560dce205825bb24f46045a0e56d527
import  -/  ViewPatternsChecker e8e8b5004b6ab7d65cc5c0068911a004
  exports: 00bf561f757a3f4572df43e5e14da757
  chkViewPatterns f3ba5bf2009954074ab4bcddec4ce727
import  -/  mtl-2.2.1@mtl-2.2.1-BLKBelFsPB3BoFeSWSOYj6:Control.Monad.Reader.Class 9573b8d2ba4bcf8261d19527e0170c4d
import  -/  mtl-2.2.1@mtl-2.2.1-BLKBelFsPB3BoFeSWSOYj6:Control.Monad.State.Class 6d31234b0a911b56412061943d18b89e
import  -/  references-0.3.2.2@references-0.3.2.2-y362bKYomIKNQKMTfOWVo:Control.Reference d89ee82346f6e25c55a8a19dbf84658e
import  -/  references-0.3.2.2@references-0.3.2.2-y362bKYomIKNQKMTfOWVo:Control.Reference.Combinators ab836299cfb9898d02f637bc65b3765a
import  -/  references-0.3.2.2@references-0.3.2.2-y362bKYomIKNQKMTfOWVo:Control.Reference.Operators 55e717f4df077a71cb70a96f85f6a393
import  -/  transformers-0.5.2.0@transformers-0.5.2.0:Control.Monad.Trans.Class 45530f1305724ee3931a9be21b40ca7e
import  -/  transformers-0.5.2.0@transformers-0.5.2.0:Control.Monad.Trans.Reader 1b607a084a390ae0e50e8f8dcbf2541a
import  -/  transformers-0.5.2.0@transformers-0.5.2.0:Control.Monad.Trans.State.Lazy 371607e50dde46b5f4103b3ab334a497
48e0e0566012ba03d1d8dc638be179c3
  $s$fApplicativeReaderT ::
    GHC.Base.Applicative
      (Control.Monad.Trans.Reader.ReaderT
         r
         (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc))
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ r.
                  @ (Control.Monad.Trans.Reader.ReaderT
                       r
                       (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc))
                  (Control.Monad.Trans.Reader.$fApplicativeReaderT_$cp1Applicative
                     @ (Control.Monad.Trans.State.Lazy.StateT
                          ExtMap.ExtMap GhcMonad.Ghc)
                     @ r
                     TraverseAST.$s$fApplicativeReaderT1)
                  (\ @ a (eta :: a) ->
                   let {
                     m1 :: Control.Monad.Trans.State.Lazy.StateT
                             ExtMap.ExtMap GhcMonad.Ghc a
                     = GHC.Base.$
                         @ 'GHC.Types.PtrRepLifted
                         @ (Data.Map.Base.Map
                              (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                              [SrcLoc.SrcSpan]
                            -> GhcMonad.Ghc
                                 (a,
                                  Data.Map.Base.Map
                                    (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                                    [SrcLoc.SrcSpan]))
                         @ (Control.Monad.Trans.State.Lazy.StateT
                              (Data.Map.Base.Map
                                 (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                                 [SrcLoc.SrcSpan])
                              GhcMonad.Ghc
                              a)
                         (\ (tpl :: Data.Map.Base.Map
                                      (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                                      [SrcLoc.SrcSpan]
                                    -> GhcMonad.Ghc
                                         (a,
                                          Data.Map.Base.Map
                                            (ExtMap.LogicalRelation
                                               GHC.LanguageExtensions.Type.Extension)
                                            [SrcLoc.SrcSpan])) ->
                          tpl)
                           `cast`
                         (<Data.Map.Base.Map
                             (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                             [SrcLoc.SrcSpan]
                           -> GhcMonad.Ghc
                                (a,
                                 Data.Map.Base.Map
                                   (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                                   [SrcLoc.SrcSpan])>_R
                          ->_R Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                        <Data.Map.Base.Map
                                           (ExtMap.LogicalRelation
                                              GHC.LanguageExtensions.Type.Extension)
                                           [SrcLoc.SrcSpan]>_N
                                        <GhcMonad.Ghc>_R
                                        <a>_N))
                         (\ (s1 :: Data.Map.Base.Map
                                     (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                                     [SrcLoc.SrcSpan])
                            (eta1 :: GhcMonad.Session)
                            (eta2 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                          ((GhcMonad.$fApplicativeGhc_$cpure
                              @ (a,
                                 Data.Map.Base.Map
                                   (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                                   [SrcLoc.SrcSpan])
                              (eta, s1))
                             `cast`
                           (GhcMonad.N:Ghc[0]
                                <(a,
                                  Data.Map.Base.Map
                                    (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                                    [SrcLoc.SrcSpan])>_R)
                             eta1)
                            `cast`
                          (GHC.Types.N:IO[0]
                               <(a,
                                 Data.Map.Base.Map
                                   (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                                   [SrcLoc.SrcSpan])>_R)
                            eta2)
                           `cast`
                         (<Data.Map.Base.Map
                             (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                             [SrcLoc.SrcSpan]>_R
                          ->_R Trans
                                   (<GhcMonad.Session>_R
                                    ->_R Sym (GHC.Types.N:IO[0]
                                                  <(a,
                                                    Data.Map.Base.Map
                                                      (ExtMap.LogicalRelation
                                                         GHC.LanguageExtensions.Type.Extension)
                                                      [SrcLoc.SrcSpan])>_R))
                                   (Sym (GhcMonad.N:Ghc[0]
                                             <(a,
                                               Data.Map.Base.Map
                                                 (ExtMap.LogicalRelation
                                                    GHC.LanguageExtensions.Type.Extension)
                                                 [SrcLoc.SrcSpan])>_R)))
                   } in
                   (\ (eta1 :: r) ->
                    GHC.Base.const
                      @ (Control.Monad.Trans.State.Lazy.StateT
                           ExtMap.ExtMap GhcMonad.Ghc a)
                      @ r
                      m1
                      eta1)
                     `cast`
                   (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                             <*>_N
                             <r>_R
                             <Control.Monad.Trans.State.Lazy.StateT
                                ExtMap.ExtMap GhcMonad.Ghc>_R
                             <a>_N)))
                  (Control.Monad.Trans.Reader.$fApplicativeReaderT_$c<*>
                     @ (Control.Monad.Trans.State.Lazy.StateT
                          ExtMap.ExtMap GhcMonad.Ghc)
                     @ r
                     TraverseAST.$s$fApplicativeReaderT1)
                  (Control.Monad.Trans.Reader.$fApplicativeReaderT_$c*>
                     @ (Control.Monad.Trans.State.Lazy.StateT
                          ExtMap.ExtMap GhcMonad.Ghc)
                     @ r
                     TraverseAST.$s$fApplicativeReaderT1)
                  (Control.Monad.Trans.Reader.$fApplicativeReaderT_$c<*
                     @ (Control.Monad.Trans.State.Lazy.StateT
                          ExtMap.ExtMap GhcMonad.Ghc)
                     @ r
                     TraverseAST.$s$fApplicativeReaderT1) -}
ea7e68090b678765616836d6386b385f
  $s$fApplicativeReaderT1 ::
    GHC.Base.Applicative
      (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc)
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                (TraverseAST.$s$fApplicativeReaderT_$s$fApplicativeStateT
                   @ (Data.Map.Base.Map
                        (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                        [SrcLoc.SrcSpan])) -}
d72d380c5d7e5e3d0c7ab70124b72f3a
  $s$fApplicativeReaderT_$s$fApplicativeStateT ::
    GHC.Base.Applicative
      (Control.Monad.Trans.State.Lazy.StateT s GhcMonad.Ghc)
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ s.
                  @ (Control.Monad.Trans.State.Lazy.StateT s GhcMonad.Ghc)
                  (TraverseAST.$s$fApplicativeReaderT_$s$fApplicativeStateT_$cp1Applicative
                     @ s)
                  (TraverseAST.$s$fApplicativeReaderT_$s$fApplicativeStateT_$cpure
                     @ s)
                  (TraverseAST.$s$fApplicativeReaderT_$s$fApplicativeStateT_$c<*>
                     @ s)
                  (Control.Monad.Trans.State.Lazy.$fApplicativeStateT_$c*>
                     @ GhcMonad.Ghc
                     @ s
                     GhcMonad.$fFunctorGhc
                     GhcMonad.$fMonadGhc)
                  (Control.Monad.Trans.State.Lazy.$fApplicativeStateT_$c<*
                     @ GhcMonad.Ghc
                     @ s
                     GhcMonad.$fFunctorGhc
                     GhcMonad.$fMonadGhc) -}
b44e58f90835fffc638c71f1c893638e
  $s$fApplicativeReaderT_$s$fApplicativeStateT_$c<*> ::
    Control.Monad.Trans.State.Lazy.StateT s GhcMonad.Ghc (a -> b)
    -> Control.Monad.Trans.State.Lazy.StateT s GhcMonad.Ghc a
    -> Control.Monad.Trans.State.Lazy.StateT s GhcMonad.Ghc b
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*C1(U)><L,C(C1(C1(U(U,U(1*U,1*U)))))><L,U>,
     Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ @ s
                   @ a
                   @ b
                   (ds :: Control.Monad.Trans.State.Lazy.StateT
                            s GhcMonad.Ghc (a -> b))
                   (ds1 :: Control.Monad.Trans.State.Lazy.StateT s GhcMonad.Ghc a) ->
                 GHC.Base.$
                   @ 'GHC.Types.PtrRepLifted
                   @ (s -> GhcMonad.Ghc (b, s))
                   @ (Control.Monad.Trans.State.Lazy.StateT s GhcMonad.Ghc b)
                   (\ (tpl :: s -> GhcMonad.Ghc (b, s)) -> tpl)
                     `cast`
                   (<s -> GhcMonad.Ghc (b, s)>_R
                    ->_R Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                  <s>_N <GhcMonad.Ghc>_R <b>_N))
                   (\ (s1 :: s) ->
                    GhcMonad.$fMonadGhc_$c>>=
                      @ (a -> b, s)
                      @ (b, s)
                      (ds
                         `cast`
                       (Control.Monad.Trans.State.Lazy.N:StateT[0]
                            <s>_N <GhcMonad.Ghc>_R <a -> b>_N)
                         s1)
                      (\ (ds2 :: (a -> b, s)) ->
                       GhcMonad.$fMonadGhc_$c>>=
                         @ (a, s)
                         @ (b, s)
                         (ds1
                            `cast`
                          (Control.Monad.Trans.State.Lazy.N:StateT[0]
                               <s>_N <GhcMonad.Ghc>_R <a>_N)
                            (case ds2 of wild { (,) f s' -> s' }))
                         (\ (ds3 :: (a, s)) ->
                          GhcMonad.$fApplicativeGhc_$cpure
                            @ (b, s)
                            (case ds2 of wild { (,) f s' ->
                             f (case ds3 of wild1 { (,) x s'' -> x }) },
                             case ds3 of wild { (,) x s'' -> s'' }))))) -}
d851fa14f8cc0e96039a83efec8095c6
  $s$fApplicativeReaderT_$s$fApplicativeStateT_$cp1Applicative ::
    GHC.Base.Functor
      (Control.Monad.Trans.State.Lazy.StateT s GhcMonad.Ghc)
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                TraverseAST.$s$fApplicativeReaderT_$s$fFunctorStateT -}
a9fde17882145c6d62239de104d97adf
  $s$fApplicativeReaderT_$s$fApplicativeStateT_$cpure ::
    a -> Control.Monad.Trans.State.Lazy.StateT s GhcMonad.Ghc a
  {- Arity: 4, HasNoCafRefs, Strictness: <L,U><L,U><L,A><S,U>,
     Inline: INLINE (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ @ s @ a (a1 :: a) ->
                 GHC.Base.$
                   @ 'GHC.Types.PtrRepLifted
                   @ (s -> GhcMonad.Ghc (a, s))
                   @ (Control.Monad.Trans.State.Lazy.StateT s GhcMonad.Ghc a)
                   (\ (tpl :: s -> GhcMonad.Ghc (a, s)) -> tpl)
                     `cast`
                   (<s -> GhcMonad.Ghc (a, s)>_R
                    ->_R Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                  <s>_N <GhcMonad.Ghc>_R <a>_N))
                   (\ (s1 :: s)
                      (eta :: GhcMonad.Session)
                      (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                    ((GhcMonad.$fApplicativeGhc_$cpure @ (a, s) (a1, s1))
                       `cast`
                     (GhcMonad.N:Ghc[0] <(a, s)>_R)
                       eta)
                      `cast`
                    (GHC.Types.N:IO[0] <(a, s)>_R)
                      eta1)
                     `cast`
                   (<s>_R
                    ->_R Trans
                             (<GhcMonad.Session>_R ->_R Sym (GHC.Types.N:IO[0] <(a, s)>_R))
                             (Sym (GhcMonad.N:Ghc[0] <(a, s)>_R)))) -}
de15cd3e68bd64c3da77d3fff3a181af
  $s$fApplicativeReaderT_$s$fFunctorStateT ::
    GHC.Base.Functor
      (Control.Monad.Trans.State.Lazy.StateT s GhcMonad.Ghc)
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ s.
                  @ (Control.Monad.Trans.State.Lazy.StateT s GhcMonad.Ghc)
                  (TraverseAST.$s$fApplicativeReaderT_$s$fFunctorStateT_$cfmap @ s)
                  (Control.Monad.Trans.State.Lazy.$fFunctorStateT_$c<$
                     @ GhcMonad.Ghc
                     @ s
                     GhcMonad.$fFunctorGhc) -}
383437c34cf2c23c8613b404f6a486e7
  $s$fApplicativeReaderT_$s$fFunctorStateT_$cfmap ::
    (a -> b)
    -> Control.Monad.Trans.State.Lazy.StateT s GhcMonad.Ghc a
    -> Control.Monad.Trans.State.Lazy.StateT s GhcMonad.Ghc b
  {- Arity: 3, HasNoCafRefs, Strictness: <L,C(U)><L,1*C1(U)><L,U>,
     Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ @ s
                   @ a
                   @ b
                   (f :: a -> b)
                   (m1 :: Control.Monad.Trans.State.Lazy.StateT s GhcMonad.Ghc a) ->
                 GHC.Base.$
                   @ 'GHC.Types.PtrRepLifted
                   @ (s -> GhcMonad.Ghc (b, s))
                   @ (Control.Monad.Trans.State.Lazy.StateT s GhcMonad.Ghc b)
                   (\ (tpl :: s -> GhcMonad.Ghc (b, s)) -> tpl)
                     `cast`
                   (<s -> GhcMonad.Ghc (b, s)>_R
                    ->_R Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                  <s>_N <GhcMonad.Ghc>_R <b>_N))
                   (\ (s1 :: s) ->
                    GHC.Base.$
                      @ 'GHC.Types.PtrRepLifted
                      @ (GhcMonad.Ghc (a, s))
                      @ (GhcMonad.Ghc (b, s))
                      (GhcMonad.$fFunctorGhc_$cfmap
                         @ (a, s)
                         @ (b, s)
                         (\ (ds :: (a, s)) ->
                          (f (case ds of wild { (,) a1 s' -> a1 }),
                           case ds of wild { (,) a1 s' -> s' })))
                      (Control.Monad.Trans.State.Lazy.runStateT
                         @ s
                         @ GhcMonad.Ghc
                         @ a
                         m1
                         s1))) -}
480e744afc1b0e4f910131bb06838370
  $s$fFunctorReaderT ::
    GHC.Base.Functor
      (Control.Monad.Trans.Reader.ReaderT
         r
         (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc))
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ r.
                  @ (Control.Monad.Trans.Reader.ReaderT
                       r
                       (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc))
                  (Control.Monad.Trans.Reader.$fFunctorReaderT_$cfmap
                     @ (Control.Monad.Trans.State.Lazy.StateT
                          ExtMap.ExtMap GhcMonad.Ghc)
                     @ r
                     TraverseAST.$s$fFunctorReaderT1)
                  (Control.Monad.Trans.Reader.$fFunctorReaderT_$c<$
                     @ (Control.Monad.Trans.State.Lazy.StateT
                          ExtMap.ExtMap GhcMonad.Ghc)
                     @ r
                     TraverseAST.$s$fFunctorReaderT1) -}
af92c035039ab55c7af76d0ab13cb25b
  $s$fFunctorReaderT1 ::
    GHC.Base.Functor
      (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc)
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                (TraverseAST.$s$fApplicativeReaderT_$s$fFunctorStateT
                   @ (Data.Map.Base.Map
                        (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                        [SrcLoc.SrcSpan])) -}
da038e0f57bb33c74a9b9313dfdeb388
  $s$fMonadReaderT ::
    GHC.Base.Monad
      (Control.Monad.Trans.Reader.ReaderT
         r
         (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc))
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ r.
                  @ (Control.Monad.Trans.Reader.ReaderT
                       r
                       (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc))
                  (Control.Monad.Trans.Reader.$fMonadReaderT_$cp1Monad
                     @ (Control.Monad.Trans.State.Lazy.StateT
                          ExtMap.ExtMap GhcMonad.Ghc)
                     @ r
                     TraverseAST.$s$fMonadReaderT1)
                  (Control.Monad.Trans.Reader.$fMonadReaderT_$c>>=
                     @ (Control.Monad.Trans.State.Lazy.StateT
                          ExtMap.ExtMap GhcMonad.Ghc)
                     @ r
                     TraverseAST.$s$fMonadReaderT1)
                  (Control.Monad.Trans.Reader.$fMonadReaderT_$c>>
                     @ (Control.Monad.Trans.State.Lazy.StateT
                          ExtMap.ExtMap GhcMonad.Ghc)
                     @ r
                     TraverseAST.$s$fMonadReaderT1)
                  (TraverseAST.$s$fMonadReaderT_$s$fMonadReaderT_$creturn @ r)
                  (Control.Monad.Trans.Reader.$fMonadReaderT_$cfail
                     @ (Control.Monad.Trans.State.Lazy.StateT
                          ExtMap.ExtMap GhcMonad.Ghc)
                     @ r
                     TraverseAST.$s$fMonadReaderT1) -}
74b7e5d0783177bb728b6808041f87ec
  $s$fMonadReaderT1 ::
    GHC.Base.Monad
      (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc)
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                (TraverseAST.$s$fMonadReaderT_$s$fMonadStateT
                   @ (Data.Map.Base.Map
                        (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                        [SrcLoc.SrcSpan])) -}
9cbfc31013ade95e9b70eca1fd286202
  $s$fMonadReaderT_$s$fMonadReaderT_$creturn ::
    a
    -> Control.Monad.Trans.Reader.ReaderT
         r
         (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc)
         a
  {- Arity: 5, HasNoCafRefs, Strictness: <L,U><L,A><L,U><L,A><S,U>,
     Unfolding: InlineRule (1, True, False)
                (\ @ r @ a (eta :: a) ->
                 let {
                   m1 :: Control.Monad.Trans.State.Lazy.StateT
                           ExtMap.ExtMap GhcMonad.Ghc a
                   = GHC.Base.$
                       @ 'GHC.Types.PtrRepLifted
                       @ (Data.Map.Base.Map
                            (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                            [SrcLoc.SrcSpan]
                          -> GhcMonad.Ghc
                               (a,
                                Data.Map.Base.Map
                                  (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                                  [SrcLoc.SrcSpan]))
                       @ (Control.Monad.Trans.State.Lazy.StateT
                            (Data.Map.Base.Map
                               (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                               [SrcLoc.SrcSpan])
                            GhcMonad.Ghc
                            a)
                       (\ (tpl :: Data.Map.Base.Map
                                    (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                                    [SrcLoc.SrcSpan]
                                  -> GhcMonad.Ghc
                                       (a,
                                        Data.Map.Base.Map
                                          (ExtMap.LogicalRelation
                                             GHC.LanguageExtensions.Type.Extension)
                                          [SrcLoc.SrcSpan])) ->
                        tpl)
                         `cast`
                       (<Data.Map.Base.Map
                           (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                           [SrcLoc.SrcSpan]
                         -> GhcMonad.Ghc
                              (a,
                               Data.Map.Base.Map
                                 (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                                 [SrcLoc.SrcSpan])>_R
                        ->_R Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                      <Data.Map.Base.Map
                                         (ExtMap.LogicalRelation
                                            GHC.LanguageExtensions.Type.Extension)
                                         [SrcLoc.SrcSpan]>_N
                                      <GhcMonad.Ghc>_R
                                      <a>_N))
                       (\ (s1 :: Data.Map.Base.Map
                                   (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                                   [SrcLoc.SrcSpan])
                          (eta1 :: GhcMonad.Session)
                          (eta2 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                        ((GhcMonad.$fApplicativeGhc_$cpure
                            @ (a,
                               Data.Map.Base.Map
                                 (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                                 [SrcLoc.SrcSpan])
                            (eta, s1))
                           `cast`
                         (GhcMonad.N:Ghc[0]
                              <(a,
                                Data.Map.Base.Map
                                  (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                                  [SrcLoc.SrcSpan])>_R)
                           eta1)
                          `cast`
                        (GHC.Types.N:IO[0]
                             <(a,
                               Data.Map.Base.Map
                                 (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                                 [SrcLoc.SrcSpan])>_R)
                          eta2)
                         `cast`
                       (<Data.Map.Base.Map
                           (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                           [SrcLoc.SrcSpan]>_R
                        ->_R Trans
                                 (<GhcMonad.Session>_R
                                  ->_R Sym (GHC.Types.N:IO[0]
                                                <(a,
                                                  Data.Map.Base.Map
                                                    (ExtMap.LogicalRelation
                                                       GHC.LanguageExtensions.Type.Extension)
                                                    [SrcLoc.SrcSpan])>_R))
                                 (Sym (GhcMonad.N:Ghc[0]
                                           <(a,
                                             Data.Map.Base.Map
                                               (ExtMap.LogicalRelation
                                                  GHC.LanguageExtensions.Type.Extension)
                                               [SrcLoc.SrcSpan])>_R)))
                 } in
                 (\ (eta1 :: r) -> m1)
                   `cast`
                 (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                           <*>_N
                           <r>_R
                           <Control.Monad.Trans.State.Lazy.StateT
                              ExtMap.ExtMap GhcMonad.Ghc>_R
                           <a>_N))) -}
ff855d6d9f26b45112b31b45a31dd439
  $s$fMonadReaderT_$s$fMonadStateT ::
    GHC.Base.Monad
      (Control.Monad.Trans.State.Lazy.StateT s GhcMonad.Ghc)
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ s.
                  @ (Control.Monad.Trans.State.Lazy.StateT s GhcMonad.Ghc)
                  (TraverseAST.$s$fMonadReaderT_$s$fMonadStateT_$cp1Monad @ s)
                  (TraverseAST.$s$fMonadReaderT_$s$fMonadStateT_$c>>= @ s)
                  (TraverseAST.$s$fMonadReaderT_$s$fMonadStateT_$c>> @ s)
                  (Control.Monad.Trans.State.Lazy.$fMonadStateT_$creturn
                     @ GhcMonad.Ghc
                     @ s
                     GhcMonad.$fMonadGhc)
                  (TraverseAST.$s$fMonadReaderT_$s$fMonadStateT_$cfail @ s) -}
8ecb495a16c8640fdcebd1c4c93dd0ff
  $s$fMonadReaderT_$s$fMonadStateT_$c>> ::
    Control.Monad.Trans.State.Lazy.StateT s GhcMonad.Ghc a
    -> Control.Monad.Trans.State.Lazy.StateT s GhcMonad.Ghc b
    -> Control.Monad.Trans.State.Lazy.StateT s GhcMonad.Ghc b
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*C1(U)><L,C(C1(C1(U)))><L,U>,
     Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ @ s
                   @ a
                   @ b
                   (m1 :: Control.Monad.Trans.State.Lazy.StateT s GhcMonad.Ghc a)
                   (k :: Control.Monad.Trans.State.Lazy.StateT s GhcMonad.Ghc b) ->
                 GHC.Base.$
                   @ 'GHC.Types.PtrRepLifted
                   @ (s -> GhcMonad.Ghc (b, s))
                   @ (Control.Monad.Trans.State.Lazy.StateT s GhcMonad.Ghc b)
                   (\ (tpl :: s -> GhcMonad.Ghc (b, s)) -> tpl)
                     `cast`
                   (<s -> GhcMonad.Ghc (b, s)>_R
                    ->_R Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                  <s>_N <GhcMonad.Ghc>_R <b>_N))
                   (\ (s1 :: s) ->
                    GhcMonad.$fMonadGhc_$c>>=
                      @ (a, s)
                      @ (b, s)
                      (Control.Monad.Trans.State.Lazy.runStateT
                         @ s
                         @ GhcMonad.Ghc
                         @ a
                         m1
                         s1)
                      (\ (ds :: (a, s)) ->
                       Control.Monad.Trans.State.Lazy.runStateT
                         @ s
                         @ GhcMonad.Ghc
                         @ b
                         k
                         (case ds of wild { (,) a1 s' -> s' })))) -}
971a2488463fea65e7808fc29e2979fd
  $s$fMonadReaderT_$s$fMonadStateT_$c>>= ::
    Control.Monad.Trans.State.Lazy.StateT s GhcMonad.Ghc a
    -> (a -> Control.Monad.Trans.State.Lazy.StateT s GhcMonad.Ghc b)
    -> Control.Monad.Trans.State.Lazy.StateT s GhcMonad.Ghc b
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*C1(U)><L,C(C1(C1(C1(U))))><L,U>,
     Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ @ s
                   @ a
                   @ b
                   (m1 :: Control.Monad.Trans.State.Lazy.StateT s GhcMonad.Ghc a)
                   (k :: a
                         -> Control.Monad.Trans.State.Lazy.StateT s GhcMonad.Ghc b) ->
                 GHC.Base.$
                   @ 'GHC.Types.PtrRepLifted
                   @ (s -> GhcMonad.Ghc (b, s))
                   @ (Control.Monad.Trans.State.Lazy.StateT s GhcMonad.Ghc b)
                   (\ (tpl :: s -> GhcMonad.Ghc (b, s)) -> tpl)
                     `cast`
                   (<s -> GhcMonad.Ghc (b, s)>_R
                    ->_R Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                  <s>_N <GhcMonad.Ghc>_R <b>_N))
                   (\ (s1 :: s) ->
                    GhcMonad.$fMonadGhc_$c>>=
                      @ (a, s)
                      @ (b, s)
                      (Control.Monad.Trans.State.Lazy.runStateT
                         @ s
                         @ GhcMonad.Ghc
                         @ a
                         m1
                         s1)
                      (\ (ds :: (a, s)) ->
                       Control.Monad.Trans.State.Lazy.runStateT
                         @ s
                         @ GhcMonad.Ghc
                         @ b
                         (k (case ds of wild { (,) a1 s' -> a1 }))
                         (case ds of wild { (,) a1 s' -> s' })))) -}
a8a5b9721c583dc7cb6c0c3f771e4fe4
  $s$fMonadReaderT_$s$fMonadStateT_$cfail ::
    GHC.Base.String
    -> Control.Monad.Trans.State.Lazy.StateT s GhcMonad.Ghc a
  {- Arity: 2, Strictness: <B,U><B,A>x, Inline: INLINE (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ @ s @ a (str :: GHC.Base.String) ->
                 GHC.Base.$
                   @ 'GHC.Types.PtrRepLifted
                   @ (s -> GhcMonad.Ghc (a, s))
                   @ (Control.Monad.Trans.State.Lazy.StateT s GhcMonad.Ghc a)
                   (\ (tpl :: s -> GhcMonad.Ghc (a, s)) -> tpl)
                     `cast`
                   (<s -> GhcMonad.Ghc (a, s)>_R
                    ->_R Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                  <s>_N <GhcMonad.Ghc>_R <a>_N))
                   (\ (ds :: s) -> GhcMonad.$fMonadGhc_$s$dmfail @ (a, s) str)) -}
ad629c2b4078c15389e9d729c23b5471
  $s$fMonadReaderT_$s$fMonadStateT_$cp1Monad ::
    GHC.Base.Applicative
      (Control.Monad.Trans.State.Lazy.StateT s GhcMonad.Ghc)
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                TraverseAST.$s$fApplicativeReaderT_$s$fApplicativeStateT -}
36ced342b6ef23c94c089252d9acaddd
  $s$fRefMonadswr ::
    Control.Reference.Representation.RefMonads
      (Control.Monad.Trans.Reader.ReaderT
         [GHC.LanguageExtensions.Type.Extension]
         (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc))
      Data.Proxy.Proxy
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (Control.Monad.Trans.Reader.ReaderT
                       [GHC.LanguageExtensions.Type.Extension]
                       (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc))
                  @ Data.Proxy.Proxy
                  TraverseAST.$s$fRefMonadswr3
                  TraverseAST.$s$fRefMonadswr2
                  TraverseAST.$s$fRefMonadswr1
                  TraverseAST.$s$fRefMonadswr_$s$fRefMonadswr_$cp4RefMonads
                  TraverseAST.$s$fRefMonadswr_$s$fRefMonadswr_$cp5RefMonads
                  TraverseAST.$s$fRefMonadswr_$s$fRefMonadswr_$cp6RefMonads -}
351de5202cd9d29825a4b4d644f2cf7f
  $s$fRefMonadswr1 ::
    GHC.Base.Monad
      (Control.Monad.Trans.Reader.ReaderT
         [GHC.LanguageExtensions.Type.Extension]
         (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc))
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                (TraverseAST.$s$fMonadReaderT
                   @ [GHC.LanguageExtensions.Type.Extension]) -}
05aee6023cc44ace992bd928495e7bf0
  $s$fRefMonadswr2 ::
    GHC.Base.Applicative
      (Control.Monad.Trans.Reader.ReaderT
         [GHC.LanguageExtensions.Type.Extension]
         (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc))
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                (TraverseAST.$s$fApplicativeReaderT
                   @ [GHC.LanguageExtensions.Type.Extension]) -}
9d01adb45f525e8d55ec9129e0f9418a
  $s$fRefMonadswr3 ::
    GHC.Base.Functor
      (Control.Monad.Trans.Reader.ReaderT
         [GHC.LanguageExtensions.Type.Extension]
         (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc))
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                (TraverseAST.$s$fFunctorReaderT
                   @ [GHC.LanguageExtensions.Type.Extension]) -}
9dd93563e0252a5289b500187fb0f3b0
  $s$fRefMonadswr_$s$fRefMonadswr_$cp4RefMonads ::
    GHC.Base.Functor Data.Proxy.Proxy
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True) Data.Proxy.$fFunctorProxy -}
5cd085078d4db655873cc9b585a96d84
  $s$fRefMonadswr_$s$fRefMonadswr_$cp5RefMonads ::
    GHC.Base.Applicative Data.Proxy.Proxy
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                Data.Proxy.$fApplicativeProxy -}
b2e94df70229e546c70c8265dcb8a432
  $s$fRefMonadswr_$s$fRefMonadswr_$cp6RefMonads ::
    GHC.Base.Monad Data.Proxy.Proxy
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True) Data.Proxy.$fMonadProxy -}
5c9a48282d5419e97aa1cb332f3535cc
  $sannJust1 :: GHC.Base.Maybe a -> Data.Proxy.Proxy a
  {- Arity: 1, HasNoCafRefs, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ @ a (eta :: GHC.Base.Maybe a) -> Data.Proxy.Proxy @ * @ a) -}
4a8a913b8d5831f5fa28e715218828ca
  $sannList1 :: [a] -> Control.Reference.Representation.MU a
  {- Arity: 1, HasNoCafRefs, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ @ a (eta :: [a]) -> Data.Proxy.Proxy @ * @ a) -}
a85271a49aa13d0cbfb11bb04c01e65d
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   TraverseAST.$trModule2
                   TraverseAST.$trModule1) -}
2dc0b66173410c8c5643b3619815ff02
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "TraverseAST"#) -}
f7fea55006eb18a4f12210830660702b
  $trModule2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   "ht-extension-organizer-0.1.0.0-y3uypH7gCtA60AaWeuyZL"#) -}
99076470a825161ce886ab61efed755c
  $wchkFieldUpdate ::
    ExtMonad.ExtDomain dom =>
    Language.Haskell.Tools.AST.Ann.NodeInfo
      (Language.Haskell.Tools.AST.Ann.SemanticInfo
         dom Language.Haskell.Tools.AST.Representation.Exprs.UFieldUpdate)
      (Language.Haskell.Tools.AST.Ann.SpanInfo
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
    -> Language.Haskell.Tools.AST.Representation.Exprs.UFieldUpdate
         dom Language.Haskell.Tools.AST.Ann.SrcTemplateStage
    -> ExtMap.ExtMap
    -> GhcMonad.Ghc
         (Language.Haskell.Tools.AST.ElementTypes.FieldUpdate dom,
          ExtMap.ExtMap)
  {- Arity: 4,
     Strictness: <S(S(LLS(S)LLLLLLLLLL)L),U(U(A,A,U(U),A,A,A,A,A,A,A,A,A,A),A)><L,U(U,U(U,U,U,U))><S,U><L,U>,
     Inline: [0],
     Unfolding: (\ @ dom
                   (w :: ExtMonad.ExtDomain dom)
                   (ww :: Language.Haskell.Tools.AST.Ann.NodeInfo
                            (Language.Haskell.Tools.AST.Ann.SemanticInfo
                               dom Language.Haskell.Tools.AST.Representation.Exprs.UFieldUpdate)
                            (Language.Haskell.Tools.AST.Ann.SpanInfo
                               Language.Haskell.Tools.AST.Ann.SrcTemplateStage))
                   (ww1 :: Language.Haskell.Tools.AST.Representation.Exprs.UFieldUpdate
                             dom Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   (w1 :: ExtMap.ExtMap) ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Language.Haskell.Tools.AST.Ann.SemanticInfo'
                             dom Language.Haskell.Tools.AST.Ann.SameInfoDefaultCls)
                        @ Language.Haskell.Tools.AST.SemaInfoTypes.NoSemanticInfo
                        (Language.Haskell.Tools.AST.Ann.$p3Domain
                           @ dom
                           (GHC.Classes.$p1(%,%)
                              @ (Language.Haskell.Tools.AST.Ann.Domain dom)
                              @ (Language.Haskell.Tools.AST.SemaInfoClasses.HasNameInfo'
                                   (Language.Haskell.Tools.AST.Ann.SemanticInfo
                                      dom
                                      Language.Haskell.Tools.AST.Representation.Names.UQualifiedName))
                              w))
                          `cast`
                        (Data.Type.Equality.N:~[0]
                             <*>_N <Language.Haskell.Tools.AST.Ann.SemanticInfo'
                                      dom
                                      Language.Haskell.Tools.AST.Ann.SameInfoDefaultCls>_N <Language.Haskell.Tools.AST.SemaInfoTypes.NoSemanticInfo>_N) of cobox0 { DEFAULT ->
                 RecordWildCardsChecker.$wchkRecordWildCardsFieldUpdate
                   @ dom
                   w
                   ww
                   ww1
                   w1 }) -}
23a2d8ab7c07b49089721f9ae7b0bcff
  $wchkPatternField ::
    ExtMonad.ExtDomain dom =>
    Language.Haskell.Tools.AST.Ann.NodeInfo
      (Language.Haskell.Tools.AST.Ann.SemanticInfo
         dom
         Language.Haskell.Tools.AST.Representation.Patterns.UPatternField)
      (Language.Haskell.Tools.AST.Ann.SpanInfo
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
    -> Language.Haskell.Tools.AST.Representation.Patterns.UPatternField
         dom Language.Haskell.Tools.AST.Ann.SrcTemplateStage
    -> ExtMap.ExtMap
    -> GhcMonad.Ghc
         (Language.Haskell.Tools.AST.ElementTypes.PatternField dom,
          ExtMap.ExtMap)
  {- Arity: 4,
     Strictness: <S(S(LLS(S)LLLLLLLLLL)L),U(U(A,A,U(U),A,A,A,A,A,A,A,A,A,A),A)><L,U(U,U(U,U,U,U))><S,U><L,U>,
     Inline: [0],
     Unfolding: (\ @ dom
                   (w :: ExtMonad.ExtDomain dom)
                   (ww :: Language.Haskell.Tools.AST.Ann.NodeInfo
                            (Language.Haskell.Tools.AST.Ann.SemanticInfo
                               dom
                               Language.Haskell.Tools.AST.Representation.Patterns.UPatternField)
                            (Language.Haskell.Tools.AST.Ann.SpanInfo
                               Language.Haskell.Tools.AST.Ann.SrcTemplateStage))
                   (ww1 :: Language.Haskell.Tools.AST.Representation.Patterns.UPatternField
                             dom Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   (w1 :: ExtMap.ExtMap) ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Language.Haskell.Tools.AST.Ann.SemanticInfo'
                             dom Language.Haskell.Tools.AST.Ann.SameInfoDefaultCls)
                        @ Language.Haskell.Tools.AST.SemaInfoTypes.NoSemanticInfo
                        (Language.Haskell.Tools.AST.Ann.$p3Domain
                           @ dom
                           (GHC.Classes.$p1(%,%)
                              @ (Language.Haskell.Tools.AST.Ann.Domain dom)
                              @ (Language.Haskell.Tools.AST.SemaInfoClasses.HasNameInfo'
                                   (Language.Haskell.Tools.AST.Ann.SemanticInfo
                                      dom
                                      Language.Haskell.Tools.AST.Representation.Names.UQualifiedName))
                              w))
                          `cast`
                        (Data.Type.Equality.N:~[0]
                             <*>_N <Language.Haskell.Tools.AST.Ann.SemanticInfo'
                                      dom
                                      Language.Haskell.Tools.AST.Ann.SameInfoDefaultCls>_N <Language.Haskell.Tools.AST.SemaInfoTypes.NoSemanticInfo>_N) of cobox0 { DEFAULT ->
                 RecordWildCardsChecker.$wchkRecordWildCardsPatField
                   @ dom
                   w
                   ww
                   ww1
                   w1 }) -}
8bc16f7431c879c406cedfb196148862
  type AltG (uexpr :: GHC.Types.* -> * -> *) dom =
    Language.Haskell.Tools.AST.Ann.Ann
      (Language.Haskell.Tools.AST.Representation.Exprs.UAlt' uexpr)
      dom
      Language.Haskell.Tools.AST.Ann.SrcTemplateStage
88e6b86261f4d225b1f74823fe4a8b41
  type CaseRhsG (uexpr :: GHC.Types.* -> * -> *) dom =
    Language.Haskell.Tools.AST.Ann.Ann
      (Language.Haskell.Tools.AST.Representation.Exprs.UCaseRhs' uexpr)
      dom
      Language.Haskell.Tools.AST.Ann.SrcTemplateStage
7b4ada0f847f70185564db1503bfc3f7
  type GuardedCaseRhsG (uexpr :: GHC.Types.* -> * -> *) dom =
    Language.Haskell.Tools.AST.Ann.Ann
      (Language.Haskell.Tools.AST.Representation.Exprs.UGuardedCaseRhs'
         uexpr)
      dom
      Language.Haskell.Tools.AST.Ann.SrcTemplateStage
e9007fc322e1a988d485df88629086f3
  type PromotedG (t :: GHC.Types.* -> GHC.Types.* -> GHC.Types.*)
                 dom =
    Language.Haskell.Tools.AST.Ann.Ann
      (Language.Haskell.Tools.AST.Representation.Kinds.UPromoted t)
      dom
      Language.Haskell.Tools.AST.Ann.SrcTemplateStage
e63146b5c2a71d5cc5fc81e52a861bd2
  type StmtG (uexpr :: GHC.Types.* -> GHC.Types.* -> GHC.Types.*)
             dom =
    Language.Haskell.Tools.AST.Ann.Ann
      (Language.Haskell.Tools.AST.Representation.Stmts.UStmt' uexpr)
      dom
      Language.Haskell.Tools.AST.Ann.SrcTemplateStage
88f672bd7f6616b6145f2579aeb3b2c3
  chkDecl ::
    ExtMonad.CheckNode Language.Haskell.Tools.AST.ElementTypes.Decl
  {- Arity: 1,
     Strictness: <S(S(LLS(S)LLLLLLLLLL)L),U(U(U,U,U(U),U,U,U,U,U,U,U,U,U,U),U)>,
     Unfolding: (\ @ dom ($d(%,%) :: ExtMonad.ExtDomain dom) ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Language.Haskell.Tools.AST.Ann.SemanticInfo'
                             dom Language.Haskell.Tools.AST.Ann.SameInfoDefaultCls)
                        @ Language.Haskell.Tools.AST.SemaInfoTypes.NoSemanticInfo
                        (Language.Haskell.Tools.AST.Ann.$p3Domain
                           @ dom
                           (GHC.Classes.$p1(%,%)
                              @ (Language.Haskell.Tools.AST.Ann.Domain dom)
                              @ (Language.Haskell.Tools.AST.SemaInfoClasses.HasNameInfo'
                                   (Language.Haskell.Tools.AST.Ann.SemanticInfo
                                      dom
                                      Language.Haskell.Tools.AST.Representation.Names.UQualifiedName))
                              $d(%,%)))
                          `cast`
                        (Data.Type.Equality.N:~[0]
                             <*>_N <Language.Haskell.Tools.AST.Ann.SemanticInfo'
                                      dom
                                      Language.Haskell.Tools.AST.Ann.SameInfoDefaultCls>_N <Language.Haskell.Tools.AST.SemaInfoTypes.NoSemanticInfo>_N) of cobox0 { DEFAULT ->
                 let {
                   g :: Language.Haskell.Tools.AST.ElementTypes.Decl dom
                        -> Control.Monad.Trans.Reader.ReaderT
                             [GHC.LanguageExtensions.Type.Extension]
                             (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc)
                             (Language.Haskell.Tools.AST.ElementTypes.Decl dom)
                   = DerivingsChecker.chkDerivings @ dom $d(%,%)
                 } in
                 \ (x :: Language.Haskell.Tools.AST.ElementTypes.Decl dom) ->
                 let {
                   m1 :: Control.Monad.Trans.Reader.ReaderT
                           [GHC.LanguageExtensions.Type.Extension]
                           (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc)
                           (Language.Haskell.Tools.AST.ElementTypes.Decl dom)
                   = FlexibleInstancesChecker.chkFlexibleInstances @ dom $d(%,%) x
                 } in
                 (\ (r1 :: [GHC.LanguageExtensions.Type.Extension]) ->
                  let {
                    m2 :: Control.Monad.Trans.State.Lazy.StateT
                            (Data.Map.Base.Map
                               (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                               [SrcLoc.SrcSpan])
                            GhcMonad.Ghc
                            (Language.Haskell.Tools.AST.ElementTypes.Decl dom)
                    = m1
                        `cast`
                      (Control.Monad.Trans.Reader.N:ReaderT[0]
                           <*>_N
                           <[GHC.LanguageExtensions.Type.Extension]>_R
                           <Control.Monad.Trans.State.Lazy.StateT
                              ExtMap.ExtMap GhcMonad.Ghc>_R
                           <Language.Haskell.Tools.AST.ElementTypes.Decl dom>_N)
                        r1
                  } in
                  (\ (s1 :: Data.Map.Base.Map
                              (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                              [SrcLoc.SrcSpan]) ->
                   let {
                     m :: GhcMonad.Ghc
                            (Language.Haskell.Tools.AST.ElementTypes.Decl dom,
                             Data.Map.Base.Map
                               (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                               [SrcLoc.SrcSpan])
                     = m2
                         `cast`
                       (Control.Monad.Trans.State.Lazy.N:StateT[0]
                            <Data.Map.Base.Map
                               (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                               [SrcLoc.SrcSpan]>_N
                            <GhcMonad.Ghc>_R
                            <Language.Haskell.Tools.AST.ElementTypes.Decl dom>_N)
                         s1
                   } in
                   (\ (s :: GhcMonad.Session)
                      (s2 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                    case (m `cast`
                          (GhcMonad.N:Ghc[0]
                               <(Language.Haskell.Tools.AST.ElementTypes.Decl dom,
                                 Data.Map.Base.Map
                                   (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                                   [SrcLoc.SrcSpan])>_R)
                            s)
                           `cast`
                         (GHC.Types.N:IO[0]
                              <(Language.Haskell.Tools.AST.ElementTypes.Decl dom,
                                Data.Map.Base.Map
                                  (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                                  [SrcLoc.SrcSpan])>_R)
                           s2 of ds1 { (#,#) ipv ipv1 ->
                    ((((g (case ipv1 of wild { (,) a1 s' -> a1 }))
                         `cast`
                       (Control.Monad.Trans.Reader.N:ReaderT[0]
                            <*>_N
                            <[GHC.LanguageExtensions.Type.Extension]>_R
                            <Control.Monad.Trans.State.Lazy.StateT
                               ExtMap.ExtMap GhcMonad.Ghc>_R
                            <Language.Haskell.Tools.AST.ElementTypes.Decl dom>_N)
                         r1)
                        `cast`
                      (Control.Monad.Trans.State.Lazy.N:StateT[0]
                           <Data.Map.Base.Map
                              (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                              [SrcLoc.SrcSpan]>_N
                           <GhcMonad.Ghc>_R
                           <Language.Haskell.Tools.AST.ElementTypes.Decl dom>_N)
                        (case ipv1 of wild { (,) a1 s' -> s' }))
                       `cast`
                     (GhcMonad.N:Ghc[0]
                          <(Language.Haskell.Tools.AST.ElementTypes.Decl dom,
                            Data.Map.Base.Map
                              (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                              [SrcLoc.SrcSpan])>_R)
                       s)
                      `cast`
                    (GHC.Types.N:IO[0]
                         <(Language.Haskell.Tools.AST.ElementTypes.Decl dom,
                           Data.Map.Base.Map
                             (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                             [SrcLoc.SrcSpan])>_R)
                      ipv })
                     `cast`
                   (Trans
                        (<GhcMonad.Session>_R
                         ->_R Sym (GHC.Types.N:IO[0]
                                       <(Language.Haskell.Tools.AST.ElementTypes.Decl dom,
                                         Data.Map.Base.Map
                                           (ExtMap.LogicalRelation
                                              GHC.LanguageExtensions.Type.Extension)
                                           [SrcLoc.SrcSpan])>_R))
                        (Sym (GhcMonad.N:Ghc[0]
                                  <(Language.Haskell.Tools.AST.ElementTypes.Decl dom,
                                    Data.Map.Base.Map
                                      (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                                      [SrcLoc.SrcSpan])>_R))))
                    `cast`
                  (Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                            <Data.Map.Base.Map
                               (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                               [SrcLoc.SrcSpan]>_N
                            <GhcMonad.Ghc>_R
                            <Language.Haskell.Tools.AST.ElementTypes.Decl dom>_N)))
                   `cast`
                 (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                           <*>_N
                           <[GHC.LanguageExtensions.Type.Extension]>_R
                           <Control.Monad.Trans.State.Lazy.StateT
                              ExtMap.ExtMap GhcMonad.Ghc>_R
                           <Language.Haskell.Tools.AST.ElementTypes.Decl dom>_N)) }) -}
cdedec15866f35902927d8f7d7046c25
  chkExpr ::
    ExtMonad.CheckNode Language.Haskell.Tools.AST.ElementTypes.Expr
  {- Arity: 2,
     Strictness: <S(S(LLS(S)LLLLLLLLLL)L),U(U(A,A,U(U),A,A,A,A,A,A,A,A,A,A),A)><L,U>,
     Unfolding: (\ @ dom
                   ($d(%,%) :: ExtMonad.ExtDomain dom)
                   (eta :: Language.Haskell.Tools.AST.ElementTypes.Expr dom) ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Language.Haskell.Tools.AST.Ann.SemanticInfo'
                             dom Language.Haskell.Tools.AST.Ann.SameInfoDefaultCls)
                        @ Language.Haskell.Tools.AST.SemaInfoTypes.NoSemanticInfo
                        (Language.Haskell.Tools.AST.Ann.$p3Domain
                           @ dom
                           (GHC.Classes.$p1(%,%)
                              @ (Language.Haskell.Tools.AST.Ann.Domain dom)
                              @ (Language.Haskell.Tools.AST.SemaInfoClasses.HasNameInfo'
                                   (Language.Haskell.Tools.AST.Ann.SemanticInfo
                                      dom
                                      Language.Haskell.Tools.AST.Representation.Names.UQualifiedName))
                              $d(%,%)))
                          `cast`
                        (Data.Type.Equality.N:~[0]
                             <*>_N <Language.Haskell.Tools.AST.Ann.SemanticInfo'
                                      dom
                                      Language.Haskell.Tools.AST.Ann.SameInfoDefaultCls>_N <Language.Haskell.Tools.AST.SemaInfoTypes.NoSemanticInfo>_N) of cobox0 { DEFAULT ->
                 let {
                   m1 :: Control.Monad.Trans.Reader.ReaderT
                           [GHC.LanguageExtensions.Type.Extension]
                           (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc)
                           (Language.Haskell.Tools.AST.ElementTypes.Expr dom)
                   = TupleSectionsChecker.chkTupleSections @ dom $d(%,%) eta
                 } in
                 (\ (r1 :: [GHC.LanguageExtensions.Type.Extension]) ->
                  let {
                    m2 :: Control.Monad.Trans.State.Lazy.StateT
                            (Data.Map.Base.Map
                               (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                               [SrcLoc.SrcSpan])
                            GhcMonad.Ghc
                            (Language.Haskell.Tools.AST.ElementTypes.Expr dom)
                    = m1
                        `cast`
                      (Control.Monad.Trans.Reader.N:ReaderT[0]
                           <*>_N
                           <[GHC.LanguageExtensions.Type.Extension]>_R
                           <Control.Monad.Trans.State.Lazy.StateT
                              ExtMap.ExtMap GhcMonad.Ghc>_R
                           <Language.Haskell.Tools.AST.ElementTypes.Expr dom>_N)
                        r1
                  } in
                  (\ (s1 :: Data.Map.Base.Map
                              (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                              [SrcLoc.SrcSpan]) ->
                   let {
                     m :: GhcMonad.Ghc
                            (Language.Haskell.Tools.AST.ElementTypes.Expr dom,
                             Data.Map.Base.Map
                               (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                               [SrcLoc.SrcSpan])
                     = m2
                         `cast`
                       (Control.Monad.Trans.State.Lazy.N:StateT[0]
                            <Data.Map.Base.Map
                               (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                               [SrcLoc.SrcSpan]>_N
                            <GhcMonad.Ghc>_R
                            <Language.Haskell.Tools.AST.ElementTypes.Expr dom>_N)
                         s1
                   } in
                   (\ (s :: GhcMonad.Session)
                      (s2 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                    case (m `cast`
                          (GhcMonad.N:Ghc[0]
                               <(Language.Haskell.Tools.AST.ElementTypes.Expr dom,
                                 Data.Map.Base.Map
                                   (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                                   [SrcLoc.SrcSpan])>_R)
                            s)
                           `cast`
                         (GHC.Types.N:IO[0]
                              <(Language.Haskell.Tools.AST.ElementTypes.Expr dom,
                                Data.Map.Base.Map
                                  (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                                  [SrcLoc.SrcSpan])>_R)
                           s2 of ds1 { (#,#) ipv ipv1 ->
                    case ((((UnboxedTuplesChecker.chkUnboxedTuplesExpr
                               @ dom
                               $d(%,%)
                               (case ipv1 of wild { (,) a1 s' -> a1 }))
                              `cast`
                            (Control.Monad.Trans.Reader.N:ReaderT[0]
                                 <*>_N
                                 <[GHC.LanguageExtensions.Type.Extension]>_R
                                 <Control.Monad.Trans.State.Lazy.StateT
                                    ExtMap.ExtMap GhcMonad.Ghc>_R
                                 <Language.Haskell.Tools.AST.ElementTypes.Expr dom>_N)
                              r1)
                             `cast`
                           (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                <Data.Map.Base.Map
                                   (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                                   [SrcLoc.SrcSpan]>_N
                                <GhcMonad.Ghc>_R
                                <Language.Haskell.Tools.AST.ElementTypes.Expr dom>_N)
                             (case ipv1 of wild { (,) a1 s' -> s' }))
                            `cast`
                          (GhcMonad.N:Ghc[0]
                               <(Language.Haskell.Tools.AST.ElementTypes.Expr dom,
                                 Data.Map.Base.Map
                                   (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                                   [SrcLoc.SrcSpan])>_R)
                            s)
                           `cast`
                         (GHC.Types.N:IO[0]
                              <(Language.Haskell.Tools.AST.ElementTypes.Expr dom,
                                Data.Map.Base.Map
                                  (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                                  [SrcLoc.SrcSpan])>_R)
                           ipv of ds2 { (#,#) ipv2 ipv3 ->
                    ((((LambdaCaseChecker.chkLambdaCase
                          @ dom
                          $d(%,%)
                          (case ipv3 of wild { (,) a1 s' -> a1 }))
                         `cast`
                       (Control.Monad.Trans.Reader.N:ReaderT[0]
                            <*>_N
                            <[GHC.LanguageExtensions.Type.Extension]>_R
                            <Control.Monad.Trans.State.Lazy.StateT
                               ExtMap.ExtMap GhcMonad.Ghc>_R
                            <Language.Haskell.Tools.AST.ElementTypes.Expr dom>_N)
                         r1)
                        `cast`
                      (Control.Monad.Trans.State.Lazy.N:StateT[0]
                           <Data.Map.Base.Map
                              (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                              [SrcLoc.SrcSpan]>_N
                           <GhcMonad.Ghc>_R
                           <Language.Haskell.Tools.AST.ElementTypes.Expr dom>_N)
                        (case ipv3 of wild { (,) a1 s' -> s' }))
                       `cast`
                     (GhcMonad.N:Ghc[0]
                          <(Language.Haskell.Tools.AST.ElementTypes.Expr dom,
                            Data.Map.Base.Map
                              (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                              [SrcLoc.SrcSpan])>_R)
                       s)
                      `cast`
                    (GHC.Types.N:IO[0]
                         <(Language.Haskell.Tools.AST.ElementTypes.Expr dom,
                           Data.Map.Base.Map
                             (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                             [SrcLoc.SrcSpan])>_R)
                      ipv2 } })
                     `cast`
                   (Trans
                        (<GhcMonad.Session>_R
                         ->_R Sym (GHC.Types.N:IO[0]
                                       <(Language.Haskell.Tools.AST.ElementTypes.Expr dom,
                                         Data.Map.Base.Map
                                           (ExtMap.LogicalRelation
                                              GHC.LanguageExtensions.Type.Extension)
                                           [SrcLoc.SrcSpan])>_R))
                        (Sym (GhcMonad.N:Ghc[0]
                                  <(Language.Haskell.Tools.AST.ElementTypes.Expr dom,
                                    Data.Map.Base.Map
                                      (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                                      [SrcLoc.SrcSpan])>_R))))
                    `cast`
                  (Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                            <Data.Map.Base.Map
                               (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                               [SrcLoc.SrcSpan]>_N
                            <GhcMonad.Ghc>_R
                            <Language.Haskell.Tools.AST.ElementTypes.Expr dom>_N)))
                   `cast`
                 (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                           <*>_N
                           <[GHC.LanguageExtensions.Type.Extension]>_R
                           <Control.Monad.Trans.State.Lazy.StateT
                              ExtMap.ExtMap GhcMonad.Ghc>_R
                           <Language.Haskell.Tools.AST.ElementTypes.Expr dom>_N)) }) -}
1bbc196fce0cb105d6ebe5a8241b1508
  chkFieldUpdate ::
    ExtMonad.CheckNode
      Language.Haskell.Tools.AST.ElementTypes.FieldUpdate
  {- Arity: 4,
     Strictness: <S(S(LLS(S)LLLLLLLLLL)L),U(U(A,A,U(U),A,A,A,A,A,A,A,A,A,A),A)><S(LS),1*U(U(U,U(U,U,U,U)),U)><L,A><L,U>,
     Unfolding: InlineRule (0, True, True)
                TraverseAST.chkFieldUpdate1
                  `cast`
                (forall (dom :: <*>_N).
                 <ExtMonad.ExtDomain dom>_R
                 ->_R <Language.Haskell.Tools.AST.ElementTypes.FieldUpdate dom>_R
                 ->_R Trans
                          (<[GHC.LanguageExtensions.Type.Extension]>_R
                           ->_R Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                         <ExtMap.ExtMap>_N
                                         <GhcMonad.Ghc>_R
                                         <Language.Haskell.Tools.AST.ElementTypes.FieldUpdate
                                            dom>_N))
                          (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                    <*>_N
                                    <[GHC.LanguageExtensions.Type.Extension]>_R
                                    <Control.Monad.Trans.State.Lazy.StateT
                                       ExtMap.ExtMap GhcMonad.Ghc>_R
                                    <Language.Haskell.Tools.AST.ElementTypes.FieldUpdate
                                       dom>_N))) -}
8cbfb951180ec1b128938e7242ac3acc
  chkFieldUpdate1 ::
    ExtMonad.ExtDomain dom =>
    Language.Haskell.Tools.AST.ElementTypes.FieldUpdate dom
    -> [GHC.LanguageExtensions.Type.Extension]
    -> ExtMap.ExtMap
    -> GhcMonad.Ghc
         (Language.Haskell.Tools.AST.ElementTypes.FieldUpdate dom,
          ExtMap.ExtMap)
  {- Arity: 4,
     Strictness: <S(S(LLS(S)LLLLLLLLLL)L),U(U(A,A,U(U),A,A,A,A,A,A,A,A,A,A),A)><S(LS),1*U(U(U,U(U,U,U,U)),U)><L,A><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (4, True, False)
                (\ @ dom
                   (w :: ExtMonad.ExtDomain dom)
                   (w1 :: Language.Haskell.Tools.AST.ElementTypes.FieldUpdate dom)
                   (w2 :: [GHC.LanguageExtensions.Type.Extension])
                   (w3 :: ExtMap.ExtMap) ->
                 case w1 of ww { Language.Haskell.Tools.AST.Ann.Ann ww1 ww2 ->
                 TraverseAST.$wchkFieldUpdate @ dom w ww1 ww2 w3 }) -}
8ca11567009c021ecb2e018318e9e616
  chkPattern ::
    ExtMonad.CheckNode Language.Haskell.Tools.AST.ElementTypes.Pattern
  {- Arity: 2,
     Strictness: <S(S(LLS(S)LLLLLLLLLL)L),U(U(A,A,U(U),A,A,A,A,A,A,A,A,A,A),A)><L,U>,
     Unfolding: (\ @ dom
                   ($d(%,%) :: ExtMonad.ExtDomain dom)
                   (eta :: Language.Haskell.Tools.AST.ElementTypes.Pattern dom) ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Language.Haskell.Tools.AST.Ann.SemanticInfo'
                             dom Language.Haskell.Tools.AST.Ann.SameInfoDefaultCls)
                        @ Language.Haskell.Tools.AST.SemaInfoTypes.NoSemanticInfo
                        (Language.Haskell.Tools.AST.Ann.$p3Domain
                           @ dom
                           (GHC.Classes.$p1(%,%)
                              @ (Language.Haskell.Tools.AST.Ann.Domain dom)
                              @ (Language.Haskell.Tools.AST.SemaInfoClasses.HasNameInfo'
                                   (Language.Haskell.Tools.AST.Ann.SemanticInfo
                                      dom
                                      Language.Haskell.Tools.AST.Representation.Names.UQualifiedName))
                              $d(%,%)))
                          `cast`
                        (Data.Type.Equality.N:~[0]
                             <*>_N <Language.Haskell.Tools.AST.Ann.SemanticInfo'
                                      dom
                                      Language.Haskell.Tools.AST.Ann.SameInfoDefaultCls>_N <Language.Haskell.Tools.AST.SemaInfoTypes.NoSemanticInfo>_N) of cobox0 { DEFAULT ->
                 let {
                   m1 :: Control.Monad.Trans.Reader.ReaderT
                           [GHC.LanguageExtensions.Type.Extension]
                           (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc)
                           (Language.Haskell.Tools.AST.ElementTypes.Pattern dom)
                   = BangPatternsChecker.chkBangPatterns @ dom $d(%,%) eta
                 } in
                 (\ (r1 :: [GHC.LanguageExtensions.Type.Extension]) ->
                  let {
                    m2 :: Control.Monad.Trans.State.Lazy.StateT
                            (Data.Map.Base.Map
                               (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                               [SrcLoc.SrcSpan])
                            GhcMonad.Ghc
                            (Language.Haskell.Tools.AST.ElementTypes.Pattern dom)
                    = m1
                        `cast`
                      (Control.Monad.Trans.Reader.N:ReaderT[0]
                           <*>_N
                           <[GHC.LanguageExtensions.Type.Extension]>_R
                           <Control.Monad.Trans.State.Lazy.StateT
                              ExtMap.ExtMap GhcMonad.Ghc>_R
                           <Language.Haskell.Tools.AST.ElementTypes.Pattern dom>_N)
                        r1
                  } in
                  (\ (s1 :: Data.Map.Base.Map
                              (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                              [SrcLoc.SrcSpan]) ->
                   let {
                     m :: GhcMonad.Ghc
                            (Language.Haskell.Tools.AST.ElementTypes.Pattern dom,
                             Data.Map.Base.Map
                               (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                               [SrcLoc.SrcSpan])
                     = m2
                         `cast`
                       (Control.Monad.Trans.State.Lazy.N:StateT[0]
                            <Data.Map.Base.Map
                               (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                               [SrcLoc.SrcSpan]>_N
                            <GhcMonad.Ghc>_R
                            <Language.Haskell.Tools.AST.ElementTypes.Pattern dom>_N)
                         s1
                   } in
                   (\ (s :: GhcMonad.Session)
                      (s2 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                    case (m `cast`
                          (GhcMonad.N:Ghc[0]
                               <(Language.Haskell.Tools.AST.ElementTypes.Pattern dom,
                                 Data.Map.Base.Map
                                   (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                                   [SrcLoc.SrcSpan])>_R)
                            s)
                           `cast`
                         (GHC.Types.N:IO[0]
                              <(Language.Haskell.Tools.AST.ElementTypes.Pattern dom,
                                Data.Map.Base.Map
                                  (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                                  [SrcLoc.SrcSpan])>_R)
                           s2 of ds1 { (#,#) ipv ipv1 ->
                    case ((((ViewPatternsChecker.chkViewPatterns
                               @ dom
                               $d(%,%)
                               (case ipv1 of wild { (,) a1 s' -> a1 }))
                              `cast`
                            (Control.Monad.Trans.Reader.N:ReaderT[0]
                                 <*>_N
                                 <[GHC.LanguageExtensions.Type.Extension]>_R
                                 <Control.Monad.Trans.State.Lazy.StateT
                                    ExtMap.ExtMap GhcMonad.Ghc>_R
                                 <Language.Haskell.Tools.AST.ElementTypes.Pattern dom>_N)
                              r1)
                             `cast`
                           (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                <Data.Map.Base.Map
                                   (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                                   [SrcLoc.SrcSpan]>_N
                                <GhcMonad.Ghc>_R
                                <Language.Haskell.Tools.AST.ElementTypes.Pattern dom>_N)
                             (case ipv1 of wild { (,) a1 s' -> s' }))
                            `cast`
                          (GhcMonad.N:Ghc[0]
                               <(Language.Haskell.Tools.AST.ElementTypes.Pattern dom,
                                 Data.Map.Base.Map
                                   (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                                   [SrcLoc.SrcSpan])>_R)
                            s)
                           `cast`
                         (GHC.Types.N:IO[0]
                              <(Language.Haskell.Tools.AST.ElementTypes.Pattern dom,
                                Data.Map.Base.Map
                                  (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                                  [SrcLoc.SrcSpan])>_R)
                           ipv of ds2 { (#,#) ipv2 ipv3 ->
                    ((((UnboxedTuplesChecker.chkUnboxedTuplesPat
                          @ dom
                          $d(%,%)
                          (case ipv3 of wild { (,) a1 s' -> a1 }))
                         `cast`
                       (Control.Monad.Trans.Reader.N:ReaderT[0]
                            <*>_N
                            <[GHC.LanguageExtensions.Type.Extension]>_R
                            <Control.Monad.Trans.State.Lazy.StateT
                               ExtMap.ExtMap GhcMonad.Ghc>_R
                            <Language.Haskell.Tools.AST.ElementTypes.Pattern dom>_N)
                         r1)
                        `cast`
                      (Control.Monad.Trans.State.Lazy.N:StateT[0]
                           <Data.Map.Base.Map
                              (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                              [SrcLoc.SrcSpan]>_N
                           <GhcMonad.Ghc>_R
                           <Language.Haskell.Tools.AST.ElementTypes.Pattern dom>_N)
                        (case ipv3 of wild { (,) a1 s' -> s' }))
                       `cast`
                     (GhcMonad.N:Ghc[0]
                          <(Language.Haskell.Tools.AST.ElementTypes.Pattern dom,
                            Data.Map.Base.Map
                              (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                              [SrcLoc.SrcSpan])>_R)
                       s)
                      `cast`
                    (GHC.Types.N:IO[0]
                         <(Language.Haskell.Tools.AST.ElementTypes.Pattern dom,
                           Data.Map.Base.Map
                             (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                             [SrcLoc.SrcSpan])>_R)
                      ipv2 } })
                     `cast`
                   (Trans
                        (<GhcMonad.Session>_R
                         ->_R Sym (GHC.Types.N:IO[0]
                                       <(Language.Haskell.Tools.AST.ElementTypes.Pattern dom,
                                         Data.Map.Base.Map
                                           (ExtMap.LogicalRelation
                                              GHC.LanguageExtensions.Type.Extension)
                                           [SrcLoc.SrcSpan])>_R))
                        (Sym (GhcMonad.N:Ghc[0]
                                  <(Language.Haskell.Tools.AST.ElementTypes.Pattern dom,
                                    Data.Map.Base.Map
                                      (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                                      [SrcLoc.SrcSpan])>_R))))
                    `cast`
                  (Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                            <Data.Map.Base.Map
                               (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                               [SrcLoc.SrcSpan]>_N
                            <GhcMonad.Ghc>_R
                            <Language.Haskell.Tools.AST.ElementTypes.Pattern dom>_N)))
                   `cast`
                 (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                           <*>_N
                           <[GHC.LanguageExtensions.Type.Extension]>_R
                           <Control.Monad.Trans.State.Lazy.StateT
                              ExtMap.ExtMap GhcMonad.Ghc>_R
                           <Language.Haskell.Tools.AST.ElementTypes.Pattern dom>_N)) }) -}
704ce35a2ac95d71759103d3094e63ba
  chkPatternField ::
    ExtMonad.CheckNode
      Language.Haskell.Tools.AST.ElementTypes.PatternField
  {- Arity: 4,
     Strictness: <S(S(LLS(S)LLLLLLLLLL)L),U(U(A,A,U(U),A,A,A,A,A,A,A,A,A,A),A)><S(LS),1*U(U(U,U(U,U,U,U)),U)><L,A><L,U>,
     Unfolding: InlineRule (0, True, True)
                TraverseAST.chkPatternField1
                  `cast`
                (forall (dom :: <*>_N).
                 <ExtMonad.ExtDomain dom>_R
                 ->_R <Language.Haskell.Tools.AST.ElementTypes.PatternField dom>_R
                 ->_R Trans
                          (<[GHC.LanguageExtensions.Type.Extension]>_R
                           ->_R Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                         <ExtMap.ExtMap>_N
                                         <GhcMonad.Ghc>_R
                                         <Language.Haskell.Tools.AST.ElementTypes.PatternField
                                            dom>_N))
                          (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                    <*>_N
                                    <[GHC.LanguageExtensions.Type.Extension]>_R
                                    <Control.Monad.Trans.State.Lazy.StateT
                                       ExtMap.ExtMap GhcMonad.Ghc>_R
                                    <Language.Haskell.Tools.AST.ElementTypes.PatternField
                                       dom>_N))) -}
c31e0ed18154257988f32ab121725c16
  chkPatternField1 ::
    ExtMonad.ExtDomain dom =>
    Language.Haskell.Tools.AST.ElementTypes.PatternField dom
    -> [GHC.LanguageExtensions.Type.Extension]
    -> ExtMap.ExtMap
    -> GhcMonad.Ghc
         (Language.Haskell.Tools.AST.ElementTypes.PatternField dom,
          ExtMap.ExtMap)
  {- Arity: 4,
     Strictness: <S(S(LLS(S)LLLLLLLLLL)L),U(U(A,A,U(U),A,A,A,A,A,A,A,A,A,A),A)><S(LS),1*U(U(U,U(U,U,U,U)),U)><L,A><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (4, True, False)
                (\ @ dom
                   (w :: ExtMonad.ExtDomain dom)
                   (w1 :: Language.Haskell.Tools.AST.ElementTypes.PatternField dom)
                   (w2 :: [GHC.LanguageExtensions.Type.Extension])
                   (w3 :: ExtMap.ExtMap) ->
                 case w1 of ww { Language.Haskell.Tools.AST.Ann.Ann ww1 ww2 ->
                 TraverseAST.$wchkPatternField @ dom w ww1 ww2 w3 }) -}
14b8cf1697dc372af4410cf0b9a361ec
  chkPatternSynonym ::
    ExtMonad.CheckNode
      Language.Haskell.Tools.AST.ElementTypes.PatternSynonym
  {- Arity: 2,
     Strictness: <S(S(LLS(S)LLLLLLLLLL)L),U(U(A,A,U(U),A,A,A,A,A,A,A,A,A,A),A)><L,U>,
     Unfolding: (\ @ dom
                   ($d(%,%) :: ExtMonad.ExtDomain dom)
                   (eta :: Language.Haskell.Tools.AST.ElementTypes.PatternSynonym
                             dom) ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Language.Haskell.Tools.AST.Ann.SemanticInfo'
                             dom Language.Haskell.Tools.AST.Ann.SameInfoDefaultCls)
                        @ Language.Haskell.Tools.AST.SemaInfoTypes.NoSemanticInfo
                        (Language.Haskell.Tools.AST.Ann.$p3Domain
                           @ dom
                           (GHC.Classes.$p1(%,%)
                              @ (Language.Haskell.Tools.AST.Ann.Domain dom)
                              @ (Language.Haskell.Tools.AST.SemaInfoClasses.HasNameInfo'
                                   (Language.Haskell.Tools.AST.Ann.SemanticInfo
                                      dom
                                      Language.Haskell.Tools.AST.Representation.Names.UQualifiedName))
                              $d(%,%)))
                          `cast`
                        (Data.Type.Equality.N:~[0]
                             <*>_N <Language.Haskell.Tools.AST.Ann.SemanticInfo'
                                      dom
                                      Language.Haskell.Tools.AST.Ann.SameInfoDefaultCls>_N <Language.Haskell.Tools.AST.SemaInfoTypes.NoSemanticInfo>_N) of cobox0 { DEFAULT ->
                 PatternSynonymsChecker.chkPatternSynonyms @ dom $d(%,%) eta }) -}
72056e50e2d721993857432f7bbcc02b
  chkType ::
    ExtMonad.CheckNode Language.Haskell.Tools.AST.ElementTypes.Type
  {- Arity: 2,
     Strictness: <S(S(LLS(S)LLLLLLLLLL)L),U(U(A,A,U(U),A,A,A,A,A,A,A,A,A,A),A)><L,U>,
     Unfolding: (\ @ dom
                   ($d(%,%) :: ExtMonad.ExtDomain dom)
                   (eta :: Language.Haskell.Tools.AST.ElementTypes.Type dom) ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Language.Haskell.Tools.AST.Ann.SemanticInfo'
                             dom Language.Haskell.Tools.AST.Ann.SameInfoDefaultCls)
                        @ Language.Haskell.Tools.AST.SemaInfoTypes.NoSemanticInfo
                        (Language.Haskell.Tools.AST.Ann.$p3Domain
                           @ dom
                           (GHC.Classes.$p1(%,%)
                              @ (Language.Haskell.Tools.AST.Ann.Domain dom)
                              @ (Language.Haskell.Tools.AST.SemaInfoClasses.HasNameInfo'
                                   (Language.Haskell.Tools.AST.Ann.SemanticInfo
                                      dom
                                      Language.Haskell.Tools.AST.Representation.Names.UQualifiedName))
                              $d(%,%)))
                          `cast`
                        (Data.Type.Equality.N:~[0]
                             <*>_N <Language.Haskell.Tools.AST.Ann.SemanticInfo'
                                      dom
                                      Language.Haskell.Tools.AST.Ann.SameInfoDefaultCls>_N <Language.Haskell.Tools.AST.SemaInfoTypes.NoSemanticInfo>_N) of cobox0 { DEFAULT ->
                 UnboxedTuplesChecker.chkUnboxedTuplesType @ dom $d(%,%) eta }) -}
13cf59df35074a7024aedf3972a14e6c
  traverseAlt ::
    ExtMonad.CheckUNode uexpr
    -> ExtMonad.CheckNode (TraverseAST.AltG uexpr)
  {- Arity: 2,
     Strictness: <L,C(U)><S(S(LLS(S)LLLLLLLLLL)L),U(U(U,U,U(U),U,U,U,U,U,U,U,U,U,U),U)>,
     Unfolding: (\ @ (uexpr :: GHC.Types.*
                               -> GHC.Types.* -> GHC.Types.*)
                   (dk :: ExtMonad.CheckUNode uexpr)
                   @ dom
                   ($d(%,%) :: ExtMonad.ExtDomain dom) ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Language.Haskell.Tools.AST.Ann.SemanticInfo'
                             dom Language.Haskell.Tools.AST.Ann.SameInfoDefaultCls)
                        @ Language.Haskell.Tools.AST.SemaInfoTypes.NoSemanticInfo
                        (Language.Haskell.Tools.AST.Ann.$p3Domain
                           @ dom
                           (GHC.Classes.$p1(%,%)
                              @ (Language.Haskell.Tools.AST.Ann.Domain dom)
                              @ (Language.Haskell.Tools.AST.SemaInfoClasses.HasNameInfo'
                                   (Language.Haskell.Tools.AST.Ann.SemanticInfo
                                      dom
                                      Language.Haskell.Tools.AST.Representation.Names.UQualifiedName))
                              $d(%,%)))
                          `cast`
                        (Data.Type.Equality.N:~[0]
                             <*>_N <Language.Haskell.Tools.AST.Ann.SemanticInfo'
                                      dom
                                      Language.Haskell.Tools.AST.Ann.SameInfoDefaultCls>_N <Language.Haskell.Tools.AST.SemaInfoTypes.NoSemanticInfo>_N) of cobox0 { DEFAULT ->
                 let {
                   f :: Language.Haskell.Tools.AST.Ann.Ann
                          (Language.Haskell.Tools.AST.Representation.Exprs.UAlt' uexpr)
                          dom
                          Language.Haskell.Tools.AST.Ann.SrcTemplateStage
                        -> Control.Monad.Trans.Reader.ReaderT
                             [GHC.LanguageExtensions.Type.Extension]
                             (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc)
                             (Language.Haskell.Tools.AST.Ann.Ann
                                (Language.Haskell.Tools.AST.Representation.Exprs.UAlt' uexpr)
                                dom
                                Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   = case TraverseAST.traverseAlt5
                            @ dom
                            @ uexpr of wild { Control.Reference.Representation.Reference ds1 ds2 ds3 ds4 ds5 ds6 ->
                     ds3 (TraverseAST.traversePattern @ dom $d(%,%)) }
                 } in
                 let {
                   f1 :: Language.Haskell.Tools.AST.Ann.Ann
                           (Language.Haskell.Tools.AST.Representation.Exprs.UAlt' uexpr)
                           dom
                           Language.Haskell.Tools.AST.Ann.SrcTemplateStage
                         -> Control.Monad.Trans.Reader.ReaderT
                              [GHC.LanguageExtensions.Type.Extension]
                              (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc)
                              (Language.Haskell.Tools.AST.Ann.Ann
                                 (Language.Haskell.Tools.AST.Representation.Exprs.UAlt' uexpr)
                                 dom
                                 Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   = case TraverseAST.traverseAlt4
                            @ dom
                            @ uexpr of wild { Control.Reference.Representation.Reference ds1 ds2 ds3 ds4 ds5 ds6 ->
                     ds3
                       (TraverseAST.traverseCaseRhs
                          @ uexpr
                          (\ @ dom1 ($d(%,%)1 :: ExtMonad.ExtDomain dom1) ->
                           case GHC.Types.HEq_sc
                                  @ *
                                  @ *
                                  @ (Language.Haskell.Tools.AST.Ann.SemanticInfo'
                                       dom1 Language.Haskell.Tools.AST.Ann.SameInfoDefaultCls)
                                  @ Language.Haskell.Tools.AST.SemaInfoTypes.NoSemanticInfo
                                  (Language.Haskell.Tools.AST.Ann.$p3Domain
                                     @ dom1
                                     (GHC.Classes.$p1(%,%)
                                        @ (Language.Haskell.Tools.AST.Ann.Domain dom1)
                                        @ (Language.Haskell.Tools.AST.SemaInfoClasses.HasNameInfo'
                                             (Language.Haskell.Tools.AST.Ann.SemanticInfo
                                                dom1
                                                Language.Haskell.Tools.AST.Representation.Names.UQualifiedName))
                                        $d(%,%)1))
                                    `cast`
                                  (Data.Type.Equality.N:~[0]
                                       <*>_N <Language.Haskell.Tools.AST.Ann.SemanticInfo'
                                                dom1
                                                Language.Haskell.Tools.AST.Ann.SameInfoDefaultCls>_N <Language.Haskell.Tools.AST.SemaInfoTypes.NoSemanticInfo>_N) of cobox1 { DEFAULT ->
                           dk @ dom1 $d(%,%)1 })
                          @ dom
                          $d(%,%)) }
                 } in
                 let {
                   g :: Language.Haskell.Tools.AST.Ann.Ann
                          (Language.Haskell.Tools.AST.Representation.Exprs.UAlt' uexpr)
                          dom
                          Language.Haskell.Tools.AST.Ann.SrcTemplateStage
                        -> Control.Monad.Trans.Reader.ReaderT
                             [GHC.LanguageExtensions.Type.Extension]
                             (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc)
                             (Language.Haskell.Tools.AST.Ann.Ann
                                (Language.Haskell.Tools.AST.Representation.Exprs.UAlt' uexpr)
                                dom
                                Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   = case TraverseAST.traverseAlt1
                            @ uexpr
                            @ dom of wild { Control.Reference.Representation.Reference ds1 ds2 ds3 ds4 ds5 ds6 ->
                     ds3 (TraverseAST.traverseLocalBinds @ dom $d(%,%)) }
                 } in
                 \ (x :: Language.Haskell.Tools.AST.Ann.Ann
                           (Language.Haskell.Tools.AST.Representation.Exprs.UAlt' uexpr)
                           dom
                           Language.Haskell.Tools.AST.Ann.SrcTemplateStage) ->
                 let {
                   m1 :: Control.Monad.Trans.Reader.ReaderT
                           [GHC.LanguageExtensions.Type.Extension]
                           (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc)
                           (Language.Haskell.Tools.AST.Ann.Ann
                              (Language.Haskell.Tools.AST.Representation.Exprs.UAlt' uexpr)
                              dom
                              Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   = f x
                 } in
                 (\ (r1 :: [GHC.LanguageExtensions.Type.Extension]) ->
                  let {
                    m2 :: Control.Monad.Trans.State.Lazy.StateT
                            (Data.Map.Base.Map
                               (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                               [SrcLoc.SrcSpan])
                            GhcMonad.Ghc
                            (Language.Haskell.Tools.AST.Ann.Ann
                               (Language.Haskell.Tools.AST.Representation.Exprs.UAlt' uexpr)
                               dom
                               Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                    = m1
                        `cast`
                      (Control.Monad.Trans.Reader.N:ReaderT[0]
                           <*>_N
                           <[GHC.LanguageExtensions.Type.Extension]>_R
                           <Control.Monad.Trans.State.Lazy.StateT
                              ExtMap.ExtMap GhcMonad.Ghc>_R
                           <Language.Haskell.Tools.AST.Ann.Ann
                              (Language.Haskell.Tools.AST.Representation.Exprs.UAlt' uexpr)
                              dom
                              Language.Haskell.Tools.AST.Ann.SrcTemplateStage>_N)
                        r1
                  } in
                  (\ (s1 :: Data.Map.Base.Map
                              (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                              [SrcLoc.SrcSpan]) ->
                   let {
                     m :: GhcMonad.Ghc
                            (Language.Haskell.Tools.AST.Ann.Ann
                               (Language.Haskell.Tools.AST.Representation.Exprs.UAlt' uexpr)
                               dom
                               Language.Haskell.Tools.AST.Ann.SrcTemplateStage,
                             Data.Map.Base.Map
                               (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                               [SrcLoc.SrcSpan])
                     = m2
                         `cast`
                       (Control.Monad.Trans.State.Lazy.N:StateT[0]
                            <Data.Map.Base.Map
                               (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                               [SrcLoc.SrcSpan]>_N
                            <GhcMonad.Ghc>_R
                            <Language.Haskell.Tools.AST.Ann.Ann
                               (Language.Haskell.Tools.AST.Representation.Exprs.UAlt' uexpr)
                               dom
                               Language.Haskell.Tools.AST.Ann.SrcTemplateStage>_N)
                         s1
                   } in
                   (\ (s :: GhcMonad.Session)
                      (s2 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                    case (m `cast`
                          (GhcMonad.N:Ghc[0]
                               <(Language.Haskell.Tools.AST.Ann.Ann
                                   (Language.Haskell.Tools.AST.Representation.Exprs.UAlt' uexpr)
                                   dom
                                   Language.Haskell.Tools.AST.Ann.SrcTemplateStage,
                                 Data.Map.Base.Map
                                   (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                                   [SrcLoc.SrcSpan])>_R)
                            s)
                           `cast`
                         (GHC.Types.N:IO[0]
                              <(Language.Haskell.Tools.AST.Ann.Ann
                                  (Language.Haskell.Tools.AST.Representation.Exprs.UAlt' uexpr)
                                  dom
                                  Language.Haskell.Tools.AST.Ann.SrcTemplateStage,
                                Data.Map.Base.Map
                                  (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                                  [SrcLoc.SrcSpan])>_R)
                           s2 of ds1 { (#,#) ipv ipv1 ->
                    case ((((f1 (case ipv1 of wild { (,) a1 s' -> a1 }))
                              `cast`
                            (Control.Monad.Trans.Reader.N:ReaderT[0]
                                 <*>_N
                                 <[GHC.LanguageExtensions.Type.Extension]>_R
                                 <Control.Monad.Trans.State.Lazy.StateT
                                    ExtMap.ExtMap GhcMonad.Ghc>_R
                                 <Language.Haskell.Tools.AST.Ann.Ann
                                    (Language.Haskell.Tools.AST.Representation.Exprs.UAlt' uexpr)
                                    dom
                                    Language.Haskell.Tools.AST.Ann.SrcTemplateStage>_N)
                              r1)
                             `cast`
                           (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                <Data.Map.Base.Map
                                   (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                                   [SrcLoc.SrcSpan]>_N
                                <GhcMonad.Ghc>_R
                                <Language.Haskell.Tools.AST.Ann.Ann
                                   (Language.Haskell.Tools.AST.Representation.Exprs.UAlt' uexpr)
                                   dom
                                   Language.Haskell.Tools.AST.Ann.SrcTemplateStage>_N)
                             (case ipv1 of wild { (,) a1 s' -> s' }))
                            `cast`
                          (GhcMonad.N:Ghc[0]
                               <(Language.Haskell.Tools.AST.Ann.Ann
                                   (Language.Haskell.Tools.AST.Representation.Exprs.UAlt' uexpr)
                                   dom
                                   Language.Haskell.Tools.AST.Ann.SrcTemplateStage,
                                 Data.Map.Base.Map
                                   (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                                   [SrcLoc.SrcSpan])>_R)
                            s)
                           `cast`
                         (GHC.Types.N:IO[0]
                              <(Language.Haskell.Tools.AST.Ann.Ann
                                  (Language.Haskell.Tools.AST.Representation.Exprs.UAlt' uexpr)
                                  dom
                                  Language.Haskell.Tools.AST.Ann.SrcTemplateStage,
                                Data.Map.Base.Map
                                  (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                                  [SrcLoc.SrcSpan])>_R)
                           ipv of ds2 { (#,#) ipv2 ipv3 ->
                    ((((g (case ipv3 of wild { (,) a1 s' -> a1 }))
                         `cast`
                       (Control.Monad.Trans.Reader.N:ReaderT[0]
                            <*>_N
                            <[GHC.LanguageExtensions.Type.Extension]>_R
                            <Control.Monad.Trans.State.Lazy.StateT
                               ExtMap.ExtMap GhcMonad.Ghc>_R
                            <Language.Haskell.Tools.AST.Ann.Ann
                               (Language.Haskell.Tools.AST.Representation.Exprs.UAlt' uexpr)
                               dom
                               Language.Haskell.Tools.AST.Ann.SrcTemplateStage>_N)
                         r1)
                        `cast`
                      (Control.Monad.Trans.State.Lazy.N:StateT[0]
                           <Data.Map.Base.Map
                              (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                              [SrcLoc.SrcSpan]>_N
                           <GhcMonad.Ghc>_R
                           <Language.Haskell.Tools.AST.Ann.Ann
                              (Language.Haskell.Tools.AST.Representation.Exprs.UAlt' uexpr)
                              dom
                              Language.Haskell.Tools.AST.Ann.SrcTemplateStage>_N)
                        (case ipv3 of wild { (,) a1 s' -> s' }))
                       `cast`
                     (GhcMonad.N:Ghc[0]
                          <(Language.Haskell.Tools.AST.Ann.Ann
                              (Language.Haskell.Tools.AST.Representation.Exprs.UAlt' uexpr)
                              dom
                              Language.Haskell.Tools.AST.Ann.SrcTemplateStage,
                            Data.Map.Base.Map
                              (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                              [SrcLoc.SrcSpan])>_R)
                       s)
                      `cast`
                    (GHC.Types.N:IO[0]
                         <(Language.Haskell.Tools.AST.Ann.Ann
                             (Language.Haskell.Tools.AST.Representation.Exprs.UAlt' uexpr)
                             dom
                             Language.Haskell.Tools.AST.Ann.SrcTemplateStage,
                           Data.Map.Base.Map
                             (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                             [SrcLoc.SrcSpan])>_R)
                      ipv2 } })
                     `cast`
                   (Trans
                        (<GhcMonad.Session>_R
                         ->_R Sym (GHC.Types.N:IO[0]
                                       <(Language.Haskell.Tools.AST.Ann.Ann
                                           (Language.Haskell.Tools.AST.Representation.Exprs.UAlt'
                                              uexpr)
                                           dom
                                           Language.Haskell.Tools.AST.Ann.SrcTemplateStage,
                                         Data.Map.Base.Map
                                           (ExtMap.LogicalRelation
                                              GHC.LanguageExtensions.Type.Extension)
                                           [SrcLoc.SrcSpan])>_R))
                        (Sym (GhcMonad.N:Ghc[0]
                                  <(Language.Haskell.Tools.AST.Ann.Ann
                                      (Language.Haskell.Tools.AST.Representation.Exprs.UAlt' uexpr)
                                      dom
                                      Language.Haskell.Tools.AST.Ann.SrcTemplateStage,
                                    Data.Map.Base.Map
                                      (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                                      [SrcLoc.SrcSpan])>_R))))
                    `cast`
                  (Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                            <Data.Map.Base.Map
                               (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                               [SrcLoc.SrcSpan]>_N
                            <GhcMonad.Ghc>_R
                            <Language.Haskell.Tools.AST.Ann.Ann
                               (Language.Haskell.Tools.AST.Representation.Exprs.UAlt' uexpr)
                               dom
                               Language.Haskell.Tools.AST.Ann.SrcTemplateStage>_N)))
                   `cast`
                 (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                           <*>_N
                           <[GHC.LanguageExtensions.Type.Extension]>_R
                           <Control.Monad.Trans.State.Lazy.StateT
                              ExtMap.ExtMap GhcMonad.Ghc>_R
                           <Language.Haskell.Tools.AST.Ann.Ann
                              (Language.Haskell.Tools.AST.Representation.Exprs.UAlt' uexpr)
                              dom
                              Language.Haskell.Tools.AST.Ann.SrcTemplateStage>_N)) }) -}
8aca8eeaae34171ae0db7aebbabb8ba5
  traverseAlt1 ::
    Control.Reference.Representation.Reference
      (Control.Monad.Trans.Reader.ReaderT
         [GHC.LanguageExtensions.Type.Extension]
         (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc))
      Control.Reference.Representation.MU
      Control.Reference.Representation.MU
      Control.Reference.Representation.MU
      (Language.Haskell.Tools.AST.Ann.Ann
         (Language.Haskell.Tools.AST.Representation.Exprs.UAlt' uexpr)
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
      (Language.Haskell.Tools.AST.Ann.Ann
         (Language.Haskell.Tools.AST.Representation.Exprs.UAlt' uexpr)
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
      (Language.Haskell.Tools.AST.Ann.Ann
         Language.Haskell.Tools.AST.Representation.Binds.ULocalBinds
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
      (Language.Haskell.Tools.AST.Ann.Ann
         Language.Haskell.Tools.AST.Representation.Binds.ULocalBinds
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
  {- Unfolding: (\ @ (uexpr :: GHC.Types.*
                               -> GHC.Types.* -> GHC.Types.*)
                   @ dom ->
                 case Control.Reference.Combinators.$w&
                        @ (Control.Monad.Trans.Reader.ReaderT
                             [GHC.LanguageExtensions.Type.Extension]
                             (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc))
                        @ Control.Reference.Representation.MU
                        @ Control.Reference.Representation.MU
                        @ Control.Reference.Representation.MU
                        @ (Language.Haskell.Tools.AST.Ann.Ann
                             (Language.Haskell.Tools.AST.Representation.Exprs.UAlt' uexpr)
                             dom
                             Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                        @ (Language.Haskell.Tools.AST.Ann.Ann
                             (Language.Haskell.Tools.AST.Representation.Exprs.UAlt' uexpr)
                             dom
                             Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                        @ (Language.Haskell.Tools.AST.Ann.AnnMaybeG
                             Language.Haskell.Tools.AST.Representation.Binds.ULocalBinds
                             dom
                             Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                        @ (Language.Haskell.Tools.AST.Ann.AnnMaybeG
                             Language.Haskell.Tools.AST.Representation.Binds.ULocalBinds
                             dom
                             Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                        @ (Language.Haskell.Tools.AST.Ann.Ann
                             Language.Haskell.Tools.AST.Representation.Binds.ULocalBinds
                             dom
                             Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                        @ (Language.Haskell.Tools.AST.Ann.Ann
                             Language.Haskell.Tools.AST.Representation.Binds.ULocalBinds
                             dom
                             Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                        (TraverseAST.traverseAlt3 @ uexpr @ dom)
                        (TraverseAST.traverseAlt2
                           @ dom) of ww { (#,,,,,#) ww1 ww2 ww3 ww4 ww5 ww6 ->
                 Control.Reference.Representation.Reference
                   @ (Control.Monad.Trans.Reader.ReaderT
                        [GHC.LanguageExtensions.Type.Extension]
                        (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc))
                   @ Control.Reference.Representation.MU
                   @ Control.Reference.Representation.MU
                   @ Control.Reference.Representation.MU
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        (Language.Haskell.Tools.AST.Representation.Exprs.UAlt' uexpr)
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        (Language.Haskell.Tools.AST.Representation.Exprs.UAlt' uexpr)
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        Language.Haskell.Tools.AST.Representation.Binds.ULocalBinds
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        Language.Haskell.Tools.AST.Representation.Binds.ULocalBinds
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   ww1
                   ww2
                   ww3
                   ww4
                   ww5
                   ww6 }) -}
0cf84826db788d26377376187c91accc
  traverseAlt2 ::
    Control.Reference.Representation.Reference
      (Control.Monad.Trans.Reader.ReaderT
         [GHC.LanguageExtensions.Type.Extension]
         (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc))
      Control.Reference.Representation.MU
      Control.Reference.Representation.MU
      Control.Reference.Representation.MU
      (Language.Haskell.Tools.AST.Ann.AnnMaybeG
         Language.Haskell.Tools.AST.Representation.Binds.ULocalBinds
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
      (Language.Haskell.Tools.AST.Ann.AnnMaybeG
         Language.Haskell.Tools.AST.Representation.Binds.ULocalBinds
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
      (Language.Haskell.Tools.AST.Ann.Ann
         Language.Haskell.Tools.AST.Representation.Binds.ULocalBinds
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
      (Language.Haskell.Tools.AST.Ann.Ann
         Language.Haskell.Tools.AST.Representation.Binds.ULocalBinds
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
  {- Unfolding: (\ @ dom ->
                 case Language.Haskell.Tools.AST.Ann.$wannJust
                        @ Language.Haskell.Tools.AST.Representation.Binds.ULocalBinds
                        @ dom
                        @ Language.Haskell.Tools.AST.Ann.SrcTemplateStage
                        @ (Control.Monad.Trans.Reader.ReaderT
                             [GHC.LanguageExtensions.Type.Extension]
                             (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc))
                        @ Control.Reference.Representation.MU
                        (TraverseAST.$s$fApplicativeReaderT
                           @ [GHC.LanguageExtensions.Type.Extension])
                        (TraverseAST.$s$fMonadReaderT
                           @ [GHC.LanguageExtensions.Type.Extension])
                        Data.Proxy.$fApplicativeProxy
                        Data.Proxy.$fMonadPlusProxy
                        TraverseAST.$sannJust1
                          `cast`
                        (Sym (Control.Instances.Morph.N:Morph[0]
                                  <GHC.Base.Maybe>_N
                                  <Data.Proxy.Proxy>_N)) of ww { (#,,,,,#) ww1 ww2 ww3 ww4 ww5 ww6 ->
                 Control.Reference.Representation.Reference
                   @ (Control.Monad.Trans.Reader.ReaderT
                        [GHC.LanguageExtensions.Type.Extension]
                        (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc))
                   @ Control.Reference.Representation.MU
                   @ Control.Reference.Representation.MU
                   @ Control.Reference.Representation.MU
                   @ (Language.Haskell.Tools.AST.Ann.AnnMaybeG
                        Language.Haskell.Tools.AST.Representation.Binds.ULocalBinds
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   @ (Language.Haskell.Tools.AST.Ann.AnnMaybeG
                        Language.Haskell.Tools.AST.Representation.Binds.ULocalBinds
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        Language.Haskell.Tools.AST.Representation.Binds.ULocalBinds
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        Language.Haskell.Tools.AST.Representation.Binds.ULocalBinds
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   ww1
                   ww2
                   ww3
                   ww4
                   ww5
                   ww6 }) -}
46c271509497554d71c19bff77ddffb5
  traverseAlt3 ::
    Control.Reference.Representation.Reference
      (Control.Monad.Trans.Reader.ReaderT
         [GHC.LanguageExtensions.Type.Extension]
         (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc))
      Control.Reference.Representation.MU
      Control.Reference.Representation.MU
      Control.Reference.Representation.MU
      (Language.Haskell.Tools.AST.Ann.Ann
         (Language.Haskell.Tools.AST.Representation.Exprs.UAlt' uexpr)
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
      (Language.Haskell.Tools.AST.Ann.Ann
         (Language.Haskell.Tools.AST.Representation.Exprs.UAlt' uexpr)
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
      (Language.Haskell.Tools.AST.Ann.AnnMaybeG
         Language.Haskell.Tools.AST.Representation.Binds.ULocalBinds
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
      (Language.Haskell.Tools.AST.Ann.AnnMaybeG
         Language.Haskell.Tools.AST.Representation.Binds.ULocalBinds
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
  {- Unfolding: (\ @ (uexpr :: GHC.Types.*
                               -> GHC.Types.* -> GHC.Types.*)
                   @ dom ->
                 case Language.Haskell.Tools.AST.References.$waltBinds
                        @ uexpr
                        @ dom
                        @ Language.Haskell.Tools.AST.Ann.SrcTemplateStage
                        @ (Control.Monad.Trans.Reader.ReaderT
                             [GHC.LanguageExtensions.Type.Extension]
                             (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc))
                        @ Control.Reference.Representation.MU
                        TraverseAST.$s$fRefMonadswr of ww { (#,,,,,#) ww1 ww2 ww3 ww4 ww5 ww6 ->
                 Control.Reference.Representation.Reference
                   @ (Control.Monad.Trans.Reader.ReaderT
                        [GHC.LanguageExtensions.Type.Extension]
                        (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc))
                   @ Control.Reference.Representation.MU
                   @ Control.Reference.Representation.MU
                   @ Control.Reference.Representation.MU
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        (Language.Haskell.Tools.AST.Representation.Exprs.UAlt' uexpr)
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        (Language.Haskell.Tools.AST.Representation.Exprs.UAlt' uexpr)
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   @ (Language.Haskell.Tools.AST.Ann.AnnMaybeG
                        Language.Haskell.Tools.AST.Representation.Binds.ULocalBinds
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   @ (Language.Haskell.Tools.AST.Ann.AnnMaybeG
                        Language.Haskell.Tools.AST.Representation.Binds.ULocalBinds
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   ww1
                   ww2
                   ww3
                   ww4
                   ww5
                   ww6 }) -}
1d44da6d99f41031f782a8a141b13c4d
  traverseAlt4 ::
    Control.Reference.Representation.Reference
      (Control.Monad.Trans.Reader.ReaderT
         [GHC.LanguageExtensions.Type.Extension]
         (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc))
      Control.Reference.Representation.MU
      Control.Reference.Representation.MU
      Control.Reference.Representation.MU
      (Language.Haskell.Tools.AST.Ann.Ann
         (Language.Haskell.Tools.AST.Representation.Exprs.UAlt' uexpr)
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
      (Language.Haskell.Tools.AST.Ann.Ann
         (Language.Haskell.Tools.AST.Representation.Exprs.UAlt' uexpr)
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
      (Language.Haskell.Tools.AST.Ann.Ann
         (Language.Haskell.Tools.AST.Representation.Exprs.UCaseRhs' uexpr)
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
      (Language.Haskell.Tools.AST.Ann.Ann
         (Language.Haskell.Tools.AST.Representation.Exprs.UCaseRhs' uexpr)
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
  {- Unfolding: (\ @ dom
                   @ (uexpr :: GHC.Types.* -> GHC.Types.* -> GHC.Types.*) ->
                 case Language.Haskell.Tools.AST.References.$waltRhs
                        @ GHC.Prim.Any
                        @ uexpr
                        @ dom
                        @ Language.Haskell.Tools.AST.Ann.SrcTemplateStage
                        @ (Control.Monad.Trans.Reader.ReaderT
                             [GHC.LanguageExtensions.Type.Extension]
                             (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc))
                        @ Control.Reference.Representation.MU
                        TraverseAST.$s$fRefMonadswr of ww { (#,,,,,#) ww1 ww2 ww3 ww4 ww5 ww6 ->
                 Control.Reference.Representation.Reference
                   @ (Control.Monad.Trans.Reader.ReaderT
                        [GHC.LanguageExtensions.Type.Extension]
                        (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc))
                   @ Control.Reference.Representation.MU
                   @ Control.Reference.Representation.MU
                   @ Control.Reference.Representation.MU
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        (Language.Haskell.Tools.AST.Representation.Exprs.UAlt' uexpr)
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        (Language.Haskell.Tools.AST.Representation.Exprs.UAlt' uexpr)
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        (Language.Haskell.Tools.AST.Representation.Exprs.UCaseRhs' uexpr)
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        (Language.Haskell.Tools.AST.Representation.Exprs.UCaseRhs' uexpr)
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   ww1
                   ww2
                   ww3
                   ww4
                   ww5
                   ww6 }) -}
2c198ab8452a4965377ee0cb1ab1e767
  traverseAlt5 ::
    Control.Reference.Representation.Reference
      (Control.Monad.Trans.Reader.ReaderT
         [GHC.LanguageExtensions.Type.Extension]
         (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc))
      Control.Reference.Representation.MU
      Control.Reference.Representation.MU
      Control.Reference.Representation.MU
      (Language.Haskell.Tools.AST.Ann.Ann
         (Language.Haskell.Tools.AST.Representation.Exprs.UAlt' uexpr)
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
      (Language.Haskell.Tools.AST.Ann.Ann
         (Language.Haskell.Tools.AST.Representation.Exprs.UAlt' uexpr)
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
      (Language.Haskell.Tools.AST.Ann.Ann
         Language.Haskell.Tools.AST.Representation.Patterns.UPattern
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
      (Language.Haskell.Tools.AST.Ann.Ann
         Language.Haskell.Tools.AST.Representation.Patterns.UPattern
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
  {- Unfolding: (\ @ dom
                   @ (uexpr :: GHC.Types.* -> GHC.Types.* -> GHC.Types.*) ->
                 case Language.Haskell.Tools.AST.References.$waltPattern
                        @ uexpr
                        @ dom
                        @ Language.Haskell.Tools.AST.Ann.SrcTemplateStage
                        @ (Control.Monad.Trans.Reader.ReaderT
                             [GHC.LanguageExtensions.Type.Extension]
                             (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc))
                        @ Control.Reference.Representation.MU
                        TraverseAST.$s$fRefMonadswr of ww { (#,,,,,#) ww1 ww2 ww3 ww4 ww5 ww6 ->
                 Control.Reference.Representation.Reference
                   @ (Control.Monad.Trans.Reader.ReaderT
                        [GHC.LanguageExtensions.Type.Extension]
                        (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc))
                   @ Control.Reference.Representation.MU
                   @ Control.Reference.Representation.MU
                   @ Control.Reference.Representation.MU
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        (Language.Haskell.Tools.AST.Representation.Exprs.UAlt' uexpr)
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        (Language.Haskell.Tools.AST.Representation.Exprs.UAlt' uexpr)
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        Language.Haskell.Tools.AST.Representation.Patterns.UPattern
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        Language.Haskell.Tools.AST.Representation.Patterns.UPattern
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   ww1
                   ww2
                   ww3
                   ww4
                   ww5
                   ww6 }) -}
ae48507c4ff28ca88481b40e8023efff
  traverseAssertion ::
    ExtMonad.CheckNode
      Language.Haskell.Tools.AST.ElementTypes.Assertion
  {- Arity: 1,
     Strictness: <S(S(LLS(S)LLLLLLLLLL)L),U(U(U,U,U(U),U,U,U,U,U,U,U,U,U,U),U)> -}
a65934636dc8707099af6bf15e159ccb
  traverseBracket ::
    ExtMonad.CheckNode Language.Haskell.Tools.AST.ElementTypes.Bracket
  {- Arity: 1,
     Strictness: <S(S(LLS(S)LLLLLLLLLL)L),U(U(U,U,U(U),U,U,U,U,U,U,U,U,U,U),U)>,
     Unfolding: (\ @ dom ($d(%,%) :: ExtMonad.ExtDomain dom) ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Language.Haskell.Tools.AST.Ann.SemanticInfo'
                             dom Language.Haskell.Tools.AST.Ann.SameInfoDefaultCls)
                        @ Language.Haskell.Tools.AST.SemaInfoTypes.NoSemanticInfo
                        (Language.Haskell.Tools.AST.Ann.$p3Domain
                           @ dom
                           (GHC.Classes.$p1(%,%)
                              @ (Language.Haskell.Tools.AST.Ann.Domain dom)
                              @ (Language.Haskell.Tools.AST.SemaInfoClasses.HasNameInfo'
                                   (Language.Haskell.Tools.AST.Ann.SemanticInfo
                                      dom
                                      Language.Haskell.Tools.AST.Representation.Names.UQualifiedName))
                              $d(%,%)))
                          `cast`
                        (Data.Type.Equality.N:~[0]
                             <*>_N <Language.Haskell.Tools.AST.Ann.SemanticInfo'
                                      dom
                                      Language.Haskell.Tools.AST.Ann.SameInfoDefaultCls>_N <Language.Haskell.Tools.AST.SemaInfoTypes.NoSemanticInfo>_N) of cobox0 { DEFAULT ->
                 let {
                   f :: Language.Haskell.Tools.AST.Ann.Ann
                          Language.Haskell.Tools.AST.Representation.TH.UBracket
                          dom
                          Language.Haskell.Tools.AST.Ann.SrcTemplateStage
                        -> Control.Monad.Trans.Reader.ReaderT
                             [GHC.LanguageExtensions.Type.Extension]
                             (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc)
                             (Language.Haskell.Tools.AST.Ann.Ann
                                Language.Haskell.Tools.AST.Representation.TH.UBracket
                                dom
                                Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   = case TraverseAST.traverseBracket6
                            @ dom of wild { Control.Reference.Representation.Reference ds1 ds2 ds3 ds4 ds5 ds6 ->
                     ds3 (TraverseAST.traverseExpr @ dom $d(%,%)) }
                 } in
                 let {
                   f1 :: Language.Haskell.Tools.AST.Ann.Ann
                           Language.Haskell.Tools.AST.Representation.TH.UBracket
                           dom
                           Language.Haskell.Tools.AST.Ann.SrcTemplateStage
                         -> Control.Monad.Trans.Reader.ReaderT
                              [GHC.LanguageExtensions.Type.Extension]
                              (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc)
                              (Language.Haskell.Tools.AST.Ann.Ann
                                 Language.Haskell.Tools.AST.Representation.TH.UBracket
                                 dom
                                 Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   = case TraverseAST.traverseBracket5
                            @ dom of wild { Control.Reference.Representation.Reference ds1 ds2 ds3 ds4 ds5 ds6 ->
                     ds3 (TraverseAST.traversePattern @ dom $d(%,%)) }
                 } in
                 let {
                   f2 :: Language.Haskell.Tools.AST.Ann.Ann
                           Language.Haskell.Tools.AST.Representation.TH.UBracket
                           dom
                           Language.Haskell.Tools.AST.Ann.SrcTemplateStage
                         -> Control.Monad.Trans.Reader.ReaderT
                              [GHC.LanguageExtensions.Type.Extension]
                              (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc)
                              (Language.Haskell.Tools.AST.Ann.Ann
                                 Language.Haskell.Tools.AST.Representation.TH.UBracket
                                 dom
                                 Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   = case TraverseAST.traverseBracket4
                            @ dom of wild { Control.Reference.Representation.Reference ds1 ds2 ds3 ds4 ds5 ds6 ->
                     ds3 (TraverseAST.traverseType @ dom $d(%,%)) }
                 } in
                 let {
                   g :: Language.Haskell.Tools.AST.Ann.Ann
                          Language.Haskell.Tools.AST.Representation.TH.UBracket
                          dom
                          Language.Haskell.Tools.AST.Ann.SrcTemplateStage
                        -> Control.Monad.Trans.Reader.ReaderT
                             [GHC.LanguageExtensions.Type.Extension]
                             (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc)
                             (Language.Haskell.Tools.AST.Ann.Ann
                                Language.Haskell.Tools.AST.Representation.TH.UBracket
                                dom
                                Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   = case TraverseAST.traverseBracket1
                            @ dom of wild { Control.Reference.Representation.Reference ds1 ds2 ds3 ds4 ds5 ds6 ->
                     ds3 (TraverseAST.traverseDecl @ dom $d(%,%)) }
                 } in
                 (\ (x :: Language.Haskell.Tools.AST.ElementTypes.Bracket dom)
                    (eta :: [GHC.LanguageExtensions.Type.Extension])
                    (eta1 :: ExtMap.ExtMap) ->
                  let {
                    m :: GhcMonad.Ghc
                           (Language.Haskell.Tools.AST.ElementTypes.Bracket dom,
                            Data.Map.Base.Map
                              (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                              [SrcLoc.SrcSpan])
                    = TemplateHaskellChecker.$wchkTemplateHaskellBracket
                        @ dom
                        $d(%,%)
                        x
                        eta1
                  } in
                  (\ (s :: GhcMonad.Session)
                     (s1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                   case (m `cast`
                         (GhcMonad.N:Ghc[0]
                              <(Language.Haskell.Tools.AST.ElementTypes.Bracket dom,
                                Data.Map.Base.Map
                                  (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                                  [SrcLoc.SrcSpan])>_R)
                           s)
                          `cast`
                        (GHC.Types.N:IO[0]
                             <(Language.Haskell.Tools.AST.ElementTypes.Bracket dom,
                               Data.Map.Base.Map
                                 (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                                 [SrcLoc.SrcSpan])>_R)
                          s1 of ds1 { (#,#) ipv ipv1 ->
                   case ((((f (case ipv1 of wild { (,) a1 s' -> a1 }))
                             `cast`
                           (Control.Monad.Trans.Reader.N:ReaderT[0]
                                <*>_N
                                <[GHC.LanguageExtensions.Type.Extension]>_R
                                <Control.Monad.Trans.State.Lazy.StateT
                                   ExtMap.ExtMap GhcMonad.Ghc>_R
                                <Language.Haskell.Tools.AST.Ann.Ann
                                   Language.Haskell.Tools.AST.Representation.TH.UBracket
                                   dom
                                   Language.Haskell.Tools.AST.Ann.SrcTemplateStage>_N)
                             eta)
                            `cast`
                          (Control.Monad.Trans.State.Lazy.N:StateT[0]
                               <Data.Map.Base.Map
                                  (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                                  [SrcLoc.SrcSpan]>_N
                               <GhcMonad.Ghc>_R
                               <Language.Haskell.Tools.AST.Ann.Ann
                                  Language.Haskell.Tools.AST.Representation.TH.UBracket
                                  dom
                                  Language.Haskell.Tools.AST.Ann.SrcTemplateStage>_N)
                            (case ipv1 of wild { (,) a1 s' -> s' }))
                           `cast`
                         (GhcMonad.N:Ghc[0]
                              <(Language.Haskell.Tools.AST.Ann.Ann
                                  Language.Haskell.Tools.AST.Representation.TH.UBracket
                                  dom
                                  Language.Haskell.Tools.AST.Ann.SrcTemplateStage,
                                Data.Map.Base.Map
                                  (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                                  [SrcLoc.SrcSpan])>_R)
                           s)
                          `cast`
                        (GHC.Types.N:IO[0]
                             <(Language.Haskell.Tools.AST.Ann.Ann
                                 Language.Haskell.Tools.AST.Representation.TH.UBracket
                                 dom
                                 Language.Haskell.Tools.AST.Ann.SrcTemplateStage,
                               Data.Map.Base.Map
                                 (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                                 [SrcLoc.SrcSpan])>_R)
                          ipv of ds2 { (#,#) ipv2 ipv3 ->
                   case ((((f1 (case ipv3 of wild { (,) a1 s' -> a1 }))
                             `cast`
                           (Control.Monad.Trans.Reader.N:ReaderT[0]
                                <*>_N
                                <[GHC.LanguageExtensions.Type.Extension]>_R
                                <Control.Monad.Trans.State.Lazy.StateT
                                   ExtMap.ExtMap GhcMonad.Ghc>_R
                                <Language.Haskell.Tools.AST.Ann.Ann
                                   Language.Haskell.Tools.AST.Representation.TH.UBracket
                                   dom
                                   Language.Haskell.Tools.AST.Ann.SrcTemplateStage>_N)
                             eta)
                            `cast`
                          (Control.Monad.Trans.State.Lazy.N:StateT[0]
                               <Data.Map.Base.Map
                                  (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                                  [SrcLoc.SrcSpan]>_N
                               <GhcMonad.Ghc>_R
                               <Language.Haskell.Tools.AST.Ann.Ann
                                  Language.Haskell.Tools.AST.Representation.TH.UBracket
                                  dom
                                  Language.Haskell.Tools.AST.Ann.SrcTemplateStage>_N)
                            (case ipv3 of wild { (,) a1 s' -> s' }))
                           `cast`
                         (GhcMonad.N:Ghc[0]
                              <(Language.Haskell.Tools.AST.Ann.Ann
                                  Language.Haskell.Tools.AST.Representation.TH.UBracket
                                  dom
                                  Language.Haskell.Tools.AST.Ann.SrcTemplateStage,
                                Data.Map.Base.Map
                                  (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                                  [SrcLoc.SrcSpan])>_R)
                           s)
                          `cast`
                        (GHC.Types.N:IO[0]
                             <(Language.Haskell.Tools.AST.Ann.Ann
                                 Language.Haskell.Tools.AST.Representation.TH.UBracket
                                 dom
                                 Language.Haskell.Tools.AST.Ann.SrcTemplateStage,
                               Data.Map.Base.Map
                                 (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                                 [SrcLoc.SrcSpan])>_R)
                          ipv2 of ds3 { (#,#) ipv4 ipv5 ->
                   case ((((f2 (case ipv5 of wild { (,) a1 s' -> a1 }))
                             `cast`
                           (Control.Monad.Trans.Reader.N:ReaderT[0]
                                <*>_N
                                <[GHC.LanguageExtensions.Type.Extension]>_R
                                <Control.Monad.Trans.State.Lazy.StateT
                                   ExtMap.ExtMap GhcMonad.Ghc>_R
                                <Language.Haskell.Tools.AST.Ann.Ann
                                   Language.Haskell.Tools.AST.Representation.TH.UBracket
                                   dom
                                   Language.Haskell.Tools.AST.Ann.SrcTemplateStage>_N)
                             eta)
                            `cast`
                          (Control.Monad.Trans.State.Lazy.N:StateT[0]
                               <Data.Map.Base.Map
                                  (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                                  [SrcLoc.SrcSpan]>_N
                               <GhcMonad.Ghc>_R
                               <Language.Haskell.Tools.AST.Ann.Ann
                                  Language.Haskell.Tools.AST.Representation.TH.UBracket
                                  dom
                                  Language.Haskell.Tools.AST.Ann.SrcTemplateStage>_N)
                            (case ipv5 of wild { (,) a1 s' -> s' }))
                           `cast`
                         (GhcMonad.N:Ghc[0]
                              <(Language.Haskell.Tools.AST.Ann.Ann
                                  Language.Haskell.Tools.AST.Representation.TH.UBracket
                                  dom
                                  Language.Haskell.Tools.AST.Ann.SrcTemplateStage,
                                Data.Map.Base.Map
                                  (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                                  [SrcLoc.SrcSpan])>_R)
                           s)
                          `cast`
                        (GHC.Types.N:IO[0]
                             <(Language.Haskell.Tools.AST.Ann.Ann
                                 Language.Haskell.Tools.AST.Representation.TH.UBracket
                                 dom
                                 Language.Haskell.Tools.AST.Ann.SrcTemplateStage,
                               Data.Map.Base.Map
                                 (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                                 [SrcLoc.SrcSpan])>_R)
                          ipv4 of ds4 { (#,#) ipv6 ipv7 ->
                   ((((g (case ipv7 of wild { (,) a1 s' -> a1 }))
                        `cast`
                      (Control.Monad.Trans.Reader.N:ReaderT[0]
                           <*>_N
                           <[GHC.LanguageExtensions.Type.Extension]>_R
                           <Control.Monad.Trans.State.Lazy.StateT
                              ExtMap.ExtMap GhcMonad.Ghc>_R
                           <Language.Haskell.Tools.AST.Ann.Ann
                              Language.Haskell.Tools.AST.Representation.TH.UBracket
                              dom
                              Language.Haskell.Tools.AST.Ann.SrcTemplateStage>_N)
                        eta)
                       `cast`
                     (Control.Monad.Trans.State.Lazy.N:StateT[0]
                          <Data.Map.Base.Map
                             (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                             [SrcLoc.SrcSpan]>_N
                          <GhcMonad.Ghc>_R
                          <Language.Haskell.Tools.AST.Ann.Ann
                             Language.Haskell.Tools.AST.Representation.TH.UBracket
                             dom
                             Language.Haskell.Tools.AST.Ann.SrcTemplateStage>_N)
                       (case ipv7 of wild { (,) a1 s' -> s' }))
                      `cast`
                    (GhcMonad.N:Ghc[0]
                         <(Language.Haskell.Tools.AST.Ann.Ann
                             Language.Haskell.Tools.AST.Representation.TH.UBracket
                             dom
                             Language.Haskell.Tools.AST.Ann.SrcTemplateStage,
                           Data.Map.Base.Map
                             (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                             [SrcLoc.SrcSpan])>_R)
                      s)
                     `cast`
                   (GHC.Types.N:IO[0]
                        <(Language.Haskell.Tools.AST.Ann.Ann
                            Language.Haskell.Tools.AST.Representation.TH.UBracket
                            dom
                            Language.Haskell.Tools.AST.Ann.SrcTemplateStage,
                          Data.Map.Base.Map
                            (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                            [SrcLoc.SrcSpan])>_R)
                     ipv6 } } } })
                    `cast`
                  (Trans
                       (<GhcMonad.Session>_R
                        ->_R Sym (GHC.Types.N:IO[0]
                                      <(Language.Haskell.Tools.AST.Ann.Ann
                                          Language.Haskell.Tools.AST.Representation.TH.UBracket
                                          dom
                                          Language.Haskell.Tools.AST.Ann.SrcTemplateStage,
                                        Data.Map.Base.Map
                                          (ExtMap.LogicalRelation
                                             GHC.LanguageExtensions.Type.Extension)
                                          [SrcLoc.SrcSpan])>_R))
                       (Sym (GhcMonad.N:Ghc[0]
                                 <(Language.Haskell.Tools.AST.Ann.Ann
                                     Language.Haskell.Tools.AST.Representation.TH.UBracket
                                     dom
                                     Language.Haskell.Tools.AST.Ann.SrcTemplateStage,
                                   Data.Map.Base.Map
                                     (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                                     [SrcLoc.SrcSpan])>_R))))
                   `cast`
                 (<Language.Haskell.Tools.AST.ElementTypes.Bracket dom>_R
                  ->_R Trans
                           (<[GHC.LanguageExtensions.Type.Extension]>_R
                            ->_R Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                          <ExtMap.ExtMap>_N
                                          <GhcMonad.Ghc>_R
                                          <Language.Haskell.Tools.AST.Ann.Ann
                                             Language.Haskell.Tools.AST.Representation.TH.UBracket
                                             dom
                                             Language.Haskell.Tools.AST.Ann.SrcTemplateStage>_N))
                           (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                     <*>_N
                                     <[GHC.LanguageExtensions.Type.Extension]>_R
                                     <Control.Monad.Trans.State.Lazy.StateT
                                        ExtMap.ExtMap GhcMonad.Ghc>_R
                                     <Language.Haskell.Tools.AST.Ann.Ann
                                        Language.Haskell.Tools.AST.Representation.TH.UBracket
                                        dom
                                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage>_N))) }) -}
3d40a208db013814d79f84fcf271d7cd
  traverseBracket1 ::
    Control.Reference.Representation.Reference
      (Control.Monad.Trans.Reader.ReaderT
         [GHC.LanguageExtensions.Type.Extension]
         (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc))
      Control.Reference.Representation.MU
      Control.Reference.Representation.MU
      Control.Reference.Representation.MU
      (Language.Haskell.Tools.AST.Ann.Ann
         Language.Haskell.Tools.AST.Representation.TH.UBracket
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
      (Language.Haskell.Tools.AST.Ann.Ann
         Language.Haskell.Tools.AST.Representation.TH.UBracket
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
      (Language.Haskell.Tools.AST.Ann.Ann
         Language.Haskell.Tools.AST.Representation.Decls.UDecl
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
      (Language.Haskell.Tools.AST.Ann.Ann
         Language.Haskell.Tools.AST.Representation.Decls.UDecl
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
  {- Unfolding: (\ @ dom ->
                 case Control.Reference.Combinators.$w&
                        @ (Control.Monad.Trans.Reader.ReaderT
                             [GHC.LanguageExtensions.Type.Extension]
                             (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc))
                        @ Control.Reference.Representation.MU
                        @ Control.Reference.Representation.MU
                        @ Control.Reference.Representation.MU
                        @ (Language.Haskell.Tools.AST.Ann.Ann
                             Language.Haskell.Tools.AST.Representation.TH.UBracket
                             dom
                             Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                        @ (Language.Haskell.Tools.AST.Ann.Ann
                             Language.Haskell.Tools.AST.Representation.TH.UBracket
                             dom
                             Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                        @ (Language.Haskell.Tools.AST.Ann.AnnListG
                             Language.Haskell.Tools.AST.Representation.Decls.UDecl
                             dom
                             Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                        @ (Language.Haskell.Tools.AST.Ann.AnnListG
                             Language.Haskell.Tools.AST.Representation.Decls.UDecl
                             dom
                             Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                        @ (Language.Haskell.Tools.AST.Ann.Ann
                             Language.Haskell.Tools.AST.Representation.Decls.UDecl
                             dom
                             Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                        @ (Language.Haskell.Tools.AST.Ann.Ann
                             Language.Haskell.Tools.AST.Representation.Decls.UDecl
                             dom
                             Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                        (TraverseAST.traverseBracket3 @ dom)
                        (TraverseAST.traverseBracket2
                           @ dom) of ww { (#,,,,,#) ww1 ww2 ww3 ww4 ww5 ww6 ->
                 Control.Reference.Representation.Reference
                   @ (Control.Monad.Trans.Reader.ReaderT
                        [GHC.LanguageExtensions.Type.Extension]
                        (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc))
                   @ Control.Reference.Representation.MU
                   @ Control.Reference.Representation.MU
                   @ Control.Reference.Representation.MU
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        Language.Haskell.Tools.AST.Representation.TH.UBracket
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        Language.Haskell.Tools.AST.Representation.TH.UBracket
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        Language.Haskell.Tools.AST.Representation.Decls.UDecl
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        Language.Haskell.Tools.AST.Representation.Decls.UDecl
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   ww1
                   ww2
                   ww3
                   ww4
                   ww5
                   ww6 }) -}
aa1b75a94b7c07643eea959244a2f385
  traverseBracket2 ::
    Control.Reference.Representation.Reference
      (Control.Monad.Trans.Reader.ReaderT
         [GHC.LanguageExtensions.Type.Extension]
         (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc))
      Control.Reference.Representation.MU
      Control.Reference.Representation.MU
      Control.Reference.Representation.MU
      (Language.Haskell.Tools.AST.Ann.AnnListG
         Language.Haskell.Tools.AST.Representation.Decls.UDecl
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
      (Language.Haskell.Tools.AST.Ann.AnnListG
         Language.Haskell.Tools.AST.Representation.Decls.UDecl
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
      (Language.Haskell.Tools.AST.Ann.Ann
         Language.Haskell.Tools.AST.Representation.Decls.UDecl
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
      (Language.Haskell.Tools.AST.Ann.Ann
         Language.Haskell.Tools.AST.Representation.Decls.UDecl
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
  {- Unfolding: (\ @ dom ->
                 case Language.Haskell.Tools.AST.Ann.$wannList
                        @ Language.Haskell.Tools.AST.Representation.Decls.UDecl
                        @ dom
                        @ Language.Haskell.Tools.AST.Ann.SrcTemplateStage
                        @ (Control.Monad.Trans.Reader.ReaderT
                             [GHC.LanguageExtensions.Type.Extension]
                             (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc))
                        @ Control.Reference.Representation.MU
                        TraverseAST.$s$fRefMonadswr
                        TraverseAST.$sannList1
                          `cast`
                        (Sym (Control.Instances.Morph.N:Morph[0]
                                  <[]>_N
                                  <Data.Proxy.Proxy>_N)) of ww { (#,,,,,#) ww1 ww2 ww3 ww4 ww5 ww6 ->
                 Control.Reference.Representation.Reference
                   @ (Control.Monad.Trans.Reader.ReaderT
                        [GHC.LanguageExtensions.Type.Extension]
                        (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc))
                   @ Control.Reference.Representation.MU
                   @ Control.Reference.Representation.MU
                   @ Control.Reference.Representation.MU
                   @ (Language.Haskell.Tools.AST.Ann.AnnListG
                        Language.Haskell.Tools.AST.Representation.Decls.UDecl
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   @ (Language.Haskell.Tools.AST.Ann.AnnListG
                        Language.Haskell.Tools.AST.Representation.Decls.UDecl
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        Language.Haskell.Tools.AST.Representation.Decls.UDecl
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        Language.Haskell.Tools.AST.Representation.Decls.UDecl
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   ww1
                   ww2
                   ww3
                   ww4
                   ww5
                   ww6 }) -}
5b4e2b75a599c8bf39ff57b2553b9994
  traverseBracket3 ::
    Control.Reference.Representation.Reference
      (Control.Monad.Trans.Reader.ReaderT
         [GHC.LanguageExtensions.Type.Extension]
         (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc))
      Control.Reference.Representation.MU
      Control.Reference.Representation.MU
      Control.Reference.Representation.MU
      (Language.Haskell.Tools.AST.Ann.Ann
         Language.Haskell.Tools.AST.Representation.TH.UBracket
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
      (Language.Haskell.Tools.AST.Ann.Ann
         Language.Haskell.Tools.AST.Representation.TH.UBracket
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
      (Language.Haskell.Tools.AST.Ann.AnnListG
         Language.Haskell.Tools.AST.Representation.Decls.UDecl
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
      (Language.Haskell.Tools.AST.Ann.AnnListG
         Language.Haskell.Tools.AST.Representation.Decls.UDecl
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
  {- Unfolding: (\ @ dom ->
                 case Language.Haskell.Tools.AST.References.$wbracketDecl
                        @ dom
                        @ Language.Haskell.Tools.AST.Ann.SrcTemplateStage
                        @ (Control.Monad.Trans.Reader.ReaderT
                             [GHC.LanguageExtensions.Type.Extension]
                             (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc))
                        @ Control.Reference.Representation.MU
                        (TraverseAST.$s$fMonadReaderT
                           @ [GHC.LanguageExtensions.Type.Extension])
                        Data.Proxy.$fMonadPlusProxy
                        TraverseAST.$sannJust1
                          `cast`
                        (Sym (Control.Instances.Morph.N:Morph[0]
                                  <GHC.Base.Maybe>_N
                                  <Data.Proxy.Proxy>_N)) of ww { (#,,,,,#) ww1 ww2 ww3 ww4 ww5 ww6 ->
                 Control.Reference.Representation.Reference
                   @ (Control.Monad.Trans.Reader.ReaderT
                        [GHC.LanguageExtensions.Type.Extension]
                        (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc))
                   @ Control.Reference.Representation.MU
                   @ Control.Reference.Representation.MU
                   @ Control.Reference.Representation.MU
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        Language.Haskell.Tools.AST.Representation.TH.UBracket
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        Language.Haskell.Tools.AST.Representation.TH.UBracket
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   @ (Language.Haskell.Tools.AST.Ann.AnnListG
                        Language.Haskell.Tools.AST.Representation.Decls.UDecl
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   @ (Language.Haskell.Tools.AST.Ann.AnnListG
                        Language.Haskell.Tools.AST.Representation.Decls.UDecl
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   ww1
                   ww2
                   ww3
                   ww4
                   ww5
                   ww6 }) -}
aeea2cfc117b413832a52ba6bf12a465
  traverseBracket4 ::
    Control.Reference.Representation.Reference
      (Control.Monad.Trans.Reader.ReaderT
         [GHC.LanguageExtensions.Type.Extension]
         (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc))
      Control.Reference.Representation.MU
      Control.Reference.Representation.MU
      Control.Reference.Representation.MU
      (Language.Haskell.Tools.AST.Ann.Ann
         Language.Haskell.Tools.AST.Representation.TH.UBracket
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
      (Language.Haskell.Tools.AST.Ann.Ann
         Language.Haskell.Tools.AST.Representation.TH.UBracket
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
      (Language.Haskell.Tools.AST.Ann.Ann
         Language.Haskell.Tools.AST.Representation.Types.UType
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
      (Language.Haskell.Tools.AST.Ann.Ann
         Language.Haskell.Tools.AST.Representation.Types.UType
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
  {- Unfolding: (\ @ dom ->
                 case Language.Haskell.Tools.AST.References.$wbracketType
                        @ dom
                        @ Language.Haskell.Tools.AST.Ann.SrcTemplateStage
                        @ (Control.Monad.Trans.Reader.ReaderT
                             [GHC.LanguageExtensions.Type.Extension]
                             (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc))
                        @ Control.Reference.Representation.MU
                        (TraverseAST.$s$fMonadReaderT
                           @ [GHC.LanguageExtensions.Type.Extension])
                        Data.Proxy.$fMonadPlusProxy
                        TraverseAST.$sannJust1
                          `cast`
                        (Sym (Control.Instances.Morph.N:Morph[0]
                                  <GHC.Base.Maybe>_N
                                  <Data.Proxy.Proxy>_N)) of ww { (#,,,,,#) ww1 ww2 ww3 ww4 ww5 ww6 ->
                 Control.Reference.Representation.Reference
                   @ (Control.Monad.Trans.Reader.ReaderT
                        [GHC.LanguageExtensions.Type.Extension]
                        (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc))
                   @ Control.Reference.Representation.MU
                   @ Control.Reference.Representation.MU
                   @ Control.Reference.Representation.MU
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        Language.Haskell.Tools.AST.Representation.TH.UBracket
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        Language.Haskell.Tools.AST.Representation.TH.UBracket
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        Language.Haskell.Tools.AST.Representation.Types.UType
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        Language.Haskell.Tools.AST.Representation.Types.UType
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   ww1
                   ww2
                   ww3
                   ww4
                   ww5
                   ww6 }) -}
bd28cab827fbba75c01173618441ec4f
  traverseBracket5 ::
    Control.Reference.Representation.Reference
      (Control.Monad.Trans.Reader.ReaderT
         [GHC.LanguageExtensions.Type.Extension]
         (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc))
      Control.Reference.Representation.MU
      Control.Reference.Representation.MU
      Control.Reference.Representation.MU
      (Language.Haskell.Tools.AST.Ann.Ann
         Language.Haskell.Tools.AST.Representation.TH.UBracket
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
      (Language.Haskell.Tools.AST.Ann.Ann
         Language.Haskell.Tools.AST.Representation.TH.UBracket
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
      (Language.Haskell.Tools.AST.Ann.Ann
         Language.Haskell.Tools.AST.Representation.Patterns.UPattern
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
      (Language.Haskell.Tools.AST.Ann.Ann
         Language.Haskell.Tools.AST.Representation.Patterns.UPattern
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
  {- Unfolding: (\ @ dom ->
                 case Language.Haskell.Tools.AST.References.$wbracketPattern
                        @ dom
                        @ Language.Haskell.Tools.AST.Ann.SrcTemplateStage
                        @ (Control.Monad.Trans.Reader.ReaderT
                             [GHC.LanguageExtensions.Type.Extension]
                             (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc))
                        @ Control.Reference.Representation.MU
                        (TraverseAST.$s$fMonadReaderT
                           @ [GHC.LanguageExtensions.Type.Extension])
                        Data.Proxy.$fMonadPlusProxy
                        TraverseAST.$sannJust1
                          `cast`
                        (Sym (Control.Instances.Morph.N:Morph[0]
                                  <GHC.Base.Maybe>_N
                                  <Data.Proxy.Proxy>_N)) of ww { (#,,,,,#) ww1 ww2 ww3 ww4 ww5 ww6 ->
                 Control.Reference.Representation.Reference
                   @ (Control.Monad.Trans.Reader.ReaderT
                        [GHC.LanguageExtensions.Type.Extension]
                        (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc))
                   @ Control.Reference.Representation.MU
                   @ Control.Reference.Representation.MU
                   @ Control.Reference.Representation.MU
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        Language.Haskell.Tools.AST.Representation.TH.UBracket
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        Language.Haskell.Tools.AST.Representation.TH.UBracket
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        Language.Haskell.Tools.AST.Representation.Patterns.UPattern
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        Language.Haskell.Tools.AST.Representation.Patterns.UPattern
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   ww1
                   ww2
                   ww3
                   ww4
                   ww5
                   ww6 }) -}
7b9b609a943bb776c6808db970533995
  traverseBracket6 ::
    Control.Reference.Representation.Reference
      (Control.Monad.Trans.Reader.ReaderT
         [GHC.LanguageExtensions.Type.Extension]
         (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc))
      Control.Reference.Representation.MU
      Control.Reference.Representation.MU
      Control.Reference.Representation.MU
      (Language.Haskell.Tools.AST.Ann.Ann
         Language.Haskell.Tools.AST.Representation.TH.UBracket
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
      (Language.Haskell.Tools.AST.Ann.Ann
         Language.Haskell.Tools.AST.Representation.TH.UBracket
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
      (Language.Haskell.Tools.AST.Ann.Ann
         Language.Haskell.Tools.AST.Representation.Exprs.UExpr
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
      (Language.Haskell.Tools.AST.Ann.Ann
         Language.Haskell.Tools.AST.Representation.Exprs.UExpr
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
  {- Unfolding: (\ @ dom ->
                 case Language.Haskell.Tools.AST.References.$wbracketExpr
                        @ dom
                        @ Language.Haskell.Tools.AST.Ann.SrcTemplateStage
                        @ (Control.Monad.Trans.Reader.ReaderT
                             [GHC.LanguageExtensions.Type.Extension]
                             (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc))
                        @ Control.Reference.Representation.MU
                        (TraverseAST.$s$fMonadReaderT
                           @ [GHC.LanguageExtensions.Type.Extension])
                        Data.Proxy.$fMonadPlusProxy
                        TraverseAST.$sannJust1
                          `cast`
                        (Sym (Control.Instances.Morph.N:Morph[0]
                                  <GHC.Base.Maybe>_N
                                  <Data.Proxy.Proxy>_N)) of ww { (#,,,,,#) ww1 ww2 ww3 ww4 ww5 ww6 ->
                 Control.Reference.Representation.Reference
                   @ (Control.Monad.Trans.Reader.ReaderT
                        [GHC.LanguageExtensions.Type.Extension]
                        (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc))
                   @ Control.Reference.Representation.MU
                   @ Control.Reference.Representation.MU
                   @ Control.Reference.Representation.MU
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        Language.Haskell.Tools.AST.Representation.TH.UBracket
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        Language.Haskell.Tools.AST.Representation.TH.UBracket
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        Language.Haskell.Tools.AST.Representation.Exprs.UExpr
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        Language.Haskell.Tools.AST.Representation.Exprs.UExpr
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   ww1
                   ww2
                   ww3
                   ww4
                   ww5
                   ww6 }) -}
8e8917e80aa0d8907f32ee14a04693d3
  traverseCaseRhs ::
    ExtMonad.CheckUNode uexpr
    -> ExtMonad.CheckNode (TraverseAST.CaseRhsG uexpr)
  {- Arity: 2,
     Strictness: <L,C(U)><S(S(LLS(S)LLLLLLLLLL)L),U(U(U,U,U(U),U,U,U,U,U,U,U,U,U,U),U)>,
     Unfolding: (\ @ (uexpr :: GHC.Types.*
                               -> GHC.Types.* -> GHC.Types.*)
                   (dk :: ExtMonad.CheckUNode uexpr)
                   @ dom
                   ($d(%,%) :: ExtMonad.ExtDomain dom) ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Language.Haskell.Tools.AST.Ann.SemanticInfo'
                             dom Language.Haskell.Tools.AST.Ann.SameInfoDefaultCls)
                        @ Language.Haskell.Tools.AST.SemaInfoTypes.NoSemanticInfo
                        (Language.Haskell.Tools.AST.Ann.$p3Domain
                           @ dom
                           (GHC.Classes.$p1(%,%)
                              @ (Language.Haskell.Tools.AST.Ann.Domain dom)
                              @ (Language.Haskell.Tools.AST.SemaInfoClasses.HasNameInfo'
                                   (Language.Haskell.Tools.AST.Ann.SemanticInfo
                                      dom
                                      Language.Haskell.Tools.AST.Representation.Names.UQualifiedName))
                              $d(%,%)))
                          `cast`
                        (Data.Type.Equality.N:~[0]
                             <*>_N <Language.Haskell.Tools.AST.Ann.SemanticInfo'
                                      dom
                                      Language.Haskell.Tools.AST.Ann.SameInfoDefaultCls>_N <Language.Haskell.Tools.AST.SemaInfoTypes.NoSemanticInfo>_N) of cobox0 { DEFAULT ->
                 let {
                   f :: Language.Haskell.Tools.AST.Ann.Ann
                          (Language.Haskell.Tools.AST.Representation.Exprs.UCaseRhs' uexpr)
                          dom
                          Language.Haskell.Tools.AST.Ann.SrcTemplateStage
                        -> Control.Monad.Trans.Reader.ReaderT
                             [GHC.LanguageExtensions.Type.Extension]
                             (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc)
                             (Language.Haskell.Tools.AST.Ann.Ann
                                (Language.Haskell.Tools.AST.Representation.Exprs.UCaseRhs' uexpr)
                                dom
                                Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   = case TraverseAST.traverseCaseRhs4
                            @ dom
                            @ uexpr of wild { Control.Reference.Representation.Reference ds1 ds2 ds3 ds4 ds5 ds6 ->
                     ds3 (dk @ dom $d(%,%)) }
                 } in
                 let {
                   g :: Language.Haskell.Tools.AST.Ann.Ann
                          (Language.Haskell.Tools.AST.Representation.Exprs.UCaseRhs' uexpr)
                          dom
                          Language.Haskell.Tools.AST.Ann.SrcTemplateStage
                        -> Control.Monad.Trans.Reader.ReaderT
                             [GHC.LanguageExtensions.Type.Extension]
                             (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc)
                             (Language.Haskell.Tools.AST.Ann.Ann
                                (Language.Haskell.Tools.AST.Representation.Exprs.UCaseRhs' uexpr)
                                dom
                                Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   = case TraverseAST.traverseCaseRhs1
                            @ dom
                            @ uexpr of wild { Control.Reference.Representation.Reference ds1 ds2 ds3 ds4 ds5 ds6 ->
                     ds3
                       (TraverseAST.traverseGuardedCaseRhs
                          @ uexpr
                          (\ @ dom1 ($d(%,%)1 :: ExtMonad.ExtDomain dom1)[OneShot] ->
                           case GHC.Types.HEq_sc
                                  @ *
                                  @ *
                                  @ (Language.Haskell.Tools.AST.Ann.SemanticInfo'
                                       dom1 Language.Haskell.Tools.AST.Ann.SameInfoDefaultCls)
                                  @ Language.Haskell.Tools.AST.SemaInfoTypes.NoSemanticInfo
                                  (Language.Haskell.Tools.AST.Ann.$p3Domain
                                     @ dom1
                                     (GHC.Classes.$p1(%,%)
                                        @ (Language.Haskell.Tools.AST.Ann.Domain dom1)
                                        @ (Language.Haskell.Tools.AST.SemaInfoClasses.HasNameInfo'
                                             (Language.Haskell.Tools.AST.Ann.SemanticInfo
                                                dom1
                                                Language.Haskell.Tools.AST.Representation.Names.UQualifiedName))
                                        $d(%,%)1))
                                    `cast`
                                  (Data.Type.Equality.N:~[0]
                                       <*>_N <Language.Haskell.Tools.AST.Ann.SemanticInfo'
                                                dom1
                                                Language.Haskell.Tools.AST.Ann.SameInfoDefaultCls>_N <Language.Haskell.Tools.AST.SemaInfoTypes.NoSemanticInfo>_N) of cobox1 { DEFAULT ->
                           dk @ dom1 $d(%,%)1 })
                          @ dom
                          $d(%,%)) }
                 } in
                 \ (x :: Language.Haskell.Tools.AST.Ann.Ann
                           (Language.Haskell.Tools.AST.Representation.Exprs.UCaseRhs' uexpr)
                           dom
                           Language.Haskell.Tools.AST.Ann.SrcTemplateStage) ->
                 let {
                   m1 :: Control.Monad.Trans.Reader.ReaderT
                           [GHC.LanguageExtensions.Type.Extension]
                           (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc)
                           (Language.Haskell.Tools.AST.Ann.Ann
                              (Language.Haskell.Tools.AST.Representation.Exprs.UCaseRhs' uexpr)
                              dom
                              Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   = f x
                 } in
                 (\ (r1 :: [GHC.LanguageExtensions.Type.Extension]) ->
                  let {
                    m2 :: Control.Monad.Trans.State.Lazy.StateT
                            (Data.Map.Base.Map
                               (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                               [SrcLoc.SrcSpan])
                            GhcMonad.Ghc
                            (Language.Haskell.Tools.AST.Ann.Ann
                               (Language.Haskell.Tools.AST.Representation.Exprs.UCaseRhs' uexpr)
                               dom
                               Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                    = m1
                        `cast`
                      (Control.Monad.Trans.Reader.N:ReaderT[0]
                           <*>_N
                           <[GHC.LanguageExtensions.Type.Extension]>_R
                           <Control.Monad.Trans.State.Lazy.StateT
                              ExtMap.ExtMap GhcMonad.Ghc>_R
                           <Language.Haskell.Tools.AST.Ann.Ann
                              (Language.Haskell.Tools.AST.Representation.Exprs.UCaseRhs' uexpr)
                              dom
                              Language.Haskell.Tools.AST.Ann.SrcTemplateStage>_N)
                        r1
                  } in
                  (\ (s1 :: Data.Map.Base.Map
                              (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                              [SrcLoc.SrcSpan]) ->
                   let {
                     m :: GhcMonad.Ghc
                            (Language.Haskell.Tools.AST.Ann.Ann
                               (Language.Haskell.Tools.AST.Representation.Exprs.UCaseRhs' uexpr)
                               dom
                               Language.Haskell.Tools.AST.Ann.SrcTemplateStage,
                             Data.Map.Base.Map
                               (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                               [SrcLoc.SrcSpan])
                     = m2
                         `cast`
                       (Control.Monad.Trans.State.Lazy.N:StateT[0]
                            <Data.Map.Base.Map
                               (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                               [SrcLoc.SrcSpan]>_N
                            <GhcMonad.Ghc>_R
                            <Language.Haskell.Tools.AST.Ann.Ann
                               (Language.Haskell.Tools.AST.Representation.Exprs.UCaseRhs' uexpr)
                               dom
                               Language.Haskell.Tools.AST.Ann.SrcTemplateStage>_N)
                         s1
                   } in
                   (\ (s :: GhcMonad.Session)
                      (s2 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                    case (m `cast`
                          (GhcMonad.N:Ghc[0]
                               <(Language.Haskell.Tools.AST.Ann.Ann
                                   (Language.Haskell.Tools.AST.Representation.Exprs.UCaseRhs' uexpr)
                                   dom
                                   Language.Haskell.Tools.AST.Ann.SrcTemplateStage,
                                 Data.Map.Base.Map
                                   (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                                   [SrcLoc.SrcSpan])>_R)
                            s)
                           `cast`
                         (GHC.Types.N:IO[0]
                              <(Language.Haskell.Tools.AST.Ann.Ann
                                  (Language.Haskell.Tools.AST.Representation.Exprs.UCaseRhs' uexpr)
                                  dom
                                  Language.Haskell.Tools.AST.Ann.SrcTemplateStage,
                                Data.Map.Base.Map
                                  (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                                  [SrcLoc.SrcSpan])>_R)
                           s2 of ds1 { (#,#) ipv ipv1 ->
                    ((((g (case ipv1 of wild { (,) a1 s' -> a1 }))
                         `cast`
                       (Control.Monad.Trans.Reader.N:ReaderT[0]
                            <*>_N
                            <[GHC.LanguageExtensions.Type.Extension]>_R
                            <Control.Monad.Trans.State.Lazy.StateT
                               ExtMap.ExtMap GhcMonad.Ghc>_R
                            <Language.Haskell.Tools.AST.Ann.Ann
                               (Language.Haskell.Tools.AST.Representation.Exprs.UCaseRhs' uexpr)
                               dom
                               Language.Haskell.Tools.AST.Ann.SrcTemplateStage>_N)
                         r1)
                        `cast`
                      (Control.Monad.Trans.State.Lazy.N:StateT[0]
                           <Data.Map.Base.Map
                              (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                              [SrcLoc.SrcSpan]>_N
                           <GhcMonad.Ghc>_R
                           <Language.Haskell.Tools.AST.Ann.Ann
                              (Language.Haskell.Tools.AST.Representation.Exprs.UCaseRhs' uexpr)
                              dom
                              Language.Haskell.Tools.AST.Ann.SrcTemplateStage>_N)
                        (case ipv1 of wild { (,) a1 s' -> s' }))
                       `cast`
                     (GhcMonad.N:Ghc[0]
                          <(Language.Haskell.Tools.AST.Ann.Ann
                              (Language.Haskell.Tools.AST.Representation.Exprs.UCaseRhs' uexpr)
                              dom
                              Language.Haskell.Tools.AST.Ann.SrcTemplateStage,
                            Data.Map.Base.Map
                              (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                              [SrcLoc.SrcSpan])>_R)
                       s)
                      `cast`
                    (GHC.Types.N:IO[0]
                         <(Language.Haskell.Tools.AST.Ann.Ann
                             (Language.Haskell.Tools.AST.Representation.Exprs.UCaseRhs' uexpr)
                             dom
                             Language.Haskell.Tools.AST.Ann.SrcTemplateStage,
                           Data.Map.Base.Map
                             (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                             [SrcLoc.SrcSpan])>_R)
                      ipv })
                     `cast`
                   (Trans
                        (<GhcMonad.Session>_R
                         ->_R Sym (GHC.Types.N:IO[0]
                                       <(Language.Haskell.Tools.AST.Ann.Ann
                                           (Language.Haskell.Tools.AST.Representation.Exprs.UCaseRhs'
                                              uexpr)
                                           dom
                                           Language.Haskell.Tools.AST.Ann.SrcTemplateStage,
                                         Data.Map.Base.Map
                                           (ExtMap.LogicalRelation
                                              GHC.LanguageExtensions.Type.Extension)
                                           [SrcLoc.SrcSpan])>_R))
                        (Sym (GhcMonad.N:Ghc[0]
                                  <(Language.Haskell.Tools.AST.Ann.Ann
                                      (Language.Haskell.Tools.AST.Representation.Exprs.UCaseRhs'
                                         uexpr)
                                      dom
                                      Language.Haskell.Tools.AST.Ann.SrcTemplateStage,
                                    Data.Map.Base.Map
                                      (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                                      [SrcLoc.SrcSpan])>_R))))
                    `cast`
                  (Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                            <Data.Map.Base.Map
                               (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                               [SrcLoc.SrcSpan]>_N
                            <GhcMonad.Ghc>_R
                            <Language.Haskell.Tools.AST.Ann.Ann
                               (Language.Haskell.Tools.AST.Representation.Exprs.UCaseRhs' uexpr)
                               dom
                               Language.Haskell.Tools.AST.Ann.SrcTemplateStage>_N)))
                   `cast`
                 (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                           <*>_N
                           <[GHC.LanguageExtensions.Type.Extension]>_R
                           <Control.Monad.Trans.State.Lazy.StateT
                              ExtMap.ExtMap GhcMonad.Ghc>_R
                           <Language.Haskell.Tools.AST.Ann.Ann
                              (Language.Haskell.Tools.AST.Representation.Exprs.UCaseRhs' uexpr)
                              dom
                              Language.Haskell.Tools.AST.Ann.SrcTemplateStage>_N)) }) -}
937f3ed70692fcba4055f6ebc028f54c
  traverseCaseRhs1 ::
    Control.Reference.Representation.Reference
      (Control.Monad.Trans.Reader.ReaderT
         [GHC.LanguageExtensions.Type.Extension]
         (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc))
      Control.Reference.Representation.MU
      Control.Reference.Representation.MU
      Control.Reference.Representation.MU
      (Language.Haskell.Tools.AST.Ann.Ann
         (Language.Haskell.Tools.AST.Representation.Exprs.UCaseRhs' uexpr)
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
      (Language.Haskell.Tools.AST.Ann.Ann
         (Language.Haskell.Tools.AST.Representation.Exprs.UCaseRhs' uexpr)
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
      (Language.Haskell.Tools.AST.Ann.Ann
         (Language.Haskell.Tools.AST.Representation.Exprs.UGuardedCaseRhs'
            uexpr)
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
      (Language.Haskell.Tools.AST.Ann.Ann
         (Language.Haskell.Tools.AST.Representation.Exprs.UGuardedCaseRhs'
            uexpr)
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
  {- Unfolding: (\ @ dom
                   @ (uexpr :: GHC.Types.* -> GHC.Types.* -> GHC.Types.*) ->
                 case Control.Reference.Combinators.$w&
                        @ (Control.Monad.Trans.Reader.ReaderT
                             [GHC.LanguageExtensions.Type.Extension]
                             (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc))
                        @ Control.Reference.Representation.MU
                        @ Control.Reference.Representation.MU
                        @ Control.Reference.Representation.MU
                        @ (Language.Haskell.Tools.AST.Ann.Ann
                             (Language.Haskell.Tools.AST.Representation.Exprs.UCaseRhs' uexpr)
                             dom
                             Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                        @ (Language.Haskell.Tools.AST.Ann.Ann
                             (Language.Haskell.Tools.AST.Representation.Exprs.UCaseRhs' uexpr)
                             dom
                             Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                        @ (Language.Haskell.Tools.AST.Ann.AnnListG
                             (Language.Haskell.Tools.AST.Representation.Exprs.UGuardedCaseRhs'
                                uexpr)
                             dom
                             Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                        @ (Language.Haskell.Tools.AST.Ann.AnnListG
                             (Language.Haskell.Tools.AST.Representation.Exprs.UGuardedCaseRhs'
                                uexpr)
                             dom
                             Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                        @ (Language.Haskell.Tools.AST.Ann.Ann
                             (Language.Haskell.Tools.AST.Representation.Exprs.UGuardedCaseRhs'
                                uexpr)
                             dom
                             Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                        @ (Language.Haskell.Tools.AST.Ann.Ann
                             (Language.Haskell.Tools.AST.Representation.Exprs.UGuardedCaseRhs'
                                uexpr)
                             dom
                             Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                        (TraverseAST.traverseCaseRhs3 @ uexpr @ dom)
                        (TraverseAST.traverseCaseRhs2
                           @ uexpr
                           @ dom) of ww { (#,,,,,#) ww1 ww2 ww3 ww4 ww5 ww6 ->
                 Control.Reference.Representation.Reference
                   @ (Control.Monad.Trans.Reader.ReaderT
                        [GHC.LanguageExtensions.Type.Extension]
                        (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc))
                   @ Control.Reference.Representation.MU
                   @ Control.Reference.Representation.MU
                   @ Control.Reference.Representation.MU
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        (Language.Haskell.Tools.AST.Representation.Exprs.UCaseRhs' uexpr)
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        (Language.Haskell.Tools.AST.Representation.Exprs.UCaseRhs' uexpr)
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        (Language.Haskell.Tools.AST.Representation.Exprs.UGuardedCaseRhs'
                           uexpr)
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        (Language.Haskell.Tools.AST.Representation.Exprs.UGuardedCaseRhs'
                           uexpr)
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   ww1
                   ww2
                   ww3
                   ww4
                   ww5
                   ww6 }) -}
293bd9274e758fda72ffd8dcf54e7c8d
  traverseCaseRhs2 ::
    Control.Reference.Representation.Reference
      (Control.Monad.Trans.Reader.ReaderT
         [GHC.LanguageExtensions.Type.Extension]
         (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc))
      Control.Reference.Representation.MU
      Control.Reference.Representation.MU
      Control.Reference.Representation.MU
      (Language.Haskell.Tools.AST.Ann.AnnListG
         (Language.Haskell.Tools.AST.Representation.Exprs.UGuardedCaseRhs'
            uexpr)
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
      (Language.Haskell.Tools.AST.Ann.AnnListG
         (Language.Haskell.Tools.AST.Representation.Exprs.UGuardedCaseRhs'
            uexpr)
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
      (Language.Haskell.Tools.AST.Ann.Ann
         (Language.Haskell.Tools.AST.Representation.Exprs.UGuardedCaseRhs'
            uexpr)
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
      (Language.Haskell.Tools.AST.Ann.Ann
         (Language.Haskell.Tools.AST.Representation.Exprs.UGuardedCaseRhs'
            uexpr)
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
  {- Unfolding: (\ @ (uexpr :: GHC.Types.*
                               -> GHC.Types.* -> GHC.Types.*)
                   @ dom ->
                 case Language.Haskell.Tools.AST.Ann.$wannList
                        @ (Language.Haskell.Tools.AST.Representation.Exprs.UGuardedCaseRhs'
                             uexpr)
                        @ dom
                        @ Language.Haskell.Tools.AST.Ann.SrcTemplateStage
                        @ (Control.Monad.Trans.Reader.ReaderT
                             [GHC.LanguageExtensions.Type.Extension]
                             (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc))
                        @ Control.Reference.Representation.MU
                        TraverseAST.$s$fRefMonadswr
                        TraverseAST.$sannList1
                          `cast`
                        (Sym (Control.Instances.Morph.N:Morph[0]
                                  <[]>_N
                                  <Data.Proxy.Proxy>_N)) of ww { (#,,,,,#) ww1 ww2 ww3 ww4 ww5 ww6 ->
                 Control.Reference.Representation.Reference
                   @ (Control.Monad.Trans.Reader.ReaderT
                        [GHC.LanguageExtensions.Type.Extension]
                        (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc))
                   @ Control.Reference.Representation.MU
                   @ Control.Reference.Representation.MU
                   @ Control.Reference.Representation.MU
                   @ (Language.Haskell.Tools.AST.Ann.AnnListG
                        (Language.Haskell.Tools.AST.Representation.Exprs.UGuardedCaseRhs'
                           uexpr)
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   @ (Language.Haskell.Tools.AST.Ann.AnnListG
                        (Language.Haskell.Tools.AST.Representation.Exprs.UGuardedCaseRhs'
                           uexpr)
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        (Language.Haskell.Tools.AST.Representation.Exprs.UGuardedCaseRhs'
                           uexpr)
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        (Language.Haskell.Tools.AST.Representation.Exprs.UGuardedCaseRhs'
                           uexpr)
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   ww1
                   ww2
                   ww3
                   ww4
                   ww5
                   ww6 }) -}
7ca708a2005bb37625e6ccebf3050760
  traverseCaseRhs3 ::
    Control.Reference.Representation.Reference
      (Control.Monad.Trans.Reader.ReaderT
         [GHC.LanguageExtensions.Type.Extension]
         (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc))
      Control.Reference.Representation.MU
      Control.Reference.Representation.MU
      Control.Reference.Representation.MU
      (Language.Haskell.Tools.AST.Ann.Ann
         (Language.Haskell.Tools.AST.Representation.Exprs.UCaseRhs' uexpr)
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
      (Language.Haskell.Tools.AST.Ann.Ann
         (Language.Haskell.Tools.AST.Representation.Exprs.UCaseRhs' uexpr)
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
      (Language.Haskell.Tools.AST.Ann.AnnListG
         (Language.Haskell.Tools.AST.Representation.Exprs.UGuardedCaseRhs'
            uexpr)
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
      (Language.Haskell.Tools.AST.Ann.AnnListG
         (Language.Haskell.Tools.AST.Representation.Exprs.UGuardedCaseRhs'
            uexpr)
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
  {- Unfolding: (\ @ (uexpr :: GHC.Types.*
                               -> GHC.Types.* -> GHC.Types.*)
                   @ dom ->
                 case Language.Haskell.Tools.AST.References.$wrhsCaseGuards
                        @ uexpr
                        @ dom
                        @ Language.Haskell.Tools.AST.Ann.SrcTemplateStage
                        @ (Control.Monad.Trans.Reader.ReaderT
                             [GHC.LanguageExtensions.Type.Extension]
                             (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc))
                        @ Control.Reference.Representation.MU
                        (TraverseAST.$s$fMonadReaderT
                           @ [GHC.LanguageExtensions.Type.Extension])
                        Data.Proxy.$fMonadPlusProxy
                        TraverseAST.$sannJust1
                          `cast`
                        (Sym (Control.Instances.Morph.N:Morph[0]
                                  <GHC.Base.Maybe>_N
                                  <Data.Proxy.Proxy>_N)) of ww { (#,,,,,#) ww1 ww2 ww3 ww4 ww5 ww6 ->
                 Control.Reference.Representation.Reference
                   @ (Control.Monad.Trans.Reader.ReaderT
                        [GHC.LanguageExtensions.Type.Extension]
                        (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc))
                   @ Control.Reference.Representation.MU
                   @ Control.Reference.Representation.MU
                   @ Control.Reference.Representation.MU
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        (Language.Haskell.Tools.AST.Representation.Exprs.UCaseRhs' uexpr)
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        (Language.Haskell.Tools.AST.Representation.Exprs.UCaseRhs' uexpr)
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   @ (Language.Haskell.Tools.AST.Ann.AnnListG
                        (Language.Haskell.Tools.AST.Representation.Exprs.UGuardedCaseRhs'
                           uexpr)
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   @ (Language.Haskell.Tools.AST.Ann.AnnListG
                        (Language.Haskell.Tools.AST.Representation.Exprs.UGuardedCaseRhs'
                           uexpr)
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   ww1
                   ww2
                   ww3
                   ww4
                   ww5
                   ww6 }) -}
9701237c5fa9a87b49817f3004bc4435
  traverseCaseRhs4 ::
    Control.Reference.Representation.Reference
      (Control.Monad.Trans.Reader.ReaderT
         [GHC.LanguageExtensions.Type.Extension]
         (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc))
      Control.Reference.Representation.MU
      Control.Reference.Representation.MU
      Control.Reference.Representation.MU
      (Language.Haskell.Tools.AST.Ann.Ann
         (Language.Haskell.Tools.AST.Representation.Exprs.UCaseRhs' uexpr)
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
      (Language.Haskell.Tools.AST.Ann.Ann
         (Language.Haskell.Tools.AST.Representation.Exprs.UCaseRhs' uexpr)
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
      (Language.Haskell.Tools.AST.Ann.Ann
         uexpr dom Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
      (Language.Haskell.Tools.AST.Ann.Ann
         uexpr dom Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
  {- Unfolding: (\ @ dom
                   @ (uexpr :: GHC.Types.* -> GHC.Types.* -> GHC.Types.*) ->
                 case Language.Haskell.Tools.AST.References.$wrhsCaseExpr
                        @ uexpr
                        @ dom
                        @ Language.Haskell.Tools.AST.Ann.SrcTemplateStage
                        @ (Control.Monad.Trans.Reader.ReaderT
                             [GHC.LanguageExtensions.Type.Extension]
                             (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc))
                        @ Control.Reference.Representation.MU
                        (TraverseAST.$s$fMonadReaderT
                           @ [GHC.LanguageExtensions.Type.Extension])
                        Data.Proxy.$fMonadPlusProxy
                        TraverseAST.$sannJust1
                          `cast`
                        (Sym (Control.Instances.Morph.N:Morph[0]
                                  <GHC.Base.Maybe>_N
                                  <Data.Proxy.Proxy>_N)) of ww { (#,,,,,#) ww1 ww2 ww3 ww4 ww5 ww6 ->
                 Control.Reference.Representation.Reference
                   @ (Control.Monad.Trans.Reader.ReaderT
                        [GHC.LanguageExtensions.Type.Extension]
                        (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc))
                   @ Control.Reference.Representation.MU
                   @ Control.Reference.Representation.MU
                   @ Control.Reference.Representation.MU
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        (Language.Haskell.Tools.AST.Representation.Exprs.UCaseRhs' uexpr)
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        (Language.Haskell.Tools.AST.Representation.Exprs.UCaseRhs' uexpr)
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        uexpr dom Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        uexpr dom Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   ww1
                   ww2
                   ww3
                   ww4
                   ww5
                   ww6 }) -}
08c2ef01713e70e4bc53a57ec7038b59
  traverseClassBody ::
    ExtMonad.CheckNode
      Language.Haskell.Tools.AST.ElementTypes.ClassBody
  {- Arity: 1,
     Strictness: <S(S(LLS(S)LLLLLLLLLL)L),U(U(U,U,U(U),U,U,U,U,U,U,U,U,U,U),U)>,
     Unfolding: (\ @ dom ($d(%,%) :: ExtMonad.ExtDomain dom) ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Language.Haskell.Tools.AST.Ann.SemanticInfo'
                             dom Language.Haskell.Tools.AST.Ann.SameInfoDefaultCls)
                        @ Language.Haskell.Tools.AST.SemaInfoTypes.NoSemanticInfo
                        (Language.Haskell.Tools.AST.Ann.$p3Domain
                           @ dom
                           (GHC.Classes.$p1(%,%)
                              @ (Language.Haskell.Tools.AST.Ann.Domain dom)
                              @ (Language.Haskell.Tools.AST.SemaInfoClasses.HasNameInfo'
                                   (Language.Haskell.Tools.AST.Ann.SemanticInfo
                                      dom
                                      Language.Haskell.Tools.AST.Representation.Names.UQualifiedName))
                              $d(%,%)))
                          `cast`
                        (Data.Type.Equality.N:~[0]
                             <*>_N <Language.Haskell.Tools.AST.Ann.SemanticInfo'
                                      dom
                                      Language.Haskell.Tools.AST.Ann.SameInfoDefaultCls>_N <Language.Haskell.Tools.AST.SemaInfoTypes.NoSemanticInfo>_N) of cobox0 { DEFAULT ->
                 case TraverseAST.traverseClassBody1
                        @ dom of wild { Control.Reference.Representation.Reference ds1 ds2 ds3 ds4 ds5 ds6 ->
                 ds3 (TraverseAST.traverseClassElem @ dom $d(%,%)) } }) -}
7b1f541adab057a7a2b16e1f69618b12
  traverseClassBody1 ::
    Control.Reference.Representation.Reference
      (Control.Monad.Trans.Reader.ReaderT
         [GHC.LanguageExtensions.Type.Extension]
         (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc))
      Control.Reference.Representation.MU
      Control.Reference.Representation.MU
      Control.Reference.Representation.MU
      (Language.Haskell.Tools.AST.Ann.Ann
         Language.Haskell.Tools.AST.Representation.Decls.UClassBody
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
      (Language.Haskell.Tools.AST.Ann.Ann
         Language.Haskell.Tools.AST.Representation.Decls.UClassBody
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
      (Language.Haskell.Tools.AST.Ann.Ann
         Language.Haskell.Tools.AST.Representation.Decls.UClassElement
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
      (Language.Haskell.Tools.AST.Ann.Ann
         Language.Haskell.Tools.AST.Representation.Decls.UClassElement
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
  {- Unfolding: (\ @ dom ->
                 case Control.Reference.Combinators.$w&
                        @ (Control.Monad.Trans.Reader.ReaderT
                             [GHC.LanguageExtensions.Type.Extension]
                             (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc))
                        @ Control.Reference.Representation.MU
                        @ Control.Reference.Representation.MU
                        @ Control.Reference.Representation.MU
                        @ (Language.Haskell.Tools.AST.Ann.Ann
                             Language.Haskell.Tools.AST.Representation.Decls.UClassBody
                             dom
                             Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                        @ (Language.Haskell.Tools.AST.Ann.Ann
                             Language.Haskell.Tools.AST.Representation.Decls.UClassBody
                             dom
                             Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                        @ (Language.Haskell.Tools.AST.Ann.AnnListG
                             Language.Haskell.Tools.AST.Representation.Decls.UClassElement
                             dom
                             Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                        @ (Language.Haskell.Tools.AST.Ann.AnnListG
                             Language.Haskell.Tools.AST.Representation.Decls.UClassElement
                             dom
                             Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                        @ (Language.Haskell.Tools.AST.Ann.Ann
                             Language.Haskell.Tools.AST.Representation.Decls.UClassElement
                             dom
                             Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                        @ (Language.Haskell.Tools.AST.Ann.Ann
                             Language.Haskell.Tools.AST.Representation.Decls.UClassElement
                             dom
                             Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                        (TraverseAST.traverseClassBody3 @ dom)
                        (TraverseAST.traverseClassBody2
                           @ dom) of ww { (#,,,,,#) ww1 ww2 ww3 ww4 ww5 ww6 ->
                 Control.Reference.Representation.Reference
                   @ (Control.Monad.Trans.Reader.ReaderT
                        [GHC.LanguageExtensions.Type.Extension]
                        (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc))
                   @ Control.Reference.Representation.MU
                   @ Control.Reference.Representation.MU
                   @ Control.Reference.Representation.MU
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        Language.Haskell.Tools.AST.Representation.Decls.UClassBody
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        Language.Haskell.Tools.AST.Representation.Decls.UClassBody
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        Language.Haskell.Tools.AST.Representation.Decls.UClassElement
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        Language.Haskell.Tools.AST.Representation.Decls.UClassElement
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   ww1
                   ww2
                   ww3
                   ww4
                   ww5
                   ww6 }) -}
38f0b0925b688078e4c23a3e2eb95001
  traverseClassBody2 ::
    Control.Reference.Representation.Reference
      (Control.Monad.Trans.Reader.ReaderT
         [GHC.LanguageExtensions.Type.Extension]
         (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc))
      Control.Reference.Representation.MU
      Control.Reference.Representation.MU
      Control.Reference.Representation.MU
      (Language.Haskell.Tools.AST.Ann.AnnListG
         Language.Haskell.Tools.AST.Representation.Decls.UClassElement
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
      (Language.Haskell.Tools.AST.Ann.AnnListG
         Language.Haskell.Tools.AST.Representation.Decls.UClassElement
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
      (Language.Haskell.Tools.AST.Ann.Ann
         Language.Haskell.Tools.AST.Representation.Decls.UClassElement
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
      (Language.Haskell.Tools.AST.Ann.Ann
         Language.Haskell.Tools.AST.Representation.Decls.UClassElement
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
  {- Unfolding: (\ @ dom ->
                 case Language.Haskell.Tools.AST.Ann.$wannList
                        @ Language.Haskell.Tools.AST.Representation.Decls.UClassElement
                        @ dom
                        @ Language.Haskell.Tools.AST.Ann.SrcTemplateStage
                        @ (Control.Monad.Trans.Reader.ReaderT
                             [GHC.LanguageExtensions.Type.Extension]
                             (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc))
                        @ Control.Reference.Representation.MU
                        TraverseAST.$s$fRefMonadswr
                        TraverseAST.$sannList1
                          `cast`
                        (Sym (Control.Instances.Morph.N:Morph[0]
                                  <[]>_N
                                  <Data.Proxy.Proxy>_N)) of ww { (#,,,,,#) ww1 ww2 ww3 ww4 ww5 ww6 ->
                 Control.Reference.Representation.Reference
                   @ (Control.Monad.Trans.Reader.ReaderT
                        [GHC.LanguageExtensions.Type.Extension]
                        (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc))
                   @ Control.Reference.Representation.MU
                   @ Control.Reference.Representation.MU
                   @ Control.Reference.Representation.MU
                   @ (Language.Haskell.Tools.AST.Ann.AnnListG
                        Language.Haskell.Tools.AST.Representation.Decls.UClassElement
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   @ (Language.Haskell.Tools.AST.Ann.AnnListG
                        Language.Haskell.Tools.AST.Representation.Decls.UClassElement
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        Language.Haskell.Tools.AST.Representation.Decls.UClassElement
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        Language.Haskell.Tools.AST.Representation.Decls.UClassElement
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   ww1
                   ww2
                   ww3
                   ww4
                   ww5
                   ww6 }) -}
6c96cf84687217771677035bffd77ed6
  traverseClassBody3 ::
    Control.Reference.Representation.Reference
      (Control.Monad.Trans.Reader.ReaderT
         [GHC.LanguageExtensions.Type.Extension]
         (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc))
      Control.Reference.Representation.MU
      Control.Reference.Representation.MU
      Control.Reference.Representation.MU
      (Language.Haskell.Tools.AST.Ann.Ann
         Language.Haskell.Tools.AST.Representation.Decls.UClassBody
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
      (Language.Haskell.Tools.AST.Ann.Ann
         Language.Haskell.Tools.AST.Representation.Decls.UClassBody
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
      (Language.Haskell.Tools.AST.Ann.AnnListG
         Language.Haskell.Tools.AST.Representation.Decls.UClassElement
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
      (Language.Haskell.Tools.AST.Ann.AnnListG
         Language.Haskell.Tools.AST.Representation.Decls.UClassElement
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
  {- Unfolding: (\ @ dom ->
                 case Language.Haskell.Tools.AST.References.$wcbElements
                        @ GHC.Prim.Any
                        @ GHC.Prim.Any
                        @ dom
                        @ Language.Haskell.Tools.AST.Ann.SrcTemplateStage
                        @ (Control.Monad.Trans.Reader.ReaderT
                             [GHC.LanguageExtensions.Type.Extension]
                             (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc))
                        @ Control.Reference.Representation.MU
                        TraverseAST.$s$fRefMonadswr of ww { (#,,,,,#) ww1 ww2 ww3 ww4 ww5 ww6 ->
                 Control.Reference.Representation.Reference
                   @ (Control.Monad.Trans.Reader.ReaderT
                        [GHC.LanguageExtensions.Type.Extension]
                        (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc))
                   @ Control.Reference.Representation.MU
                   @ Control.Reference.Representation.MU
                   @ Control.Reference.Representation.MU
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        Language.Haskell.Tools.AST.Representation.Decls.UClassBody
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        Language.Haskell.Tools.AST.Representation.Decls.UClassBody
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   @ (Language.Haskell.Tools.AST.Ann.AnnListG
                        Language.Haskell.Tools.AST.Representation.Decls.UClassElement
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   @ (Language.Haskell.Tools.AST.Ann.AnnListG
                        Language.Haskell.Tools.AST.Representation.Decls.UClassElement
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   ww1
                   ww2
                   ww3
                   ww4
                   ww5
                   ww6 }) -}
5827974a441b3ba36fd0d1b0b744dc27
  traverseClassElem ::
    ExtMonad.CheckNode
      Language.Haskell.Tools.AST.ElementTypes.ClassElement
  {- Arity: 1,
     Strictness: <S(S(LLS(S)LLLLLLLLLL)L),U(U(U,U,U(U),U,U,U,U,U,U,U,U,U,U),U)> -}
ae8393b666b585439e68092f9237dfa8
  traverseCmd ::
    ExtMonad.CheckNode Language.Haskell.Tools.AST.ElementTypes.Cmd
  {- Arity: 6, HasNoCafRefs,
     Strictness: <S(S(LLS(S)LLLLLLLLLL)L),1*U(1*U(A,A,1*U(1*U),A,A,A,A,A,A,A,A,A,A),A)><L,U><L,A><L,U><L,A><S,U>,
     Unfolding: InlineRule (0, True, True)
                TraverseAST.traverseCmd1
                  `cast`
                (forall (dom :: <*>_N).
                 <ExtMonad.ExtDomain dom>_R
                 ->_R <Language.Haskell.Tools.AST.ElementTypes.Cmd dom>_R
                 ->_R Trans
                          (<[GHC.LanguageExtensions.Type.Extension]>_R
                           ->_R Trans
                                    (<ExtMap.ExtMap>_R
                                     ->_R Trans
                                              (<GhcMonad.Session>_R
                                               ->_R Sym (GHC.Types.N:IO[0]
                                                             <(Language.Haskell.Tools.AST.ElementTypes.Cmd
                                                                 dom,
                                                               ExtMap.ExtMap)>_R))
                                              (Sym (GhcMonad.N:Ghc[0]
                                                        <(Language.Haskell.Tools.AST.ElementTypes.Cmd
                                                            dom,
                                                          ExtMap.ExtMap)>_R)))
                                    (Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                              <ExtMap.ExtMap>_N
                                              <GhcMonad.Ghc>_R
                                              <Language.Haskell.Tools.AST.ElementTypes.Cmd dom>_N)))
                          (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                    <*>_N
                                    <[GHC.LanguageExtensions.Type.Extension]>_R
                                    <Control.Monad.Trans.State.Lazy.StateT
                                       ExtMap.ExtMap GhcMonad.Ghc>_R
                                    <Language.Haskell.Tools.AST.ElementTypes.Cmd dom>_N))) -}
d03f571125db325da615c2aa995dff38
  traverseCmd1 ::
    ExtMonad.ExtDomain dom =>
    Language.Haskell.Tools.AST.ElementTypes.Cmd dom
    -> [GHC.LanguageExtensions.Type.Extension]
    -> ExtMap.ExtMap
    -> GhcMonad.Session
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          (Language.Haskell.Tools.AST.ElementTypes.Cmd dom, ExtMap.ExtMap) #)
  {- Arity: 6, HasNoCafRefs,
     Strictness: <S(S(LLS(S)LLLLLLLLLL)L),1*U(1*U(A,A,1*U(1*U),A,A,A,A,A,A,A,A,A,A),A)><L,U><L,A><L,U><L,A><S,U>,
     Unfolding: InlineRule (6, True, False)
                (\ @ dom
                   ($d(%,%) :: ExtMonad.ExtDomain dom)
                   (eta :: Language.Haskell.Tools.AST.ElementTypes.Cmd dom)
                   (eta1 :: [GHC.LanguageExtensions.Type.Extension])
                   (eta2 :: ExtMap.ExtMap)
                   (eta3 :: GhcMonad.Session)
                   (eta4 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Language.Haskell.Tools.AST.Ann.SemanticInfo'
                             dom Language.Haskell.Tools.AST.Ann.SameInfoDefaultCls)
                        @ Language.Haskell.Tools.AST.SemaInfoTypes.NoSemanticInfo
                        (Language.Haskell.Tools.AST.Ann.$p3Domain
                           @ dom
                           (GHC.Classes.$p1(%,%)
                              @ (Language.Haskell.Tools.AST.Ann.Domain dom)
                              @ (Language.Haskell.Tools.AST.SemaInfoClasses.HasNameInfo'
                                   (Language.Haskell.Tools.AST.Ann.SemanticInfo
                                      dom
                                      Language.Haskell.Tools.AST.Representation.Names.UQualifiedName))
                              $d(%,%)))
                          `cast`
                        (Data.Type.Equality.N:~[0]
                             <*>_N <Language.Haskell.Tools.AST.Ann.SemanticInfo'
                                      dom
                                      Language.Haskell.Tools.AST.Ann.SameInfoDefaultCls>_N <Language.Haskell.Tools.AST.SemaInfoTypes.NoSemanticInfo>_N) of cobox0 { DEFAULT ->
                 (# eta4, (eta, eta2) #) }) -}
e72a0e8c8b93f7bd3db88635cb350201
  traverseCompStmt ::
    ExtMonad.CheckNode Language.Haskell.Tools.AST.ElementTypes.CompStmt
  {- Arity: 1,
     Strictness: <S(S(LLS(S)LLLLLLLLLL)L),U(U(U,U,U(U),U,U,U,U,U,U,U,U,U,U),U)>,
     Unfolding: (\ @ dom ($d(%,%) :: ExtMonad.ExtDomain dom) ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Language.Haskell.Tools.AST.Ann.SemanticInfo'
                             dom Language.Haskell.Tools.AST.Ann.SameInfoDefaultCls)
                        @ Language.Haskell.Tools.AST.SemaInfoTypes.NoSemanticInfo
                        (Language.Haskell.Tools.AST.Ann.$p3Domain
                           @ dom
                           (GHC.Classes.$p1(%,%)
                              @ (Language.Haskell.Tools.AST.Ann.Domain dom)
                              @ (Language.Haskell.Tools.AST.SemaInfoClasses.HasNameInfo'
                                   (Language.Haskell.Tools.AST.Ann.SemanticInfo
                                      dom
                                      Language.Haskell.Tools.AST.Representation.Names.UQualifiedName))
                              $d(%,%)))
                          `cast`
                        (Data.Type.Equality.N:~[0]
                             <*>_N <Language.Haskell.Tools.AST.Ann.SemanticInfo'
                                      dom
                                      Language.Haskell.Tools.AST.Ann.SameInfoDefaultCls>_N <Language.Haskell.Tools.AST.SemaInfoTypes.NoSemanticInfo>_N) of cobox0 { DEFAULT ->
                 let {
                   f :: Language.Haskell.Tools.AST.Ann.Ann
                          Language.Haskell.Tools.AST.Representation.Stmts.UCompStmt
                          dom
                          Language.Haskell.Tools.AST.Ann.SrcTemplateStage
                        -> Control.Monad.Trans.Reader.ReaderT
                             [GHC.LanguageExtensions.Type.Extension]
                             (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc)
                             (Language.Haskell.Tools.AST.Ann.Ann
                                Language.Haskell.Tools.AST.Representation.Stmts.UCompStmt
                                dom
                                Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   = case TraverseAST.traverseCompStmt10
                            @ dom of wild { Control.Reference.Representation.Reference ds1 ds2 ds3 ds4 ds5 ds6 ->
                     ds3
                       (TraverseAST.traverseStmt
                          @ Language.Haskell.Tools.AST.Representation.Exprs.UExpr
                          TraverseAST.traverseCompStmt9
                          @ dom
                          $d(%,%)) }
                 } in
                 let {
                   g :: Language.Haskell.Tools.AST.Ann.Ann
                          Language.Haskell.Tools.AST.Representation.Stmts.UCompStmt
                          dom
                          Language.Haskell.Tools.AST.Ann.SrcTemplateStage
                        -> Control.Monad.Trans.Reader.ReaderT
                             [GHC.LanguageExtensions.Type.Extension]
                             (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc)
                             (Language.Haskell.Tools.AST.Ann.Ann
                                Language.Haskell.Tools.AST.Representation.Stmts.UCompStmt
                                dom
                                Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   = case TraverseAST.traverseCompStmt1
                            @ dom of wild { Control.Reference.Representation.Reference ds1 ds2 ds3 ds4 ds5 ds6 ->
                     ds3 (TraverseAST.traverseExpr @ dom $d(%,%)) }
                 } in
                 \ (x :: Language.Haskell.Tools.AST.Ann.Ann
                           Language.Haskell.Tools.AST.Representation.Stmts.UCompStmt
                           dom
                           Language.Haskell.Tools.AST.Ann.SrcTemplateStage) ->
                 let {
                   m1 :: Control.Monad.Trans.Reader.ReaderT
                           [GHC.LanguageExtensions.Type.Extension]
                           (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc)
                           (Language.Haskell.Tools.AST.Ann.Ann
                              Language.Haskell.Tools.AST.Representation.Stmts.UCompStmt
                              dom
                              Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   = f x
                 } in
                 (\ (r1 :: [GHC.LanguageExtensions.Type.Extension]) ->
                  let {
                    m2 :: Control.Monad.Trans.State.Lazy.StateT
                            (Data.Map.Base.Map
                               (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                               [SrcLoc.SrcSpan])
                            GhcMonad.Ghc
                            (Language.Haskell.Tools.AST.Ann.Ann
                               Language.Haskell.Tools.AST.Representation.Stmts.UCompStmt
                               dom
                               Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                    = m1
                        `cast`
                      (Control.Monad.Trans.Reader.N:ReaderT[0]
                           <*>_N
                           <[GHC.LanguageExtensions.Type.Extension]>_R
                           <Control.Monad.Trans.State.Lazy.StateT
                              ExtMap.ExtMap GhcMonad.Ghc>_R
                           <Language.Haskell.Tools.AST.Ann.Ann
                              Language.Haskell.Tools.AST.Representation.Stmts.UCompStmt
                              dom
                              Language.Haskell.Tools.AST.Ann.SrcTemplateStage>_N)
                        r1
                  } in
                  (\ (s1 :: Data.Map.Base.Map
                              (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                              [SrcLoc.SrcSpan]) ->
                   let {
                     m :: GhcMonad.Ghc
                            (Language.Haskell.Tools.AST.Ann.Ann
                               Language.Haskell.Tools.AST.Representation.Stmts.UCompStmt
                               dom
                               Language.Haskell.Tools.AST.Ann.SrcTemplateStage,
                             Data.Map.Base.Map
                               (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                               [SrcLoc.SrcSpan])
                     = m2
                         `cast`
                       (Control.Monad.Trans.State.Lazy.N:StateT[0]
                            <Data.Map.Base.Map
                               (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                               [SrcLoc.SrcSpan]>_N
                            <GhcMonad.Ghc>_R
                            <Language.Haskell.Tools.AST.Ann.Ann
                               Language.Haskell.Tools.AST.Representation.Stmts.UCompStmt
                               dom
                               Language.Haskell.Tools.AST.Ann.SrcTemplateStage>_N)
                         s1
                   } in
                   (\ (s :: GhcMonad.Session)
                      (s2 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                    case (m `cast`
                          (GhcMonad.N:Ghc[0]
                               <(Language.Haskell.Tools.AST.Ann.Ann
                                   Language.Haskell.Tools.AST.Representation.Stmts.UCompStmt
                                   dom
                                   Language.Haskell.Tools.AST.Ann.SrcTemplateStage,
                                 Data.Map.Base.Map
                                   (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                                   [SrcLoc.SrcSpan])>_R)
                            s)
                           `cast`
                         (GHC.Types.N:IO[0]
                              <(Language.Haskell.Tools.AST.Ann.Ann
                                  Language.Haskell.Tools.AST.Representation.Stmts.UCompStmt
                                  dom
                                  Language.Haskell.Tools.AST.Ann.SrcTemplateStage,
                                Data.Map.Base.Map
                                  (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                                  [SrcLoc.SrcSpan])>_R)
                           s2 of ds1 { (#,#) ipv ipv1 ->
                    ((((g (case ipv1 of wild { (,) a1 s' -> a1 }))
                         `cast`
                       (Control.Monad.Trans.Reader.N:ReaderT[0]
                            <*>_N
                            <[GHC.LanguageExtensions.Type.Extension]>_R
                            <Control.Monad.Trans.State.Lazy.StateT
                               ExtMap.ExtMap GhcMonad.Ghc>_R
                            <Language.Haskell.Tools.AST.Ann.Ann
                               Language.Haskell.Tools.AST.Representation.Stmts.UCompStmt
                               dom
                               Language.Haskell.Tools.AST.Ann.SrcTemplateStage>_N)
                         r1)
                        `cast`
                      (Control.Monad.Trans.State.Lazy.N:StateT[0]
                           <Data.Map.Base.Map
                              (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                              [SrcLoc.SrcSpan]>_N
                           <GhcMonad.Ghc>_R
                           <Language.Haskell.Tools.AST.Ann.Ann
                              Language.Haskell.Tools.AST.Representation.Stmts.UCompStmt
                              dom
                              Language.Haskell.Tools.AST.Ann.SrcTemplateStage>_N)
                        (case ipv1 of wild { (,) a1 s' -> s' }))
                       `cast`
                     (GhcMonad.N:Ghc[0]
                          <(Language.Haskell.Tools.AST.Ann.Ann
                              Language.Haskell.Tools.AST.Representation.Stmts.UCompStmt
                              dom
                              Language.Haskell.Tools.AST.Ann.SrcTemplateStage,
                            Data.Map.Base.Map
                              (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                              [SrcLoc.SrcSpan])>_R)
                       s)
                      `cast`
                    (GHC.Types.N:IO[0]
                         <(Language.Haskell.Tools.AST.Ann.Ann
                             Language.Haskell.Tools.AST.Representation.Stmts.UCompStmt
                             dom
                             Language.Haskell.Tools.AST.Ann.SrcTemplateStage,
                           Data.Map.Base.Map
                             (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                             [SrcLoc.SrcSpan])>_R)
                      ipv })
                     `cast`
                   (Trans
                        (<GhcMonad.Session>_R
                         ->_R Sym (GHC.Types.N:IO[0]
                                       <(Language.Haskell.Tools.AST.Ann.Ann
                                           Language.Haskell.Tools.AST.Representation.Stmts.UCompStmt
                                           dom
                                           Language.Haskell.Tools.AST.Ann.SrcTemplateStage,
                                         Data.Map.Base.Map
                                           (ExtMap.LogicalRelation
                                              GHC.LanguageExtensions.Type.Extension)
                                           [SrcLoc.SrcSpan])>_R))
                        (Sym (GhcMonad.N:Ghc[0]
                                  <(Language.Haskell.Tools.AST.Ann.Ann
                                      Language.Haskell.Tools.AST.Representation.Stmts.UCompStmt
                                      dom
                                      Language.Haskell.Tools.AST.Ann.SrcTemplateStage,
                                    Data.Map.Base.Map
                                      (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                                      [SrcLoc.SrcSpan])>_R))))
                    `cast`
                  (Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                            <Data.Map.Base.Map
                               (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                               [SrcLoc.SrcSpan]>_N
                            <GhcMonad.Ghc>_R
                            <Language.Haskell.Tools.AST.Ann.Ann
                               Language.Haskell.Tools.AST.Representation.Stmts.UCompStmt
                               dom
                               Language.Haskell.Tools.AST.Ann.SrcTemplateStage>_N)))
                   `cast`
                 (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                           <*>_N
                           <[GHC.LanguageExtensions.Type.Extension]>_R
                           <Control.Monad.Trans.State.Lazy.StateT
                              ExtMap.ExtMap GhcMonad.Ghc>_R
                           <Language.Haskell.Tools.AST.Ann.Ann
                              Language.Haskell.Tools.AST.Representation.Stmts.UCompStmt
                              dom
                              Language.Haskell.Tools.AST.Ann.SrcTemplateStage>_N)) }) -}
e59611e7cd664bb320565055dc70a850
  traverseCompStmt1 ::
    Control.Reference.Representation.Reference
      (Control.Monad.Trans.Reader.ReaderT
         [GHC.LanguageExtensions.Type.Extension]
         (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc))
      Control.Reference.Representation.MU
      Control.Reference.Representation.MU
      Control.Reference.Representation.MU
      (Language.Haskell.Tools.AST.Ann.Ann
         Language.Haskell.Tools.AST.Representation.Stmts.UCompStmt
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
      (Language.Haskell.Tools.AST.Ann.Ann
         Language.Haskell.Tools.AST.Representation.Stmts.UCompStmt
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
      (Language.Haskell.Tools.AST.Ann.Ann
         Language.Haskell.Tools.AST.Representation.Exprs.UExpr
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
      (Language.Haskell.Tools.AST.Ann.Ann
         Language.Haskell.Tools.AST.Representation.Exprs.UExpr
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
  {- Unfolding: (\ @ dom ->
                 case Control.Reference.Combinators.$w&+&
                        @ (Control.Monad.Trans.Reader.ReaderT
                             [GHC.LanguageExtensions.Type.Extension]
                             (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc))
                        @ Control.Reference.Representation.MU
                        @ Control.Reference.Representation.MU
                        @ Control.Reference.Representation.MU
                        @ (Language.Haskell.Tools.AST.Ann.Ann
                             Language.Haskell.Tools.AST.Representation.Stmts.UCompStmt
                             dom
                             Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                        @ (Language.Haskell.Tools.AST.Ann.Ann
                             Language.Haskell.Tools.AST.Representation.Exprs.UExpr
                             dom
                             Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                        TraverseAST.$s$fRefMonadswr
                        Control.Reference.Predefined.Containers.Tree.$s$fRefMonadswr1
                        Data.Proxy.$fMonadPlusProxy
                        Data.Proxy.$fMonadPlusProxy
                        (TraverseAST.traverseCompStmt5 @ dom)
                        (TraverseAST.traverseCompStmt2
                           @ dom) of ww { (#,,,,,#) ww1 ww2 ww3 ww4 ww5 ww6 ->
                 Control.Reference.Representation.Reference
                   @ (Control.Monad.Trans.Reader.ReaderT
                        [GHC.LanguageExtensions.Type.Extension]
                        (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc))
                   @ Control.Reference.Representation.MU
                   @ Control.Reference.Representation.MU
                   @ Control.Reference.Representation.MU
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        Language.Haskell.Tools.AST.Representation.Stmts.UCompStmt
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        Language.Haskell.Tools.AST.Representation.Stmts.UCompStmt
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        Language.Haskell.Tools.AST.Representation.Exprs.UExpr
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        Language.Haskell.Tools.AST.Representation.Exprs.UExpr
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   ww1
                   ww2
                   ww3
                   ww4
                   ww5
                   ww6 }) -}
8d4e0756652d13764153e0cca13d69d0
  traverseCompStmt10 ::
    Control.Reference.Representation.Reference
      (Control.Monad.Trans.Reader.ReaderT
         [GHC.LanguageExtensions.Type.Extension]
         (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc))
      Control.Reference.Representation.MU
      Control.Reference.Representation.MU
      Control.Reference.Representation.MU
      (Language.Haskell.Tools.AST.Ann.Ann
         Language.Haskell.Tools.AST.Representation.Stmts.UCompStmt
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
      (Language.Haskell.Tools.AST.Ann.Ann
         Language.Haskell.Tools.AST.Representation.Stmts.UCompStmt
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
      (Language.Haskell.Tools.AST.Ann.Ann
         Language.Haskell.Tools.AST.Representation.Stmts.UStmt
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
      (Language.Haskell.Tools.AST.Ann.Ann
         Language.Haskell.Tools.AST.Representation.Stmts.UStmt
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
  {- Unfolding: (\ @ dom ->
                 case Language.Haskell.Tools.AST.References.$wcompStmt
                        @ dom
                        @ Language.Haskell.Tools.AST.Ann.SrcTemplateStage
                        @ (Control.Monad.Trans.Reader.ReaderT
                             [GHC.LanguageExtensions.Type.Extension]
                             (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc))
                        @ Control.Reference.Representation.MU
                        (TraverseAST.$s$fMonadReaderT
                           @ [GHC.LanguageExtensions.Type.Extension])
                        Data.Proxy.$fMonadPlusProxy
                        TraverseAST.$sannJust1
                          `cast`
                        (Sym (Control.Instances.Morph.N:Morph[0]
                                  <GHC.Base.Maybe>_N
                                  <Data.Proxy.Proxy>_N)) of ww { (#,,,,,#) ww1 ww2 ww3 ww4 ww5 ww6 ->
                 Control.Reference.Representation.Reference
                   @ (Control.Monad.Trans.Reader.ReaderT
                        [GHC.LanguageExtensions.Type.Extension]
                        (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc))
                   @ Control.Reference.Representation.MU
                   @ Control.Reference.Representation.MU
                   @ Control.Reference.Representation.MU
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        Language.Haskell.Tools.AST.Representation.Stmts.UCompStmt
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        Language.Haskell.Tools.AST.Representation.Stmts.UCompStmt
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        Language.Haskell.Tools.AST.Representation.Stmts.UStmt
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        Language.Haskell.Tools.AST.Representation.Stmts.UStmt
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   ww1
                   ww2
                   ww3
                   ww4
                   ww5
                   ww6 }) -}
7cfdebb1c6bb5299b48b8b9856360f47
  traverseCompStmt2 ::
    Control.Reference.Representation.Reference
      (Control.Monad.Trans.Reader.ReaderT
         [GHC.LanguageExtensions.Type.Extension]
         (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc))
      Control.Reference.Representation.MU
      Control.Reference.Representation.MU
      Control.Reference.Representation.MU
      (Language.Haskell.Tools.AST.Ann.Ann
         Language.Haskell.Tools.AST.Representation.Stmts.UCompStmt
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
      (Language.Haskell.Tools.AST.Ann.Ann
         Language.Haskell.Tools.AST.Representation.Stmts.UCompStmt
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
      (Language.Haskell.Tools.AST.Ann.Ann
         Language.Haskell.Tools.AST.Representation.Exprs.UExpr
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
      (Language.Haskell.Tools.AST.Ann.Ann
         Language.Haskell.Tools.AST.Representation.Exprs.UExpr
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
  {- Unfolding: (\ @ dom ->
                 case Control.Reference.Combinators.$w&
                        @ (Control.Monad.Trans.Reader.ReaderT
                             [GHC.LanguageExtensions.Type.Extension]
                             (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc))
                        @ Control.Reference.Representation.MU
                        @ Control.Reference.Representation.MU
                        @ Control.Reference.Representation.MU
                        @ (Language.Haskell.Tools.AST.Ann.Ann
                             Language.Haskell.Tools.AST.Representation.Stmts.UCompStmt
                             dom
                             Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                        @ (Language.Haskell.Tools.AST.Ann.Ann
                             Language.Haskell.Tools.AST.Representation.Stmts.UCompStmt
                             dom
                             Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                        @ (Language.Haskell.Tools.AST.Ann.AnnMaybeG
                             Language.Haskell.Tools.AST.Representation.Exprs.UExpr
                             dom
                             Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                        @ (Language.Haskell.Tools.AST.Ann.AnnMaybeG
                             Language.Haskell.Tools.AST.Representation.Exprs.UExpr
                             dom
                             Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                        @ (Language.Haskell.Tools.AST.Ann.Ann
                             Language.Haskell.Tools.AST.Representation.Exprs.UExpr
                             dom
                             Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                        @ (Language.Haskell.Tools.AST.Ann.Ann
                             Language.Haskell.Tools.AST.Representation.Exprs.UExpr
                             dom
                             Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                        (TraverseAST.traverseCompStmt4 @ dom)
                        (TraverseAST.traverseCompStmt3
                           @ dom) of ww { (#,,,,,#) ww1 ww2 ww3 ww4 ww5 ww6 ->
                 Control.Reference.Representation.Reference
                   @ (Control.Monad.Trans.Reader.ReaderT
                        [GHC.LanguageExtensions.Type.Extension]
                        (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc))
                   @ Control.Reference.Representation.MU
                   @ Control.Reference.Representation.MU
                   @ Control.Reference.Representation.MU
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        Language.Haskell.Tools.AST.Representation.Stmts.UCompStmt
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        Language.Haskell.Tools.AST.Representation.Stmts.UCompStmt
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        Language.Haskell.Tools.AST.Representation.Exprs.UExpr
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        Language.Haskell.Tools.AST.Representation.Exprs.UExpr
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   ww1
                   ww2
                   ww3
                   ww4
                   ww5
                   ww6 }) -}
7b9a135cb6ba26eab8c51f8e250b37f3
  traverseCompStmt3 ::
    Control.Reference.Representation.Reference
      (Control.Monad.Trans.Reader.ReaderT
         [GHC.LanguageExtensions.Type.Extension]
         (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc))
      Control.Reference.Representation.MU
      Control.Reference.Representation.MU
      Control.Reference.Representation.MU
      (Language.Haskell.Tools.AST.Ann.AnnMaybeG
         Language.Haskell.Tools.AST.Representation.Exprs.UExpr
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
      (Language.Haskell.Tools.AST.Ann.AnnMaybeG
         Language.Haskell.Tools.AST.Representation.Exprs.UExpr
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
      (Language.Haskell.Tools.AST.Ann.Ann
         Language.Haskell.Tools.AST.Representation.Exprs.UExpr
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
      (Language.Haskell.Tools.AST.Ann.Ann
         Language.Haskell.Tools.AST.Representation.Exprs.UExpr
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
  {- Unfolding: (\ @ dom ->
                 case Language.Haskell.Tools.AST.Ann.$wannJust
                        @ Language.Haskell.Tools.AST.Representation.Exprs.UExpr
                        @ dom
                        @ Language.Haskell.Tools.AST.Ann.SrcTemplateStage
                        @ (Control.Monad.Trans.Reader.ReaderT
                             [GHC.LanguageExtensions.Type.Extension]
                             (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc))
                        @ Control.Reference.Representation.MU
                        (TraverseAST.$s$fApplicativeReaderT
                           @ [GHC.LanguageExtensions.Type.Extension])
                        (TraverseAST.$s$fMonadReaderT
                           @ [GHC.LanguageExtensions.Type.Extension])
                        Data.Proxy.$fApplicativeProxy
                        Data.Proxy.$fMonadPlusProxy
                        TraverseAST.$sannJust1
                          `cast`
                        (Sym (Control.Instances.Morph.N:Morph[0]
                                  <GHC.Base.Maybe>_N
                                  <Control.Reference.Representation.MU>_N)) of ww { (#,,,,,#) ww1 ww2 ww3 ww4 ww5 ww6 ->
                 Control.Reference.Representation.Reference
                   @ (Control.Monad.Trans.Reader.ReaderT
                        [GHC.LanguageExtensions.Type.Extension]
                        (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc))
                   @ Control.Reference.Representation.MU
                   @ Control.Reference.Representation.MU
                   @ Control.Reference.Representation.MU
                   @ (Language.Haskell.Tools.AST.Ann.AnnMaybeG
                        Language.Haskell.Tools.AST.Representation.Exprs.UExpr
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   @ (Language.Haskell.Tools.AST.Ann.AnnMaybeG
                        Language.Haskell.Tools.AST.Representation.Exprs.UExpr
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        Language.Haskell.Tools.AST.Representation.Exprs.UExpr
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        Language.Haskell.Tools.AST.Representation.Exprs.UExpr
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   ww1
                   ww2
                   ww3
                   ww4
                   ww5
                   ww6 }) -}
25ec98ece432ba260e38096f6bb6da61
  traverseCompStmt4 ::
    Control.Reference.Representation.Reference
      (Control.Monad.Trans.Reader.ReaderT
         [GHC.LanguageExtensions.Type.Extension]
         (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc))
      Control.Reference.Representation.MU
      Control.Reference.Representation.MU
      Control.Reference.Representation.MU
      (Language.Haskell.Tools.AST.Ann.Ann
         Language.Haskell.Tools.AST.Representation.Stmts.UCompStmt
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
      (Language.Haskell.Tools.AST.Ann.Ann
         Language.Haskell.Tools.AST.Representation.Stmts.UCompStmt
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
      (Language.Haskell.Tools.AST.Ann.AnnMaybeG
         Language.Haskell.Tools.AST.Representation.Exprs.UExpr
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
      (Language.Haskell.Tools.AST.Ann.AnnMaybeG
         Language.Haskell.Tools.AST.Representation.Exprs.UExpr
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
  {- Unfolding: (\ @ dom ->
                 case Language.Haskell.Tools.AST.References.$wusingExpr
                        @ dom
                        @ Language.Haskell.Tools.AST.Ann.SrcTemplateStage
                        @ (Control.Monad.Trans.Reader.ReaderT
                             [GHC.LanguageExtensions.Type.Extension]
                             (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc))
                        @ Control.Reference.Representation.MU
                        (TraverseAST.$s$fMonadReaderT
                           @ [GHC.LanguageExtensions.Type.Extension])
                        Data.Proxy.$fMonadPlusProxy
                        TraverseAST.$sannJust1
                          `cast`
                        (Sym (Control.Instances.Morph.N:Morph[0]
                                  <GHC.Base.Maybe>_N
                                  <Control.Reference.Representation.MU>_N)) of ww { (#,,,,,#) ww1 ww2 ww3 ww4 ww5 ww6 ->
                 Control.Reference.Representation.Reference
                   @ (Control.Monad.Trans.Reader.ReaderT
                        [GHC.LanguageExtensions.Type.Extension]
                        (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc))
                   @ Control.Reference.Representation.MU
                   @ Control.Reference.Representation.MU
                   @ Control.Reference.Representation.MU
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        Language.Haskell.Tools.AST.Representation.Stmts.UCompStmt
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        Language.Haskell.Tools.AST.Representation.Stmts.UCompStmt
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   @ (Language.Haskell.Tools.AST.Ann.AnnMaybeG
                        Language.Haskell.Tools.AST.Representation.Exprs.UExpr
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   @ (Language.Haskell.Tools.AST.Ann.AnnMaybeG
                        Language.Haskell.Tools.AST.Representation.Exprs.UExpr
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   ww1
                   ww2
                   ww3
                   ww4
                   ww5
                   ww6 }) -}
af8e4b2512d78b41dde5f65f37f37d9f
  traverseCompStmt5 ::
    Control.Reference.Representation.Reference
      (Control.Monad.Trans.Reader.ReaderT
         [GHC.LanguageExtensions.Type.Extension]
         (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc))
      Control.Reference.Representation.MU
      Control.Reference.Representation.MU
      Control.Reference.Representation.MU
      (Language.Haskell.Tools.AST.Ann.Ann
         Language.Haskell.Tools.AST.Representation.Stmts.UCompStmt
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
      (Language.Haskell.Tools.AST.Ann.Ann
         Language.Haskell.Tools.AST.Representation.Stmts.UCompStmt
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
      (Language.Haskell.Tools.AST.Ann.Ann
         Language.Haskell.Tools.AST.Representation.Exprs.UExpr
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
      (Language.Haskell.Tools.AST.Ann.Ann
         Language.Haskell.Tools.AST.Representation.Exprs.UExpr
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
  {- Unfolding: (\ @ dom ->
                 case Control.Reference.Combinators.$w&+&
                        @ (Control.Monad.Trans.Reader.ReaderT
                             [GHC.LanguageExtensions.Type.Extension]
                             (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc))
                        @ Control.Reference.Representation.MU
                        @ Control.Reference.Representation.MU
                        @ Control.Reference.Representation.MU
                        @ (Language.Haskell.Tools.AST.Ann.Ann
                             Language.Haskell.Tools.AST.Representation.Stmts.UCompStmt
                             dom
                             Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                        @ (Language.Haskell.Tools.AST.Ann.Ann
                             Language.Haskell.Tools.AST.Representation.Exprs.UExpr
                             dom
                             Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                        TraverseAST.$s$fRefMonadswr
                        Control.Reference.Predefined.Containers.Tree.$s$fRefMonadswr1
                        Data.Proxy.$fMonadPlusProxy
                        Data.Proxy.$fMonadPlusProxy
                        (TraverseAST.traverseCompStmt8 @ dom)
                        (TraverseAST.traverseCompStmt6
                           @ dom) of ww { (#,,,,,#) ww1 ww2 ww3 ww4 ww5 ww6 ->
                 Control.Reference.Representation.Reference
                   @ (Control.Monad.Trans.Reader.ReaderT
                        [GHC.LanguageExtensions.Type.Extension]
                        (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc))
                   @ Control.Reference.Representation.MU
                   @ Control.Reference.Representation.MU
                   @ Control.Reference.Representation.MU
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        Language.Haskell.Tools.AST.Representation.Stmts.UCompStmt
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        Language.Haskell.Tools.AST.Representation.Stmts.UCompStmt
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        Language.Haskell.Tools.AST.Representation.Exprs.UExpr
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        Language.Haskell.Tools.AST.Representation.Exprs.UExpr
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   ww1
                   ww2
                   ww3
                   ww4
                   ww5
                   ww6 }) -}
4d8a29140774ce9691b0725483742186
  traverseCompStmt6 ::
    Control.Reference.Representation.Reference
      (Control.Monad.Trans.Reader.ReaderT
         [GHC.LanguageExtensions.Type.Extension]
         (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc))
      Control.Reference.Representation.MU
      Control.Reference.Representation.MU
      Control.Reference.Representation.MU
      (Language.Haskell.Tools.AST.Ann.Ann
         Language.Haskell.Tools.AST.Representation.Stmts.UCompStmt
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
      (Language.Haskell.Tools.AST.Ann.Ann
         Language.Haskell.Tools.AST.Representation.Stmts.UCompStmt
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
      (Language.Haskell.Tools.AST.Ann.Ann
         Language.Haskell.Tools.AST.Representation.Exprs.UExpr
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
      (Language.Haskell.Tools.AST.Ann.Ann
         Language.Haskell.Tools.AST.Representation.Exprs.UExpr
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
  {- Unfolding: (\ @ dom ->
                 case Control.Reference.Combinators.$w&
                        @ (Control.Monad.Trans.Reader.ReaderT
                             [GHC.LanguageExtensions.Type.Extension]
                             (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc))
                        @ Control.Reference.Representation.MU
                        @ Control.Reference.Representation.MU
                        @ Control.Reference.Representation.MU
                        @ (Language.Haskell.Tools.AST.Ann.Ann
                             Language.Haskell.Tools.AST.Representation.Stmts.UCompStmt
                             dom
                             Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                        @ (Language.Haskell.Tools.AST.Ann.Ann
                             Language.Haskell.Tools.AST.Representation.Stmts.UCompStmt
                             dom
                             Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                        @ (Language.Haskell.Tools.AST.Ann.AnnMaybeG
                             Language.Haskell.Tools.AST.Representation.Exprs.UExpr
                             dom
                             Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                        @ (Language.Haskell.Tools.AST.Ann.AnnMaybeG
                             Language.Haskell.Tools.AST.Representation.Exprs.UExpr
                             dom
                             Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                        @ (Language.Haskell.Tools.AST.Ann.Ann
                             Language.Haskell.Tools.AST.Representation.Exprs.UExpr
                             dom
                             Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                        @ (Language.Haskell.Tools.AST.Ann.Ann
                             Language.Haskell.Tools.AST.Representation.Exprs.UExpr
                             dom
                             Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                        (TraverseAST.traverseCompStmt7 @ dom)
                        (TraverseAST.traverseCompStmt3
                           @ dom) of ww { (#,,,,,#) ww1 ww2 ww3 ww4 ww5 ww6 ->
                 Control.Reference.Representation.Reference
                   @ (Control.Monad.Trans.Reader.ReaderT
                        [GHC.LanguageExtensions.Type.Extension]
                        (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc))
                   @ Control.Reference.Representation.MU
                   @ Control.Reference.Representation.MU
                   @ Control.Reference.Representation.MU
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        Language.Haskell.Tools.AST.Representation.Stmts.UCompStmt
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        Language.Haskell.Tools.AST.Representation.Stmts.UCompStmt
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        Language.Haskell.Tools.AST.Representation.Exprs.UExpr
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        Language.Haskell.Tools.AST.Representation.Exprs.UExpr
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   ww1
                   ww2
                   ww3
                   ww4
                   ww5
                   ww6 }) -}
027ff554194d82b544e0fccc6f4b3017
  traverseCompStmt7 ::
    Control.Reference.Representation.Reference
      (Control.Monad.Trans.Reader.ReaderT
         [GHC.LanguageExtensions.Type.Extension]
         (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc))
      Control.Reference.Representation.MU
      Control.Reference.Representation.MU
      Control.Reference.Representation.MU
      (Language.Haskell.Tools.AST.Ann.Ann
         Language.Haskell.Tools.AST.Representation.Stmts.UCompStmt
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
      (Language.Haskell.Tools.AST.Ann.Ann
         Language.Haskell.Tools.AST.Representation.Stmts.UCompStmt
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
      (Language.Haskell.Tools.AST.Ann.AnnMaybeG
         Language.Haskell.Tools.AST.Representation.Exprs.UExpr
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
      (Language.Haskell.Tools.AST.Ann.AnnMaybeG
         Language.Haskell.Tools.AST.Representation.Exprs.UExpr
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
  {- Unfolding: (\ @ dom ->
                 case Language.Haskell.Tools.AST.References.$wbyExpr
                        @ dom
                        @ Language.Haskell.Tools.AST.Ann.SrcTemplateStage
                        @ (Control.Monad.Trans.Reader.ReaderT
                             [GHC.LanguageExtensions.Type.Extension]
                             (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc))
                        @ Control.Reference.Representation.MU
                        (TraverseAST.$s$fMonadReaderT
                           @ [GHC.LanguageExtensions.Type.Extension])
                        Data.Proxy.$fMonadPlusProxy
                        TraverseAST.$sannJust1
                          `cast`
                        (Sym (Control.Instances.Morph.N:Morph[0]
                                  <GHC.Base.Maybe>_N
                                  <Control.Reference.Representation.MU>_N)) of ww { (#,,,,,#) ww1 ww2 ww3 ww4 ww5 ww6 ->
                 Control.Reference.Representation.Reference
                   @ (Control.Monad.Trans.Reader.ReaderT
                        [GHC.LanguageExtensions.Type.Extension]
                        (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc))
                   @ Control.Reference.Representation.MU
                   @ Control.Reference.Representation.MU
                   @ Control.Reference.Representation.MU
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        Language.Haskell.Tools.AST.Representation.Stmts.UCompStmt
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        Language.Haskell.Tools.AST.Representation.Stmts.UCompStmt
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   @ (Language.Haskell.Tools.AST.Ann.AnnMaybeG
                        Language.Haskell.Tools.AST.Representation.Exprs.UExpr
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   @ (Language.Haskell.Tools.AST.Ann.AnnMaybeG
                        Language.Haskell.Tools.AST.Representation.Exprs.UExpr
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   ww1
                   ww2
                   ww3
                   ww4
                   ww5
                   ww6 }) -}
08b1abd7ee4047f0233a379c39f0ec43
  traverseCompStmt8 ::
    Control.Reference.Representation.Reference
      (Control.Monad.Trans.Reader.ReaderT
         [GHC.LanguageExtensions.Type.Extension]
         (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc))
      Control.Reference.Representation.MU
      Control.Reference.Representation.MU
      Control.Reference.Representation.MU
      (Language.Haskell.Tools.AST.Ann.Ann
         Language.Haskell.Tools.AST.Representation.Stmts.UCompStmt
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
      (Language.Haskell.Tools.AST.Ann.Ann
         Language.Haskell.Tools.AST.Representation.Stmts.UCompStmt
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
      (Language.Haskell.Tools.AST.Ann.Ann
         Language.Haskell.Tools.AST.Representation.Exprs.UExpr
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
      (Language.Haskell.Tools.AST.Ann.Ann
         Language.Haskell.Tools.AST.Representation.Exprs.UExpr
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
  {- Unfolding: (\ @ dom ->
                 case Language.Haskell.Tools.AST.References.$wthenExpr
                        @ dom
                        @ Language.Haskell.Tools.AST.Ann.SrcTemplateStage
                        @ (Control.Monad.Trans.Reader.ReaderT
                             [GHC.LanguageExtensions.Type.Extension]
                             (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc))
                        @ Control.Reference.Representation.MU
                        (TraverseAST.$s$fMonadReaderT
                           @ [GHC.LanguageExtensions.Type.Extension])
                        Data.Proxy.$fMonadPlusProxy
                        TraverseAST.$sannJust1
                          `cast`
                        (Sym (Control.Instances.Morph.N:Morph[0]
                                  <GHC.Base.Maybe>_N
                                  <Control.Reference.Representation.MU>_N)) of ww { (#,,,,,#) ww1 ww2 ww3 ww4 ww5 ww6 ->
                 Control.Reference.Representation.Reference
                   @ (Control.Monad.Trans.Reader.ReaderT
                        [GHC.LanguageExtensions.Type.Extension]
                        (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc))
                   @ Control.Reference.Representation.MU
                   @ Control.Reference.Representation.MU
                   @ Control.Reference.Representation.MU
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        Language.Haskell.Tools.AST.Representation.Stmts.UCompStmt
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        Language.Haskell.Tools.AST.Representation.Stmts.UCompStmt
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        Language.Haskell.Tools.AST.Representation.Exprs.UExpr
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        Language.Haskell.Tools.AST.Representation.Exprs.UExpr
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   ww1
                   ww2
                   ww3
                   ww4
                   ww5
                   ww6 }) -}
81534c6dc4f71b6aaa149ed6f5ac169e
  traverseCompStmt9 ::
    ExtMonad.ExtDomain dom =>
    Language.Haskell.Tools.AST.ElementTypes.Expr dom
    -> ExtMonad.ExtMonad
         (Language.Haskell.Tools.AST.ElementTypes.Expr dom)
  {- Arity: 1,
     Strictness: <S(S(LLS(S)LLLLLLLLLL)L),U(U(U,U,U(U),U,U,U,U,U,U,U,U,U,U),U)>,
     Unfolding: (\ @ dom ($d(%,%) :: ExtMonad.ExtDomain dom) ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Language.Haskell.Tools.AST.Ann.SemanticInfo'
                             dom Language.Haskell.Tools.AST.Ann.SameInfoDefaultCls)
                        @ Language.Haskell.Tools.AST.SemaInfoTypes.NoSemanticInfo
                        (Language.Haskell.Tools.AST.Ann.$p3Domain
                           @ dom
                           (GHC.Classes.$p1(%,%)
                              @ (Language.Haskell.Tools.AST.Ann.Domain dom)
                              @ (Language.Haskell.Tools.AST.SemaInfoClasses.HasNameInfo'
                                   (Language.Haskell.Tools.AST.Ann.SemanticInfo
                                      dom
                                      Language.Haskell.Tools.AST.Representation.Names.UQualifiedName))
                              $d(%,%)))
                          `cast`
                        (Data.Type.Equality.N:~[0]
                             <*>_N <Language.Haskell.Tools.AST.Ann.SemanticInfo'
                                      dom
                                      Language.Haskell.Tools.AST.Ann.SameInfoDefaultCls>_N <Language.Haskell.Tools.AST.SemaInfoTypes.NoSemanticInfo>_N) of cobox0 { DEFAULT ->
                 TraverseAST.traverseExpr @ dom $d(%,%) }) -}
8ec6056f73cdda991816b2ad685efe5f
  traverseContext ::
    ExtMonad.CheckNode Language.Haskell.Tools.AST.ElementTypes.Context
  {- Arity: 1,
     Strictness: <S(S(LLS(S)LLLLLLLLLL)L),U(U(U,U,U(U),U,U,U,U,U,U,U,U,U,U),U)>,
     Unfolding: (\ @ dom ($d(%,%) :: ExtMonad.ExtDomain dom) ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Language.Haskell.Tools.AST.Ann.SemanticInfo'
                             dom Language.Haskell.Tools.AST.Ann.SameInfoDefaultCls)
                        @ Language.Haskell.Tools.AST.SemaInfoTypes.NoSemanticInfo
                        (Language.Haskell.Tools.AST.Ann.$p3Domain
                           @ dom
                           (GHC.Classes.$p1(%,%)
                              @ (Language.Haskell.Tools.AST.Ann.Domain dom)
                              @ (Language.Haskell.Tools.AST.SemaInfoClasses.HasNameInfo'
                                   (Language.Haskell.Tools.AST.Ann.SemanticInfo
                                      dom
                                      Language.Haskell.Tools.AST.Representation.Names.UQualifiedName))
                              $d(%,%)))
                          `cast`
                        (Data.Type.Equality.N:~[0]
                             <*>_N <Language.Haskell.Tools.AST.Ann.SemanticInfo'
                                      dom
                                      Language.Haskell.Tools.AST.Ann.SameInfoDefaultCls>_N <Language.Haskell.Tools.AST.SemaInfoTypes.NoSemanticInfo>_N) of cobox0 { DEFAULT ->
                 case TraverseAST.traverseContext1
                        @ dom of wild { Control.Reference.Representation.Reference ds1 ds2 ds3 ds4 ds5 ds6 ->
                 ds3 (TraverseAST.traverseAssertion @ dom $d(%,%)) } }) -}
d4aced765b58e73104f222e625950224
  traverseContext1 ::
    Control.Reference.Representation.Reference
      (Control.Monad.Trans.Reader.ReaderT
         [GHC.LanguageExtensions.Type.Extension]
         (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc))
      Control.Reference.Representation.MU
      Control.Reference.Representation.MU
      Control.Reference.Representation.MU
      (Language.Haskell.Tools.AST.Ann.Ann
         Language.Haskell.Tools.AST.Representation.Types.UContext
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
      (Language.Haskell.Tools.AST.Ann.Ann
         Language.Haskell.Tools.AST.Representation.Types.UContext
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
      (Language.Haskell.Tools.AST.Ann.Ann
         Language.Haskell.Tools.AST.Representation.Types.UAssertion
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
      (Language.Haskell.Tools.AST.Ann.Ann
         Language.Haskell.Tools.AST.Representation.Types.UAssertion
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
  {- Unfolding: (\ @ dom ->
                 case Language.Haskell.Tools.AST.References.$wcontextAssertion
                        @ GHC.Prim.Any
                        @ GHC.Prim.Any
                        @ dom
                        @ Language.Haskell.Tools.AST.Ann.SrcTemplateStage
                        @ (Control.Monad.Trans.Reader.ReaderT
                             [GHC.LanguageExtensions.Type.Extension]
                             (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc))
                        @ Control.Reference.Representation.MU
                        TraverseAST.$s$fRefMonadswr of ww { (#,,,,,#) ww1 ww2 ww3 ww4 ww5 ww6 ->
                 Control.Reference.Representation.Reference
                   @ (Control.Monad.Trans.Reader.ReaderT
                        [GHC.LanguageExtensions.Type.Extension]
                        (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc))
                   @ Control.Reference.Representation.MU
                   @ Control.Reference.Representation.MU
                   @ Control.Reference.Representation.MU
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        Language.Haskell.Tools.AST.Representation.Types.UContext
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        Language.Haskell.Tools.AST.Representation.Types.UContext
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        Language.Haskell.Tools.AST.Representation.Types.UAssertion
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        Language.Haskell.Tools.AST.Representation.Types.UAssertion
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   ww1
                   ww2
                   ww3
                   ww4
                   ww5
                   ww6 }) -}
57055c6ccf44eeb0408d71fa33d4cb39
  traverseDecl ::
    ExtMonad.CheckNode Language.Haskell.Tools.AST.ElementTypes.Decl
  {- Arity: 1,
     Strictness: <S(S(LLS(S)LLLLLLLLLL)L),U(U(U,U,U(U),U,U,U,U,U,U,U,U,U,U),U)> -}
f4667f8c836ffd53617d6badac06bcd7
  traverseExpr ::
    ExtMonad.CheckNode Language.Haskell.Tools.AST.ElementTypes.Expr
  {- Arity: 1,
     Strictness: <S(S(LLS(S)LLLLLLLLLL)L),U(U(U,U,U(U),U,U,U,U,U,U,U,U,U,U),U)> -}
332295952df3056adcddcb04a764f8e9
  traverseFieldUpdate ::
    ExtMonad.CheckNode
      Language.Haskell.Tools.AST.ElementTypes.FieldUpdate
  {- Arity: 1,
     Strictness: <S(S(LLS(S)LLLLLLLLLL)L),U(U(U,U,U(U),U,U,U,U,U,U,U,U,U,U),U)>,
     Unfolding: (\ @ dom ($d(%,%) :: ExtMonad.ExtDomain dom) ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Language.Haskell.Tools.AST.Ann.SemanticInfo'
                             dom Language.Haskell.Tools.AST.Ann.SameInfoDefaultCls)
                        @ Language.Haskell.Tools.AST.SemaInfoTypes.NoSemanticInfo
                        (Language.Haskell.Tools.AST.Ann.$p3Domain
                           @ dom
                           (GHC.Classes.$p1(%,%)
                              @ (Language.Haskell.Tools.AST.Ann.Domain dom)
                              @ (Language.Haskell.Tools.AST.SemaInfoClasses.HasNameInfo'
                                   (Language.Haskell.Tools.AST.Ann.SemanticInfo
                                      dom
                                      Language.Haskell.Tools.AST.Representation.Names.UQualifiedName))
                              $d(%,%)))
                          `cast`
                        (Data.Type.Equality.N:~[0]
                             <*>_N <Language.Haskell.Tools.AST.Ann.SemanticInfo'
                                      dom
                                      Language.Haskell.Tools.AST.Ann.SameInfoDefaultCls>_N <Language.Haskell.Tools.AST.SemaInfoTypes.NoSemanticInfo>_N) of cobox0 { DEFAULT ->
                 let {
                   f :: Language.Haskell.Tools.AST.Ann.Ann
                          Language.Haskell.Tools.AST.Representation.Exprs.UFieldUpdate
                          dom
                          Language.Haskell.Tools.AST.Ann.SrcTemplateStage
                        -> Control.Monad.Trans.Reader.ReaderT
                             [GHC.LanguageExtensions.Type.Extension]
                             (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc)
                             (Language.Haskell.Tools.AST.Ann.Ann
                                Language.Haskell.Tools.AST.Representation.Exprs.UFieldUpdate
                                dom
                                Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   = case TraverseAST.traverseFieldUpdate3
                            @ dom of wild { Control.Reference.Representation.Reference ds1 ds2 ds3 ds4 ds5 ds6 ->
                     ds3
                       (TraverseAST.traverseFieldUpdate2 @ dom $d(%,%))
                         `cast`
                       (<Language.Haskell.Tools.AST.ElementTypes.Name dom>_R
                        ->_R Trans
                                 (<[GHC.LanguageExtensions.Type.Extension]>_R
                                  ->_R Trans
                                           (<ExtMap.ExtMap>_R
                                            ->_R Trans
                                                     (<GhcMonad.Session>_R
                                                      ->_R Sym (GHC.Types.N:IO[0]
                                                                    <(Language.Haskell.Tools.AST.ElementTypes.Name
                                                                        dom,
                                                                      ExtMap.ExtMap)>_R))
                                                     (Sym (GhcMonad.N:Ghc[0]
                                                               <(Language.Haskell.Tools.AST.ElementTypes.Name
                                                                   dom,
                                                                 ExtMap.ExtMap)>_R)))
                                           (Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                                     <ExtMap.ExtMap>_N
                                                     <GhcMonad.Ghc>_R
                                                     <Language.Haskell.Tools.AST.ElementTypes.Name
                                                        dom>_N)))
                                 (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                           <*>_N
                                           <[GHC.LanguageExtensions.Type.Extension]>_R
                                           <Control.Monad.Trans.State.Lazy.StateT
                                              ExtMap.ExtMap GhcMonad.Ghc>_R
                                           <Language.Haskell.Tools.AST.ElementTypes.Name dom>_N))) }
                 } in
                 let {
                   g :: Language.Haskell.Tools.AST.Ann.Ann
                          Language.Haskell.Tools.AST.Representation.Exprs.UFieldUpdate
                          dom
                          Language.Haskell.Tools.AST.Ann.SrcTemplateStage
                        -> Control.Monad.Trans.Reader.ReaderT
                             [GHC.LanguageExtensions.Type.Extension]
                             (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc)
                             (Language.Haskell.Tools.AST.Ann.Ann
                                Language.Haskell.Tools.AST.Representation.Exprs.UFieldUpdate
                                dom
                                Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   = case TraverseAST.traverseFieldUpdate1
                            @ dom of wild { Control.Reference.Representation.Reference ds1 ds2 ds3 ds4 ds5 ds6 ->
                     ds3 (TraverseAST.traverseExpr @ dom $d(%,%)) }
                 } in
                 (\ (x :: Language.Haskell.Tools.AST.ElementTypes.FieldUpdate dom)
                    (eta :: [GHC.LanguageExtensions.Type.Extension])
                    (eta1 :: ExtMap.ExtMap) ->
                  let {
                    m :: GhcMonad.Ghc
                           (Language.Haskell.Tools.AST.ElementTypes.FieldUpdate dom,
                            Data.Map.Base.Map
                              (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                              [SrcLoc.SrcSpan])
                    = case x of ww { Language.Haskell.Tools.AST.Ann.Ann ww1 ww2 ->
                      TraverseAST.$wchkFieldUpdate @ dom $d(%,%) ww1 ww2 eta1 }
                  } in
                  (\ (s :: GhcMonad.Session)
                     (s1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                   case (m `cast`
                         (GhcMonad.N:Ghc[0]
                              <(Language.Haskell.Tools.AST.ElementTypes.FieldUpdate dom,
                                Data.Map.Base.Map
                                  (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                                  [SrcLoc.SrcSpan])>_R)
                           s)
                          `cast`
                        (GHC.Types.N:IO[0]
                             <(Language.Haskell.Tools.AST.ElementTypes.FieldUpdate dom,
                               Data.Map.Base.Map
                                 (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                                 [SrcLoc.SrcSpan])>_R)
                          s1 of ds1 { (#,#) ipv ipv1 ->
                   case ((((f (case ipv1 of wild { (,) a1 s' -> a1 }))
                             `cast`
                           (Control.Monad.Trans.Reader.N:ReaderT[0]
                                <*>_N
                                <[GHC.LanguageExtensions.Type.Extension]>_R
                                <Control.Monad.Trans.State.Lazy.StateT
                                   ExtMap.ExtMap GhcMonad.Ghc>_R
                                <Language.Haskell.Tools.AST.Ann.Ann
                                   Language.Haskell.Tools.AST.Representation.Exprs.UFieldUpdate
                                   dom
                                   Language.Haskell.Tools.AST.Ann.SrcTemplateStage>_N)
                             eta)
                            `cast`
                          (Control.Monad.Trans.State.Lazy.N:StateT[0]
                               <Data.Map.Base.Map
                                  (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                                  [SrcLoc.SrcSpan]>_N
                               <GhcMonad.Ghc>_R
                               <Language.Haskell.Tools.AST.Ann.Ann
                                  Language.Haskell.Tools.AST.Representation.Exprs.UFieldUpdate
                                  dom
                                  Language.Haskell.Tools.AST.Ann.SrcTemplateStage>_N)
                            (case ipv1 of wild { (,) a1 s' -> s' }))
                           `cast`
                         (GhcMonad.N:Ghc[0]
                              <(Language.Haskell.Tools.AST.Ann.Ann
                                  Language.Haskell.Tools.AST.Representation.Exprs.UFieldUpdate
                                  dom
                                  Language.Haskell.Tools.AST.Ann.SrcTemplateStage,
                                Data.Map.Base.Map
                                  (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                                  [SrcLoc.SrcSpan])>_R)
                           s)
                          `cast`
                        (GHC.Types.N:IO[0]
                             <(Language.Haskell.Tools.AST.Ann.Ann
                                 Language.Haskell.Tools.AST.Representation.Exprs.UFieldUpdate
                                 dom
                                 Language.Haskell.Tools.AST.Ann.SrcTemplateStage,
                               Data.Map.Base.Map
                                 (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                                 [SrcLoc.SrcSpan])>_R)
                          ipv of ds2 { (#,#) ipv2 ipv3 ->
                   ((((g (case ipv3 of wild { (,) a1 s' -> a1 }))
                        `cast`
                      (Control.Monad.Trans.Reader.N:ReaderT[0]
                           <*>_N
                           <[GHC.LanguageExtensions.Type.Extension]>_R
                           <Control.Monad.Trans.State.Lazy.StateT
                              ExtMap.ExtMap GhcMonad.Ghc>_R
                           <Language.Haskell.Tools.AST.Ann.Ann
                              Language.Haskell.Tools.AST.Representation.Exprs.UFieldUpdate
                              dom
                              Language.Haskell.Tools.AST.Ann.SrcTemplateStage>_N)
                        eta)
                       `cast`
                     (Control.Monad.Trans.State.Lazy.N:StateT[0]
                          <Data.Map.Base.Map
                             (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                             [SrcLoc.SrcSpan]>_N
                          <GhcMonad.Ghc>_R
                          <Language.Haskell.Tools.AST.Ann.Ann
                             Language.Haskell.Tools.AST.Representation.Exprs.UFieldUpdate
                             dom
                             Language.Haskell.Tools.AST.Ann.SrcTemplateStage>_N)
                       (case ipv3 of wild { (,) a1 s' -> s' }))
                      `cast`
                    (GhcMonad.N:Ghc[0]
                         <(Language.Haskell.Tools.AST.Ann.Ann
                             Language.Haskell.Tools.AST.Representation.Exprs.UFieldUpdate
                             dom
                             Language.Haskell.Tools.AST.Ann.SrcTemplateStage,
                           Data.Map.Base.Map
                             (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                             [SrcLoc.SrcSpan])>_R)
                      s)
                     `cast`
                   (GHC.Types.N:IO[0]
                        <(Language.Haskell.Tools.AST.Ann.Ann
                            Language.Haskell.Tools.AST.Representation.Exprs.UFieldUpdate
                            dom
                            Language.Haskell.Tools.AST.Ann.SrcTemplateStage,
                          Data.Map.Base.Map
                            (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                            [SrcLoc.SrcSpan])>_R)
                     ipv2 } })
                    `cast`
                  (Trans
                       (<GhcMonad.Session>_R
                        ->_R Sym (GHC.Types.N:IO[0]
                                      <(Language.Haskell.Tools.AST.Ann.Ann
                                          Language.Haskell.Tools.AST.Representation.Exprs.UFieldUpdate
                                          dom
                                          Language.Haskell.Tools.AST.Ann.SrcTemplateStage,
                                        Data.Map.Base.Map
                                          (ExtMap.LogicalRelation
                                             GHC.LanguageExtensions.Type.Extension)
                                          [SrcLoc.SrcSpan])>_R))
                       (Sym (GhcMonad.N:Ghc[0]
                                 <(Language.Haskell.Tools.AST.Ann.Ann
                                     Language.Haskell.Tools.AST.Representation.Exprs.UFieldUpdate
                                     dom
                                     Language.Haskell.Tools.AST.Ann.SrcTemplateStage,
                                   Data.Map.Base.Map
                                     (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                                     [SrcLoc.SrcSpan])>_R))))
                   `cast`
                 (<Language.Haskell.Tools.AST.ElementTypes.FieldUpdate dom>_R
                  ->_R Trans
                           (<[GHC.LanguageExtensions.Type.Extension]>_R
                            ->_R Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                          <ExtMap.ExtMap>_N
                                          <GhcMonad.Ghc>_R
                                          <Language.Haskell.Tools.AST.Ann.Ann
                                             Language.Haskell.Tools.AST.Representation.Exprs.UFieldUpdate
                                             dom
                                             Language.Haskell.Tools.AST.Ann.SrcTemplateStage>_N))
                           (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                     <*>_N
                                     <[GHC.LanguageExtensions.Type.Extension]>_R
                                     <Control.Monad.Trans.State.Lazy.StateT
                                        ExtMap.ExtMap GhcMonad.Ghc>_R
                                     <Language.Haskell.Tools.AST.Ann.Ann
                                        Language.Haskell.Tools.AST.Representation.Exprs.UFieldUpdate
                                        dom
                                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage>_N))) }) -}
3be4a9c81f7046aff29b0dfadf3a8e66
  traverseFieldUpdate1 ::
    Control.Reference.Representation.Reference
      (Control.Monad.Trans.Reader.ReaderT
         [GHC.LanguageExtensions.Type.Extension]
         (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc))
      Control.Reference.Representation.MU
      Control.Reference.Representation.MU
      Control.Reference.Representation.MU
      (Language.Haskell.Tools.AST.Ann.Ann
         Language.Haskell.Tools.AST.Representation.Exprs.UFieldUpdate
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
      (Language.Haskell.Tools.AST.Ann.Ann
         Language.Haskell.Tools.AST.Representation.Exprs.UFieldUpdate
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
      (Language.Haskell.Tools.AST.Ann.Ann
         Language.Haskell.Tools.AST.Representation.Exprs.UExpr
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
      (Language.Haskell.Tools.AST.Ann.Ann
         Language.Haskell.Tools.AST.Representation.Exprs.UExpr
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
  {- Unfolding: (\ @ dom ->
                 case Language.Haskell.Tools.AST.References.$wfieldValue
                        @ dom
                        @ Language.Haskell.Tools.AST.Ann.SrcTemplateStage
                        @ (Control.Monad.Trans.Reader.ReaderT
                             [GHC.LanguageExtensions.Type.Extension]
                             (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc))
                        @ Control.Reference.Representation.MU
                        (TraverseAST.$s$fMonadReaderT
                           @ [GHC.LanguageExtensions.Type.Extension])
                        Data.Proxy.$fMonadPlusProxy
                        TraverseAST.$sannJust1
                          `cast`
                        (Sym (Control.Instances.Morph.N:Morph[0]
                                  <GHC.Base.Maybe>_N
                                  <Data.Proxy.Proxy>_N)) of ww { (#,,,,,#) ww1 ww2 ww3 ww4 ww5 ww6 ->
                 Control.Reference.Representation.Reference
                   @ (Control.Monad.Trans.Reader.ReaderT
                        [GHC.LanguageExtensions.Type.Extension]
                        (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc))
                   @ Control.Reference.Representation.MU
                   @ Control.Reference.Representation.MU
                   @ Control.Reference.Representation.MU
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        Language.Haskell.Tools.AST.Representation.Exprs.UFieldUpdate
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        Language.Haskell.Tools.AST.Representation.Exprs.UFieldUpdate
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        Language.Haskell.Tools.AST.Representation.Exprs.UExpr
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        Language.Haskell.Tools.AST.Representation.Exprs.UExpr
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   ww1
                   ww2
                   ww3
                   ww4
                   ww5
                   ww6 }) -}
796c39eba8da4e068908741386a9447d
  traverseFieldUpdate2 ::
    ExtMonad.ExtDomain dom =>
    Language.Haskell.Tools.AST.ElementTypes.Name dom
    -> [GHC.LanguageExtensions.Type.Extension]
    -> ExtMap.ExtMap
    -> GhcMonad.Session
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          (Language.Haskell.Tools.AST.ElementTypes.Name dom,
           ExtMap.ExtMap) #)
  {- Arity: 6, HasNoCafRefs,
     Strictness: <S(S(LLS(S)LLLLLLLLLL)L),1*U(1*U(A,A,1*U(1*U),A,A,A,A,A,A,A,A,A,A),A)><L,U><L,A><L,U><L,A><S,U>,
     Unfolding: InlineRule (6, True, False)
                (\ @ dom
                   ($d(%,%) :: ExtMonad.ExtDomain dom)
                   (eta :: Language.Haskell.Tools.AST.ElementTypes.Name dom)
                   (eta1 :: [GHC.LanguageExtensions.Type.Extension])
                   (eta2 :: ExtMap.ExtMap)
                   (eta3 :: GhcMonad.Session)
                   (eta4 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Language.Haskell.Tools.AST.Ann.SemanticInfo'
                             dom Language.Haskell.Tools.AST.Ann.SameInfoDefaultCls)
                        @ Language.Haskell.Tools.AST.SemaInfoTypes.NoSemanticInfo
                        (Language.Haskell.Tools.AST.Ann.$p3Domain
                           @ dom
                           (GHC.Classes.$p1(%,%)
                              @ (Language.Haskell.Tools.AST.Ann.Domain dom)
                              @ (Language.Haskell.Tools.AST.SemaInfoClasses.HasNameInfo'
                                   (Language.Haskell.Tools.AST.Ann.SemanticInfo
                                      dom
                                      Language.Haskell.Tools.AST.Representation.Names.UQualifiedName))
                              $d(%,%)))
                          `cast`
                        (Data.Type.Equality.N:~[0]
                             <*>_N <Language.Haskell.Tools.AST.Ann.SemanticInfo'
                                      dom
                                      Language.Haskell.Tools.AST.Ann.SameInfoDefaultCls>_N <Language.Haskell.Tools.AST.SemaInfoTypes.NoSemanticInfo>_N) of cobox0 { DEFAULT ->
                 (# eta4, (eta, eta2) #) }) -}
155fa1e03a9100efbe311d27371612c2
  traverseFieldUpdate3 ::
    Control.Reference.Representation.Reference
      (Control.Monad.Trans.Reader.ReaderT
         [GHC.LanguageExtensions.Type.Extension]
         (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc))
      Control.Reference.Representation.MU
      Control.Reference.Representation.MU
      Control.Reference.Representation.MU
      (Language.Haskell.Tools.AST.Ann.Ann
         Language.Haskell.Tools.AST.Representation.Exprs.UFieldUpdate
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
      (Language.Haskell.Tools.AST.Ann.Ann
         Language.Haskell.Tools.AST.Representation.Exprs.UFieldUpdate
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
      (Language.Haskell.Tools.AST.Ann.Ann
         Language.Haskell.Tools.AST.Representation.Names.UName
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
      (Language.Haskell.Tools.AST.Ann.Ann
         Language.Haskell.Tools.AST.Representation.Names.UName
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
  {- Unfolding: (\ @ dom ->
                 case Control.Reference.Combinators.$w&+&
                        @ (Control.Monad.Trans.Reader.ReaderT
                             [GHC.LanguageExtensions.Type.Extension]
                             (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc))
                        @ Control.Reference.Representation.MU
                        @ Control.Reference.Representation.MU
                        @ Control.Reference.Representation.MU
                        @ (Language.Haskell.Tools.AST.Ann.Ann
                             Language.Haskell.Tools.AST.Representation.Exprs.UFieldUpdate
                             dom
                             Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                        @ (Language.Haskell.Tools.AST.Ann.Ann
                             Language.Haskell.Tools.AST.Representation.Names.UName
                             dom
                             Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                        TraverseAST.$s$fRefMonadswr
                        Control.Reference.Predefined.Containers.Tree.$s$fRefMonadswr1
                        Data.Proxy.$fMonadPlusProxy
                        Data.Proxy.$fMonadPlusProxy
                        (TraverseAST.traverseFieldUpdate5 @ dom)
                        (TraverseAST.traverseFieldUpdate4
                           @ dom) of ww { (#,,,,,#) ww1 ww2 ww3 ww4 ww5 ww6 ->
                 Control.Reference.Representation.Reference
                   @ (Control.Monad.Trans.Reader.ReaderT
                        [GHC.LanguageExtensions.Type.Extension]
                        (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc))
                   @ Control.Reference.Representation.MU
                   @ Control.Reference.Representation.MU
                   @ Control.Reference.Representation.MU
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        Language.Haskell.Tools.AST.Representation.Exprs.UFieldUpdate
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        Language.Haskell.Tools.AST.Representation.Exprs.UFieldUpdate
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        Language.Haskell.Tools.AST.Representation.Names.UName
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        Language.Haskell.Tools.AST.Representation.Names.UName
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   ww1
                   ww2
                   ww3
                   ww4
                   ww5
                   ww6 }) -}
c4d6712c5a79fb698a7c50c97483acbf
  traverseFieldUpdate4 ::
    Control.Reference.Representation.Reference
      (Control.Monad.Trans.Reader.ReaderT
         [GHC.LanguageExtensions.Type.Extension]
         (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc))
      Control.Reference.Representation.MU
      Control.Reference.Representation.MU
      Control.Reference.Representation.MU
      (Language.Haskell.Tools.AST.Ann.Ann
         Language.Haskell.Tools.AST.Representation.Exprs.UFieldUpdate
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
      (Language.Haskell.Tools.AST.Ann.Ann
         Language.Haskell.Tools.AST.Representation.Exprs.UFieldUpdate
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
      (Language.Haskell.Tools.AST.Ann.Ann
         Language.Haskell.Tools.AST.Representation.Names.UName
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
      (Language.Haskell.Tools.AST.Ann.Ann
         Language.Haskell.Tools.AST.Representation.Names.UName
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
  {- Unfolding: (\ @ dom ->
                 case Language.Haskell.Tools.AST.References.$wfieldUpdateName
                        @ dom
                        @ Language.Haskell.Tools.AST.Ann.SrcTemplateStage
                        @ (Control.Monad.Trans.Reader.ReaderT
                             [GHC.LanguageExtensions.Type.Extension]
                             (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc))
                        @ Control.Reference.Representation.MU
                        (TraverseAST.$s$fMonadReaderT
                           @ [GHC.LanguageExtensions.Type.Extension])
                        Data.Proxy.$fMonadPlusProxy
                        TraverseAST.$sannJust1
                          `cast`
                        (Sym (Control.Instances.Morph.N:Morph[0]
                                  <GHC.Base.Maybe>_N
                                  <Data.Proxy.Proxy>_N)) of ww { (#,,,,,#) ww1 ww2 ww3 ww4 ww5 ww6 ->
                 Control.Reference.Representation.Reference
                   @ (Control.Monad.Trans.Reader.ReaderT
                        [GHC.LanguageExtensions.Type.Extension]
                        (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc))
                   @ Control.Reference.Representation.MU
                   @ Control.Reference.Representation.MU
                   @ Control.Reference.Representation.MU
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        Language.Haskell.Tools.AST.Representation.Exprs.UFieldUpdate
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        Language.Haskell.Tools.AST.Representation.Exprs.UFieldUpdate
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        Language.Haskell.Tools.AST.Representation.Names.UName
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        Language.Haskell.Tools.AST.Representation.Names.UName
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   ww1
                   ww2
                   ww3
                   ww4
                   ww5
                   ww6 }) -}
f370cb2ff382b74caf12123afe141eed
  traverseFieldUpdate5 ::
    Control.Reference.Representation.Reference
      (Control.Monad.Trans.Reader.ReaderT
         [GHC.LanguageExtensions.Type.Extension]
         (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc))
      Control.Reference.Representation.MU
      Control.Reference.Representation.MU
      Control.Reference.Representation.MU
      (Language.Haskell.Tools.AST.Ann.Ann
         Language.Haskell.Tools.AST.Representation.Exprs.UFieldUpdate
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
      (Language.Haskell.Tools.AST.Ann.Ann
         Language.Haskell.Tools.AST.Representation.Exprs.UFieldUpdate
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
      (Language.Haskell.Tools.AST.Ann.Ann
         Language.Haskell.Tools.AST.Representation.Names.UName
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
      (Language.Haskell.Tools.AST.Ann.Ann
         Language.Haskell.Tools.AST.Representation.Names.UName
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
  {- Unfolding: (\ @ dom ->
                 case Language.Haskell.Tools.AST.References.$wfieldName
                        @ dom
                        @ Language.Haskell.Tools.AST.Ann.SrcTemplateStage
                        @ (Control.Monad.Trans.Reader.ReaderT
                             [GHC.LanguageExtensions.Type.Extension]
                             (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc))
                        @ Control.Reference.Representation.MU
                        (TraverseAST.$s$fMonadReaderT
                           @ [GHC.LanguageExtensions.Type.Extension])
                        Data.Proxy.$fMonadPlusProxy
                        TraverseAST.$sannJust1
                          `cast`
                        (Sym (Control.Instances.Morph.N:Morph[0]
                                  <GHC.Base.Maybe>_N
                                  <Data.Proxy.Proxy>_N)) of ww { (#,,,,,#) ww1 ww2 ww3 ww4 ww5 ww6 ->
                 Control.Reference.Representation.Reference
                   @ (Control.Monad.Trans.Reader.ReaderT
                        [GHC.LanguageExtensions.Type.Extension]
                        (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc))
                   @ Control.Reference.Representation.MU
                   @ Control.Reference.Representation.MU
                   @ Control.Reference.Representation.MU
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        Language.Haskell.Tools.AST.Representation.Exprs.UFieldUpdate
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        Language.Haskell.Tools.AST.Representation.Exprs.UFieldUpdate
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        Language.Haskell.Tools.AST.Representation.Names.UName
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        Language.Haskell.Tools.AST.Representation.Names.UName
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   ww1
                   ww2
                   ww3
                   ww4
                   ww5
                   ww6 }) -}
bfcae423cae9a0c5105195fe1ecdb746
  traverseFixitySignature ::
    ExtMonad.CheckNode
      Language.Haskell.Tools.AST.ElementTypes.FixitySignature
  {- Arity: 6, HasNoCafRefs,
     Strictness: <S(S(LLS(S)LLLLLLLLLL)L),1*U(1*U(A,A,1*U(1*U),A,A,A,A,A,A,A,A,A,A),A)><L,U><L,A><L,U><L,A><S,U>,
     Unfolding: InlineRule (0, True, True)
                TraverseAST.traverseFixitySignature1
                  `cast`
                (forall (dom :: <*>_N).
                 <ExtMonad.ExtDomain dom>_R
                 ->_R <Language.Haskell.Tools.AST.ElementTypes.FixitySignature
                         dom>_R
                 ->_R Trans
                          (<[GHC.LanguageExtensions.Type.Extension]>_R
                           ->_R Trans
                                    (<ExtMap.ExtMap>_R
                                     ->_R Trans
                                              (<GhcMonad.Session>_R
                                               ->_R Sym (GHC.Types.N:IO[0]
                                                             <(Language.Haskell.Tools.AST.ElementTypes.FixitySignature
                                                                 dom,
                                                               ExtMap.ExtMap)>_R))
                                              (Sym (GhcMonad.N:Ghc[0]
                                                        <(Language.Haskell.Tools.AST.ElementTypes.FixitySignature
                                                            dom,
                                                          ExtMap.ExtMap)>_R)))
                                    (Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                              <ExtMap.ExtMap>_N
                                              <GhcMonad.Ghc>_R
                                              <Language.Haskell.Tools.AST.ElementTypes.FixitySignature
                                                 dom>_N)))
                          (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                    <*>_N
                                    <[GHC.LanguageExtensions.Type.Extension]>_R
                                    <Control.Monad.Trans.State.Lazy.StateT
                                       ExtMap.ExtMap GhcMonad.Ghc>_R
                                    <Language.Haskell.Tools.AST.ElementTypes.FixitySignature
                                       dom>_N))) -}
4b54ae16e9d2ec6fb7da53b9196663ea
  traverseFixitySignature1 ::
    ExtMonad.ExtDomain dom =>
    Language.Haskell.Tools.AST.ElementTypes.FixitySignature dom
    -> [GHC.LanguageExtensions.Type.Extension]
    -> ExtMap.ExtMap
    -> GhcMonad.Session
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          (Language.Haskell.Tools.AST.ElementTypes.FixitySignature dom,
           ExtMap.ExtMap) #)
  {- Arity: 6, HasNoCafRefs,
     Strictness: <S(S(LLS(S)LLLLLLLLLL)L),1*U(1*U(A,A,1*U(1*U),A,A,A,A,A,A,A,A,A,A),A)><L,U><L,A><L,U><L,A><S,U>,
     Unfolding: InlineRule (6, True, False)
                (\ @ dom
                   ($d(%,%) :: ExtMonad.ExtDomain dom)
                   (eta :: Language.Haskell.Tools.AST.ElementTypes.FixitySignature
                             dom)
                   (eta1 :: [GHC.LanguageExtensions.Type.Extension])
                   (eta2 :: ExtMap.ExtMap)
                   (eta3 :: GhcMonad.Session)
                   (eta4 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Language.Haskell.Tools.AST.Ann.SemanticInfo'
                             dom Language.Haskell.Tools.AST.Ann.SameInfoDefaultCls)
                        @ Language.Haskell.Tools.AST.SemaInfoTypes.NoSemanticInfo
                        (Language.Haskell.Tools.AST.Ann.$p3Domain
                           @ dom
                           (GHC.Classes.$p1(%,%)
                              @ (Language.Haskell.Tools.AST.Ann.Domain dom)
                              @ (Language.Haskell.Tools.AST.SemaInfoClasses.HasNameInfo'
                                   (Language.Haskell.Tools.AST.Ann.SemanticInfo
                                      dom
                                      Language.Haskell.Tools.AST.Representation.Names.UQualifiedName))
                              $d(%,%)))
                          `cast`
                        (Data.Type.Equality.N:~[0]
                             <*>_N <Language.Haskell.Tools.AST.Ann.SemanticInfo'
                                      dom
                                      Language.Haskell.Tools.AST.Ann.SameInfoDefaultCls>_N <Language.Haskell.Tools.AST.SemaInfoTypes.NoSemanticInfo>_N) of cobox0 { DEFAULT ->
                 (# eta4, (eta, eta2) #) }) -}
858539e7eef62821d57cad3433ea43b7
  traverseGuardedCaseRhs ::
    ExtMonad.CheckUNode uexpr
    -> ExtMonad.CheckNode (TraverseAST.GuardedCaseRhsG uexpr)
  {- Arity: 2,
     Strictness: <L,1*C1(U)><S(S(LLS(S)LLLLLLLLLL)L),U(U(U,U,U(U),U,U,U,U,U,U,U,U,U,U),U)>,
     Unfolding: (\ @ (uexpr :: GHC.Types.*
                               -> GHC.Types.* -> GHC.Types.*)
                   (dk :: ExtMonad.CheckUNode uexpr)
                   @ dom
                   ($d(%,%) :: ExtMonad.ExtDomain dom) ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Language.Haskell.Tools.AST.Ann.SemanticInfo'
                             dom Language.Haskell.Tools.AST.Ann.SameInfoDefaultCls)
                        @ Language.Haskell.Tools.AST.SemaInfoTypes.NoSemanticInfo
                        (Language.Haskell.Tools.AST.Ann.$p3Domain
                           @ dom
                           (GHC.Classes.$p1(%,%)
                              @ (Language.Haskell.Tools.AST.Ann.Domain dom)
                              @ (Language.Haskell.Tools.AST.SemaInfoClasses.HasNameInfo'
                                   (Language.Haskell.Tools.AST.Ann.SemanticInfo
                                      dom
                                      Language.Haskell.Tools.AST.Representation.Names.UQualifiedName))
                              $d(%,%)))
                          `cast`
                        (Data.Type.Equality.N:~[0]
                             <*>_N <Language.Haskell.Tools.AST.Ann.SemanticInfo'
                                      dom
                                      Language.Haskell.Tools.AST.Ann.SameInfoDefaultCls>_N <Language.Haskell.Tools.AST.SemaInfoTypes.NoSemanticInfo>_N) of cobox0 { DEFAULT ->
                 let {
                   f :: Language.Haskell.Tools.AST.Ann.Ann
                          (Language.Haskell.Tools.AST.Representation.Exprs.UGuardedCaseRhs'
                             uexpr)
                          dom
                          Language.Haskell.Tools.AST.Ann.SrcTemplateStage
                        -> Control.Monad.Trans.Reader.ReaderT
                             [GHC.LanguageExtensions.Type.Extension]
                             (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc)
                             (Language.Haskell.Tools.AST.Ann.Ann
                                (Language.Haskell.Tools.AST.Representation.Exprs.UGuardedCaseRhs'
                                   uexpr)
                                dom
                                Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   = case TraverseAST.traverseGuardedCaseRhs2
                            @ uexpr
                            @ dom of wild { Control.Reference.Representation.Reference ds1 ds2 ds3 ds4 ds5 ds6 ->
                     ds3 (TraverseAST.traverseRhsGuard @ dom $d(%,%)) }
                 } in
                 let {
                   g :: Language.Haskell.Tools.AST.Ann.Ann
                          (Language.Haskell.Tools.AST.Representation.Exprs.UGuardedCaseRhs'
                             uexpr)
                          dom
                          Language.Haskell.Tools.AST.Ann.SrcTemplateStage
                        -> Control.Monad.Trans.Reader.ReaderT
                             [GHC.LanguageExtensions.Type.Extension]
                             (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc)
                             (Language.Haskell.Tools.AST.Ann.Ann
                                (Language.Haskell.Tools.AST.Representation.Exprs.UGuardedCaseRhs'
                                   uexpr)
                                dom
                                Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   = case TraverseAST.traverseGuardedCaseRhs1
                            @ dom
                            @ uexpr of wild { Control.Reference.Representation.Reference ds1 ds2 ds3 ds4 ds5 ds6 ->
                     ds3 (dk @ dom $d(%,%)) }
                 } in
                 \ (x :: Language.Haskell.Tools.AST.Ann.Ann
                           (Language.Haskell.Tools.AST.Representation.Exprs.UGuardedCaseRhs'
                              uexpr)
                           dom
                           Language.Haskell.Tools.AST.Ann.SrcTemplateStage) ->
                 let {
                   m1 :: Control.Monad.Trans.Reader.ReaderT
                           [GHC.LanguageExtensions.Type.Extension]
                           (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc)
                           (Language.Haskell.Tools.AST.Ann.Ann
                              (Language.Haskell.Tools.AST.Representation.Exprs.UGuardedCaseRhs'
                                 uexpr)
                              dom
                              Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   = f x
                 } in
                 (\ (r1 :: [GHC.LanguageExtensions.Type.Extension]) ->
                  let {
                    m2 :: Control.Monad.Trans.State.Lazy.StateT
                            (Data.Map.Base.Map
                               (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                               [SrcLoc.SrcSpan])
                            GhcMonad.Ghc
                            (Language.Haskell.Tools.AST.Ann.Ann
                               (Language.Haskell.Tools.AST.Representation.Exprs.UGuardedCaseRhs'
                                  uexpr)
                               dom
                               Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                    = m1
                        `cast`
                      (Control.Monad.Trans.Reader.N:ReaderT[0]
                           <*>_N
                           <[GHC.LanguageExtensions.Type.Extension]>_R
                           <Control.Monad.Trans.State.Lazy.StateT
                              ExtMap.ExtMap GhcMonad.Ghc>_R
                           <Language.Haskell.Tools.AST.Ann.Ann
                              (Language.Haskell.Tools.AST.Representation.Exprs.UGuardedCaseRhs'
                                 uexpr)
                              dom
                              Language.Haskell.Tools.AST.Ann.SrcTemplateStage>_N)
                        r1
                  } in
                  (\ (s1 :: Data.Map.Base.Map
                              (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                              [SrcLoc.SrcSpan]) ->
                   let {
                     m :: GhcMonad.Ghc
                            (Language.Haskell.Tools.AST.Ann.Ann
                               (Language.Haskell.Tools.AST.Representation.Exprs.UGuardedCaseRhs'
                                  uexpr)
                               dom
                               Language.Haskell.Tools.AST.Ann.SrcTemplateStage,
                             Data.Map.Base.Map
                               (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                               [SrcLoc.SrcSpan])
                     = m2
                         `cast`
                       (Control.Monad.Trans.State.Lazy.N:StateT[0]
                            <Data.Map.Base.Map
                               (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                               [SrcLoc.SrcSpan]>_N
                            <GhcMonad.Ghc>_R
                            <Language.Haskell.Tools.AST.Ann.Ann
                               (Language.Haskell.Tools.AST.Representation.Exprs.UGuardedCaseRhs'
                                  uexpr)
                               dom
                               Language.Haskell.Tools.AST.Ann.SrcTemplateStage>_N)
                         s1
                   } in
                   (\ (s :: GhcMonad.Session)
                      (s2 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                    case (m `cast`
                          (GhcMonad.N:Ghc[0]
                               <(Language.Haskell.Tools.AST.Ann.Ann
                                   (Language.Haskell.Tools.AST.Representation.Exprs.UGuardedCaseRhs'
                                      uexpr)
                                   dom
                                   Language.Haskell.Tools.AST.Ann.SrcTemplateStage,
                                 Data.Map.Base.Map
                                   (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                                   [SrcLoc.SrcSpan])>_R)
                            s)
                           `cast`
                         (GHC.Types.N:IO[0]
                              <(Language.Haskell.Tools.AST.Ann.Ann
                                  (Language.Haskell.Tools.AST.Representation.Exprs.UGuardedCaseRhs'
                                     uexpr)
                                  dom
                                  Language.Haskell.Tools.AST.Ann.SrcTemplateStage,
                                Data.Map.Base.Map
                                  (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                                  [SrcLoc.SrcSpan])>_R)
                           s2 of ds1 { (#,#) ipv ipv1 ->
                    ((((g (case ipv1 of wild { (,) a1 s' -> a1 }))
                         `cast`
                       (Control.Monad.Trans.Reader.N:ReaderT[0]
                            <*>_N
                            <[GHC.LanguageExtensions.Type.Extension]>_R
                            <Control.Monad.Trans.State.Lazy.StateT
                               ExtMap.ExtMap GhcMonad.Ghc>_R
                            <Language.Haskell.Tools.AST.Ann.Ann
                               (Language.Haskell.Tools.AST.Representation.Exprs.UGuardedCaseRhs'
                                  uexpr)
                               dom
                               Language.Haskell.Tools.AST.Ann.SrcTemplateStage>_N)
                         r1)
                        `cast`
                      (Control.Monad.Trans.State.Lazy.N:StateT[0]
                           <Data.Map.Base.Map
                              (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                              [SrcLoc.SrcSpan]>_N
                           <GhcMonad.Ghc>_R
                           <Language.Haskell.Tools.AST.Ann.Ann
                              (Language.Haskell.Tools.AST.Representation.Exprs.UGuardedCaseRhs'
                                 uexpr)
                              dom
                              Language.Haskell.Tools.AST.Ann.SrcTemplateStage>_N)
                        (case ipv1 of wild { (,) a1 s' -> s' }))
                       `cast`
                     (GhcMonad.N:Ghc[0]
                          <(Language.Haskell.Tools.AST.Ann.Ann
                              (Language.Haskell.Tools.AST.Representation.Exprs.UGuardedCaseRhs'
                                 uexpr)
                              dom
                              Language.Haskell.Tools.AST.Ann.SrcTemplateStage,
                            Data.Map.Base.Map
                              (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                              [SrcLoc.SrcSpan])>_R)
                       s)
                      `cast`
                    (GHC.Types.N:IO[0]
                         <(Language.Haskell.Tools.AST.Ann.Ann
                             (Language.Haskell.Tools.AST.Representation.Exprs.UGuardedCaseRhs'
                                uexpr)
                             dom
                             Language.Haskell.Tools.AST.Ann.SrcTemplateStage,
                           Data.Map.Base.Map
                             (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                             [SrcLoc.SrcSpan])>_R)
                      ipv })
                     `cast`
                   (Trans
                        (<GhcMonad.Session>_R
                         ->_R Sym (GHC.Types.N:IO[0]
                                       <(Language.Haskell.Tools.AST.Ann.Ann
                                           (Language.Haskell.Tools.AST.Representation.Exprs.UGuardedCaseRhs'
                                              uexpr)
                                           dom
                                           Language.Haskell.Tools.AST.Ann.SrcTemplateStage,
                                         Data.Map.Base.Map
                                           (ExtMap.LogicalRelation
                                              GHC.LanguageExtensions.Type.Extension)
                                           [SrcLoc.SrcSpan])>_R))
                        (Sym (GhcMonad.N:Ghc[0]
                                  <(Language.Haskell.Tools.AST.Ann.Ann
                                      (Language.Haskell.Tools.AST.Representation.Exprs.UGuardedCaseRhs'
                                         uexpr)
                                      dom
                                      Language.Haskell.Tools.AST.Ann.SrcTemplateStage,
                                    Data.Map.Base.Map
                                      (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                                      [SrcLoc.SrcSpan])>_R))))
                    `cast`
                  (Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                            <Data.Map.Base.Map
                               (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                               [SrcLoc.SrcSpan]>_N
                            <GhcMonad.Ghc>_R
                            <Language.Haskell.Tools.AST.Ann.Ann
                               (Language.Haskell.Tools.AST.Representation.Exprs.UGuardedCaseRhs'
                                  uexpr)
                               dom
                               Language.Haskell.Tools.AST.Ann.SrcTemplateStage>_N)))
                   `cast`
                 (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                           <*>_N
                           <[GHC.LanguageExtensions.Type.Extension]>_R
                           <Control.Monad.Trans.State.Lazy.StateT
                              ExtMap.ExtMap GhcMonad.Ghc>_R
                           <Language.Haskell.Tools.AST.Ann.Ann
                              (Language.Haskell.Tools.AST.Representation.Exprs.UGuardedCaseRhs'
                                 uexpr)
                              dom
                              Language.Haskell.Tools.AST.Ann.SrcTemplateStage>_N)) }) -}
a61b8a6a9d673d67e81f97c542e85a5c
  traverseGuardedCaseRhs1 ::
    Control.Reference.Representation.Reference
      (Control.Monad.Trans.Reader.ReaderT
         [GHC.LanguageExtensions.Type.Extension]
         (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc))
      Control.Reference.Representation.MU
      Control.Reference.Representation.MU
      Control.Reference.Representation.MU
      (Language.Haskell.Tools.AST.Ann.Ann
         (Language.Haskell.Tools.AST.Representation.Exprs.UGuardedCaseRhs'
            uexpr)
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
      (Language.Haskell.Tools.AST.Ann.Ann
         (Language.Haskell.Tools.AST.Representation.Exprs.UGuardedCaseRhs'
            uexpr)
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
      (Language.Haskell.Tools.AST.Ann.Ann
         uexpr dom Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
      (Language.Haskell.Tools.AST.Ann.Ann
         uexpr dom Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
  {- Unfolding: (\ @ dom
                   @ (uexpr :: GHC.Types.* -> GHC.Types.* -> GHC.Types.*) ->
                 case Language.Haskell.Tools.AST.References.$wcaseGuardExpr
                        @ GHC.Prim.Any
                        @ uexpr
                        @ dom
                        @ Language.Haskell.Tools.AST.Ann.SrcTemplateStage
                        @ (Control.Monad.Trans.Reader.ReaderT
                             [GHC.LanguageExtensions.Type.Extension]
                             (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc))
                        @ Control.Reference.Representation.MU
                        TraverseAST.$s$fRefMonadswr of ww { (#,,,,,#) ww1 ww2 ww3 ww4 ww5 ww6 ->
                 Control.Reference.Representation.Reference
                   @ (Control.Monad.Trans.Reader.ReaderT
                        [GHC.LanguageExtensions.Type.Extension]
                        (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc))
                   @ Control.Reference.Representation.MU
                   @ Control.Reference.Representation.MU
                   @ Control.Reference.Representation.MU
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        (Language.Haskell.Tools.AST.Representation.Exprs.UGuardedCaseRhs'
                           uexpr)
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        (Language.Haskell.Tools.AST.Representation.Exprs.UGuardedCaseRhs'
                           uexpr)
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        uexpr dom Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        uexpr dom Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   ww1
                   ww2
                   ww3
                   ww4
                   ww5
                   ww6 }) -}
e32f8569cb9efc71eebe56c835eb8f49
  traverseGuardedCaseRhs2 ::
    Control.Reference.Representation.Reference
      (Control.Monad.Trans.Reader.ReaderT
         [GHC.LanguageExtensions.Type.Extension]
         (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc))
      Control.Reference.Representation.MU
      Control.Reference.Representation.MU
      Control.Reference.Representation.MU
      (Language.Haskell.Tools.AST.Ann.Ann
         (Language.Haskell.Tools.AST.Representation.Exprs.UGuardedCaseRhs'
            uexpr)
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
      (Language.Haskell.Tools.AST.Ann.Ann
         (Language.Haskell.Tools.AST.Representation.Exprs.UGuardedCaseRhs'
            uexpr)
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
      (Language.Haskell.Tools.AST.Ann.Ann
         Language.Haskell.Tools.AST.Representation.Binds.URhsGuard
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
      (Language.Haskell.Tools.AST.Ann.Ann
         Language.Haskell.Tools.AST.Representation.Binds.URhsGuard
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
  {- Unfolding: (\ @ (uexpr :: GHC.Types.*
                               -> GHC.Types.* -> GHC.Types.*)
                   @ dom ->
                 case Control.Reference.Combinators.$w&
                        @ (Control.Monad.Trans.Reader.ReaderT
                             [GHC.LanguageExtensions.Type.Extension]
                             (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc))
                        @ Control.Reference.Representation.MU
                        @ Control.Reference.Representation.MU
                        @ Control.Reference.Representation.MU
                        @ (Language.Haskell.Tools.AST.Ann.Ann
                             (Language.Haskell.Tools.AST.Representation.Exprs.UGuardedCaseRhs'
                                uexpr)
                             dom
                             Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                        @ (Language.Haskell.Tools.AST.Ann.Ann
                             (Language.Haskell.Tools.AST.Representation.Exprs.UGuardedCaseRhs'
                                uexpr)
                             dom
                             Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                        @ (Language.Haskell.Tools.AST.Ann.AnnListG
                             Language.Haskell.Tools.AST.Representation.Binds.URhsGuard
                             dom
                             Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                        @ (Language.Haskell.Tools.AST.Ann.AnnListG
                             Language.Haskell.Tools.AST.Representation.Binds.URhsGuard
                             dom
                             Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                        @ (Language.Haskell.Tools.AST.Ann.Ann
                             Language.Haskell.Tools.AST.Representation.Binds.URhsGuard
                             dom
                             Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                        @ (Language.Haskell.Tools.AST.Ann.Ann
                             Language.Haskell.Tools.AST.Representation.Binds.URhsGuard
                             dom
                             Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                        (TraverseAST.traverseGuardedCaseRhs4 @ uexpr @ dom)
                        (TraverseAST.traverseGuardedCaseRhs3
                           @ dom) of ww { (#,,,,,#) ww1 ww2 ww3 ww4 ww5 ww6 ->
                 Control.Reference.Representation.Reference
                   @ (Control.Monad.Trans.Reader.ReaderT
                        [GHC.LanguageExtensions.Type.Extension]
                        (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc))
                   @ Control.Reference.Representation.MU
                   @ Control.Reference.Representation.MU
                   @ Control.Reference.Representation.MU
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        (Language.Haskell.Tools.AST.Representation.Exprs.UGuardedCaseRhs'
                           uexpr)
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        (Language.Haskell.Tools.AST.Representation.Exprs.UGuardedCaseRhs'
                           uexpr)
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        Language.Haskell.Tools.AST.Representation.Binds.URhsGuard
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        Language.Haskell.Tools.AST.Representation.Binds.URhsGuard
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   ww1
                   ww2
                   ww3
                   ww4
                   ww5
                   ww6 }) -}
1277a2b0153f17846212046dabca0cb7
  traverseGuardedCaseRhs3 ::
    Control.Reference.Representation.Reference
      (Control.Monad.Trans.Reader.ReaderT
         [GHC.LanguageExtensions.Type.Extension]
         (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc))
      Control.Reference.Representation.MU
      Control.Reference.Representation.MU
      Control.Reference.Representation.MU
      (Language.Haskell.Tools.AST.Ann.AnnListG
         Language.Haskell.Tools.AST.Representation.Binds.URhsGuard
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
      (Language.Haskell.Tools.AST.Ann.AnnListG
         Language.Haskell.Tools.AST.Representation.Binds.URhsGuard
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
      (Language.Haskell.Tools.AST.Ann.Ann
         Language.Haskell.Tools.AST.Representation.Binds.URhsGuard
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
      (Language.Haskell.Tools.AST.Ann.Ann
         Language.Haskell.Tools.AST.Representation.Binds.URhsGuard
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
  {- Unfolding: (\ @ dom ->
                 case Language.Haskell.Tools.AST.Ann.$wannList
                        @ Language.Haskell.Tools.AST.Representation.Binds.URhsGuard
                        @ dom
                        @ Language.Haskell.Tools.AST.Ann.SrcTemplateStage
                        @ (Control.Monad.Trans.Reader.ReaderT
                             [GHC.LanguageExtensions.Type.Extension]
                             (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc))
                        @ Control.Reference.Representation.MU
                        TraverseAST.$s$fRefMonadswr
                        TraverseAST.$sannList1
                          `cast`
                        (Sym (Control.Instances.Morph.N:Morph[0]
                                  <[]>_N
                                  <Data.Proxy.Proxy>_N)) of ww { (#,,,,,#) ww1 ww2 ww3 ww4 ww5 ww6 ->
                 Control.Reference.Representation.Reference
                   @ (Control.Monad.Trans.Reader.ReaderT
                        [GHC.LanguageExtensions.Type.Extension]
                        (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc))
                   @ Control.Reference.Representation.MU
                   @ Control.Reference.Representation.MU
                   @ Control.Reference.Representation.MU
                   @ (Language.Haskell.Tools.AST.Ann.AnnListG
                        Language.Haskell.Tools.AST.Representation.Binds.URhsGuard
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   @ (Language.Haskell.Tools.AST.Ann.AnnListG
                        Language.Haskell.Tools.AST.Representation.Binds.URhsGuard
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        Language.Haskell.Tools.AST.Representation.Binds.URhsGuard
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        Language.Haskell.Tools.AST.Representation.Binds.URhsGuard
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   ww1
                   ww2
                   ww3
                   ww4
                   ww5
                   ww6 }) -}
1d22d7af802d66f1c1e9ab70c6f84e09
  traverseGuardedCaseRhs4 ::
    Control.Reference.Representation.Reference
      (Control.Monad.Trans.Reader.ReaderT
         [GHC.LanguageExtensions.Type.Extension]
         (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc))
      Control.Reference.Representation.MU
      Control.Reference.Representation.MU
      Control.Reference.Representation.MU
      (Language.Haskell.Tools.AST.Ann.Ann
         (Language.Haskell.Tools.AST.Representation.Exprs.UGuardedCaseRhs'
            uexpr)
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
      (Language.Haskell.Tools.AST.Ann.Ann
         (Language.Haskell.Tools.AST.Representation.Exprs.UGuardedCaseRhs'
            uexpr)
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
      (Language.Haskell.Tools.AST.Ann.AnnListG
         Language.Haskell.Tools.AST.Representation.Binds.URhsGuard
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
      (Language.Haskell.Tools.AST.Ann.AnnListG
         Language.Haskell.Tools.AST.Representation.Binds.URhsGuard
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
  {- Unfolding: (\ @ (uexpr :: GHC.Types.*
                               -> GHC.Types.* -> GHC.Types.*)
                   @ dom ->
                 case Language.Haskell.Tools.AST.References.$wcaseGuardStmts
                        @ uexpr
                        @ dom
                        @ Language.Haskell.Tools.AST.Ann.SrcTemplateStage
                        @ (Control.Monad.Trans.Reader.ReaderT
                             [GHC.LanguageExtensions.Type.Extension]
                             (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc))
                        @ Control.Reference.Representation.MU
                        TraverseAST.$s$fRefMonadswr of ww { (#,,,,,#) ww1 ww2 ww3 ww4 ww5 ww6 ->
                 Control.Reference.Representation.Reference
                   @ (Control.Monad.Trans.Reader.ReaderT
                        [GHC.LanguageExtensions.Type.Extension]
                        (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc))
                   @ Control.Reference.Representation.MU
                   @ Control.Reference.Representation.MU
                   @ Control.Reference.Representation.MU
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        (Language.Haskell.Tools.AST.Representation.Exprs.UGuardedCaseRhs'
                           uexpr)
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        (Language.Haskell.Tools.AST.Representation.Exprs.UGuardedCaseRhs'
                           uexpr)
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   @ (Language.Haskell.Tools.AST.Ann.AnnListG
                        Language.Haskell.Tools.AST.Representation.Binds.URhsGuard
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   @ (Language.Haskell.Tools.AST.Ann.AnnListG
                        Language.Haskell.Tools.AST.Representation.Binds.URhsGuard
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   ww1
                   ww2
                   ww3
                   ww4
                   ww5
                   ww6 }) -}
a5c32e95f9822160c8863eb41de5ad1e
  traverseGuardedRhs ::
    ExtMonad.CheckNode
      Language.Haskell.Tools.AST.ElementTypes.GuardedRhs
  {- Arity: 1,
     Strictness: <S(S(LLS(S)LLLLLLLLLL)L),U(U(U,U,U(U),U,U,U,U,U,U,U,U,U,U),U)> -}
9fd6f8bc21076a70bd3d2010cdf5da3d
  traverseInstBody ::
    ExtMonad.CheckNode Language.Haskell.Tools.AST.ElementTypes.InstBody
  {- Arity: 1,
     Strictness: <S(S(LLS(S)LLLLLLLLLL)L),U(U(U,U,U(U),U,U,U,U,U,U,U,U,U,U),U)>,
     Unfolding: (\ @ dom ($d(%,%) :: ExtMonad.ExtDomain dom) ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Language.Haskell.Tools.AST.Ann.SemanticInfo'
                             dom Language.Haskell.Tools.AST.Ann.SameInfoDefaultCls)
                        @ Language.Haskell.Tools.AST.SemaInfoTypes.NoSemanticInfo
                        (Language.Haskell.Tools.AST.Ann.$p3Domain
                           @ dom
                           (GHC.Classes.$p1(%,%)
                              @ (Language.Haskell.Tools.AST.Ann.Domain dom)
                              @ (Language.Haskell.Tools.AST.SemaInfoClasses.HasNameInfo'
                                   (Language.Haskell.Tools.AST.Ann.SemanticInfo
                                      dom
                                      Language.Haskell.Tools.AST.Representation.Names.UQualifiedName))
                              $d(%,%)))
                          `cast`
                        (Data.Type.Equality.N:~[0]
                             <*>_N <Language.Haskell.Tools.AST.Ann.SemanticInfo'
                                      dom
                                      Language.Haskell.Tools.AST.Ann.SameInfoDefaultCls>_N <Language.Haskell.Tools.AST.SemaInfoTypes.NoSemanticInfo>_N) of cobox0 { DEFAULT ->
                 case TraverseAST.traverseInstBody1
                        @ dom of wild { Control.Reference.Representation.Reference ds1 ds2 ds3 ds4 ds5 ds6 ->
                 ds3 (TraverseAST.traverseInstBodyDecl @ dom $d(%,%)) } }) -}
fedbdda0704a7ddf151d203ea926ed67
  traverseInstBody1 ::
    Control.Reference.Representation.Reference
      (Control.Monad.Trans.Reader.ReaderT
         [GHC.LanguageExtensions.Type.Extension]
         (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc))
      Control.Reference.Representation.MU
      Control.Reference.Representation.MU
      Control.Reference.Representation.MU
      (Language.Haskell.Tools.AST.Ann.Ann
         Language.Haskell.Tools.AST.Representation.Decls.UInstBody
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
      (Language.Haskell.Tools.AST.Ann.Ann
         Language.Haskell.Tools.AST.Representation.Decls.UInstBody
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
      (Language.Haskell.Tools.AST.Ann.Ann
         Language.Haskell.Tools.AST.Representation.Decls.UInstBodyDecl
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
      (Language.Haskell.Tools.AST.Ann.Ann
         Language.Haskell.Tools.AST.Representation.Decls.UInstBodyDecl
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
  {- Unfolding: (\ @ dom ->
                 case Control.Reference.Combinators.$w&
                        @ (Control.Monad.Trans.Reader.ReaderT
                             [GHC.LanguageExtensions.Type.Extension]
                             (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc))
                        @ Control.Reference.Representation.MU
                        @ Control.Reference.Representation.MU
                        @ Control.Reference.Representation.MU
                        @ (Language.Haskell.Tools.AST.Ann.Ann
                             Language.Haskell.Tools.AST.Representation.Decls.UInstBody
                             dom
                             Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                        @ (Language.Haskell.Tools.AST.Ann.Ann
                             Language.Haskell.Tools.AST.Representation.Decls.UInstBody
                             dom
                             Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                        @ (Language.Haskell.Tools.AST.Ann.AnnListG
                             Language.Haskell.Tools.AST.Representation.Decls.UInstBodyDecl
                             dom
                             Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                        @ (Language.Haskell.Tools.AST.Ann.AnnListG
                             Language.Haskell.Tools.AST.Representation.Decls.UInstBodyDecl
                             dom
                             Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                        @ (Language.Haskell.Tools.AST.Ann.Ann
                             Language.Haskell.Tools.AST.Representation.Decls.UInstBodyDecl
                             dom
                             Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                        @ (Language.Haskell.Tools.AST.Ann.Ann
                             Language.Haskell.Tools.AST.Representation.Decls.UInstBodyDecl
                             dom
                             Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                        (TraverseAST.traverseInstBody3 @ dom)
                        (TraverseAST.traverseInstBody2
                           @ dom) of ww { (#,,,,,#) ww1 ww2 ww3 ww4 ww5 ww6 ->
                 Control.Reference.Representation.Reference
                   @ (Control.Monad.Trans.Reader.ReaderT
                        [GHC.LanguageExtensions.Type.Extension]
                        (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc))
                   @ Control.Reference.Representation.MU
                   @ Control.Reference.Representation.MU
                   @ Control.Reference.Representation.MU
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        Language.Haskell.Tools.AST.Representation.Decls.UInstBody
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        Language.Haskell.Tools.AST.Representation.Decls.UInstBody
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        Language.Haskell.Tools.AST.Representation.Decls.UInstBodyDecl
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        Language.Haskell.Tools.AST.Representation.Decls.UInstBodyDecl
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   ww1
                   ww2
                   ww3
                   ww4
                   ww5
                   ww6 }) -}
0eb68c06608e8bbf534316753fe6fee9
  traverseInstBody2 ::
    Control.Reference.Representation.Reference
      (Control.Monad.Trans.Reader.ReaderT
         [GHC.LanguageExtensions.Type.Extension]
         (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc))
      Control.Reference.Representation.MU
      Control.Reference.Representation.MU
      Control.Reference.Representation.MU
      (Language.Haskell.Tools.AST.Ann.AnnListG
         Language.Haskell.Tools.AST.Representation.Decls.UInstBodyDecl
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
      (Language.Haskell.Tools.AST.Ann.AnnListG
         Language.Haskell.Tools.AST.Representation.Decls.UInstBodyDecl
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
      (Language.Haskell.Tools.AST.Ann.Ann
         Language.Haskell.Tools.AST.Representation.Decls.UInstBodyDecl
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
      (Language.Haskell.Tools.AST.Ann.Ann
         Language.Haskell.Tools.AST.Representation.Decls.UInstBodyDecl
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
  {- Unfolding: (\ @ dom ->
                 case Language.Haskell.Tools.AST.Ann.$wannList
                        @ Language.Haskell.Tools.AST.Representation.Decls.UInstBodyDecl
                        @ dom
                        @ Language.Haskell.Tools.AST.Ann.SrcTemplateStage
                        @ (Control.Monad.Trans.Reader.ReaderT
                             [GHC.LanguageExtensions.Type.Extension]
                             (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc))
                        @ Control.Reference.Representation.MU
                        TraverseAST.$s$fRefMonadswr
                        TraverseAST.$sannList1
                          `cast`
                        (Sym (Control.Instances.Morph.N:Morph[0]
                                  <[]>_N
                                  <Data.Proxy.Proxy>_N)) of ww { (#,,,,,#) ww1 ww2 ww3 ww4 ww5 ww6 ->
                 Control.Reference.Representation.Reference
                   @ (Control.Monad.Trans.Reader.ReaderT
                        [GHC.LanguageExtensions.Type.Extension]
                        (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc))
                   @ Control.Reference.Representation.MU
                   @ Control.Reference.Representation.MU
                   @ Control.Reference.Representation.MU
                   @ (Language.Haskell.Tools.AST.Ann.AnnListG
                        Language.Haskell.Tools.AST.Representation.Decls.UInstBodyDecl
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   @ (Language.Haskell.Tools.AST.Ann.AnnListG
                        Language.Haskell.Tools.AST.Representation.Decls.UInstBodyDecl
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        Language.Haskell.Tools.AST.Representation.Decls.UInstBodyDecl
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        Language.Haskell.Tools.AST.Representation.Decls.UInstBodyDecl
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   ww1
                   ww2
                   ww3
                   ww4
                   ww5
                   ww6 }) -}
3167144ce324ad14440625c31c7db9a6
  traverseInstBody3 ::
    Control.Reference.Representation.Reference
      (Control.Monad.Trans.Reader.ReaderT
         [GHC.LanguageExtensions.Type.Extension]
         (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc))
      Control.Reference.Representation.MU
      Control.Reference.Representation.MU
      Control.Reference.Representation.MU
      (Language.Haskell.Tools.AST.Ann.Ann
         Language.Haskell.Tools.AST.Representation.Decls.UInstBody
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
      (Language.Haskell.Tools.AST.Ann.Ann
         Language.Haskell.Tools.AST.Representation.Decls.UInstBody
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
      (Language.Haskell.Tools.AST.Ann.AnnListG
         Language.Haskell.Tools.AST.Representation.Decls.UInstBodyDecl
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
      (Language.Haskell.Tools.AST.Ann.AnnListG
         Language.Haskell.Tools.AST.Representation.Decls.UInstBodyDecl
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
  {- Unfolding: (\ @ dom ->
                 case Language.Haskell.Tools.AST.References.$winstBodyDecls
                        @ GHC.Prim.Any
                        @ GHC.Prim.Any
                        @ dom
                        @ Language.Haskell.Tools.AST.Ann.SrcTemplateStage
                        @ (Control.Monad.Trans.Reader.ReaderT
                             [GHC.LanguageExtensions.Type.Extension]
                             (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc))
                        @ Control.Reference.Representation.MU
                        TraverseAST.$s$fRefMonadswr of ww { (#,,,,,#) ww1 ww2 ww3 ww4 ww5 ww6 ->
                 Control.Reference.Representation.Reference
                   @ (Control.Monad.Trans.Reader.ReaderT
                        [GHC.LanguageExtensions.Type.Extension]
                        (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc))
                   @ Control.Reference.Representation.MU
                   @ Control.Reference.Representation.MU
                   @ Control.Reference.Representation.MU
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        Language.Haskell.Tools.AST.Representation.Decls.UInstBody
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        Language.Haskell.Tools.AST.Representation.Decls.UInstBody
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   @ (Language.Haskell.Tools.AST.Ann.AnnListG
                        Language.Haskell.Tools.AST.Representation.Decls.UInstBodyDecl
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   @ (Language.Haskell.Tools.AST.Ann.AnnListG
                        Language.Haskell.Tools.AST.Representation.Decls.UInstBodyDecl
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   ww1
                   ww2
                   ww3
                   ww4
                   ww5
                   ww6 }) -}
f2bb0243faed7a92e2e1a58ba0d751f2
  traverseInstBodyDecl ::
    ExtMonad.CheckNode
      Language.Haskell.Tools.AST.ElementTypes.InstBodyDecl
  {- Arity: 1,
     Strictness: <S(S(LLS(S)LLLLLLLLLL)L),U(U(U,U,U(U),U,U,U,U,U,U,U,U,U,U),U)>,
     Unfolding: (\ @ dom ($d(%,%) :: ExtMonad.ExtDomain dom) ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Language.Haskell.Tools.AST.Ann.SemanticInfo'
                             dom Language.Haskell.Tools.AST.Ann.SameInfoDefaultCls)
                        @ Language.Haskell.Tools.AST.SemaInfoTypes.NoSemanticInfo
                        (Language.Haskell.Tools.AST.Ann.$p3Domain
                           @ dom
                           (GHC.Classes.$p1(%,%)
                              @ (Language.Haskell.Tools.AST.Ann.Domain dom)
                              @ (Language.Haskell.Tools.AST.SemaInfoClasses.HasNameInfo'
                                   (Language.Haskell.Tools.AST.Ann.SemanticInfo
                                      dom
                                      Language.Haskell.Tools.AST.Representation.Names.UQualifiedName))
                              $d(%,%)))
                          `cast`
                        (Data.Type.Equality.N:~[0]
                             <*>_N <Language.Haskell.Tools.AST.Ann.SemanticInfo'
                                      dom
                                      Language.Haskell.Tools.AST.Ann.SameInfoDefaultCls>_N <Language.Haskell.Tools.AST.SemaInfoTypes.NoSemanticInfo>_N) of cobox0 { DEFAULT ->
                 let {
                   f :: Language.Haskell.Tools.AST.Ann.Ann
                          Language.Haskell.Tools.AST.Representation.Decls.UInstBodyDecl
                          dom
                          Language.Haskell.Tools.AST.Ann.SrcTemplateStage
                        -> Control.Monad.Trans.Reader.ReaderT
                             [GHC.LanguageExtensions.Type.Extension]
                             (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc)
                             (Language.Haskell.Tools.AST.Ann.Ann
                                Language.Haskell.Tools.AST.Representation.Decls.UInstBodyDecl
                                dom
                                Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   = case TraverseAST.traverseInstBodyDecl5
                            @ dom of wild { Control.Reference.Representation.Reference ds1 ds2 ds3 ds4 ds5 ds6 ->
                     ds3 (TraverseAST.traverseValueBind @ dom $d(%,%)) }
                 } in
                 let {
                   f1 :: Language.Haskell.Tools.AST.Ann.Ann
                           Language.Haskell.Tools.AST.Representation.Decls.UInstBodyDecl
                           dom
                           Language.Haskell.Tools.AST.Ann.SrcTemplateStage
                         -> Control.Monad.Trans.Reader.ReaderT
                              [GHC.LanguageExtensions.Type.Extension]
                              (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc)
                              (Language.Haskell.Tools.AST.Ann.Ann
                                 Language.Haskell.Tools.AST.Representation.Decls.UInstBodyDecl
                                 dom
                                 Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   = case TraverseAST.traverseInstBodyDecl4
                            @ dom of wild { Control.Reference.Representation.Reference ds1 ds2 ds3 ds4 ds5 ds6 ->
                     ds3
                       (TraverseAST.traverseInstBodyDecl3 @ dom $d(%,%))
                         `cast`
                       (<Language.Haskell.Tools.AST.ElementTypes.TypeSignature dom>_R
                        ->_R Trans
                                 (<[GHC.LanguageExtensions.Type.Extension]>_R
                                  ->_R Trans
                                           (<ExtMap.ExtMap>_R
                                            ->_R Trans
                                                     (<GhcMonad.Session>_R
                                                      ->_R Sym (GHC.Types.N:IO[0]
                                                                    <(Language.Haskell.Tools.AST.ElementTypes.TypeSignature
                                                                        dom,
                                                                      ExtMap.ExtMap)>_R))
                                                     (Sym (GhcMonad.N:Ghc[0]
                                                               <(Language.Haskell.Tools.AST.ElementTypes.TypeSignature
                                                                   dom,
                                                                 ExtMap.ExtMap)>_R)))
                                           (Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                                     <ExtMap.ExtMap>_N
                                                     <GhcMonad.Ghc>_R
                                                     <Language.Haskell.Tools.AST.ElementTypes.TypeSignature
                                                        dom>_N)))
                                 (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                           <*>_N
                                           <[GHC.LanguageExtensions.Type.Extension]>_R
                                           <Control.Monad.Trans.State.Lazy.StateT
                                              ExtMap.ExtMap GhcMonad.Ghc>_R
                                           <Language.Haskell.Tools.AST.ElementTypes.TypeSignature
                                              dom>_N))) }
                 } in
                 let {
                   f2 :: Language.Haskell.Tools.AST.Ann.Ann
                           Language.Haskell.Tools.AST.Representation.Decls.UInstBodyDecl
                           dom
                           Language.Haskell.Tools.AST.Ann.SrcTemplateStage
                         -> Control.Monad.Trans.Reader.ReaderT
                              [GHC.LanguageExtensions.Type.Extension]
                              (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc)
                              (Language.Haskell.Tools.AST.Ann.Ann
                                 Language.Haskell.Tools.AST.Representation.Decls.UInstBodyDecl
                                 dom
                                 Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   = case TraverseAST.traverseInstBodyDecl2
                            @ dom of wild { Control.Reference.Representation.Reference ds1 ds2 ds3 ds4 ds5 ds6 ->
                     ds3 (TraverseAST.traverseTypeEqn @ dom $d(%,%)) }
                 } in
                 let {
                   g :: Language.Haskell.Tools.AST.Ann.Ann
                          Language.Haskell.Tools.AST.Representation.Decls.UInstBodyDecl
                          dom
                          Language.Haskell.Tools.AST.Ann.SrcTemplateStage
                        -> Control.Monad.Trans.Reader.ReaderT
                             [GHC.LanguageExtensions.Type.Extension]
                             (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc)
                             (Language.Haskell.Tools.AST.Ann.Ann
                                Language.Haskell.Tools.AST.Representation.Decls.UInstBodyDecl
                                dom
                                Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   = case TraverseAST.traverseInstBodyDecl1
                            @ dom of wild { Control.Reference.Representation.Reference ds1 ds2 ds3 ds4 ds5 ds6 ->
                     ds3 (TraverseAST.traverseType @ dom $d(%,%)) }
                 } in
                 \ (x :: Language.Haskell.Tools.AST.Ann.Ann
                           Language.Haskell.Tools.AST.Representation.Decls.UInstBodyDecl
                           dom
                           Language.Haskell.Tools.AST.Ann.SrcTemplateStage) ->
                 let {
                   m1 :: Control.Monad.Trans.Reader.ReaderT
                           [GHC.LanguageExtensions.Type.Extension]
                           (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc)
                           (Language.Haskell.Tools.AST.Ann.Ann
                              Language.Haskell.Tools.AST.Representation.Decls.UInstBodyDecl
                              dom
                              Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   = f x
                 } in
                 (\ (r1 :: [GHC.LanguageExtensions.Type.Extension]) ->
                  let {
                    m2 :: Control.Monad.Trans.State.Lazy.StateT
                            (Data.Map.Base.Map
                               (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                               [SrcLoc.SrcSpan])
                            GhcMonad.Ghc
                            (Language.Haskell.Tools.AST.Ann.Ann
                               Language.Haskell.Tools.AST.Representation.Decls.UInstBodyDecl
                               dom
                               Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                    = m1
                        `cast`
                      (Control.Monad.Trans.Reader.N:ReaderT[0]
                           <*>_N
                           <[GHC.LanguageExtensions.Type.Extension]>_R
                           <Control.Monad.Trans.State.Lazy.StateT
                              ExtMap.ExtMap GhcMonad.Ghc>_R
                           <Language.Haskell.Tools.AST.Ann.Ann
                              Language.Haskell.Tools.AST.Representation.Decls.UInstBodyDecl
                              dom
                              Language.Haskell.Tools.AST.Ann.SrcTemplateStage>_N)
                        r1
                  } in
                  (\ (s1 :: Data.Map.Base.Map
                              (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                              [SrcLoc.SrcSpan]) ->
                   let {
                     m :: GhcMonad.Ghc
                            (Language.Haskell.Tools.AST.Ann.Ann
                               Language.Haskell.Tools.AST.Representation.Decls.UInstBodyDecl
                               dom
                               Language.Haskell.Tools.AST.Ann.SrcTemplateStage,
                             Data.Map.Base.Map
                               (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                               [SrcLoc.SrcSpan])
                     = m2
                         `cast`
                       (Control.Monad.Trans.State.Lazy.N:StateT[0]
                            <Data.Map.Base.Map
                               (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                               [SrcLoc.SrcSpan]>_N
                            <GhcMonad.Ghc>_R
                            <Language.Haskell.Tools.AST.Ann.Ann
                               Language.Haskell.Tools.AST.Representation.Decls.UInstBodyDecl
                               dom
                               Language.Haskell.Tools.AST.Ann.SrcTemplateStage>_N)
                         s1
                   } in
                   (\ (s :: GhcMonad.Session)
                      (s2 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                    case (m `cast`
                          (GhcMonad.N:Ghc[0]
                               <(Language.Haskell.Tools.AST.Ann.Ann
                                   Language.Haskell.Tools.AST.Representation.Decls.UInstBodyDecl
                                   dom
                                   Language.Haskell.Tools.AST.Ann.SrcTemplateStage,
                                 Data.Map.Base.Map
                                   (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                                   [SrcLoc.SrcSpan])>_R)
                            s)
                           `cast`
                         (GHC.Types.N:IO[0]
                              <(Language.Haskell.Tools.AST.Ann.Ann
                                  Language.Haskell.Tools.AST.Representation.Decls.UInstBodyDecl
                                  dom
                                  Language.Haskell.Tools.AST.Ann.SrcTemplateStage,
                                Data.Map.Base.Map
                                  (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                                  [SrcLoc.SrcSpan])>_R)
                           s2 of ds1 { (#,#) ipv ipv1 ->
                    case ((((f1 (case ipv1 of wild { (,) a1 s' -> a1 }))
                              `cast`
                            (Control.Monad.Trans.Reader.N:ReaderT[0]
                                 <*>_N
                                 <[GHC.LanguageExtensions.Type.Extension]>_R
                                 <Control.Monad.Trans.State.Lazy.StateT
                                    ExtMap.ExtMap GhcMonad.Ghc>_R
                                 <Language.Haskell.Tools.AST.Ann.Ann
                                    Language.Haskell.Tools.AST.Representation.Decls.UInstBodyDecl
                                    dom
                                    Language.Haskell.Tools.AST.Ann.SrcTemplateStage>_N)
                              r1)
                             `cast`
                           (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                <Data.Map.Base.Map
                                   (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                                   [SrcLoc.SrcSpan]>_N
                                <GhcMonad.Ghc>_R
                                <Language.Haskell.Tools.AST.Ann.Ann
                                   Language.Haskell.Tools.AST.Representation.Decls.UInstBodyDecl
                                   dom
                                   Language.Haskell.Tools.AST.Ann.SrcTemplateStage>_N)
                             (case ipv1 of wild { (,) a1 s' -> s' }))
                            `cast`
                          (GhcMonad.N:Ghc[0]
                               <(Language.Haskell.Tools.AST.Ann.Ann
                                   Language.Haskell.Tools.AST.Representation.Decls.UInstBodyDecl
                                   dom
                                   Language.Haskell.Tools.AST.Ann.SrcTemplateStage,
                                 Data.Map.Base.Map
                                   (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                                   [SrcLoc.SrcSpan])>_R)
                            s)
                           `cast`
                         (GHC.Types.N:IO[0]
                              <(Language.Haskell.Tools.AST.Ann.Ann
                                  Language.Haskell.Tools.AST.Representation.Decls.UInstBodyDecl
                                  dom
                                  Language.Haskell.Tools.AST.Ann.SrcTemplateStage,
                                Data.Map.Base.Map
                                  (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                                  [SrcLoc.SrcSpan])>_R)
                           ipv of ds2 { (#,#) ipv2 ipv3 ->
                    case ((((f2 (case ipv3 of wild { (,) a1 s' -> a1 }))
                              `cast`
                            (Control.Monad.Trans.Reader.N:ReaderT[0]
                                 <*>_N
                                 <[GHC.LanguageExtensions.Type.Extension]>_R
                                 <Control.Monad.Trans.State.Lazy.StateT
                                    ExtMap.ExtMap GhcMonad.Ghc>_R
                                 <Language.Haskell.Tools.AST.Ann.Ann
                                    Language.Haskell.Tools.AST.Representation.Decls.UInstBodyDecl
                                    dom
                                    Language.Haskell.Tools.AST.Ann.SrcTemplateStage>_N)
                              r1)
                             `cast`
                           (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                <Data.Map.Base.Map
                                   (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                                   [SrcLoc.SrcSpan]>_N
                                <GhcMonad.Ghc>_R
                                <Language.Haskell.Tools.AST.Ann.Ann
                                   Language.Haskell.Tools.AST.Representation.Decls.UInstBodyDecl
                                   dom
                                   Language.Haskell.Tools.AST.Ann.SrcTemplateStage>_N)
                             (case ipv3 of wild { (,) a1 s' -> s' }))
                            `cast`
                          (GhcMonad.N:Ghc[0]
                               <(Language.Haskell.Tools.AST.Ann.Ann
                                   Language.Haskell.Tools.AST.Representation.Decls.UInstBodyDecl
                                   dom
                                   Language.Haskell.Tools.AST.Ann.SrcTemplateStage,
                                 Data.Map.Base.Map
                                   (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                                   [SrcLoc.SrcSpan])>_R)
                            s)
                           `cast`
                         (GHC.Types.N:IO[0]
                              <(Language.Haskell.Tools.AST.Ann.Ann
                                  Language.Haskell.Tools.AST.Representation.Decls.UInstBodyDecl
                                  dom
                                  Language.Haskell.Tools.AST.Ann.SrcTemplateStage,
                                Data.Map.Base.Map
                                  (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                                  [SrcLoc.SrcSpan])>_R)
                           ipv2 of ds3 { (#,#) ipv4 ipv5 ->
                    ((((g (case ipv5 of wild { (,) a1 s' -> a1 }))
                         `cast`
                       (Control.Monad.Trans.Reader.N:ReaderT[0]
                            <*>_N
                            <[GHC.LanguageExtensions.Type.Extension]>_R
                            <Control.Monad.Trans.State.Lazy.StateT
                               ExtMap.ExtMap GhcMonad.Ghc>_R
                            <Language.Haskell.Tools.AST.Ann.Ann
                               Language.Haskell.Tools.AST.Representation.Decls.UInstBodyDecl
                               dom
                               Language.Haskell.Tools.AST.Ann.SrcTemplateStage>_N)
                         r1)
                        `cast`
                      (Control.Monad.Trans.State.Lazy.N:StateT[0]
                           <Data.Map.Base.Map
                              (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                              [SrcLoc.SrcSpan]>_N
                           <GhcMonad.Ghc>_R
                           <Language.Haskell.Tools.AST.Ann.Ann
                              Language.Haskell.Tools.AST.Representation.Decls.UInstBodyDecl
                              dom
                              Language.Haskell.Tools.AST.Ann.SrcTemplateStage>_N)
                        (case ipv5 of wild { (,) a1 s' -> s' }))
                       `cast`
                     (GhcMonad.N:Ghc[0]
                          <(Language.Haskell.Tools.AST.Ann.Ann
                              Language.Haskell.Tools.AST.Representation.Decls.UInstBodyDecl
                              dom
                              Language.Haskell.Tools.AST.Ann.SrcTemplateStage,
                            Data.Map.Base.Map
                              (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                              [SrcLoc.SrcSpan])>_R)
                       s)
                      `cast`
                    (GHC.Types.N:IO[0]
                         <(Language.Haskell.Tools.AST.Ann.Ann
                             Language.Haskell.Tools.AST.Representation.Decls.UInstBodyDecl
                             dom
                             Language.Haskell.Tools.AST.Ann.SrcTemplateStage,
                           Data.Map.Base.Map
                             (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                             [SrcLoc.SrcSpan])>_R)
                      ipv4 } } })
                     `cast`
                   (Trans
                        (<GhcMonad.Session>_R
                         ->_R Sym (GHC.Types.N:IO[0]
                                       <(Language.Haskell.Tools.AST.Ann.Ann
                                           Language.Haskell.Tools.AST.Representation.Decls.UInstBodyDecl
                                           dom
                                           Language.Haskell.Tools.AST.Ann.SrcTemplateStage,
                                         Data.Map.Base.Map
                                           (ExtMap.LogicalRelation
                                              GHC.LanguageExtensions.Type.Extension)
                                           [SrcLoc.SrcSpan])>_R))
                        (Sym (GhcMonad.N:Ghc[0]
                                  <(Language.Haskell.Tools.AST.Ann.Ann
                                      Language.Haskell.Tools.AST.Representation.Decls.UInstBodyDecl
                                      dom
                                      Language.Haskell.Tools.AST.Ann.SrcTemplateStage,
                                    Data.Map.Base.Map
                                      (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                                      [SrcLoc.SrcSpan])>_R))))
                    `cast`
                  (Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                            <Data.Map.Base.Map
                               (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                               [SrcLoc.SrcSpan]>_N
                            <GhcMonad.Ghc>_R
                            <Language.Haskell.Tools.AST.Ann.Ann
                               Language.Haskell.Tools.AST.Representation.Decls.UInstBodyDecl
                               dom
                               Language.Haskell.Tools.AST.Ann.SrcTemplateStage>_N)))
                   `cast`
                 (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                           <*>_N
                           <[GHC.LanguageExtensions.Type.Extension]>_R
                           <Control.Monad.Trans.State.Lazy.StateT
                              ExtMap.ExtMap GhcMonad.Ghc>_R
                           <Language.Haskell.Tools.AST.Ann.Ann
                              Language.Haskell.Tools.AST.Representation.Decls.UInstBodyDecl
                              dom
                              Language.Haskell.Tools.AST.Ann.SrcTemplateStage>_N)) }) -}
e8311afac11c9f0846df1b78fd0d4fde
  traverseInstBodyDecl1 ::
    Control.Reference.Representation.Reference
      (Control.Monad.Trans.Reader.ReaderT
         [GHC.LanguageExtensions.Type.Extension]
         (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc))
      Control.Reference.Representation.MU
      Control.Reference.Representation.MU
      Control.Reference.Representation.MU
      (Language.Haskell.Tools.AST.Ann.Ann
         Language.Haskell.Tools.AST.Representation.Decls.UInstBodyDecl
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
      (Language.Haskell.Tools.AST.Ann.Ann
         Language.Haskell.Tools.AST.Representation.Decls.UInstBodyDecl
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
      (Language.Haskell.Tools.AST.Ann.Ann
         Language.Haskell.Tools.AST.Representation.Types.UType
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
      (Language.Haskell.Tools.AST.Ann.Ann
         Language.Haskell.Tools.AST.Representation.Types.UType
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
  {- Unfolding: (\ @ dom ->
                 case Language.Haskell.Tools.AST.References.$wspecializeInstanceType
                        @ dom
                        @ Language.Haskell.Tools.AST.Ann.SrcTemplateStage
                        @ (Control.Monad.Trans.Reader.ReaderT
                             [GHC.LanguageExtensions.Type.Extension]
                             (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc))
                        @ Control.Reference.Representation.MU
                        (TraverseAST.$s$fMonadReaderT
                           @ [GHC.LanguageExtensions.Type.Extension])
                        Data.Proxy.$fMonadPlusProxy
                        TraverseAST.$sannJust1
                          `cast`
                        (Sym (Control.Instances.Morph.N:Morph[0]
                                  <GHC.Base.Maybe>_N
                                  <Data.Proxy.Proxy>_N)) of ww { (#,,,,,#) ww1 ww2 ww3 ww4 ww5 ww6 ->
                 Control.Reference.Representation.Reference
                   @ (Control.Monad.Trans.Reader.ReaderT
                        [GHC.LanguageExtensions.Type.Extension]
                        (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc))
                   @ Control.Reference.Representation.MU
                   @ Control.Reference.Representation.MU
                   @ Control.Reference.Representation.MU
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        Language.Haskell.Tools.AST.Representation.Decls.UInstBodyDecl
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        Language.Haskell.Tools.AST.Representation.Decls.UInstBodyDecl
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        Language.Haskell.Tools.AST.Representation.Types.UType
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        Language.Haskell.Tools.AST.Representation.Types.UType
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   ww1
                   ww2
                   ww3
                   ww4
                   ww5
                   ww6 }) -}
c70a988e8b497d14e5752fe5bb436a11
  traverseInstBodyDecl2 ::
    Control.Reference.Representation.Reference
      (Control.Monad.Trans.Reader.ReaderT
         [GHC.LanguageExtensions.Type.Extension]
         (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc))
      Control.Reference.Representation.MU
      Control.Reference.Representation.MU
      Control.Reference.Representation.MU
      (Language.Haskell.Tools.AST.Ann.Ann
         Language.Haskell.Tools.AST.Representation.Decls.UInstBodyDecl
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
      (Language.Haskell.Tools.AST.Ann.Ann
         Language.Haskell.Tools.AST.Representation.Decls.UInstBodyDecl
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
      (Language.Haskell.Tools.AST.Ann.Ann
         Language.Haskell.Tools.AST.Representation.Decls.UTypeEqn
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
      (Language.Haskell.Tools.AST.Ann.Ann
         Language.Haskell.Tools.AST.Representation.Decls.UTypeEqn
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
  {- Unfolding: (\ @ dom ->
                 case Language.Haskell.Tools.AST.References.$winstBodyTypeEqn
                        @ dom
                        @ Language.Haskell.Tools.AST.Ann.SrcTemplateStage
                        @ (Control.Monad.Trans.Reader.ReaderT
                             [GHC.LanguageExtensions.Type.Extension]
                             (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc))
                        @ Control.Reference.Representation.MU
                        (TraverseAST.$s$fMonadReaderT
                           @ [GHC.LanguageExtensions.Type.Extension])
                        Data.Proxy.$fMonadPlusProxy
                        TraverseAST.$sannJust1
                          `cast`
                        (Sym (Control.Instances.Morph.N:Morph[0]
                                  <GHC.Base.Maybe>_N
                                  <Data.Proxy.Proxy>_N)) of ww { (#,,,,,#) ww1 ww2 ww3 ww4 ww5 ww6 ->
                 Control.Reference.Representation.Reference
                   @ (Control.Monad.Trans.Reader.ReaderT
                        [GHC.LanguageExtensions.Type.Extension]
                        (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc))
                   @ Control.Reference.Representation.MU
                   @ Control.Reference.Representation.MU
                   @ Control.Reference.Representation.MU
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        Language.Haskell.Tools.AST.Representation.Decls.UInstBodyDecl
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        Language.Haskell.Tools.AST.Representation.Decls.UInstBodyDecl
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        Language.Haskell.Tools.AST.Representation.Decls.UTypeEqn
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        Language.Haskell.Tools.AST.Representation.Decls.UTypeEqn
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   ww1
                   ww2
                   ww3
                   ww4
                   ww5
                   ww6 }) -}
aa4df663e28428ba24c7957031c2570e
  traverseInstBodyDecl3 ::
    ExtMonad.ExtDomain dom =>
    Language.Haskell.Tools.AST.ElementTypes.TypeSignature dom
    -> [GHC.LanguageExtensions.Type.Extension]
    -> ExtMap.ExtMap
    -> GhcMonad.Session
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          (Language.Haskell.Tools.AST.ElementTypes.TypeSignature dom,
           ExtMap.ExtMap) #)
  {- Arity: 6, HasNoCafRefs,
     Strictness: <S(S(LLS(S)LLLLLLLLLL)L),1*U(1*U(A,A,1*U(1*U),A,A,A,A,A,A,A,A,A,A),A)><L,U><L,A><L,U><L,A><S,U>,
     Unfolding: InlineRule (6, True, False)
                (\ @ dom
                   ($d(%,%) :: ExtMonad.ExtDomain dom)
                   (eta :: Language.Haskell.Tools.AST.ElementTypes.TypeSignature dom)
                   (eta1 :: [GHC.LanguageExtensions.Type.Extension])
                   (eta2 :: ExtMap.ExtMap)
                   (eta3 :: GhcMonad.Session)
                   (eta4 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Language.Haskell.Tools.AST.Ann.SemanticInfo'
                             dom Language.Haskell.Tools.AST.Ann.SameInfoDefaultCls)
                        @ Language.Haskell.Tools.AST.SemaInfoTypes.NoSemanticInfo
                        (Language.Haskell.Tools.AST.Ann.$p3Domain
                           @ dom
                           (GHC.Classes.$p1(%,%)
                              @ (Language.Haskell.Tools.AST.Ann.Domain dom)
                              @ (Language.Haskell.Tools.AST.SemaInfoClasses.HasNameInfo'
                                   (Language.Haskell.Tools.AST.Ann.SemanticInfo
                                      dom
                                      Language.Haskell.Tools.AST.Representation.Names.UQualifiedName))
                              $d(%,%)))
                          `cast`
                        (Data.Type.Equality.N:~[0]
                             <*>_N <Language.Haskell.Tools.AST.Ann.SemanticInfo'
                                      dom
                                      Language.Haskell.Tools.AST.Ann.SameInfoDefaultCls>_N <Language.Haskell.Tools.AST.SemaInfoTypes.NoSemanticInfo>_N) of cobox0 { DEFAULT ->
                 (# eta4, (eta, eta2) #) }) -}
fd4fb33a5eb99a9f8bce9161a1ef6824
  traverseInstBodyDecl4 ::
    Control.Reference.Representation.Reference
      (Control.Monad.Trans.Reader.ReaderT
         [GHC.LanguageExtensions.Type.Extension]
         (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc))
      Control.Reference.Representation.MU
      Control.Reference.Representation.MU
      Control.Reference.Representation.MU
      (Language.Haskell.Tools.AST.Ann.Ann
         Language.Haskell.Tools.AST.Representation.Decls.UInstBodyDecl
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
      (Language.Haskell.Tools.AST.Ann.Ann
         Language.Haskell.Tools.AST.Representation.Decls.UInstBodyDecl
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
      (Language.Haskell.Tools.AST.Ann.Ann
         Language.Haskell.Tools.AST.Representation.Binds.UTypeSignature
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
      (Language.Haskell.Tools.AST.Ann.Ann
         Language.Haskell.Tools.AST.Representation.Binds.UTypeSignature
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
  {- Unfolding: (\ @ dom ->
                 case Language.Haskell.Tools.AST.References.$winstBodyTypeSig
                        @ dom
                        @ Language.Haskell.Tools.AST.Ann.SrcTemplateStage
                        @ (Control.Monad.Trans.Reader.ReaderT
                             [GHC.LanguageExtensions.Type.Extension]
                             (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc))
                        @ Control.Reference.Representation.MU
                        (TraverseAST.$s$fMonadReaderT
                           @ [GHC.LanguageExtensions.Type.Extension])
                        Data.Proxy.$fMonadPlusProxy
                        TraverseAST.$sannJust1
                          `cast`
                        (Sym (Control.Instances.Morph.N:Morph[0]
                                  <GHC.Base.Maybe>_N
                                  <Data.Proxy.Proxy>_N)) of ww { (#,,,,,#) ww1 ww2 ww3 ww4 ww5 ww6 ->
                 Control.Reference.Representation.Reference
                   @ (Control.Monad.Trans.Reader.ReaderT
                        [GHC.LanguageExtensions.Type.Extension]
                        (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc))
                   @ Control.Reference.Representation.MU
                   @ Control.Reference.Representation.MU
                   @ Control.Reference.Representation.MU
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        Language.Haskell.Tools.AST.Representation.Decls.UInstBodyDecl
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        Language.Haskell.Tools.AST.Representation.Decls.UInstBodyDecl
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        Language.Haskell.Tools.AST.Representation.Binds.UTypeSignature
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        Language.Haskell.Tools.AST.Representation.Binds.UTypeSignature
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   ww1
                   ww2
                   ww3
                   ww4
                   ww5
                   ww6 }) -}
5c863c8972c5c0385414b920097a88d0
  traverseInstBodyDecl5 ::
    Control.Reference.Representation.Reference
      (Control.Monad.Trans.Reader.ReaderT
         [GHC.LanguageExtensions.Type.Extension]
         (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc))
      Control.Reference.Representation.MU
      Control.Reference.Representation.MU
      Control.Reference.Representation.MU
      (Language.Haskell.Tools.AST.Ann.Ann
         Language.Haskell.Tools.AST.Representation.Decls.UInstBodyDecl
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
      (Language.Haskell.Tools.AST.Ann.Ann
         Language.Haskell.Tools.AST.Representation.Decls.UInstBodyDecl
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
      (Language.Haskell.Tools.AST.Ann.Ann
         Language.Haskell.Tools.AST.Representation.Binds.UValueBind
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
      (Language.Haskell.Tools.AST.Ann.Ann
         Language.Haskell.Tools.AST.Representation.Binds.UValueBind
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
  {- Unfolding: (\ @ dom ->
                 case Language.Haskell.Tools.AST.References.$winstBodyDeclFunbind
                        @ dom
                        @ Language.Haskell.Tools.AST.Ann.SrcTemplateStage
                        @ (Control.Monad.Trans.Reader.ReaderT
                             [GHC.LanguageExtensions.Type.Extension]
                             (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc))
                        @ Control.Reference.Representation.MU
                        (TraverseAST.$s$fMonadReaderT
                           @ [GHC.LanguageExtensions.Type.Extension])
                        Data.Proxy.$fMonadPlusProxy
                        TraverseAST.$sannJust1
                          `cast`
                        (Sym (Control.Instances.Morph.N:Morph[0]
                                  <GHC.Base.Maybe>_N
                                  <Data.Proxy.Proxy>_N)) of ww { (#,,,,,#) ww1 ww2 ww3 ww4 ww5 ww6 ->
                 Control.Reference.Representation.Reference
                   @ (Control.Monad.Trans.Reader.ReaderT
                        [GHC.LanguageExtensions.Type.Extension]
                        (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc))
                   @ Control.Reference.Representation.MU
                   @ Control.Reference.Representation.MU
                   @ Control.Reference.Representation.MU
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        Language.Haskell.Tools.AST.Representation.Decls.UInstBodyDecl
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        Language.Haskell.Tools.AST.Representation.Decls.UInstBodyDecl
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        Language.Haskell.Tools.AST.Representation.Binds.UValueBind
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        Language.Haskell.Tools.AST.Representation.Binds.UValueBind
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   ww1
                   ww2
                   ww3
                   ww4
                   ww5
                   ww6 }) -}
072c1755d2e81f0326443204680e1c43
  traverseKind ::
    ExtMonad.CheckNode Language.Haskell.Tools.AST.ElementTypes.Kind
  {- Arity: 6, HasNoCafRefs,
     Strictness: <S(S(LLS(S)LLLLLLLLLL)L),1*U(1*U(A,A,1*U(1*U),A,A,A,A,A,A,A,A,A,A),A)><L,U><L,A><L,U><L,A><S,U>,
     Unfolding: InlineRule (0, True, True)
                TraverseAST.traverseKind1
                  `cast`
                (forall (dom :: <*>_N).
                 <ExtMonad.ExtDomain dom>_R
                 ->_R <Language.Haskell.Tools.AST.ElementTypes.Kind dom>_R
                 ->_R Trans
                          (<[GHC.LanguageExtensions.Type.Extension]>_R
                           ->_R Trans
                                    (<ExtMap.ExtMap>_R
                                     ->_R Trans
                                              (<GhcMonad.Session>_R
                                               ->_R Sym (GHC.Types.N:IO[0]
                                                             <(Language.Haskell.Tools.AST.ElementTypes.Kind
                                                                 dom,
                                                               ExtMap.ExtMap)>_R))
                                              (Sym (GhcMonad.N:Ghc[0]
                                                        <(Language.Haskell.Tools.AST.ElementTypes.Kind
                                                            dom,
                                                          ExtMap.ExtMap)>_R)))
                                    (Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                              <ExtMap.ExtMap>_N
                                              <GhcMonad.Ghc>_R
                                              <Language.Haskell.Tools.AST.ElementTypes.Kind
                                                 dom>_N)))
                          (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                    <*>_N
                                    <[GHC.LanguageExtensions.Type.Extension]>_R
                                    <Control.Monad.Trans.State.Lazy.StateT
                                       ExtMap.ExtMap GhcMonad.Ghc>_R
                                    <Language.Haskell.Tools.AST.ElementTypes.Kind dom>_N))) -}
8b1077d39fe02ba0e03a524261c46095
  traverseKind1 ::
    ExtMonad.ExtDomain dom =>
    Language.Haskell.Tools.AST.ElementTypes.Kind dom
    -> [GHC.LanguageExtensions.Type.Extension]
    -> ExtMap.ExtMap
    -> GhcMonad.Session
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          (Language.Haskell.Tools.AST.ElementTypes.Kind dom,
           ExtMap.ExtMap) #)
  {- Arity: 6, HasNoCafRefs,
     Strictness: <S(S(LLS(S)LLLLLLLLLL)L),1*U(1*U(A,A,1*U(1*U),A,A,A,A,A,A,A,A,A,A),A)><L,U><L,A><L,U><L,A><S,U>,
     Unfolding: InlineRule (6, True, False)
                (\ @ dom
                   ($d(%,%) :: ExtMonad.ExtDomain dom)
                   (eta :: Language.Haskell.Tools.AST.ElementTypes.Kind dom)
                   (eta1 :: [GHC.LanguageExtensions.Type.Extension])
                   (eta2 :: ExtMap.ExtMap)
                   (eta3 :: GhcMonad.Session)
                   (eta4 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Language.Haskell.Tools.AST.Ann.SemanticInfo'
                             dom Language.Haskell.Tools.AST.Ann.SameInfoDefaultCls)
                        @ Language.Haskell.Tools.AST.SemaInfoTypes.NoSemanticInfo
                        (Language.Haskell.Tools.AST.Ann.$p3Domain
                           @ dom
                           (GHC.Classes.$p1(%,%)
                              @ (Language.Haskell.Tools.AST.Ann.Domain dom)
                              @ (Language.Haskell.Tools.AST.SemaInfoClasses.HasNameInfo'
                                   (Language.Haskell.Tools.AST.Ann.SemanticInfo
                                      dom
                                      Language.Haskell.Tools.AST.Representation.Names.UQualifiedName))
                              $d(%,%)))
                          `cast`
                        (Data.Type.Equality.N:~[0]
                             <*>_N <Language.Haskell.Tools.AST.Ann.SemanticInfo'
                                      dom
                                      Language.Haskell.Tools.AST.Ann.SameInfoDefaultCls>_N <Language.Haskell.Tools.AST.SemaInfoTypes.NoSemanticInfo>_N) of cobox0 { DEFAULT ->
                 (# eta4, (eta, eta2) #) }) -}
a4e2ee30367704749ba78c58c9ed5596
  traverseKindContraint ::
    ExtMonad.CheckNode
      Language.Haskell.Tools.AST.ElementTypes.KindConstraint
  {- Arity: 1,
     Strictness: <S(S(LLS(S)LLLLLLLLLL)L),U(U(A,A,U(U),A,A,A,A,A,A,A,A,A,A),A)>,
     Unfolding: (\ @ dom ($d(%,%) :: ExtMonad.ExtDomain dom) ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Language.Haskell.Tools.AST.Ann.SemanticInfo'
                             dom Language.Haskell.Tools.AST.Ann.SameInfoDefaultCls)
                        @ Language.Haskell.Tools.AST.SemaInfoTypes.NoSemanticInfo
                        (Language.Haskell.Tools.AST.Ann.$p3Domain
                           @ dom
                           (GHC.Classes.$p1(%,%)
                              @ (Language.Haskell.Tools.AST.Ann.Domain dom)
                              @ (Language.Haskell.Tools.AST.SemaInfoClasses.HasNameInfo'
                                   (Language.Haskell.Tools.AST.Ann.SemanticInfo
                                      dom
                                      Language.Haskell.Tools.AST.Representation.Names.UQualifiedName))
                              $d(%,%)))
                          `cast`
                        (Data.Type.Equality.N:~[0]
                             <*>_N <Language.Haskell.Tools.AST.Ann.SemanticInfo'
                                      dom
                                      Language.Haskell.Tools.AST.Ann.SameInfoDefaultCls>_N <Language.Haskell.Tools.AST.SemaInfoTypes.NoSemanticInfo>_N) of cobox0 { DEFAULT ->
                 case TraverseAST.traverseKindContraint1
                        @ dom of wild { Control.Reference.Representation.Reference ds1 ds2 ds3 ds4 ds5 ds6 ->
                 ds3
                   (TraverseAST.traverseKind1 @ dom $d(%,%))
                     `cast`
                   (<Language.Haskell.Tools.AST.ElementTypes.Kind dom>_R
                    ->_R Trans
                             (<[GHC.LanguageExtensions.Type.Extension]>_R
                              ->_R Trans
                                       (<ExtMap.ExtMap>_R
                                        ->_R Trans
                                                 (<GhcMonad.Session>_R
                                                  ->_R Sym (GHC.Types.N:IO[0]
                                                                <(Language.Haskell.Tools.AST.ElementTypes.Kind
                                                                    dom,
                                                                  ExtMap.ExtMap)>_R))
                                                 (Sym (GhcMonad.N:Ghc[0]
                                                           <(Language.Haskell.Tools.AST.ElementTypes.Kind
                                                               dom,
                                                             ExtMap.ExtMap)>_R)))
                                       (Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                                 <ExtMap.ExtMap>_N
                                                 <GhcMonad.Ghc>_R
                                                 <Language.Haskell.Tools.AST.ElementTypes.Kind
                                                    dom>_N)))
                             (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                       <*>_N
                                       <[GHC.LanguageExtensions.Type.Extension]>_R
                                       <Control.Monad.Trans.State.Lazy.StateT
                                          ExtMap.ExtMap GhcMonad.Ghc>_R
                                       <Language.Haskell.Tools.AST.ElementTypes.Kind
                                          dom>_N))) } }) -}
cb7bdcfe13ca1c42334ff102fa29f2b4
  traverseKindContraint1 ::
    Control.Reference.Representation.Reference
      (Control.Monad.Trans.Reader.ReaderT
         [GHC.LanguageExtensions.Type.Extension]
         (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc))
      Control.Reference.Representation.MU
      Control.Reference.Representation.MU
      Control.Reference.Representation.MU
      (Language.Haskell.Tools.AST.Ann.Ann
         Language.Haskell.Tools.AST.Representation.Kinds.UKindConstraint
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
      (Language.Haskell.Tools.AST.Ann.Ann
         Language.Haskell.Tools.AST.Representation.Kinds.UKindConstraint
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
      (Language.Haskell.Tools.AST.Ann.Ann
         Language.Haskell.Tools.AST.Representation.Kinds.UKind
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
      (Language.Haskell.Tools.AST.Ann.Ann
         Language.Haskell.Tools.AST.Representation.Kinds.UKind
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
  {- Unfolding: (\ @ dom ->
                 case Language.Haskell.Tools.AST.References.$wkindConstr
                        @ GHC.Prim.Any
                        @ GHC.Prim.Any
                        @ dom
                        @ Language.Haskell.Tools.AST.Ann.SrcTemplateStage
                        @ (Control.Monad.Trans.Reader.ReaderT
                             [GHC.LanguageExtensions.Type.Extension]
                             (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc))
                        @ Control.Reference.Representation.MU
                        TraverseAST.$s$fRefMonadswr of ww { (#,,,,,#) ww1 ww2 ww3 ww4 ww5 ww6 ->
                 Control.Reference.Representation.Reference
                   @ (Control.Monad.Trans.Reader.ReaderT
                        [GHC.LanguageExtensions.Type.Extension]
                        (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc))
                   @ Control.Reference.Representation.MU
                   @ Control.Reference.Representation.MU
                   @ Control.Reference.Representation.MU
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        Language.Haskell.Tools.AST.Representation.Kinds.UKindConstraint
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        Language.Haskell.Tools.AST.Representation.Kinds.UKindConstraint
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        Language.Haskell.Tools.AST.Representation.Kinds.UKind
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        Language.Haskell.Tools.AST.Representation.Kinds.UKind
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   ww1
                   ww2
                   ww3
                   ww4
                   ww5
                   ww6 }) -}
74973b988aec7d45be18cbbce34f7131
  traverseListCompBody ::
    ExtMonad.CheckNode
      Language.Haskell.Tools.AST.ElementTypes.ListCompBody
  {- Arity: 1,
     Strictness: <S(S(LLS(S)LLLLLLLLLL)L),U(U(U,U,U(U),U,U,U,U,U,U,U,U,U,U),U)>,
     Unfolding: (\ @ dom ($d(%,%) :: ExtMonad.ExtDomain dom) ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Language.Haskell.Tools.AST.Ann.SemanticInfo'
                             dom Language.Haskell.Tools.AST.Ann.SameInfoDefaultCls)
                        @ Language.Haskell.Tools.AST.SemaInfoTypes.NoSemanticInfo
                        (Language.Haskell.Tools.AST.Ann.$p3Domain
                           @ dom
                           (GHC.Classes.$p1(%,%)
                              @ (Language.Haskell.Tools.AST.Ann.Domain dom)
                              @ (Language.Haskell.Tools.AST.SemaInfoClasses.HasNameInfo'
                                   (Language.Haskell.Tools.AST.Ann.SemanticInfo
                                      dom
                                      Language.Haskell.Tools.AST.Representation.Names.UQualifiedName))
                              $d(%,%)))
                          `cast`
                        (Data.Type.Equality.N:~[0]
                             <*>_N <Language.Haskell.Tools.AST.Ann.SemanticInfo'
                                      dom
                                      Language.Haskell.Tools.AST.Ann.SameInfoDefaultCls>_N <Language.Haskell.Tools.AST.SemaInfoTypes.NoSemanticInfo>_N) of cobox0 { DEFAULT ->
                 case TraverseAST.traverseListCompBody1
                        @ dom of wild { Control.Reference.Representation.Reference ds1 ds2 ds3 ds4 ds5 ds6 ->
                 ds3 (TraverseAST.traverseCompStmt @ dom $d(%,%)) } }) -}
6fa22be72d7fc5e9d59f466193d8c420
  traverseListCompBody1 ::
    Control.Reference.Representation.Reference
      (Control.Monad.Trans.Reader.ReaderT
         [GHC.LanguageExtensions.Type.Extension]
         (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc))
      Control.Reference.Representation.MU
      Control.Reference.Representation.MU
      Control.Reference.Representation.MU
      (Language.Haskell.Tools.AST.Ann.Ann
         Language.Haskell.Tools.AST.Representation.Stmts.UListCompBody
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
      (Language.Haskell.Tools.AST.Ann.Ann
         Language.Haskell.Tools.AST.Representation.Stmts.UListCompBody
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
      (Language.Haskell.Tools.AST.Ann.Ann
         Language.Haskell.Tools.AST.Representation.Stmts.UCompStmt
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
      (Language.Haskell.Tools.AST.Ann.Ann
         Language.Haskell.Tools.AST.Representation.Stmts.UCompStmt
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
  {- Unfolding: (\ @ dom ->
                 case Control.Reference.Combinators.$w&
                        @ (Control.Monad.Trans.Reader.ReaderT
                             [GHC.LanguageExtensions.Type.Extension]
                             (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc))
                        @ Control.Reference.Representation.MU
                        @ Control.Reference.Representation.MU
                        @ Control.Reference.Representation.MU
                        @ (Language.Haskell.Tools.AST.Ann.Ann
                             Language.Haskell.Tools.AST.Representation.Stmts.UListCompBody
                             dom
                             Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                        @ (Language.Haskell.Tools.AST.Ann.Ann
                             Language.Haskell.Tools.AST.Representation.Stmts.UListCompBody
                             dom
                             Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                        @ (Language.Haskell.Tools.AST.Ann.AnnListG
                             Language.Haskell.Tools.AST.Representation.Stmts.UCompStmt
                             dom
                             Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                        @ (Language.Haskell.Tools.AST.Ann.AnnListG
                             Language.Haskell.Tools.AST.Representation.Stmts.UCompStmt
                             dom
                             Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                        @ (Language.Haskell.Tools.AST.Ann.Ann
                             Language.Haskell.Tools.AST.Representation.Stmts.UCompStmt
                             dom
                             Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                        @ (Language.Haskell.Tools.AST.Ann.Ann
                             Language.Haskell.Tools.AST.Representation.Stmts.UCompStmt
                             dom
                             Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                        (TraverseAST.traverseListCompBody3 @ dom)
                        (TraverseAST.traverseListCompBody2
                           @ dom) of ww { (#,,,,,#) ww1 ww2 ww3 ww4 ww5 ww6 ->
                 Control.Reference.Representation.Reference
                   @ (Control.Monad.Trans.Reader.ReaderT
                        [GHC.LanguageExtensions.Type.Extension]
                        (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc))
                   @ Control.Reference.Representation.MU
                   @ Control.Reference.Representation.MU
                   @ Control.Reference.Representation.MU
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        Language.Haskell.Tools.AST.Representation.Stmts.UListCompBody
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        Language.Haskell.Tools.AST.Representation.Stmts.UListCompBody
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        Language.Haskell.Tools.AST.Representation.Stmts.UCompStmt
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        Language.Haskell.Tools.AST.Representation.Stmts.UCompStmt
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   ww1
                   ww2
                   ww3
                   ww4
                   ww5
                   ww6 }) -}
fd145a917115e3a56eeccee1b2a4d136
  traverseListCompBody2 ::
    Control.Reference.Representation.Reference
      (Control.Monad.Trans.Reader.ReaderT
         [GHC.LanguageExtensions.Type.Extension]
         (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc))
      Control.Reference.Representation.MU
      Control.Reference.Representation.MU
      Control.Reference.Representation.MU
      (Language.Haskell.Tools.AST.Ann.AnnListG
         Language.Haskell.Tools.AST.Representation.Stmts.UCompStmt
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
      (Language.Haskell.Tools.AST.Ann.AnnListG
         Language.Haskell.Tools.AST.Representation.Stmts.UCompStmt
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
      (Language.Haskell.Tools.AST.Ann.Ann
         Language.Haskell.Tools.AST.Representation.Stmts.UCompStmt
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
      (Language.Haskell.Tools.AST.Ann.Ann
         Language.Haskell.Tools.AST.Representation.Stmts.UCompStmt
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
  {- Unfolding: (\ @ dom ->
                 case Language.Haskell.Tools.AST.Ann.$wannList
                        @ Language.Haskell.Tools.AST.Representation.Stmts.UCompStmt
                        @ dom
                        @ Language.Haskell.Tools.AST.Ann.SrcTemplateStage
                        @ (Control.Monad.Trans.Reader.ReaderT
                             [GHC.LanguageExtensions.Type.Extension]
                             (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc))
                        @ Control.Reference.Representation.MU
                        TraverseAST.$s$fRefMonadswr
                        TraverseAST.$sannList1
                          `cast`
                        (Sym (Control.Instances.Morph.N:Morph[0]
                                  <[]>_N
                                  <Data.Proxy.Proxy>_N)) of ww { (#,,,,,#) ww1 ww2 ww3 ww4 ww5 ww6 ->
                 Control.Reference.Representation.Reference
                   @ (Control.Monad.Trans.Reader.ReaderT
                        [GHC.LanguageExtensions.Type.Extension]
                        (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc))
                   @ Control.Reference.Representation.MU
                   @ Control.Reference.Representation.MU
                   @ Control.Reference.Representation.MU
                   @ (Language.Haskell.Tools.AST.Ann.AnnListG
                        Language.Haskell.Tools.AST.Representation.Stmts.UCompStmt
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   @ (Language.Haskell.Tools.AST.Ann.AnnListG
                        Language.Haskell.Tools.AST.Representation.Stmts.UCompStmt
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        Language.Haskell.Tools.AST.Representation.Stmts.UCompStmt
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        Language.Haskell.Tools.AST.Representation.Stmts.UCompStmt
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   ww1
                   ww2
                   ww3
                   ww4
                   ww5
                   ww6 }) -}
25e30a8b1ba6fe5e45b8b1c308a88bdc
  traverseListCompBody3 ::
    Control.Reference.Representation.Reference
      (Control.Monad.Trans.Reader.ReaderT
         [GHC.LanguageExtensions.Type.Extension]
         (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc))
      Control.Reference.Representation.MU
      Control.Reference.Representation.MU
      Control.Reference.Representation.MU
      (Language.Haskell.Tools.AST.Ann.Ann
         Language.Haskell.Tools.AST.Representation.Stmts.UListCompBody
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
      (Language.Haskell.Tools.AST.Ann.Ann
         Language.Haskell.Tools.AST.Representation.Stmts.UListCompBody
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
      (Language.Haskell.Tools.AST.Ann.AnnListG
         Language.Haskell.Tools.AST.Representation.Stmts.UCompStmt
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
      (Language.Haskell.Tools.AST.Ann.AnnListG
         Language.Haskell.Tools.AST.Representation.Stmts.UCompStmt
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
  {- Unfolding: (\ @ dom ->
                 case Language.Haskell.Tools.AST.References.$wcompStmts
                        @ GHC.Prim.Any
                        @ GHC.Prim.Any
                        @ dom
                        @ Language.Haskell.Tools.AST.Ann.SrcTemplateStage
                        @ (Control.Monad.Trans.Reader.ReaderT
                             [GHC.LanguageExtensions.Type.Extension]
                             (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc))
                        @ Control.Reference.Representation.MU
                        TraverseAST.$s$fRefMonadswr of ww { (#,,,,,#) ww1 ww2 ww3 ww4 ww5 ww6 ->
                 Control.Reference.Representation.Reference
                   @ (Control.Monad.Trans.Reader.ReaderT
                        [GHC.LanguageExtensions.Type.Extension]
                        (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc))
                   @ Control.Reference.Representation.MU
                   @ Control.Reference.Representation.MU
                   @ Control.Reference.Representation.MU
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        Language.Haskell.Tools.AST.Representation.Stmts.UListCompBody
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        Language.Haskell.Tools.AST.Representation.Stmts.UListCompBody
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   @ (Language.Haskell.Tools.AST.Ann.AnnListG
                        Language.Haskell.Tools.AST.Representation.Stmts.UCompStmt
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   @ (Language.Haskell.Tools.AST.Ann.AnnListG
                        Language.Haskell.Tools.AST.Representation.Stmts.UCompStmt
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   ww1
                   ww2
                   ww3
                   ww4
                   ww5
                   ww6 }) -}
d12a502dc87807a0f563542a2245aa83
  traverseLiteral ::
    ExtMonad.CheckNode Language.Haskell.Tools.AST.ElementTypes.Literal
  {- Arity: 6, HasNoCafRefs,
     Strictness: <S(S(LLS(S)LLLLLLLLLL)L),1*U(1*U(A,A,1*U(1*U),A,A,A,A,A,A,A,A,A,A),A)><L,U><L,A><L,U><L,A><S,U>,
     Unfolding: InlineRule (0, True, True)
                TraverseAST.traverseLiteral1
                  `cast`
                (forall (dom :: <*>_N).
                 <ExtMonad.ExtDomain dom>_R
                 ->_R <Language.Haskell.Tools.AST.ElementTypes.Literal dom>_R
                 ->_R Trans
                          (<[GHC.LanguageExtensions.Type.Extension]>_R
                           ->_R Trans
                                    (<ExtMap.ExtMap>_R
                                     ->_R Trans
                                              (<GhcMonad.Session>_R
                                               ->_R Sym (GHC.Types.N:IO[0]
                                                             <(Language.Haskell.Tools.AST.ElementTypes.Literal
                                                                 dom,
                                                               ExtMap.ExtMap)>_R))
                                              (Sym (GhcMonad.N:Ghc[0]
                                                        <(Language.Haskell.Tools.AST.ElementTypes.Literal
                                                            dom,
                                                          ExtMap.ExtMap)>_R)))
                                    (Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                              <ExtMap.ExtMap>_N
                                              <GhcMonad.Ghc>_R
                                              <Language.Haskell.Tools.AST.ElementTypes.Literal
                                                 dom>_N)))
                          (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                    <*>_N
                                    <[GHC.LanguageExtensions.Type.Extension]>_R
                                    <Control.Monad.Trans.State.Lazy.StateT
                                       ExtMap.ExtMap GhcMonad.Ghc>_R
                                    <Language.Haskell.Tools.AST.ElementTypes.Literal dom>_N))) -}
da77889890fbe52e81f6278b7ffbc39c
  traverseLiteral1 ::
    ExtMonad.ExtDomain dom =>
    Language.Haskell.Tools.AST.ElementTypes.Literal dom
    -> [GHC.LanguageExtensions.Type.Extension]
    -> ExtMap.ExtMap
    -> GhcMonad.Session
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          (Language.Haskell.Tools.AST.ElementTypes.Literal dom,
           ExtMap.ExtMap) #)
  {- Arity: 6, HasNoCafRefs,
     Strictness: <S(S(LLS(S)LLLLLLLLLL)L),1*U(1*U(A,A,1*U(1*U),A,A,A,A,A,A,A,A,A,A),A)><L,U><L,A><L,U><L,A><S,U>,
     Unfolding: InlineRule (6, True, False)
                (\ @ dom
                   ($d(%,%) :: ExtMonad.ExtDomain dom)
                   (eta :: Language.Haskell.Tools.AST.ElementTypes.Literal dom)
                   (eta1 :: [GHC.LanguageExtensions.Type.Extension])
                   (eta2 :: ExtMap.ExtMap)
                   (eta3 :: GhcMonad.Session)
                   (eta4 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Language.Haskell.Tools.AST.Ann.SemanticInfo'
                             dom Language.Haskell.Tools.AST.Ann.SameInfoDefaultCls)
                        @ Language.Haskell.Tools.AST.SemaInfoTypes.NoSemanticInfo
                        (Language.Haskell.Tools.AST.Ann.$p3Domain
                           @ dom
                           (GHC.Classes.$p1(%,%)
                              @ (Language.Haskell.Tools.AST.Ann.Domain dom)
                              @ (Language.Haskell.Tools.AST.SemaInfoClasses.HasNameInfo'
                                   (Language.Haskell.Tools.AST.Ann.SemanticInfo
                                      dom
                                      Language.Haskell.Tools.AST.Representation.Names.UQualifiedName))
                              $d(%,%)))
                          `cast`
                        (Data.Type.Equality.N:~[0]
                             <*>_N <Language.Haskell.Tools.AST.Ann.SemanticInfo'
                                      dom
                                      Language.Haskell.Tools.AST.Ann.SameInfoDefaultCls>_N <Language.Haskell.Tools.AST.SemaInfoTypes.NoSemanticInfo>_N) of cobox0 { DEFAULT ->
                 (# eta4, (eta, eta2) #) }) -}
b9d1593232c0f72abf4ee2609a9f58c1
  traverseLocalBind ::
    ExtMonad.CheckNode
      Language.Haskell.Tools.AST.ElementTypes.LocalBind
  {- Arity: 1,
     Strictness: <S(S(LLS(S)LLLLLLLLLL)L),U(U(U,U,U(U),U,U,U,U,U,U,U,U,U,U),U)> -}
6b45e6af5601f3e863f35a557cd29fa6
  traverseLocalBinds ::
    ExtMonad.CheckNode
      Language.Haskell.Tools.AST.ElementTypes.LocalBinds
  {- Arity: 1,
     Strictness: <S(S(LLS(S)LLLLLLLLLL)L),U(U(U,U,U(U),U,U,U,U,U,U,U,U,U,U),U)> -}
d434d73cfc0888dc1844286e9f2a3f20
  traverseMatch ::
    ExtMonad.CheckNode Language.Haskell.Tools.AST.ElementTypes.Match
  {- Arity: 1,
     Strictness: <S(S(LLS(S)LLLLLLLLLL)L),U(U(U,U,U(U),U,U,U,U,U,U,U,U,U,U),U)> -}
3b5431f41004fcb34fc31762fd33f125
  traverseMatchLhs ::
    ExtMonad.CheckNode Language.Haskell.Tools.AST.ElementTypes.MatchLhs
  {- Arity: 1,
     Strictness: <S(S(LLS(S)LLLLLLLLLL)L),U(U(U,U,U(U),U,U,U,U,U,U,U,U,U,U),U)>,
     Unfolding: (\ @ dom ($d(%,%) :: ExtMonad.ExtDomain dom) ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Language.Haskell.Tools.AST.Ann.SemanticInfo'
                             dom Language.Haskell.Tools.AST.Ann.SameInfoDefaultCls)
                        @ Language.Haskell.Tools.AST.SemaInfoTypes.NoSemanticInfo
                        (Language.Haskell.Tools.AST.Ann.$p3Domain
                           @ dom
                           (GHC.Classes.$p1(%,%)
                              @ (Language.Haskell.Tools.AST.Ann.Domain dom)
                              @ (Language.Haskell.Tools.AST.SemaInfoClasses.HasNameInfo'
                                   (Language.Haskell.Tools.AST.Ann.SemanticInfo
                                      dom
                                      Language.Haskell.Tools.AST.Representation.Names.UQualifiedName))
                              $d(%,%)))
                          `cast`
                        (Data.Type.Equality.N:~[0]
                             <*>_N <Language.Haskell.Tools.AST.Ann.SemanticInfo'
                                      dom
                                      Language.Haskell.Tools.AST.Ann.SameInfoDefaultCls>_N <Language.Haskell.Tools.AST.SemaInfoTypes.NoSemanticInfo>_N) of cobox0 { DEFAULT ->
                 let {
                   f :: Language.Haskell.Tools.AST.Ann.Ann
                          Language.Haskell.Tools.AST.Representation.Binds.UMatchLhs
                          dom
                          Language.Haskell.Tools.AST.Ann.SrcTemplateStage
                        -> Control.Monad.Trans.Reader.ReaderT
                             [GHC.LanguageExtensions.Type.Extension]
                             (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc)
                             (Language.Haskell.Tools.AST.Ann.Ann
                                Language.Haskell.Tools.AST.Representation.Binds.UMatchLhs
                                dom
                                Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   = case TraverseAST.traverseMatchLhs10
                            @ dom of wild { Control.Reference.Representation.Reference ds1 ds2 ds3 ds4 ds5 ds6 ->
                     ds3
                       (TraverseAST.traverseFieldUpdate2 @ dom $d(%,%))
                         `cast`
                       (<Language.Haskell.Tools.AST.ElementTypes.Name dom>_R
                        ->_R Trans
                                 (<[GHC.LanguageExtensions.Type.Extension]>_R
                                  ->_R Trans
                                           (<ExtMap.ExtMap>_R
                                            ->_R Trans
                                                     (<GhcMonad.Session>_R
                                                      ->_R Sym (GHC.Types.N:IO[0]
                                                                    <(Language.Haskell.Tools.AST.ElementTypes.Name
                                                                        dom,
                                                                      ExtMap.ExtMap)>_R))
                                                     (Sym (GhcMonad.N:Ghc[0]
                                                               <(Language.Haskell.Tools.AST.ElementTypes.Name
                                                                   dom,
                                                                 ExtMap.ExtMap)>_R)))
                                           (Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                                     <ExtMap.ExtMap>_N
                                                     <GhcMonad.Ghc>_R
                                                     <Language.Haskell.Tools.AST.ElementTypes.Name
                                                        dom>_N)))
                                 (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                           <*>_N
                                           <[GHC.LanguageExtensions.Type.Extension]>_R
                                           <Control.Monad.Trans.State.Lazy.StateT
                                              ExtMap.ExtMap GhcMonad.Ghc>_R
                                           <Language.Haskell.Tools.AST.ElementTypes.Name dom>_N))) }
                 } in
                 let {
                   f1 :: Language.Haskell.Tools.AST.Ann.Ann
                           Language.Haskell.Tools.AST.Representation.Binds.UMatchLhs
                           dom
                           Language.Haskell.Tools.AST.Ann.SrcTemplateStage
                         -> Control.Monad.Trans.Reader.ReaderT
                              [GHC.LanguageExtensions.Type.Extension]
                              (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc)
                              (Language.Haskell.Tools.AST.Ann.Ann
                                 Language.Haskell.Tools.AST.Representation.Binds.UMatchLhs
                                 dom
                                 Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   = case TraverseAST.traverseMatchLhs9
                            @ dom of wild { Control.Reference.Representation.Reference ds1 ds2 ds3 ds4 ds5 ds6 ->
                     ds3
                       (TraverseAST.traverseMatchLhs8 @ dom $d(%,%))
                         `cast`
                       (<Language.Haskell.Tools.AST.ElementTypes.Operator dom>_R
                        ->_R Trans
                                 (<[GHC.LanguageExtensions.Type.Extension]>_R
                                  ->_R Trans
                                           (<ExtMap.ExtMap>_R
                                            ->_R Trans
                                                     (<GhcMonad.Session>_R
                                                      ->_R Sym (GHC.Types.N:IO[0]
                                                                    <(Language.Haskell.Tools.AST.ElementTypes.Operator
                                                                        dom,
                                                                      ExtMap.ExtMap)>_R))
                                                     (Sym (GhcMonad.N:Ghc[0]
                                                               <(Language.Haskell.Tools.AST.ElementTypes.Operator
                                                                   dom,
                                                                 ExtMap.ExtMap)>_R)))
                                           (Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                                     <ExtMap.ExtMap>_N
                                                     <GhcMonad.Ghc>_R
                                                     <Language.Haskell.Tools.AST.ElementTypes.Operator
                                                        dom>_N)))
                                 (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                           <*>_N
                                           <[GHC.LanguageExtensions.Type.Extension]>_R
                                           <Control.Monad.Trans.State.Lazy.StateT
                                              ExtMap.ExtMap GhcMonad.Ghc>_R
                                           <Language.Haskell.Tools.AST.ElementTypes.Operator
                                              dom>_N))) }
                 } in
                 let {
                   g :: Language.Haskell.Tools.AST.Ann.Ann
                          Language.Haskell.Tools.AST.Representation.Binds.UMatchLhs
                          dom
                          Language.Haskell.Tools.AST.Ann.SrcTemplateStage
                        -> Control.Monad.Trans.Reader.ReaderT
                             [GHC.LanguageExtensions.Type.Extension]
                             (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc)
                             (Language.Haskell.Tools.AST.Ann.Ann
                                Language.Haskell.Tools.AST.Representation.Binds.UMatchLhs
                                dom
                                Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   = case TraverseAST.traverseMatchLhs1
                            @ dom of wild { Control.Reference.Representation.Reference ds1 ds2 ds3 ds4 ds5 ds6 ->
                     ds3 (TraverseAST.traversePattern @ dom $d(%,%)) }
                 } in
                 \ (x :: Language.Haskell.Tools.AST.Ann.Ann
                           Language.Haskell.Tools.AST.Representation.Binds.UMatchLhs
                           dom
                           Language.Haskell.Tools.AST.Ann.SrcTemplateStage) ->
                 let {
                   m1 :: Control.Monad.Trans.Reader.ReaderT
                           [GHC.LanguageExtensions.Type.Extension]
                           (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc)
                           (Language.Haskell.Tools.AST.Ann.Ann
                              Language.Haskell.Tools.AST.Representation.Binds.UMatchLhs
                              dom
                              Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   = f x
                 } in
                 (\ (r1 :: [GHC.LanguageExtensions.Type.Extension]) ->
                  let {
                    m2 :: Control.Monad.Trans.State.Lazy.StateT
                            (Data.Map.Base.Map
                               (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                               [SrcLoc.SrcSpan])
                            GhcMonad.Ghc
                            (Language.Haskell.Tools.AST.Ann.Ann
                               Language.Haskell.Tools.AST.Representation.Binds.UMatchLhs
                               dom
                               Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                    = m1
                        `cast`
                      (Control.Monad.Trans.Reader.N:ReaderT[0]
                           <*>_N
                           <[GHC.LanguageExtensions.Type.Extension]>_R
                           <Control.Monad.Trans.State.Lazy.StateT
                              ExtMap.ExtMap GhcMonad.Ghc>_R
                           <Language.Haskell.Tools.AST.Ann.Ann
                              Language.Haskell.Tools.AST.Representation.Binds.UMatchLhs
                              dom
                              Language.Haskell.Tools.AST.Ann.SrcTemplateStage>_N)
                        r1
                  } in
                  (\ (s1 :: Data.Map.Base.Map
                              (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                              [SrcLoc.SrcSpan]) ->
                   let {
                     m :: GhcMonad.Ghc
                            (Language.Haskell.Tools.AST.Ann.Ann
                               Language.Haskell.Tools.AST.Representation.Binds.UMatchLhs
                               dom
                               Language.Haskell.Tools.AST.Ann.SrcTemplateStage,
                             Data.Map.Base.Map
                               (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                               [SrcLoc.SrcSpan])
                     = m2
                         `cast`
                       (Control.Monad.Trans.State.Lazy.N:StateT[0]
                            <Data.Map.Base.Map
                               (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                               [SrcLoc.SrcSpan]>_N
                            <GhcMonad.Ghc>_R
                            <Language.Haskell.Tools.AST.Ann.Ann
                               Language.Haskell.Tools.AST.Representation.Binds.UMatchLhs
                               dom
                               Language.Haskell.Tools.AST.Ann.SrcTemplateStage>_N)
                         s1
                   } in
                   (\ (s :: GhcMonad.Session)
                      (s2 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                    case (m `cast`
                          (GhcMonad.N:Ghc[0]
                               <(Language.Haskell.Tools.AST.Ann.Ann
                                   Language.Haskell.Tools.AST.Representation.Binds.UMatchLhs
                                   dom
                                   Language.Haskell.Tools.AST.Ann.SrcTemplateStage,
                                 Data.Map.Base.Map
                                   (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                                   [SrcLoc.SrcSpan])>_R)
                            s)
                           `cast`
                         (GHC.Types.N:IO[0]
                              <(Language.Haskell.Tools.AST.Ann.Ann
                                  Language.Haskell.Tools.AST.Representation.Binds.UMatchLhs
                                  dom
                                  Language.Haskell.Tools.AST.Ann.SrcTemplateStage,
                                Data.Map.Base.Map
                                  (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                                  [SrcLoc.SrcSpan])>_R)
                           s2 of ds1 { (#,#) ipv ipv1 ->
                    case ((((f1 (case ipv1 of wild { (,) a1 s' -> a1 }))
                              `cast`
                            (Control.Monad.Trans.Reader.N:ReaderT[0]
                                 <*>_N
                                 <[GHC.LanguageExtensions.Type.Extension]>_R
                                 <Control.Monad.Trans.State.Lazy.StateT
                                    ExtMap.ExtMap GhcMonad.Ghc>_R
                                 <Language.Haskell.Tools.AST.Ann.Ann
                                    Language.Haskell.Tools.AST.Representation.Binds.UMatchLhs
                                    dom
                                    Language.Haskell.Tools.AST.Ann.SrcTemplateStage>_N)
                              r1)
                             `cast`
                           (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                <Data.Map.Base.Map
                                   (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                                   [SrcLoc.SrcSpan]>_N
                                <GhcMonad.Ghc>_R
                                <Language.Haskell.Tools.AST.Ann.Ann
                                   Language.Haskell.Tools.AST.Representation.Binds.UMatchLhs
                                   dom
                                   Language.Haskell.Tools.AST.Ann.SrcTemplateStage>_N)
                             (case ipv1 of wild { (,) a1 s' -> s' }))
                            `cast`
                          (GhcMonad.N:Ghc[0]
                               <(Language.Haskell.Tools.AST.Ann.Ann
                                   Language.Haskell.Tools.AST.Representation.Binds.UMatchLhs
                                   dom
                                   Language.Haskell.Tools.AST.Ann.SrcTemplateStage,
                                 Data.Map.Base.Map
                                   (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                                   [SrcLoc.SrcSpan])>_R)
                            s)
                           `cast`
                         (GHC.Types.N:IO[0]
                              <(Language.Haskell.Tools.AST.Ann.Ann
                                  Language.Haskell.Tools.AST.Representation.Binds.UMatchLhs
                                  dom
                                  Language.Haskell.Tools.AST.Ann.SrcTemplateStage,
                                Data.Map.Base.Map
                                  (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                                  [SrcLoc.SrcSpan])>_R)
                           ipv of ds2 { (#,#) ipv2 ipv3 ->
                    ((((g (case ipv3 of wild { (,) a1 s' -> a1 }))
                         `cast`
                       (Control.Monad.Trans.Reader.N:ReaderT[0]
                            <*>_N
                            <[GHC.LanguageExtensions.Type.Extension]>_R
                            <Control.Monad.Trans.State.Lazy.StateT
                               ExtMap.ExtMap GhcMonad.Ghc>_R
                            <Language.Haskell.Tools.AST.Ann.Ann
                               Language.Haskell.Tools.AST.Representation.Binds.UMatchLhs
                               dom
                               Language.Haskell.Tools.AST.Ann.SrcTemplateStage>_N)
                         r1)
                        `cast`
                      (Control.Monad.Trans.State.Lazy.N:StateT[0]
                           <Data.Map.Base.Map
                              (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                              [SrcLoc.SrcSpan]>_N
                           <GhcMonad.Ghc>_R
                           <Language.Haskell.Tools.AST.Ann.Ann
                              Language.Haskell.Tools.AST.Representation.Binds.UMatchLhs
                              dom
                              Language.Haskell.Tools.AST.Ann.SrcTemplateStage>_N)
                        (case ipv3 of wild { (,) a1 s' -> s' }))
                       `cast`
                     (GhcMonad.N:Ghc[0]
                          <(Language.Haskell.Tools.AST.Ann.Ann
                              Language.Haskell.Tools.AST.Representation.Binds.UMatchLhs
                              dom
                              Language.Haskell.Tools.AST.Ann.SrcTemplateStage,
                            Data.Map.Base.Map
                              (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                              [SrcLoc.SrcSpan])>_R)
                       s)
                      `cast`
                    (GHC.Types.N:IO[0]
                         <(Language.Haskell.Tools.AST.Ann.Ann
                             Language.Haskell.Tools.AST.Representation.Binds.UMatchLhs
                             dom
                             Language.Haskell.Tools.AST.Ann.SrcTemplateStage,
                           Data.Map.Base.Map
                             (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                             [SrcLoc.SrcSpan])>_R)
                      ipv2 } })
                     `cast`
                   (Trans
                        (<GhcMonad.Session>_R
                         ->_R Sym (GHC.Types.N:IO[0]
                                       <(Language.Haskell.Tools.AST.Ann.Ann
                                           Language.Haskell.Tools.AST.Representation.Binds.UMatchLhs
                                           dom
                                           Language.Haskell.Tools.AST.Ann.SrcTemplateStage,
                                         Data.Map.Base.Map
                                           (ExtMap.LogicalRelation
                                              GHC.LanguageExtensions.Type.Extension)
                                           [SrcLoc.SrcSpan])>_R))
                        (Sym (GhcMonad.N:Ghc[0]
                                  <(Language.Haskell.Tools.AST.Ann.Ann
                                      Language.Haskell.Tools.AST.Representation.Binds.UMatchLhs
                                      dom
                                      Language.Haskell.Tools.AST.Ann.SrcTemplateStage,
                                    Data.Map.Base.Map
                                      (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                                      [SrcLoc.SrcSpan])>_R))))
                    `cast`
                  (Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                            <Data.Map.Base.Map
                               (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                               [SrcLoc.SrcSpan]>_N
                            <GhcMonad.Ghc>_R
                            <Language.Haskell.Tools.AST.Ann.Ann
                               Language.Haskell.Tools.AST.Representation.Binds.UMatchLhs
                               dom
                               Language.Haskell.Tools.AST.Ann.SrcTemplateStage>_N)))
                   `cast`
                 (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                           <*>_N
                           <[GHC.LanguageExtensions.Type.Extension]>_R
                           <Control.Monad.Trans.State.Lazy.StateT
                              ExtMap.ExtMap GhcMonad.Ghc>_R
                           <Language.Haskell.Tools.AST.Ann.Ann
                              Language.Haskell.Tools.AST.Representation.Binds.UMatchLhs
                              dom
                              Language.Haskell.Tools.AST.Ann.SrcTemplateStage>_N)) }) -}
8cfe6eba69aebf0c85755db2592f6af6
  traverseMatchLhs1 ::
    Control.Reference.Representation.Reference
      (Control.Monad.Trans.Reader.ReaderT
         [GHC.LanguageExtensions.Type.Extension]
         (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc))
      Control.Reference.Representation.MU
      Control.Reference.Representation.MU
      Control.Reference.Representation.MU
      (Language.Haskell.Tools.AST.Ann.Ann
         Language.Haskell.Tools.AST.Representation.Binds.UMatchLhs
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
      (Language.Haskell.Tools.AST.Ann.Ann
         Language.Haskell.Tools.AST.Representation.Binds.UMatchLhs
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
      (Language.Haskell.Tools.AST.Ann.Ann
         Language.Haskell.Tools.AST.Representation.Patterns.UPattern
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
      (Language.Haskell.Tools.AST.Ann.Ann
         Language.Haskell.Tools.AST.Representation.Patterns.UPattern
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
  {- Unfolding: (\ @ dom ->
                 case Control.Reference.Combinators.$w&+&
                        @ (Control.Monad.Trans.Reader.ReaderT
                             [GHC.LanguageExtensions.Type.Extension]
                             (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc))
                        @ Control.Reference.Representation.MU
                        @ Control.Reference.Representation.MU
                        @ Control.Reference.Representation.MU
                        @ (Language.Haskell.Tools.AST.Ann.Ann
                             Language.Haskell.Tools.AST.Representation.Binds.UMatchLhs
                             dom
                             Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                        @ (Language.Haskell.Tools.AST.Ann.Ann
                             Language.Haskell.Tools.AST.Representation.Patterns.UPattern
                             dom
                             Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                        TraverseAST.$s$fRefMonadswr
                        Control.Reference.Predefined.Containers.Tree.$s$fRefMonadswr1
                        Data.Proxy.$fMonadPlusProxy
                        Data.Proxy.$fMonadPlusProxy
                        (TraverseAST.traverseMatchLhs3 @ dom)
                        (TraverseAST.traverseMatchLhs2
                           @ dom) of ww { (#,,,,,#) ww1 ww2 ww3 ww4 ww5 ww6 ->
                 Control.Reference.Representation.Reference
                   @ (Control.Monad.Trans.Reader.ReaderT
                        [GHC.LanguageExtensions.Type.Extension]
                        (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc))
                   @ Control.Reference.Representation.MU
                   @ Control.Reference.Representation.MU
                   @ Control.Reference.Representation.MU
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        Language.Haskell.Tools.AST.Representation.Binds.UMatchLhs
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        Language.Haskell.Tools.AST.Representation.Binds.UMatchLhs
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        Language.Haskell.Tools.AST.Representation.Patterns.UPattern
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        Language.Haskell.Tools.AST.Representation.Patterns.UPattern
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   ww1
                   ww2
                   ww3
                   ww4
                   ww5
                   ww6 }) -}
19233bb8673b747dbb6d63b7950fc52e
  traverseMatchLhs10 ::
    Control.Reference.Representation.Reference
      (Control.Monad.Trans.Reader.ReaderT
         [GHC.LanguageExtensions.Type.Extension]
         (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc))
      Control.Reference.Representation.MU
      Control.Reference.Representation.MU
      Control.Reference.Representation.MU
      (Language.Haskell.Tools.AST.Ann.Ann
         Language.Haskell.Tools.AST.Representation.Binds.UMatchLhs
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
      (Language.Haskell.Tools.AST.Ann.Ann
         Language.Haskell.Tools.AST.Representation.Binds.UMatchLhs
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
      (Language.Haskell.Tools.AST.Ann.Ann
         Language.Haskell.Tools.AST.Representation.Names.UName
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
      (Language.Haskell.Tools.AST.Ann.Ann
         Language.Haskell.Tools.AST.Representation.Names.UName
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
  {- Unfolding: (\ @ dom ->
                 case Language.Haskell.Tools.AST.References.$wmatchLhsName
                        @ dom
                        @ Language.Haskell.Tools.AST.Ann.SrcTemplateStage
                        @ (Control.Monad.Trans.Reader.ReaderT
                             [GHC.LanguageExtensions.Type.Extension]
                             (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc))
                        @ Control.Reference.Representation.MU
                        (TraverseAST.$s$fMonadReaderT
                           @ [GHC.LanguageExtensions.Type.Extension])
                        Data.Proxy.$fMonadPlusProxy
                        TraverseAST.$sannJust1
                          `cast`
                        (Sym (Control.Instances.Morph.N:Morph[0]
                                  <GHC.Base.Maybe>_N
                                  <Data.Proxy.Proxy>_N)) of ww { (#,,,,,#) ww1 ww2 ww3 ww4 ww5 ww6 ->
                 Control.Reference.Representation.Reference
                   @ (Control.Monad.Trans.Reader.ReaderT
                        [GHC.LanguageExtensions.Type.Extension]
                        (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc))
                   @ Control.Reference.Representation.MU
                   @ Control.Reference.Representation.MU
                   @ Control.Reference.Representation.MU
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        Language.Haskell.Tools.AST.Representation.Binds.UMatchLhs
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        Language.Haskell.Tools.AST.Representation.Binds.UMatchLhs
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        Language.Haskell.Tools.AST.Representation.Names.UName
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        Language.Haskell.Tools.AST.Representation.Names.UName
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   ww1
                   ww2
                   ww3
                   ww4
                   ww5
                   ww6 }) -}
0f0ebc0be339fb25e1f411b128d09fdc
  traverseMatchLhs2 ::
    Control.Reference.Representation.Reference
      (Control.Monad.Trans.Reader.ReaderT
         [GHC.LanguageExtensions.Type.Extension]
         (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc))
      Control.Reference.Representation.MU
      Control.Reference.Representation.MU
      Control.Reference.Representation.MU
      (Language.Haskell.Tools.AST.Ann.Ann
         Language.Haskell.Tools.AST.Representation.Binds.UMatchLhs
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
      (Language.Haskell.Tools.AST.Ann.Ann
         Language.Haskell.Tools.AST.Representation.Binds.UMatchLhs
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
      (Language.Haskell.Tools.AST.Ann.Ann
         Language.Haskell.Tools.AST.Representation.Patterns.UPattern
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
      (Language.Haskell.Tools.AST.Ann.Ann
         Language.Haskell.Tools.AST.Representation.Patterns.UPattern
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
  {- Unfolding: (\ @ dom ->
                 case Language.Haskell.Tools.AST.References.$wmatchLhsRhs
                        @ dom
                        @ Language.Haskell.Tools.AST.Ann.SrcTemplateStage
                        @ (Control.Monad.Trans.Reader.ReaderT
                             [GHC.LanguageExtensions.Type.Extension]
                             (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc))
                        @ Control.Reference.Representation.MU
                        (TraverseAST.$s$fMonadReaderT
                           @ [GHC.LanguageExtensions.Type.Extension])
                        Data.Proxy.$fMonadPlusProxy
                        TraverseAST.$sannJust1
                          `cast`
                        (Sym (Control.Instances.Morph.N:Morph[0]
                                  <GHC.Base.Maybe>_N
                                  <Control.Reference.Representation.MU>_N)) of ww { (#,,,,,#) ww1 ww2 ww3 ww4 ww5 ww6 ->
                 Control.Reference.Representation.Reference
                   @ (Control.Monad.Trans.Reader.ReaderT
                        [GHC.LanguageExtensions.Type.Extension]
                        (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc))
                   @ Control.Reference.Representation.MU
                   @ Control.Reference.Representation.MU
                   @ Control.Reference.Representation.MU
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        Language.Haskell.Tools.AST.Representation.Binds.UMatchLhs
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        Language.Haskell.Tools.AST.Representation.Binds.UMatchLhs
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        Language.Haskell.Tools.AST.Representation.Patterns.UPattern
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        Language.Haskell.Tools.AST.Representation.Patterns.UPattern
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   ww1
                   ww2
                   ww3
                   ww4
                   ww5
                   ww6 }) -}
2cfefe32cddcfd568f5eeaa5f7814bb3
  traverseMatchLhs3 ::
    Control.Reference.Representation.Reference
      (Control.Monad.Trans.Reader.ReaderT
         [GHC.LanguageExtensions.Type.Extension]
         (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc))
      Control.Reference.Representation.MU
      Control.Reference.Representation.MU
      Control.Reference.Representation.MU
      (Language.Haskell.Tools.AST.Ann.Ann
         Language.Haskell.Tools.AST.Representation.Binds.UMatchLhs
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
      (Language.Haskell.Tools.AST.Ann.Ann
         Language.Haskell.Tools.AST.Representation.Binds.UMatchLhs
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
      (Language.Haskell.Tools.AST.Ann.Ann
         Language.Haskell.Tools.AST.Representation.Patterns.UPattern
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
      (Language.Haskell.Tools.AST.Ann.Ann
         Language.Haskell.Tools.AST.Representation.Patterns.UPattern
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
  {- Unfolding: (\ @ dom ->
                 case Control.Reference.Combinators.$w&+&
                        @ (Control.Monad.Trans.Reader.ReaderT
                             [GHC.LanguageExtensions.Type.Extension]
                             (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc))
                        @ Control.Reference.Representation.MU
                        @ Control.Reference.Representation.MU
                        @ Control.Reference.Representation.MU
                        @ (Language.Haskell.Tools.AST.Ann.Ann
                             Language.Haskell.Tools.AST.Representation.Binds.UMatchLhs
                             dom
                             Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                        @ (Language.Haskell.Tools.AST.Ann.Ann
                             Language.Haskell.Tools.AST.Representation.Patterns.UPattern
                             dom
                             Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                        TraverseAST.$s$fRefMonadswr
                        Control.Reference.Predefined.Containers.Tree.$s$fRefMonadswr1
                        Data.Proxy.$fMonadPlusProxy
                        Data.Proxy.$fMonadPlusProxy
                        (TraverseAST.traverseMatchLhs5 @ dom)
                        (TraverseAST.traverseMatchLhs4
                           @ dom) of ww { (#,,,,,#) ww1 ww2 ww3 ww4 ww5 ww6 ->
                 Control.Reference.Representation.Reference
                   @ (Control.Monad.Trans.Reader.ReaderT
                        [GHC.LanguageExtensions.Type.Extension]
                        (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc))
                   @ Control.Reference.Representation.MU
                   @ Control.Reference.Representation.MU
                   @ Control.Reference.Representation.MU
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        Language.Haskell.Tools.AST.Representation.Binds.UMatchLhs
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        Language.Haskell.Tools.AST.Representation.Binds.UMatchLhs
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        Language.Haskell.Tools.AST.Representation.Patterns.UPattern
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        Language.Haskell.Tools.AST.Representation.Patterns.UPattern
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   ww1
                   ww2
                   ww3
                   ww4
                   ww5
                   ww6 }) -}
801f4da55872a61054dd7d524e7d49d4
  traverseMatchLhs4 ::
    Control.Reference.Representation.Reference
      (Control.Monad.Trans.Reader.ReaderT
         [GHC.LanguageExtensions.Type.Extension]
         (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc))
      Control.Reference.Representation.MU
      Control.Reference.Representation.MU
      Control.Reference.Representation.MU
      (Language.Haskell.Tools.AST.Ann.Ann
         Language.Haskell.Tools.AST.Representation.Binds.UMatchLhs
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
      (Language.Haskell.Tools.AST.Ann.Ann
         Language.Haskell.Tools.AST.Representation.Binds.UMatchLhs
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
      (Language.Haskell.Tools.AST.Ann.Ann
         Language.Haskell.Tools.AST.Representation.Patterns.UPattern
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
      (Language.Haskell.Tools.AST.Ann.Ann
         Language.Haskell.Tools.AST.Representation.Patterns.UPattern
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
  {- Unfolding: (\ @ dom ->
                 case Language.Haskell.Tools.AST.References.$wmatchLhsLhs
                        @ dom
                        @ Language.Haskell.Tools.AST.Ann.SrcTemplateStage
                        @ (Control.Monad.Trans.Reader.ReaderT
                             [GHC.LanguageExtensions.Type.Extension]
                             (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc))
                        @ Control.Reference.Representation.MU
                        (TraverseAST.$s$fMonadReaderT
                           @ [GHC.LanguageExtensions.Type.Extension])
                        Data.Proxy.$fMonadPlusProxy
                        TraverseAST.$sannJust1
                          `cast`
                        (Sym (Control.Instances.Morph.N:Morph[0]
                                  <GHC.Base.Maybe>_N
                                  <Control.Reference.Representation.MU>_N)) of ww { (#,,,,,#) ww1 ww2 ww3 ww4 ww5 ww6 ->
                 Control.Reference.Representation.Reference
                   @ (Control.Monad.Trans.Reader.ReaderT
                        [GHC.LanguageExtensions.Type.Extension]
                        (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc))
                   @ Control.Reference.Representation.MU
                   @ Control.Reference.Representation.MU
                   @ Control.Reference.Representation.MU
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        Language.Haskell.Tools.AST.Representation.Binds.UMatchLhs
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        Language.Haskell.Tools.AST.Representation.Binds.UMatchLhs
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        Language.Haskell.Tools.AST.Representation.Patterns.UPattern
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        Language.Haskell.Tools.AST.Representation.Patterns.UPattern
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   ww1
                   ww2
                   ww3
                   ww4
                   ww5
                   ww6 }) -}
ca41dbba1ae296e45fd984fdfc9769f5
  traverseMatchLhs5 ::
    Control.Reference.Representation.Reference
      (Control.Monad.Trans.Reader.ReaderT
         [GHC.LanguageExtensions.Type.Extension]
         (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc))
      Control.Reference.Representation.MU
      Control.Reference.Representation.MU
      Control.Reference.Representation.MU
      (Language.Haskell.Tools.AST.Ann.Ann
         Language.Haskell.Tools.AST.Representation.Binds.UMatchLhs
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
      (Language.Haskell.Tools.AST.Ann.Ann
         Language.Haskell.Tools.AST.Representation.Binds.UMatchLhs
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
      (Language.Haskell.Tools.AST.Ann.Ann
         Language.Haskell.Tools.AST.Representation.Patterns.UPattern
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
      (Language.Haskell.Tools.AST.Ann.Ann
         Language.Haskell.Tools.AST.Representation.Patterns.UPattern
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
  {- Unfolding: (\ @ dom ->
                 case Control.Reference.Combinators.$w&
                        @ (Control.Monad.Trans.Reader.ReaderT
                             [GHC.LanguageExtensions.Type.Extension]
                             (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc))
                        @ Control.Reference.Representation.MU
                        @ Control.Reference.Representation.MU
                        @ Control.Reference.Representation.MU
                        @ (Language.Haskell.Tools.AST.Ann.Ann
                             Language.Haskell.Tools.AST.Representation.Binds.UMatchLhs
                             dom
                             Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                        @ (Language.Haskell.Tools.AST.Ann.Ann
                             Language.Haskell.Tools.AST.Representation.Binds.UMatchLhs
                             dom
                             Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                        @ (Language.Haskell.Tools.AST.Ann.AnnListG
                             Language.Haskell.Tools.AST.Representation.Patterns.UPattern
                             dom
                             Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                        @ (Language.Haskell.Tools.AST.Ann.AnnListG
                             Language.Haskell.Tools.AST.Representation.Patterns.UPattern
                             dom
                             Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                        @ (Language.Haskell.Tools.AST.Ann.Ann
                             Language.Haskell.Tools.AST.Representation.Patterns.UPattern
                             dom
                             Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                        @ (Language.Haskell.Tools.AST.Ann.Ann
                             Language.Haskell.Tools.AST.Representation.Patterns.UPattern
                             dom
                             Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                        (TraverseAST.traverseMatchLhs7 @ dom)
                        (TraverseAST.traverseMatchLhs6
                           @ dom) of ww { (#,,,,,#) ww1 ww2 ww3 ww4 ww5 ww6 ->
                 Control.Reference.Representation.Reference
                   @ (Control.Monad.Trans.Reader.ReaderT
                        [GHC.LanguageExtensions.Type.Extension]
                        (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc))
                   @ Control.Reference.Representation.MU
                   @ Control.Reference.Representation.MU
                   @ Control.Reference.Representation.MU
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        Language.Haskell.Tools.AST.Representation.Binds.UMatchLhs
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        Language.Haskell.Tools.AST.Representation.Binds.UMatchLhs
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        Language.Haskell.Tools.AST.Representation.Patterns.UPattern
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        Language.Haskell.Tools.AST.Representation.Patterns.UPattern
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   ww1
                   ww2
                   ww3
                   ww4
                   ww5
                   ww6 }) -}
dba856fd6b012bcb872d25991606777f
  traverseMatchLhs6 ::
    Control.Reference.Representation.Reference
      (Control.Monad.Trans.Reader.ReaderT
         [GHC.LanguageExtensions.Type.Extension]
         (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc))
      Control.Reference.Representation.MU
      Control.Reference.Representation.MU
      Control.Reference.Representation.MU
      (Language.Haskell.Tools.AST.Ann.AnnListG
         Language.Haskell.Tools.AST.Representation.Patterns.UPattern
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
      (Language.Haskell.Tools.AST.Ann.AnnListG
         Language.Haskell.Tools.AST.Representation.Patterns.UPattern
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
      (Language.Haskell.Tools.AST.Ann.Ann
         Language.Haskell.Tools.AST.Representation.Patterns.UPattern
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
      (Language.Haskell.Tools.AST.Ann.Ann
         Language.Haskell.Tools.AST.Representation.Patterns.UPattern
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
  {- Unfolding: (\ @ dom ->
                 case Language.Haskell.Tools.AST.Ann.$wannList
                        @ Language.Haskell.Tools.AST.Representation.Patterns.UPattern
                        @ dom
                        @ Language.Haskell.Tools.AST.Ann.SrcTemplateStage
                        @ (Control.Monad.Trans.Reader.ReaderT
                             [GHC.LanguageExtensions.Type.Extension]
                             (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc))
                        @ Control.Reference.Representation.MU
                        TraverseAST.$s$fRefMonadswr
                        TraverseAST.$sannList1
                          `cast`
                        (Sym (Control.Instances.Morph.N:Morph[0]
                                  <[]>_N
                                  <Control.Reference.Representation.MU>_N)) of ww { (#,,,,,#) ww1 ww2 ww3 ww4 ww5 ww6 ->
                 Control.Reference.Representation.Reference
                   @ (Control.Monad.Trans.Reader.ReaderT
                        [GHC.LanguageExtensions.Type.Extension]
                        (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc))
                   @ Control.Reference.Representation.MU
                   @ Control.Reference.Representation.MU
                   @ Control.Reference.Representation.MU
                   @ (Language.Haskell.Tools.AST.Ann.AnnListG
                        Language.Haskell.Tools.AST.Representation.Patterns.UPattern
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   @ (Language.Haskell.Tools.AST.Ann.AnnListG
                        Language.Haskell.Tools.AST.Representation.Patterns.UPattern
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        Language.Haskell.Tools.AST.Representation.Patterns.UPattern
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        Language.Haskell.Tools.AST.Representation.Patterns.UPattern
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   ww1
                   ww2
                   ww3
                   ww4
                   ww5
                   ww6 }) -}
28b2e61a1d76c826ab1d426332483b18
  traverseMatchLhs7 ::
    Control.Reference.Representation.Reference
      (Control.Monad.Trans.Reader.ReaderT
         [GHC.LanguageExtensions.Type.Extension]
         (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc))
      Control.Reference.Representation.MU
      Control.Reference.Representation.MU
      Control.Reference.Representation.MU
      (Language.Haskell.Tools.AST.Ann.Ann
         Language.Haskell.Tools.AST.Representation.Binds.UMatchLhs
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
      (Language.Haskell.Tools.AST.Ann.Ann
         Language.Haskell.Tools.AST.Representation.Binds.UMatchLhs
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
      (Language.Haskell.Tools.AST.Ann.AnnListG
         Language.Haskell.Tools.AST.Representation.Patterns.UPattern
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
      (Language.Haskell.Tools.AST.Ann.AnnListG
         Language.Haskell.Tools.AST.Representation.Patterns.UPattern
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
  {- Unfolding: (\ @ dom ->
                 case Language.Haskell.Tools.AST.References.$wmatchLhsArgs
                        @ dom
                        @ Language.Haskell.Tools.AST.Ann.SrcTemplateStage
                        @ (Control.Monad.Trans.Reader.ReaderT
                             [GHC.LanguageExtensions.Type.Extension]
                             (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc))
                        @ Control.Reference.Representation.MU
                        TraverseAST.$s$fRefMonadswr of ww { (#,,,,,#) ww1 ww2 ww3 ww4 ww5 ww6 ->
                 Control.Reference.Representation.Reference
                   @ (Control.Monad.Trans.Reader.ReaderT
                        [GHC.LanguageExtensions.Type.Extension]
                        (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc))
                   @ Control.Reference.Representation.MU
                   @ Control.Reference.Representation.MU
                   @ Control.Reference.Representation.MU
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        Language.Haskell.Tools.AST.Representation.Binds.UMatchLhs
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        Language.Haskell.Tools.AST.Representation.Binds.UMatchLhs
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   @ (Language.Haskell.Tools.AST.Ann.AnnListG
                        Language.Haskell.Tools.AST.Representation.Patterns.UPattern
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   @ (Language.Haskell.Tools.AST.Ann.AnnListG
                        Language.Haskell.Tools.AST.Representation.Patterns.UPattern
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   ww1
                   ww2
                   ww3
                   ww4
                   ww5
                   ww6 }) -}
f1bf2e7c05586142aa4fc5a6436ced61
  traverseMatchLhs8 ::
    ExtMonad.ExtDomain dom =>
    Language.Haskell.Tools.AST.ElementTypes.Operator dom
    -> [GHC.LanguageExtensions.Type.Extension]
    -> ExtMap.ExtMap
    -> GhcMonad.Session
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          (Language.Haskell.Tools.AST.ElementTypes.Operator dom,
           ExtMap.ExtMap) #)
  {- Arity: 6, HasNoCafRefs,
     Strictness: <S(S(LLS(S)LLLLLLLLLL)L),1*U(1*U(A,A,1*U(1*U),A,A,A,A,A,A,A,A,A,A),A)><L,U><L,A><L,U><L,A><S,U>,
     Unfolding: InlineRule (6, True, False)
                (\ @ dom
                   ($d(%,%) :: ExtMonad.ExtDomain dom)
                   (eta :: Language.Haskell.Tools.AST.ElementTypes.Operator dom)
                   (eta1 :: [GHC.LanguageExtensions.Type.Extension])
                   (eta2 :: ExtMap.ExtMap)
                   (eta3 :: GhcMonad.Session)
                   (eta4 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Language.Haskell.Tools.AST.Ann.SemanticInfo'
                             dom Language.Haskell.Tools.AST.Ann.SameInfoDefaultCls)
                        @ Language.Haskell.Tools.AST.SemaInfoTypes.NoSemanticInfo
                        (Language.Haskell.Tools.AST.Ann.$p3Domain
                           @ dom
                           (GHC.Classes.$p1(%,%)
                              @ (Language.Haskell.Tools.AST.Ann.Domain dom)
                              @ (Language.Haskell.Tools.AST.SemaInfoClasses.HasNameInfo'
                                   (Language.Haskell.Tools.AST.Ann.SemanticInfo
                                      dom
                                      Language.Haskell.Tools.AST.Representation.Names.UQualifiedName))
                              $d(%,%)))
                          `cast`
                        (Data.Type.Equality.N:~[0]
                             <*>_N <Language.Haskell.Tools.AST.Ann.SemanticInfo'
                                      dom
                                      Language.Haskell.Tools.AST.Ann.SameInfoDefaultCls>_N <Language.Haskell.Tools.AST.SemaInfoTypes.NoSemanticInfo>_N) of cobox0 { DEFAULT ->
                 (# eta4, (eta, eta2) #) }) -}
33aed14925ea4833283be1b7655fc306
  traverseMatchLhs9 ::
    Control.Reference.Representation.Reference
      (Control.Monad.Trans.Reader.ReaderT
         [GHC.LanguageExtensions.Type.Extension]
         (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc))
      Control.Reference.Representation.MU
      Control.Reference.Representation.MU
      Control.Reference.Representation.MU
      (Language.Haskell.Tools.AST.Ann.Ann
         Language.Haskell.Tools.AST.Representation.Binds.UMatchLhs
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
      (Language.Haskell.Tools.AST.Ann.Ann
         Language.Haskell.Tools.AST.Representation.Binds.UMatchLhs
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
      (Language.Haskell.Tools.AST.Ann.Ann
         Language.Haskell.Tools.AST.Representation.Names.UOperator
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
      (Language.Haskell.Tools.AST.Ann.Ann
         Language.Haskell.Tools.AST.Representation.Names.UOperator
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
  {- Unfolding: (\ @ dom ->
                 case Language.Haskell.Tools.AST.References.$wmatchLhsOperator
                        @ dom
                        @ Language.Haskell.Tools.AST.Ann.SrcTemplateStage
                        @ (Control.Monad.Trans.Reader.ReaderT
                             [GHC.LanguageExtensions.Type.Extension]
                             (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc))
                        @ Control.Reference.Representation.MU
                        (TraverseAST.$s$fMonadReaderT
                           @ [GHC.LanguageExtensions.Type.Extension])
                        Data.Proxy.$fMonadPlusProxy
                        TraverseAST.$sannJust1
                          `cast`
                        (Sym (Control.Instances.Morph.N:Morph[0]
                                  <GHC.Base.Maybe>_N
                                  <Data.Proxy.Proxy>_N)) of ww { (#,,,,,#) ww1 ww2 ww3 ww4 ww5 ww6 ->
                 Control.Reference.Representation.Reference
                   @ (Control.Monad.Trans.Reader.ReaderT
                        [GHC.LanguageExtensions.Type.Extension]
                        (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc))
                   @ Control.Reference.Representation.MU
                   @ Control.Reference.Representation.MU
                   @ Control.Reference.Representation.MU
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        Language.Haskell.Tools.AST.Representation.Binds.UMatchLhs
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        Language.Haskell.Tools.AST.Representation.Binds.UMatchLhs
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        Language.Haskell.Tools.AST.Representation.Names.UOperator
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        Language.Haskell.Tools.AST.Representation.Names.UOperator
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   ww1
                   ww2
                   ww3
                   ww4
                   ww5
                   ww6 }) -}
4aa0c6520cfaace2f9c79830dc87fa55
  traverseModule ::
    ExtMonad.CheckNode
      Language.Haskell.Tools.Refactor.RefactorBase.UnnamedModule
  {- Arity: 1,
     Strictness: <S(S(LLS(S)LLLLLLLLLL)L),U(U(U,U,U(U),U,U,U,U,U,U,U,U,U,U),U)>,
     Unfolding: (\ @ dom ($d(%,%) :: ExtMonad.ExtDomain dom) ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Language.Haskell.Tools.AST.Ann.SemanticInfo'
                             dom Language.Haskell.Tools.AST.Ann.SameInfoDefaultCls)
                        @ Language.Haskell.Tools.AST.SemaInfoTypes.NoSemanticInfo
                        (Language.Haskell.Tools.AST.Ann.$p3Domain
                           @ dom
                           (GHC.Classes.$p1(%,%)
                              @ (Language.Haskell.Tools.AST.Ann.Domain dom)
                              @ (Language.Haskell.Tools.AST.SemaInfoClasses.HasNameInfo'
                                   (Language.Haskell.Tools.AST.Ann.SemanticInfo
                                      dom
                                      Language.Haskell.Tools.AST.Representation.Names.UQualifiedName))
                              $d(%,%)))
                          `cast`
                        (Data.Type.Equality.N:~[0]
                             <*>_N <Language.Haskell.Tools.AST.Ann.SemanticInfo'
                                      dom
                                      Language.Haskell.Tools.AST.Ann.SameInfoDefaultCls>_N <Language.Haskell.Tools.AST.SemaInfoTypes.NoSemanticInfo>_N) of cobox0 { DEFAULT ->
                 case TraverseAST.traverseModule1
                        @ dom of wild { Control.Reference.Representation.Reference ds1 ds2 ds3 ds4 ds5 ds6 ->
                 ds3 (TraverseAST.traverseDecl @ dom $d(%,%)) } }) -}
084ee5dea65b094dc04b147ad81522a6
  traverseModule1 ::
    Control.Reference.Representation.Reference
      (Control.Monad.Trans.Reader.ReaderT
         [GHC.LanguageExtensions.Type.Extension]
         (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc))
      Control.Reference.Representation.MU
      Control.Reference.Representation.MU
      Control.Reference.Representation.MU
      (Language.Haskell.Tools.AST.Ann.Ann
         Language.Haskell.Tools.AST.Representation.Modules.UModule
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
      (Language.Haskell.Tools.AST.Ann.Ann
         Language.Haskell.Tools.AST.Representation.Modules.UModule
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
      (Language.Haskell.Tools.AST.Ann.Ann
         Language.Haskell.Tools.AST.Representation.Decls.UDecl
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
      (Language.Haskell.Tools.AST.Ann.Ann
         Language.Haskell.Tools.AST.Representation.Decls.UDecl
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
  {- Unfolding: (\ @ dom ->
                 case Control.Reference.Combinators.$w&
                        @ (Control.Monad.Trans.Reader.ReaderT
                             [GHC.LanguageExtensions.Type.Extension]
                             (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc))
                        @ Control.Reference.Representation.MU
                        @ Control.Reference.Representation.MU
                        @ Control.Reference.Representation.MU
                        @ (Language.Haskell.Tools.AST.Ann.Ann
                             Language.Haskell.Tools.AST.Representation.Modules.UModule
                             dom
                             Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                        @ (Language.Haskell.Tools.AST.Ann.Ann
                             Language.Haskell.Tools.AST.Representation.Modules.UModule
                             dom
                             Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                        @ (Language.Haskell.Tools.AST.Ann.AnnListG
                             Language.Haskell.Tools.AST.Representation.Decls.UDecl
                             dom
                             Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                        @ (Language.Haskell.Tools.AST.Ann.AnnListG
                             Language.Haskell.Tools.AST.Representation.Decls.UDecl
                             dom
                             Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                        @ (Language.Haskell.Tools.AST.Ann.Ann
                             Language.Haskell.Tools.AST.Representation.Decls.UDecl
                             dom
                             Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                        @ (Language.Haskell.Tools.AST.Ann.Ann
                             Language.Haskell.Tools.AST.Representation.Decls.UDecl
                             dom
                             Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                        (TraverseAST.traverseModule2 @ dom)
                        (TraverseAST.traverseBracket2
                           @ dom) of ww { (#,,,,,#) ww1 ww2 ww3 ww4 ww5 ww6 ->
                 Control.Reference.Representation.Reference
                   @ (Control.Monad.Trans.Reader.ReaderT
                        [GHC.LanguageExtensions.Type.Extension]
                        (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc))
                   @ Control.Reference.Representation.MU
                   @ Control.Reference.Representation.MU
                   @ Control.Reference.Representation.MU
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        Language.Haskell.Tools.AST.Representation.Modules.UModule
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        Language.Haskell.Tools.AST.Representation.Modules.UModule
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        Language.Haskell.Tools.AST.Representation.Decls.UDecl
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        Language.Haskell.Tools.AST.Representation.Decls.UDecl
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   ww1
                   ww2
                   ww3
                   ww4
                   ww5
                   ww6 }) -}
c5343aed4f2ff0f3d32fec9ac9aa4007
  traverseModule2 ::
    Control.Reference.Representation.Reference
      (Control.Monad.Trans.Reader.ReaderT
         [GHC.LanguageExtensions.Type.Extension]
         (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc))
      Control.Reference.Representation.MU
      Control.Reference.Representation.MU
      Control.Reference.Representation.MU
      (Language.Haskell.Tools.AST.Ann.Ann
         Language.Haskell.Tools.AST.Representation.Modules.UModule
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
      (Language.Haskell.Tools.AST.Ann.Ann
         Language.Haskell.Tools.AST.Representation.Modules.UModule
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
      (Language.Haskell.Tools.AST.Ann.AnnListG
         Language.Haskell.Tools.AST.Representation.Decls.UDecl
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
      (Language.Haskell.Tools.AST.Ann.AnnListG
         Language.Haskell.Tools.AST.Representation.Decls.UDecl
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
  {- Unfolding: (\ @ dom ->
                 case Language.Haskell.Tools.AST.References.$wmodDecl
                        @ dom
                        @ Language.Haskell.Tools.AST.Ann.SrcTemplateStage
                        @ (Control.Monad.Trans.Reader.ReaderT
                             [GHC.LanguageExtensions.Type.Extension]
                             (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc))
                        @ Control.Reference.Representation.MU
                        TraverseAST.$s$fRefMonadswr of ww { (#,,,,,#) ww1 ww2 ww3 ww4 ww5 ww6 ->
                 Control.Reference.Representation.Reference
                   @ (Control.Monad.Trans.Reader.ReaderT
                        [GHC.LanguageExtensions.Type.Extension]
                        (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc))
                   @ Control.Reference.Representation.MU
                   @ Control.Reference.Representation.MU
                   @ Control.Reference.Representation.MU
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        Language.Haskell.Tools.AST.Representation.Modules.UModule
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        Language.Haskell.Tools.AST.Representation.Modules.UModule
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   @ (Language.Haskell.Tools.AST.Ann.AnnListG
                        Language.Haskell.Tools.AST.Representation.Decls.UDecl
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   @ (Language.Haskell.Tools.AST.Ann.AnnListG
                        Language.Haskell.Tools.AST.Representation.Decls.UDecl
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   ww1
                   ww2
                   ww3
                   ww4
                   ww5
                   ww6 }) -}
e00e5b488b400926fedd35a46a205c72
  traverseName ::
    ExtMonad.CheckNode Language.Haskell.Tools.AST.ElementTypes.Name
  {- Arity: 6, HasNoCafRefs,
     Strictness: <S(S(LLS(S)LLLLLLLLLL)L),1*U(1*U(A,A,1*U(1*U),A,A,A,A,A,A,A,A,A,A),A)><L,U><L,A><L,U><L,A><S,U>,
     Unfolding: InlineRule (0, True, True)
                TraverseAST.traverseFieldUpdate2
                  `cast`
                (forall (dom :: <*>_N).
                 <ExtMonad.ExtDomain dom>_R
                 ->_R <Language.Haskell.Tools.AST.ElementTypes.Name dom>_R
                 ->_R Trans
                          (<[GHC.LanguageExtensions.Type.Extension]>_R
                           ->_R Trans
                                    (<ExtMap.ExtMap>_R
                                     ->_R Trans
                                              (<GhcMonad.Session>_R
                                               ->_R Sym (GHC.Types.N:IO[0]
                                                             <(Language.Haskell.Tools.AST.ElementTypes.Name
                                                                 dom,
                                                               ExtMap.ExtMap)>_R))
                                              (Sym (GhcMonad.N:Ghc[0]
                                                        <(Language.Haskell.Tools.AST.ElementTypes.Name
                                                            dom,
                                                          ExtMap.ExtMap)>_R)))
                                    (Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                              <ExtMap.ExtMap>_N
                                              <GhcMonad.Ghc>_R
                                              <Language.Haskell.Tools.AST.ElementTypes.Name
                                                 dom>_N)))
                          (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                    <*>_N
                                    <[GHC.LanguageExtensions.Type.Extension]>_R
                                    <Control.Monad.Trans.State.Lazy.StateT
                                       ExtMap.ExtMap GhcMonad.Ghc>_R
                                    <Language.Haskell.Tools.AST.ElementTypes.Name dom>_N))) -}
cd107b00f30b733c97962dc7ddd2340d
  traverseOperator ::
    ExtMonad.CheckNode Language.Haskell.Tools.AST.ElementTypes.Operator
  {- Arity: 6, HasNoCafRefs,
     Strictness: <S(S(LLS(S)LLLLLLLLLL)L),1*U(1*U(A,A,1*U(1*U),A,A,A,A,A,A,A,A,A,A),A)><L,U><L,A><L,U><L,A><S,U>,
     Unfolding: InlineRule (0, True, True)
                TraverseAST.traverseMatchLhs8
                  `cast`
                (forall (dom :: <*>_N).
                 <ExtMonad.ExtDomain dom>_R
                 ->_R <Language.Haskell.Tools.AST.ElementTypes.Operator dom>_R
                 ->_R Trans
                          (<[GHC.LanguageExtensions.Type.Extension]>_R
                           ->_R Trans
                                    (<ExtMap.ExtMap>_R
                                     ->_R Trans
                                              (<GhcMonad.Session>_R
                                               ->_R Sym (GHC.Types.N:IO[0]
                                                             <(Language.Haskell.Tools.AST.ElementTypes.Operator
                                                                 dom,
                                                               ExtMap.ExtMap)>_R))
                                              (Sym (GhcMonad.N:Ghc[0]
                                                        <(Language.Haskell.Tools.AST.ElementTypes.Operator
                                                            dom,
                                                          ExtMap.ExtMap)>_R)))
                                    (Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                              <ExtMap.ExtMap>_N
                                              <GhcMonad.Ghc>_R
                                              <Language.Haskell.Tools.AST.ElementTypes.Operator
                                                 dom>_N)))
                          (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                    <*>_N
                                    <[GHC.LanguageExtensions.Type.Extension]>_R
                                    <Control.Monad.Trans.State.Lazy.StateT
                                       ExtMap.ExtMap GhcMonad.Ghc>_R
                                    <Language.Haskell.Tools.AST.ElementTypes.Operator dom>_N))) -}
46937b4f52f8514b0e21057a16adaacb
  traversePattern ::
    ExtMonad.CheckNode Language.Haskell.Tools.AST.ElementTypes.Pattern
  {- Arity: 1,
     Strictness: <S(S(LLS(S)LLLLLLLLLL)L),U(U(U,U,U(U),U,U,U,U,U,U,U,U,U,U),U)> -}
1f511cc410c8183a6b63e2519c2ca044
  traversePatternField ::
    ExtMonad.CheckNode
      Language.Haskell.Tools.AST.ElementTypes.PatternField
  {- Arity: 1,
     Strictness: <S(S(LLS(S)LLLLLLLLLL)L),U(U(U,U,U(U),U,U,U,U,U,U,U,U,U,U),U)>,
     Unfolding: (\ @ dom ($d(%,%) :: ExtMonad.ExtDomain dom) ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Language.Haskell.Tools.AST.Ann.SemanticInfo'
                             dom Language.Haskell.Tools.AST.Ann.SameInfoDefaultCls)
                        @ Language.Haskell.Tools.AST.SemaInfoTypes.NoSemanticInfo
                        (Language.Haskell.Tools.AST.Ann.$p3Domain
                           @ dom
                           (GHC.Classes.$p1(%,%)
                              @ (Language.Haskell.Tools.AST.Ann.Domain dom)
                              @ (Language.Haskell.Tools.AST.SemaInfoClasses.HasNameInfo'
                                   (Language.Haskell.Tools.AST.Ann.SemanticInfo
                                      dom
                                      Language.Haskell.Tools.AST.Representation.Names.UQualifiedName))
                              $d(%,%)))
                          `cast`
                        (Data.Type.Equality.N:~[0]
                             <*>_N <Language.Haskell.Tools.AST.Ann.SemanticInfo'
                                      dom
                                      Language.Haskell.Tools.AST.Ann.SameInfoDefaultCls>_N <Language.Haskell.Tools.AST.SemaInfoTypes.NoSemanticInfo>_N) of cobox0 { DEFAULT ->
                 let {
                   f :: Language.Haskell.Tools.AST.Ann.Ann
                          Language.Haskell.Tools.AST.Representation.Patterns.UPatternField
                          dom
                          Language.Haskell.Tools.AST.Ann.SrcTemplateStage
                        -> Control.Monad.Trans.Reader.ReaderT
                             [GHC.LanguageExtensions.Type.Extension]
                             (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc)
                             (Language.Haskell.Tools.AST.Ann.Ann
                                Language.Haskell.Tools.AST.Representation.Patterns.UPatternField
                                dom
                                Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   = case TraverseAST.traversePatternField2
                            @ dom of wild { Control.Reference.Representation.Reference ds1 ds2 ds3 ds4 ds5 ds6 ->
                     ds3
                       (TraverseAST.traverseFieldUpdate2 @ dom $d(%,%))
                         `cast`
                       (<Language.Haskell.Tools.AST.ElementTypes.Name dom>_R
                        ->_R Trans
                                 (<[GHC.LanguageExtensions.Type.Extension]>_R
                                  ->_R Trans
                                           (<ExtMap.ExtMap>_R
                                            ->_R Trans
                                                     (<GhcMonad.Session>_R
                                                      ->_R Sym (GHC.Types.N:IO[0]
                                                                    <(Language.Haskell.Tools.AST.ElementTypes.Name
                                                                        dom,
                                                                      ExtMap.ExtMap)>_R))
                                                     (Sym (GhcMonad.N:Ghc[0]
                                                               <(Language.Haskell.Tools.AST.ElementTypes.Name
                                                                   dom,
                                                                 ExtMap.ExtMap)>_R)))
                                           (Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                                     <ExtMap.ExtMap>_N
                                                     <GhcMonad.Ghc>_R
                                                     <Language.Haskell.Tools.AST.ElementTypes.Name
                                                        dom>_N)))
                                 (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                           <*>_N
                                           <[GHC.LanguageExtensions.Type.Extension]>_R
                                           <Control.Monad.Trans.State.Lazy.StateT
                                              ExtMap.ExtMap GhcMonad.Ghc>_R
                                           <Language.Haskell.Tools.AST.ElementTypes.Name dom>_N))) }
                 } in
                 let {
                   g :: Language.Haskell.Tools.AST.Ann.Ann
                          Language.Haskell.Tools.AST.Representation.Patterns.UPatternField
                          dom
                          Language.Haskell.Tools.AST.Ann.SrcTemplateStage
                        -> Control.Monad.Trans.Reader.ReaderT
                             [GHC.LanguageExtensions.Type.Extension]
                             (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc)
                             (Language.Haskell.Tools.AST.Ann.Ann
                                Language.Haskell.Tools.AST.Representation.Patterns.UPatternField
                                dom
                                Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   = case TraverseAST.traversePatternField1
                            @ dom of wild { Control.Reference.Representation.Reference ds1 ds2 ds3 ds4 ds5 ds6 ->
                     ds3 (TraverseAST.traversePattern @ dom $d(%,%)) }
                 } in
                 (\ (x :: Language.Haskell.Tools.AST.ElementTypes.PatternField dom)
                    (eta :: [GHC.LanguageExtensions.Type.Extension])
                    (eta1 :: ExtMap.ExtMap) ->
                  let {
                    m :: GhcMonad.Ghc
                           (Language.Haskell.Tools.AST.ElementTypes.PatternField dom,
                            Data.Map.Base.Map
                              (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                              [SrcLoc.SrcSpan])
                    = case x of ww { Language.Haskell.Tools.AST.Ann.Ann ww1 ww2 ->
                      TraverseAST.$wchkPatternField @ dom $d(%,%) ww1 ww2 eta1 }
                  } in
                  (\ (s :: GhcMonad.Session)
                     (s1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                   case (m `cast`
                         (GhcMonad.N:Ghc[0]
                              <(Language.Haskell.Tools.AST.ElementTypes.PatternField dom,
                                Data.Map.Base.Map
                                  (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                                  [SrcLoc.SrcSpan])>_R)
                           s)
                          `cast`
                        (GHC.Types.N:IO[0]
                             <(Language.Haskell.Tools.AST.ElementTypes.PatternField dom,
                               Data.Map.Base.Map
                                 (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                                 [SrcLoc.SrcSpan])>_R)
                          s1 of ds1 { (#,#) ipv ipv1 ->
                   case ((((f (case ipv1 of wild { (,) a1 s' -> a1 }))
                             `cast`
                           (Control.Monad.Trans.Reader.N:ReaderT[0]
                                <*>_N
                                <[GHC.LanguageExtensions.Type.Extension]>_R
                                <Control.Monad.Trans.State.Lazy.StateT
                                   ExtMap.ExtMap GhcMonad.Ghc>_R
                                <Language.Haskell.Tools.AST.Ann.Ann
                                   Language.Haskell.Tools.AST.Representation.Patterns.UPatternField
                                   dom
                                   Language.Haskell.Tools.AST.Ann.SrcTemplateStage>_N)
                             eta)
                            `cast`
                          (Control.Monad.Trans.State.Lazy.N:StateT[0]
                               <Data.Map.Base.Map
                                  (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                                  [SrcLoc.SrcSpan]>_N
                               <GhcMonad.Ghc>_R
                               <Language.Haskell.Tools.AST.Ann.Ann
                                  Language.Haskell.Tools.AST.Representation.Patterns.UPatternField
                                  dom
                                  Language.Haskell.Tools.AST.Ann.SrcTemplateStage>_N)
                            (case ipv1 of wild { (,) a1 s' -> s' }))
                           `cast`
                         (GhcMonad.N:Ghc[0]
                              <(Language.Haskell.Tools.AST.Ann.Ann
                                  Language.Haskell.Tools.AST.Representation.Patterns.UPatternField
                                  dom
                                  Language.Haskell.Tools.AST.Ann.SrcTemplateStage,
                                Data.Map.Base.Map
                                  (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                                  [SrcLoc.SrcSpan])>_R)
                           s)
                          `cast`
                        (GHC.Types.N:IO[0]
                             <(Language.Haskell.Tools.AST.Ann.Ann
                                 Language.Haskell.Tools.AST.Representation.Patterns.UPatternField
                                 dom
                                 Language.Haskell.Tools.AST.Ann.SrcTemplateStage,
                               Data.Map.Base.Map
                                 (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                                 [SrcLoc.SrcSpan])>_R)
                          ipv of ds2 { (#,#) ipv2 ipv3 ->
                   ((((g (case ipv3 of wild { (,) a1 s' -> a1 }))
                        `cast`
                      (Control.Monad.Trans.Reader.N:ReaderT[0]
                           <*>_N
                           <[GHC.LanguageExtensions.Type.Extension]>_R
                           <Control.Monad.Trans.State.Lazy.StateT
                              ExtMap.ExtMap GhcMonad.Ghc>_R
                           <Language.Haskell.Tools.AST.Ann.Ann
                              Language.Haskell.Tools.AST.Representation.Patterns.UPatternField
                              dom
                              Language.Haskell.Tools.AST.Ann.SrcTemplateStage>_N)
                        eta)
                       `cast`
                     (Control.Monad.Trans.State.Lazy.N:StateT[0]
                          <Data.Map.Base.Map
                             (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                             [SrcLoc.SrcSpan]>_N
                          <GhcMonad.Ghc>_R
                          <Language.Haskell.Tools.AST.Ann.Ann
                             Language.Haskell.Tools.AST.Representation.Patterns.UPatternField
                             dom
                             Language.Haskell.Tools.AST.Ann.SrcTemplateStage>_N)
                       (case ipv3 of wild { (,) a1 s' -> s' }))
                      `cast`
                    (GhcMonad.N:Ghc[0]
                         <(Language.Haskell.Tools.AST.Ann.Ann
                             Language.Haskell.Tools.AST.Representation.Patterns.UPatternField
                             dom
                             Language.Haskell.Tools.AST.Ann.SrcTemplateStage,
                           Data.Map.Base.Map
                             (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                             [SrcLoc.SrcSpan])>_R)
                      s)
                     `cast`
                   (GHC.Types.N:IO[0]
                        <(Language.Haskell.Tools.AST.Ann.Ann
                            Language.Haskell.Tools.AST.Representation.Patterns.UPatternField
                            dom
                            Language.Haskell.Tools.AST.Ann.SrcTemplateStage,
                          Data.Map.Base.Map
                            (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                            [SrcLoc.SrcSpan])>_R)
                     ipv2 } })
                    `cast`
                  (Trans
                       (<GhcMonad.Session>_R
                        ->_R Sym (GHC.Types.N:IO[0]
                                      <(Language.Haskell.Tools.AST.Ann.Ann
                                          Language.Haskell.Tools.AST.Representation.Patterns.UPatternField
                                          dom
                                          Language.Haskell.Tools.AST.Ann.SrcTemplateStage,
                                        Data.Map.Base.Map
                                          (ExtMap.LogicalRelation
                                             GHC.LanguageExtensions.Type.Extension)
                                          [SrcLoc.SrcSpan])>_R))
                       (Sym (GhcMonad.N:Ghc[0]
                                 <(Language.Haskell.Tools.AST.Ann.Ann
                                     Language.Haskell.Tools.AST.Representation.Patterns.UPatternField
                                     dom
                                     Language.Haskell.Tools.AST.Ann.SrcTemplateStage,
                                   Data.Map.Base.Map
                                     (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                                     [SrcLoc.SrcSpan])>_R))))
                   `cast`
                 (<Language.Haskell.Tools.AST.ElementTypes.PatternField dom>_R
                  ->_R Trans
                           (<[GHC.LanguageExtensions.Type.Extension]>_R
                            ->_R Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                          <ExtMap.ExtMap>_N
                                          <GhcMonad.Ghc>_R
                                          <Language.Haskell.Tools.AST.Ann.Ann
                                             Language.Haskell.Tools.AST.Representation.Patterns.UPatternField
                                             dom
                                             Language.Haskell.Tools.AST.Ann.SrcTemplateStage>_N))
                           (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                     <*>_N
                                     <[GHC.LanguageExtensions.Type.Extension]>_R
                                     <Control.Monad.Trans.State.Lazy.StateT
                                        ExtMap.ExtMap GhcMonad.Ghc>_R
                                     <Language.Haskell.Tools.AST.Ann.Ann
                                        Language.Haskell.Tools.AST.Representation.Patterns.UPatternField
                                        dom
                                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage>_N))) }) -}
57a49312f7a38abceb6160421f3b799d
  traversePatternField1 ::
    Control.Reference.Representation.Reference
      (Control.Monad.Trans.Reader.ReaderT
         [GHC.LanguageExtensions.Type.Extension]
         (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc))
      Control.Reference.Representation.MU
      Control.Reference.Representation.MU
      Control.Reference.Representation.MU
      (Language.Haskell.Tools.AST.Ann.Ann
         Language.Haskell.Tools.AST.Representation.Patterns.UPatternField
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
      (Language.Haskell.Tools.AST.Ann.Ann
         Language.Haskell.Tools.AST.Representation.Patterns.UPatternField
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
      (Language.Haskell.Tools.AST.Ann.Ann
         Language.Haskell.Tools.AST.Representation.Patterns.UPattern
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
      (Language.Haskell.Tools.AST.Ann.Ann
         Language.Haskell.Tools.AST.Representation.Patterns.UPattern
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
  {- Unfolding: (\ @ dom ->
                 case Language.Haskell.Tools.AST.References.$wfieldPattern
                        @ dom
                        @ Language.Haskell.Tools.AST.Ann.SrcTemplateStage
                        @ (Control.Monad.Trans.Reader.ReaderT
                             [GHC.LanguageExtensions.Type.Extension]
                             (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc))
                        @ Control.Reference.Representation.MU
                        (TraverseAST.$s$fMonadReaderT
                           @ [GHC.LanguageExtensions.Type.Extension])
                        Data.Proxy.$fMonadPlusProxy
                        TraverseAST.$sannJust1
                          `cast`
                        (Sym (Control.Instances.Morph.N:Morph[0]
                                  <GHC.Base.Maybe>_N
                                  <Data.Proxy.Proxy>_N)) of ww { (#,,,,,#) ww1 ww2 ww3 ww4 ww5 ww6 ->
                 Control.Reference.Representation.Reference
                   @ (Control.Monad.Trans.Reader.ReaderT
                        [GHC.LanguageExtensions.Type.Extension]
                        (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc))
                   @ Control.Reference.Representation.MU
                   @ Control.Reference.Representation.MU
                   @ Control.Reference.Representation.MU
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        Language.Haskell.Tools.AST.Representation.Patterns.UPatternField
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        Language.Haskell.Tools.AST.Representation.Patterns.UPatternField
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        Language.Haskell.Tools.AST.Representation.Patterns.UPattern
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        Language.Haskell.Tools.AST.Representation.Patterns.UPattern
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   ww1
                   ww2
                   ww3
                   ww4
                   ww5
                   ww6 }) -}
0357ac75c4282c1ac0d0cf925ec0144a
  traversePatternField2 ::
    Control.Reference.Representation.Reference
      (Control.Monad.Trans.Reader.ReaderT
         [GHC.LanguageExtensions.Type.Extension]
         (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc))
      Control.Reference.Representation.MU
      Control.Reference.Representation.MU
      Control.Reference.Representation.MU
      (Language.Haskell.Tools.AST.Ann.Ann
         Language.Haskell.Tools.AST.Representation.Patterns.UPatternField
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
      (Language.Haskell.Tools.AST.Ann.Ann
         Language.Haskell.Tools.AST.Representation.Patterns.UPatternField
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
      (Language.Haskell.Tools.AST.Ann.Ann
         Language.Haskell.Tools.AST.Representation.Names.UName
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
      (Language.Haskell.Tools.AST.Ann.Ann
         Language.Haskell.Tools.AST.Representation.Names.UName
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
  {- Unfolding: (\ @ dom ->
                 case Language.Haskell.Tools.AST.References.$wfieldPatternName
                        @ dom
                        @ Language.Haskell.Tools.AST.Ann.SrcTemplateStage
                        @ (Control.Monad.Trans.Reader.ReaderT
                             [GHC.LanguageExtensions.Type.Extension]
                             (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc))
                        @ Control.Reference.Representation.MU
                        (TraverseAST.$s$fMonadReaderT
                           @ [GHC.LanguageExtensions.Type.Extension])
                        Data.Proxy.$fMonadPlusProxy
                        TraverseAST.$sannJust1
                          `cast`
                        (Sym (Control.Instances.Morph.N:Morph[0]
                                  <GHC.Base.Maybe>_N
                                  <Data.Proxy.Proxy>_N)) of ww { (#,,,,,#) ww1 ww2 ww3 ww4 ww5 ww6 ->
                 Control.Reference.Representation.Reference
                   @ (Control.Monad.Trans.Reader.ReaderT
                        [GHC.LanguageExtensions.Type.Extension]
                        (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc))
                   @ Control.Reference.Representation.MU
                   @ Control.Reference.Representation.MU
                   @ Control.Reference.Representation.MU
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        Language.Haskell.Tools.AST.Representation.Patterns.UPatternField
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        Language.Haskell.Tools.AST.Representation.Patterns.UPatternField
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        Language.Haskell.Tools.AST.Representation.Names.UName
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        Language.Haskell.Tools.AST.Representation.Names.UName
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   ww1
                   ww2
                   ww3
                   ww4
                   ww5
                   ww6 }) -}
6287191c895bc2dd11210a2d2cda3578
  traversePatternSynonym ::
    ExtMonad.CheckNode
      Language.Haskell.Tools.AST.ElementTypes.PatternSynonym
  {- Arity: 1,
     Strictness: <S(SL),U(U(U,U,U(U),U,U,U,U,U,U,U,U,U,U),1*U)> -}
2d2df28a8f5857f3b4581af7301c76c9
  traversePromoted ::
    ExtMonad.CheckUNode t
    -> ExtMonad.CheckNode (TraverseAST.PromotedG t)
  {- Arity: 2,
     Strictness: <L,1*C1(U)><S(S(LLS(S)LLLLLLLLLL)L),U(U(U,U,U(U),U,U,U,U,U,U,U,U,U,U),U)>,
     Unfolding: (\ @ (t :: GHC.Types.* -> GHC.Types.* -> GHC.Types.*)
                   (dk :: ExtMonad.CheckUNode t)
                   @ dom
                   ($d(%,%) :: ExtMonad.ExtDomain dom) ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Language.Haskell.Tools.AST.Ann.SemanticInfo'
                             dom Language.Haskell.Tools.AST.Ann.SameInfoDefaultCls)
                        @ Language.Haskell.Tools.AST.SemaInfoTypes.NoSemanticInfo
                        (Language.Haskell.Tools.AST.Ann.$p3Domain
                           @ dom
                           (GHC.Classes.$p1(%,%)
                              @ (Language.Haskell.Tools.AST.Ann.Domain dom)
                              @ (Language.Haskell.Tools.AST.SemaInfoClasses.HasNameInfo'
                                   (Language.Haskell.Tools.AST.Ann.SemanticInfo
                                      dom
                                      Language.Haskell.Tools.AST.Representation.Names.UQualifiedName))
                              $d(%,%)))
                          `cast`
                        (Data.Type.Equality.N:~[0]
                             <*>_N <Language.Haskell.Tools.AST.Ann.SemanticInfo'
                                      dom
                                      Language.Haskell.Tools.AST.Ann.SameInfoDefaultCls>_N <Language.Haskell.Tools.AST.SemaInfoTypes.NoSemanticInfo>_N) of cobox0 { DEFAULT ->
                 let {
                   f :: Language.Haskell.Tools.AST.Ann.Ann
                          (Language.Haskell.Tools.AST.Representation.Kinds.UPromoted t)
                          dom
                          Language.Haskell.Tools.AST.Ann.SrcTemplateStage
                        -> Control.Monad.Trans.Reader.ReaderT
                             [GHC.LanguageExtensions.Type.Extension]
                             (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc)
                             (Language.Haskell.Tools.AST.Ann.Ann
                                (Language.Haskell.Tools.AST.Representation.Kinds.UPromoted t)
                                dom
                                Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   = case TraverseAST.traversePromoted4
                            @ dom
                            @ t of wild { Control.Reference.Representation.Reference ds1 ds2 ds3 ds4 ds5 ds6 ->
                     ds3
                       (TraverseAST.traverseFieldUpdate2 @ dom $d(%,%))
                         `cast`
                       (<Language.Haskell.Tools.AST.ElementTypes.Name dom>_R
                        ->_R Trans
                                 (<[GHC.LanguageExtensions.Type.Extension]>_R
                                  ->_R Trans
                                           (<ExtMap.ExtMap>_R
                                            ->_R Trans
                                                     (<GhcMonad.Session>_R
                                                      ->_R Sym (GHC.Types.N:IO[0]
                                                                    <(Language.Haskell.Tools.AST.ElementTypes.Name
                                                                        dom,
                                                                      ExtMap.ExtMap)>_R))
                                                     (Sym (GhcMonad.N:Ghc[0]
                                                               <(Language.Haskell.Tools.AST.ElementTypes.Name
                                                                   dom,
                                                                 ExtMap.ExtMap)>_R)))
                                           (Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                                     <ExtMap.ExtMap>_N
                                                     <GhcMonad.Ghc>_R
                                                     <Language.Haskell.Tools.AST.ElementTypes.Name
                                                        dom>_N)))
                                 (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                           <*>_N
                                           <[GHC.LanguageExtensions.Type.Extension]>_R
                                           <Control.Monad.Trans.State.Lazy.StateT
                                              ExtMap.ExtMap GhcMonad.Ghc>_R
                                           <Language.Haskell.Tools.AST.ElementTypes.Name dom>_N))) }
                 } in
                 let {
                   g :: Language.Haskell.Tools.AST.Ann.Ann
                          (Language.Haskell.Tools.AST.Representation.Kinds.UPromoted t)
                          dom
                          Language.Haskell.Tools.AST.Ann.SrcTemplateStage
                        -> Control.Monad.Trans.Reader.ReaderT
                             [GHC.LanguageExtensions.Type.Extension]
                             (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc)
                             (Language.Haskell.Tools.AST.Ann.Ann
                                (Language.Haskell.Tools.AST.Representation.Kinds.UPromoted t)
                                dom
                                Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   = case TraverseAST.traversePromoted1
                            @ dom
                            @ t of wild { Control.Reference.Representation.Reference ds1 ds2 ds3 ds4 ds5 ds6 ->
                     ds3 (dk @ dom $d(%,%)) }
                 } in
                 \ (x :: Language.Haskell.Tools.AST.Ann.Ann
                           (Language.Haskell.Tools.AST.Representation.Kinds.UPromoted t)
                           dom
                           Language.Haskell.Tools.AST.Ann.SrcTemplateStage) ->
                 let {
                   m1 :: Control.Monad.Trans.Reader.ReaderT
                           [GHC.LanguageExtensions.Type.Extension]
                           (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc)
                           (Language.Haskell.Tools.AST.Ann.Ann
                              (Language.Haskell.Tools.AST.Representation.Kinds.UPromoted t)
                              dom
                              Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   = f x
                 } in
                 (\ (r1 :: [GHC.LanguageExtensions.Type.Extension]) ->
                  let {
                    m2 :: Control.Monad.Trans.State.Lazy.StateT
                            (Data.Map.Base.Map
                               (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                               [SrcLoc.SrcSpan])
                            GhcMonad.Ghc
                            (Language.Haskell.Tools.AST.Ann.Ann
                               (Language.Haskell.Tools.AST.Representation.Kinds.UPromoted t)
                               dom
                               Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                    = m1
                        `cast`
                      (Control.Monad.Trans.Reader.N:ReaderT[0]
                           <*>_N
                           <[GHC.LanguageExtensions.Type.Extension]>_R
                           <Control.Monad.Trans.State.Lazy.StateT
                              ExtMap.ExtMap GhcMonad.Ghc>_R
                           <Language.Haskell.Tools.AST.Ann.Ann
                              (Language.Haskell.Tools.AST.Representation.Kinds.UPromoted t)
                              dom
                              Language.Haskell.Tools.AST.Ann.SrcTemplateStage>_N)
                        r1
                  } in
                  (\ (s1 :: Data.Map.Base.Map
                              (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                              [SrcLoc.SrcSpan]) ->
                   let {
                     m :: GhcMonad.Ghc
                            (Language.Haskell.Tools.AST.Ann.Ann
                               (Language.Haskell.Tools.AST.Representation.Kinds.UPromoted t)
                               dom
                               Language.Haskell.Tools.AST.Ann.SrcTemplateStage,
                             Data.Map.Base.Map
                               (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                               [SrcLoc.SrcSpan])
                     = m2
                         `cast`
                       (Control.Monad.Trans.State.Lazy.N:StateT[0]
                            <Data.Map.Base.Map
                               (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                               [SrcLoc.SrcSpan]>_N
                            <GhcMonad.Ghc>_R
                            <Language.Haskell.Tools.AST.Ann.Ann
                               (Language.Haskell.Tools.AST.Representation.Kinds.UPromoted t)
                               dom
                               Language.Haskell.Tools.AST.Ann.SrcTemplateStage>_N)
                         s1
                   } in
                   (\ (s :: GhcMonad.Session)
                      (s2 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                    case (m `cast`
                          (GhcMonad.N:Ghc[0]
                               <(Language.Haskell.Tools.AST.Ann.Ann
                                   (Language.Haskell.Tools.AST.Representation.Kinds.UPromoted t)
                                   dom
                                   Language.Haskell.Tools.AST.Ann.SrcTemplateStage,
                                 Data.Map.Base.Map
                                   (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                                   [SrcLoc.SrcSpan])>_R)
                            s)
                           `cast`
                         (GHC.Types.N:IO[0]
                              <(Language.Haskell.Tools.AST.Ann.Ann
                                  (Language.Haskell.Tools.AST.Representation.Kinds.UPromoted t)
                                  dom
                                  Language.Haskell.Tools.AST.Ann.SrcTemplateStage,
                                Data.Map.Base.Map
                                  (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                                  [SrcLoc.SrcSpan])>_R)
                           s2 of ds1 { (#,#) ipv ipv1 ->
                    ((((g (case ipv1 of wild { (,) a1 s' -> a1 }))
                         `cast`
                       (Control.Monad.Trans.Reader.N:ReaderT[0]
                            <*>_N
                            <[GHC.LanguageExtensions.Type.Extension]>_R
                            <Control.Monad.Trans.State.Lazy.StateT
                               ExtMap.ExtMap GhcMonad.Ghc>_R
                            <Language.Haskell.Tools.AST.Ann.Ann
                               (Language.Haskell.Tools.AST.Representation.Kinds.UPromoted t)
                               dom
                               Language.Haskell.Tools.AST.Ann.SrcTemplateStage>_N)
                         r1)
                        `cast`
                      (Control.Monad.Trans.State.Lazy.N:StateT[0]
                           <Data.Map.Base.Map
                              (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                              [SrcLoc.SrcSpan]>_N
                           <GhcMonad.Ghc>_R
                           <Language.Haskell.Tools.AST.Ann.Ann
                              (Language.Haskell.Tools.AST.Representation.Kinds.UPromoted t)
                              dom
                              Language.Haskell.Tools.AST.Ann.SrcTemplateStage>_N)
                        (case ipv1 of wild { (,) a1 s' -> s' }))
                       `cast`
                     (GhcMonad.N:Ghc[0]
                          <(Language.Haskell.Tools.AST.Ann.Ann
                              (Language.Haskell.Tools.AST.Representation.Kinds.UPromoted t)
                              dom
                              Language.Haskell.Tools.AST.Ann.SrcTemplateStage,
                            Data.Map.Base.Map
                              (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                              [SrcLoc.SrcSpan])>_R)
                       s)
                      `cast`
                    (GHC.Types.N:IO[0]
                         <(Language.Haskell.Tools.AST.Ann.Ann
                             (Language.Haskell.Tools.AST.Representation.Kinds.UPromoted t)
                             dom
                             Language.Haskell.Tools.AST.Ann.SrcTemplateStage,
                           Data.Map.Base.Map
                             (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                             [SrcLoc.SrcSpan])>_R)
                      ipv })
                     `cast`
                   (Trans
                        (<GhcMonad.Session>_R
                         ->_R Sym (GHC.Types.N:IO[0]
                                       <(Language.Haskell.Tools.AST.Ann.Ann
                                           (Language.Haskell.Tools.AST.Representation.Kinds.UPromoted
                                              t)
                                           dom
                                           Language.Haskell.Tools.AST.Ann.SrcTemplateStage,
                                         Data.Map.Base.Map
                                           (ExtMap.LogicalRelation
                                              GHC.LanguageExtensions.Type.Extension)
                                           [SrcLoc.SrcSpan])>_R))
                        (Sym (GhcMonad.N:Ghc[0]
                                  <(Language.Haskell.Tools.AST.Ann.Ann
                                      (Language.Haskell.Tools.AST.Representation.Kinds.UPromoted t)
                                      dom
                                      Language.Haskell.Tools.AST.Ann.SrcTemplateStage,
                                    Data.Map.Base.Map
                                      (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                                      [SrcLoc.SrcSpan])>_R))))
                    `cast`
                  (Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                            <Data.Map.Base.Map
                               (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                               [SrcLoc.SrcSpan]>_N
                            <GhcMonad.Ghc>_R
                            <Language.Haskell.Tools.AST.Ann.Ann
                               (Language.Haskell.Tools.AST.Representation.Kinds.UPromoted t)
                               dom
                               Language.Haskell.Tools.AST.Ann.SrcTemplateStage>_N)))
                   `cast`
                 (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                           <*>_N
                           <[GHC.LanguageExtensions.Type.Extension]>_R
                           <Control.Monad.Trans.State.Lazy.StateT
                              ExtMap.ExtMap GhcMonad.Ghc>_R
                           <Language.Haskell.Tools.AST.Ann.Ann
                              (Language.Haskell.Tools.AST.Representation.Kinds.UPromoted t)
                              dom
                              Language.Haskell.Tools.AST.Ann.SrcTemplateStage>_N)) }) -}
de39999aee594eac241f0688812d7a01
  traversePromoted1 ::
    Control.Reference.Representation.Reference
      (Control.Monad.Trans.Reader.ReaderT
         [GHC.LanguageExtensions.Type.Extension]
         (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc))
      Control.Reference.Representation.MU
      Control.Reference.Representation.MU
      Control.Reference.Representation.MU
      (Language.Haskell.Tools.AST.Ann.Ann
         (Language.Haskell.Tools.AST.Representation.Kinds.UPromoted t)
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
      (Language.Haskell.Tools.AST.Ann.Ann
         (Language.Haskell.Tools.AST.Representation.Kinds.UPromoted t)
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
      (Language.Haskell.Tools.AST.Ann.Ann
         t dom Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
      (Language.Haskell.Tools.AST.Ann.Ann
         t dom Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
  {- Unfolding: (\ @ dom
                   @ (t :: GHC.Types.* -> GHC.Types.* -> GHC.Types.*) ->
                 case Control.Reference.Combinators.$w&
                        @ (Control.Monad.Trans.Reader.ReaderT
                             [GHC.LanguageExtensions.Type.Extension]
                             (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc))
                        @ Control.Reference.Representation.MU
                        @ Control.Reference.Representation.MU
                        @ Control.Reference.Representation.MU
                        @ (Language.Haskell.Tools.AST.Ann.Ann
                             (Language.Haskell.Tools.AST.Representation.Kinds.UPromoted t)
                             dom
                             Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                        @ (Language.Haskell.Tools.AST.Ann.Ann
                             (Language.Haskell.Tools.AST.Representation.Kinds.UPromoted t)
                             dom
                             Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                        @ (Language.Haskell.Tools.AST.Ann.AnnListG
                             t dom Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                        @ (Language.Haskell.Tools.AST.Ann.AnnListG
                             t dom Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                        @ (Language.Haskell.Tools.AST.Ann.Ann
                             t dom Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                        @ (Language.Haskell.Tools.AST.Ann.Ann
                             t dom Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                        (TraverseAST.traversePromoted3 @ t @ dom)
                        (TraverseAST.traversePromoted2
                           @ t
                           @ dom) of ww { (#,,,,,#) ww1 ww2 ww3 ww4 ww5 ww6 ->
                 Control.Reference.Representation.Reference
                   @ (Control.Monad.Trans.Reader.ReaderT
                        [GHC.LanguageExtensions.Type.Extension]
                        (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc))
                   @ Control.Reference.Representation.MU
                   @ Control.Reference.Representation.MU
                   @ Control.Reference.Representation.MU
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        (Language.Haskell.Tools.AST.Representation.Kinds.UPromoted t)
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        (Language.Haskell.Tools.AST.Representation.Kinds.UPromoted t)
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        t dom Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        t dom Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   ww1
                   ww2
                   ww3
                   ww4
                   ww5
                   ww6 }) -}
460cb72a405329d5159e8098463acfac
  traversePromoted2 ::
    Control.Reference.Representation.Reference
      (Control.Monad.Trans.Reader.ReaderT
         [GHC.LanguageExtensions.Type.Extension]
         (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc))
      Control.Reference.Representation.MU
      Control.Reference.Representation.MU
      Control.Reference.Representation.MU
      (Language.Haskell.Tools.AST.Ann.AnnListG
         t dom Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
      (Language.Haskell.Tools.AST.Ann.AnnListG
         t dom Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
      (Language.Haskell.Tools.AST.Ann.Ann
         t dom Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
      (Language.Haskell.Tools.AST.Ann.Ann
         t dom Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
  {- Unfolding: (\ @ (t :: GHC.Types.* -> GHC.Types.* -> GHC.Types.*)
                   @ dom ->
                 case Language.Haskell.Tools.AST.Ann.$wannList
                        @ t
                        @ dom
                        @ Language.Haskell.Tools.AST.Ann.SrcTemplateStage
                        @ (Control.Monad.Trans.Reader.ReaderT
                             [GHC.LanguageExtensions.Type.Extension]
                             (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc))
                        @ Control.Reference.Representation.MU
                        TraverseAST.$s$fRefMonadswr
                        TraverseAST.$sannList1
                          `cast`
                        (Sym (Control.Instances.Morph.N:Morph[0]
                                  <[]>_N
                                  <Data.Proxy.Proxy>_N)) of ww { (#,,,,,#) ww1 ww2 ww3 ww4 ww5 ww6 ->
                 Control.Reference.Representation.Reference
                   @ (Control.Monad.Trans.Reader.ReaderT
                        [GHC.LanguageExtensions.Type.Extension]
                        (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc))
                   @ Control.Reference.Representation.MU
                   @ Control.Reference.Representation.MU
                   @ Control.Reference.Representation.MU
                   @ (Language.Haskell.Tools.AST.Ann.AnnListG
                        t dom Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   @ (Language.Haskell.Tools.AST.Ann.AnnListG
                        t dom Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        t dom Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        t dom Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   ww1
                   ww2
                   ww3
                   ww4
                   ww5
                   ww6 }) -}
be2d16de6587e01b610cf44d186a81ab
  traversePromoted3 ::
    Control.Reference.Representation.Reference
      (Control.Monad.Trans.Reader.ReaderT
         [GHC.LanguageExtensions.Type.Extension]
         (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc))
      Control.Reference.Representation.MU
      Control.Reference.Representation.MU
      Control.Reference.Representation.MU
      (Language.Haskell.Tools.AST.Ann.Ann
         (Language.Haskell.Tools.AST.Representation.Kinds.UPromoted t)
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
      (Language.Haskell.Tools.AST.Ann.Ann
         (Language.Haskell.Tools.AST.Representation.Kinds.UPromoted t)
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
      (Language.Haskell.Tools.AST.Ann.AnnListG
         t dom Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
      (Language.Haskell.Tools.AST.Ann.AnnListG
         t dom Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
  {- Unfolding: (\ @ (t :: GHC.Types.* -> GHC.Types.* -> GHC.Types.*)
                   @ dom ->
                 case Language.Haskell.Tools.AST.References.$wpromotedElements
                        @ GHC.Prim.Any
                        @ t
                        @ dom
                        @ Language.Haskell.Tools.AST.Ann.SrcTemplateStage
                        @ (Control.Monad.Trans.Reader.ReaderT
                             [GHC.LanguageExtensions.Type.Extension]
                             (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc))
                        @ Control.Reference.Representation.MU
                        (TraverseAST.$s$fMonadReaderT
                           @ [GHC.LanguageExtensions.Type.Extension])
                        Data.Proxy.$fMonadPlusProxy
                        TraverseAST.$sannJust1
                          `cast`
                        (Sym (Control.Instances.Morph.N:Morph[0]
                                  <GHC.Base.Maybe>_N
                                  <Data.Proxy.Proxy>_N)) of ww { (#,,,,,#) ww1 ww2 ww3 ww4 ww5 ww6 ->
                 Control.Reference.Representation.Reference
                   @ (Control.Monad.Trans.Reader.ReaderT
                        [GHC.LanguageExtensions.Type.Extension]
                        (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc))
                   @ Control.Reference.Representation.MU
                   @ Control.Reference.Representation.MU
                   @ Control.Reference.Representation.MU
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        (Language.Haskell.Tools.AST.Representation.Kinds.UPromoted t)
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        (Language.Haskell.Tools.AST.Representation.Kinds.UPromoted t)
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   @ (Language.Haskell.Tools.AST.Ann.AnnListG
                        t dom Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   @ (Language.Haskell.Tools.AST.Ann.AnnListG
                        t dom Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   ww1
                   ww2
                   ww3
                   ww4
                   ww5
                   ww6 }) -}
1c84c50de22267166ffcf3e50cb6644e
  traversePromoted4 ::
    Control.Reference.Representation.Reference
      (Control.Monad.Trans.Reader.ReaderT
         [GHC.LanguageExtensions.Type.Extension]
         (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc))
      Control.Reference.Representation.MU
      Control.Reference.Representation.MU
      Control.Reference.Representation.MU
      (Language.Haskell.Tools.AST.Ann.Ann
         (Language.Haskell.Tools.AST.Representation.Kinds.UPromoted t)
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
      (Language.Haskell.Tools.AST.Ann.Ann
         (Language.Haskell.Tools.AST.Representation.Kinds.UPromoted t)
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
      (Language.Haskell.Tools.AST.Ann.Ann
         Language.Haskell.Tools.AST.Representation.Names.UName
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
      (Language.Haskell.Tools.AST.Ann.Ann
         Language.Haskell.Tools.AST.Representation.Names.UName
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
  {- Unfolding: (\ @ dom
                   @ (t :: GHC.Types.* -> GHC.Types.* -> GHC.Types.*) ->
                 case Language.Haskell.Tools.AST.References.$wpromotedConName
                        @ t
                        @ dom
                        @ Language.Haskell.Tools.AST.Ann.SrcTemplateStage
                        @ (Control.Monad.Trans.Reader.ReaderT
                             [GHC.LanguageExtensions.Type.Extension]
                             (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc))
                        @ Control.Reference.Representation.MU
                        (TraverseAST.$s$fMonadReaderT
                           @ [GHC.LanguageExtensions.Type.Extension])
                        Data.Proxy.$fMonadPlusProxy
                        TraverseAST.$sannJust1
                          `cast`
                        (Sym (Control.Instances.Morph.N:Morph[0]
                                  <GHC.Base.Maybe>_N
                                  <Data.Proxy.Proxy>_N)) of ww { (#,,,,,#) ww1 ww2 ww3 ww4 ww5 ww6 ->
                 Control.Reference.Representation.Reference
                   @ (Control.Monad.Trans.Reader.ReaderT
                        [GHC.LanguageExtensions.Type.Extension]
                        (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc))
                   @ Control.Reference.Representation.MU
                   @ Control.Reference.Representation.MU
                   @ Control.Reference.Representation.MU
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        (Language.Haskell.Tools.AST.Representation.Kinds.UPromoted t)
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        (Language.Haskell.Tools.AST.Representation.Kinds.UPromoted t)
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        Language.Haskell.Tools.AST.Representation.Names.UName
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        Language.Haskell.Tools.AST.Representation.Names.UName
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   ww1
                   ww2
                   ww3
                   ww4
                   ww5
                   ww6 }) -}
2da117a371e738773d758efb3fcca869
  traverseQuasiQuote ::
    ExtMonad.CheckNode
      Language.Haskell.Tools.AST.ElementTypes.QuasiQuote
  {- Arity: 1,
     Strictness: <S(S(LLS(S)LLLLLLLLLL)L),U(U(A,A,U(U),A,A,A,A,A,A,A,A,A,A),A)>,
     Unfolding: (\ @ dom ($d(%,%) :: ExtMonad.ExtDomain dom) ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Language.Haskell.Tools.AST.Ann.SemanticInfo'
                             dom Language.Haskell.Tools.AST.Ann.SameInfoDefaultCls)
                        @ Language.Haskell.Tools.AST.SemaInfoTypes.NoSemanticInfo
                        (Language.Haskell.Tools.AST.Ann.$p3Domain
                           @ dom
                           (GHC.Classes.$p1(%,%)
                              @ (Language.Haskell.Tools.AST.Ann.Domain dom)
                              @ (Language.Haskell.Tools.AST.SemaInfoClasses.HasNameInfo'
                                   (Language.Haskell.Tools.AST.Ann.SemanticInfo
                                      dom
                                      Language.Haskell.Tools.AST.Representation.Names.UQualifiedName))
                              $d(%,%)))
                          `cast`
                        (Data.Type.Equality.N:~[0]
                             <*>_N <Language.Haskell.Tools.AST.Ann.SemanticInfo'
                                      dom
                                      Language.Haskell.Tools.AST.Ann.SameInfoDefaultCls>_N <Language.Haskell.Tools.AST.SemaInfoTypes.NoSemanticInfo>_N) of cobox0 { DEFAULT ->
                 let {
                   g :: Language.Haskell.Tools.AST.ElementTypes.QuasiQuote dom
                        -> Control.Monad.Trans.Reader.ReaderT
                             [GHC.LanguageExtensions.Type.Extension]
                             (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc)
                             (Language.Haskell.Tools.AST.Ann.Ann
                                Language.Haskell.Tools.AST.Representation.TH.UQuasiQuote
                                dom
                                Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   = case TraverseAST.traverseQuasiQuote1
                            @ dom of wild { Control.Reference.Representation.Reference ds1 ds2 ds3 ds4 ds5 ds6 ->
                     ds3
                       (TraverseAST.traverseFieldUpdate2 @ dom $d(%,%))
                         `cast`
                       (<Language.Haskell.Tools.AST.ElementTypes.Name dom>_R
                        ->_R Trans
                                 (<[GHC.LanguageExtensions.Type.Extension]>_R
                                  ->_R Trans
                                           (<ExtMap.ExtMap>_R
                                            ->_R Trans
                                                     (<GhcMonad.Session>_R
                                                      ->_R Sym (GHC.Types.N:IO[0]
                                                                    <(Language.Haskell.Tools.AST.ElementTypes.Name
                                                                        dom,
                                                                      ExtMap.ExtMap)>_R))
                                                     (Sym (GhcMonad.N:Ghc[0]
                                                               <(Language.Haskell.Tools.AST.ElementTypes.Name
                                                                   dom,
                                                                 ExtMap.ExtMap)>_R)))
                                           (Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                                     <ExtMap.ExtMap>_N
                                                     <GhcMonad.Ghc>_R
                                                     <Language.Haskell.Tools.AST.ElementTypes.Name
                                                        dom>_N)))
                                 (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                           <*>_N
                                           <[GHC.LanguageExtensions.Type.Extension]>_R
                                           <Control.Monad.Trans.State.Lazy.StateT
                                              ExtMap.ExtMap GhcMonad.Ghc>_R
                                           <Language.Haskell.Tools.AST.ElementTypes.Name dom>_N))) }
                 } in
                 (\ (x :: Language.Haskell.Tools.AST.ElementTypes.QuasiQuote dom)
                    (eta :: [GHC.LanguageExtensions.Type.Extension])
                    (eta1 :: ExtMap.ExtMap) ->
                  let {
                    m :: GhcMonad.Ghc
                           (Language.Haskell.Tools.AST.ElementTypes.QuasiQuote dom,
                            Data.Map.Base.Map
                              (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                              [SrcLoc.SrcSpan])
                    = TemplateHaskellChecker.$wchkTemplateHaskellQuasiQuote
                        @ dom
                        $d(%,%)
                        x
                        eta1
                  } in
                  (\ (s :: GhcMonad.Session)
                     (s1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                   case (m `cast`
                         (GhcMonad.N:Ghc[0]
                              <(Language.Haskell.Tools.AST.ElementTypes.QuasiQuote dom,
                                Data.Map.Base.Map
                                  (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                                  [SrcLoc.SrcSpan])>_R)
                           s)
                          `cast`
                        (GHC.Types.N:IO[0]
                             <(Language.Haskell.Tools.AST.ElementTypes.QuasiQuote dom,
                               Data.Map.Base.Map
                                 (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                                 [SrcLoc.SrcSpan])>_R)
                          s1 of ds1 { (#,#) ipv ipv1 ->
                   ((((g (case ipv1 of wild { (,) a1 s' -> a1 }))
                        `cast`
                      (Control.Monad.Trans.Reader.N:ReaderT[0]
                           <*>_N
                           <[GHC.LanguageExtensions.Type.Extension]>_R
                           <Control.Monad.Trans.State.Lazy.StateT
                              ExtMap.ExtMap GhcMonad.Ghc>_R
                           <Language.Haskell.Tools.AST.Ann.Ann
                              Language.Haskell.Tools.AST.Representation.TH.UQuasiQuote
                              dom
                              Language.Haskell.Tools.AST.Ann.SrcTemplateStage>_N)
                        eta)
                       `cast`
                     (Control.Monad.Trans.State.Lazy.N:StateT[0]
                          <Data.Map.Base.Map
                             (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                             [SrcLoc.SrcSpan]>_N
                          <GhcMonad.Ghc>_R
                          <Language.Haskell.Tools.AST.Ann.Ann
                             Language.Haskell.Tools.AST.Representation.TH.UQuasiQuote
                             dom
                             Language.Haskell.Tools.AST.Ann.SrcTemplateStage>_N)
                       (case ipv1 of wild { (,) a1 s' -> s' }))
                      `cast`
                    (GhcMonad.N:Ghc[0]
                         <(Language.Haskell.Tools.AST.Ann.Ann
                             Language.Haskell.Tools.AST.Representation.TH.UQuasiQuote
                             dom
                             Language.Haskell.Tools.AST.Ann.SrcTemplateStage,
                           Data.Map.Base.Map
                             (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                             [SrcLoc.SrcSpan])>_R)
                      s)
                     `cast`
                   (GHC.Types.N:IO[0]
                        <(Language.Haskell.Tools.AST.Ann.Ann
                            Language.Haskell.Tools.AST.Representation.TH.UQuasiQuote
                            dom
                            Language.Haskell.Tools.AST.Ann.SrcTemplateStage,
                          Data.Map.Base.Map
                            (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                            [SrcLoc.SrcSpan])>_R)
                     ipv })
                    `cast`
                  (Trans
                       (<GhcMonad.Session>_R
                        ->_R Sym (GHC.Types.N:IO[0]
                                      <(Language.Haskell.Tools.AST.Ann.Ann
                                          Language.Haskell.Tools.AST.Representation.TH.UQuasiQuote
                                          dom
                                          Language.Haskell.Tools.AST.Ann.SrcTemplateStage,
                                        Data.Map.Base.Map
                                          (ExtMap.LogicalRelation
                                             GHC.LanguageExtensions.Type.Extension)
                                          [SrcLoc.SrcSpan])>_R))
                       (Sym (GhcMonad.N:Ghc[0]
                                 <(Language.Haskell.Tools.AST.Ann.Ann
                                     Language.Haskell.Tools.AST.Representation.TH.UQuasiQuote
                                     dom
                                     Language.Haskell.Tools.AST.Ann.SrcTemplateStage,
                                   Data.Map.Base.Map
                                     (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                                     [SrcLoc.SrcSpan])>_R))))
                   `cast`
                 (<Language.Haskell.Tools.AST.ElementTypes.QuasiQuote dom>_R
                  ->_R Trans
                           (<[GHC.LanguageExtensions.Type.Extension]>_R
                            ->_R Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                          <ExtMap.ExtMap>_N
                                          <GhcMonad.Ghc>_R
                                          <Language.Haskell.Tools.AST.Ann.Ann
                                             Language.Haskell.Tools.AST.Representation.TH.UQuasiQuote
                                             dom
                                             Language.Haskell.Tools.AST.Ann.SrcTemplateStage>_N))
                           (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                     <*>_N
                                     <[GHC.LanguageExtensions.Type.Extension]>_R
                                     <Control.Monad.Trans.State.Lazy.StateT
                                        ExtMap.ExtMap GhcMonad.Ghc>_R
                                     <Language.Haskell.Tools.AST.Ann.Ann
                                        Language.Haskell.Tools.AST.Representation.TH.UQuasiQuote
                                        dom
                                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage>_N))) }) -}
7beaf13057961300f4bc208241d397d3
  traverseQuasiQuote1 ::
    Control.Reference.Representation.Reference
      (Control.Monad.Trans.Reader.ReaderT
         [GHC.LanguageExtensions.Type.Extension]
         (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc))
      Control.Reference.Representation.MU
      Control.Reference.Representation.MU
      Control.Reference.Representation.MU
      (Language.Haskell.Tools.AST.Ann.Ann
         Language.Haskell.Tools.AST.Representation.TH.UQuasiQuote
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
      (Language.Haskell.Tools.AST.Ann.Ann
         Language.Haskell.Tools.AST.Representation.TH.UQuasiQuote
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
      (Language.Haskell.Tools.AST.Ann.Ann
         Language.Haskell.Tools.AST.Representation.Names.UName
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
      (Language.Haskell.Tools.AST.Ann.Ann
         Language.Haskell.Tools.AST.Representation.Names.UName
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
  {- Unfolding: (\ @ dom ->
                 case Language.Haskell.Tools.AST.References.$wqqExprName
                        @ dom
                        @ Language.Haskell.Tools.AST.Ann.SrcTemplateStage
                        @ (Control.Monad.Trans.Reader.ReaderT
                             [GHC.LanguageExtensions.Type.Extension]
                             (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc))
                        @ Control.Reference.Representation.MU
                        TraverseAST.$s$fRefMonadswr of ww { (#,,,,,#) ww1 ww2 ww3 ww4 ww5 ww6 ->
                 Control.Reference.Representation.Reference
                   @ (Control.Monad.Trans.Reader.ReaderT
                        [GHC.LanguageExtensions.Type.Extension]
                        (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc))
                   @ Control.Reference.Representation.MU
                   @ Control.Reference.Representation.MU
                   @ Control.Reference.Representation.MU
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        Language.Haskell.Tools.AST.Representation.TH.UQuasiQuote
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        Language.Haskell.Tools.AST.Representation.TH.UQuasiQuote
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        Language.Haskell.Tools.AST.Representation.Names.UName
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        Language.Haskell.Tools.AST.Representation.Names.UName
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   ww1
                   ww2
                   ww3
                   ww4
                   ww5
                   ww6 }) -}
5f158601e569bbf69b252a4deb4d2b99
  traverseRhs ::
    ExtMonad.CheckNode Language.Haskell.Tools.AST.ElementTypes.Rhs
  {- Arity: 1,
     Strictness: <S(S(LLS(S)LLLLLLLLLL)L),U(U(U,U,U(U),U,U,U,U,U,U,U,U,U,U),U)> -}
c82891137760fd6e8d5f1f63c9a3191e
  traverseRhsGuard ::
    ExtMonad.CheckNode Language.Haskell.Tools.AST.ElementTypes.RhsGuard
  {- Arity: 1,
     Strictness: <S(S(LLS(S)LLLLLLLLLL)L),U(U(U,U,U(U),U,U,U,U,U,U,U,U,U,U),U)> -}
ba2d02e12e9c1cbee50159568b88f18c
  traverseSplice ::
    ExtMonad.CheckNode Language.Haskell.Tools.AST.ElementTypes.Splice
  {- Arity: 1,
     Strictness: <S(S(LLS(S)LLLLLLLLLL)L),U(U(U,U,U(U),U,U,U,U,U,U,U,U,U,U),U)>,
     Unfolding: (\ @ dom ($d(%,%) :: ExtMonad.ExtDomain dom) ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Language.Haskell.Tools.AST.Ann.SemanticInfo'
                             dom Language.Haskell.Tools.AST.Ann.SameInfoDefaultCls)
                        @ Language.Haskell.Tools.AST.SemaInfoTypes.NoSemanticInfo
                        (Language.Haskell.Tools.AST.Ann.$p3Domain
                           @ dom
                           (GHC.Classes.$p1(%,%)
                              @ (Language.Haskell.Tools.AST.Ann.Domain dom)
                              @ (Language.Haskell.Tools.AST.SemaInfoClasses.HasNameInfo'
                                   (Language.Haskell.Tools.AST.Ann.SemanticInfo
                                      dom
                                      Language.Haskell.Tools.AST.Representation.Names.UQualifiedName))
                              $d(%,%)))
                          `cast`
                        (Data.Type.Equality.N:~[0]
                             <*>_N <Language.Haskell.Tools.AST.Ann.SemanticInfo'
                                      dom
                                      Language.Haskell.Tools.AST.Ann.SameInfoDefaultCls>_N <Language.Haskell.Tools.AST.SemaInfoTypes.NoSemanticInfo>_N) of cobox0 { DEFAULT ->
                 let {
                   f :: Language.Haskell.Tools.AST.Ann.Ann
                          Language.Haskell.Tools.AST.Representation.TH.USplice
                          dom
                          Language.Haskell.Tools.AST.Ann.SrcTemplateStage
                        -> Control.Monad.Trans.Reader.ReaderT
                             [GHC.LanguageExtensions.Type.Extension]
                             (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc)
                             (Language.Haskell.Tools.AST.Ann.Ann
                                Language.Haskell.Tools.AST.Representation.TH.USplice
                                dom
                                Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   = case TraverseAST.traverseSplice2
                            @ dom of wild { Control.Reference.Representation.Reference ds1 ds2 ds3 ds4 ds5 ds6 ->
                     ds3
                       (TraverseAST.traverseFieldUpdate2 @ dom $d(%,%))
                         `cast`
                       (<Language.Haskell.Tools.AST.ElementTypes.Name dom>_R
                        ->_R Trans
                                 (<[GHC.LanguageExtensions.Type.Extension]>_R
                                  ->_R Trans
                                           (<ExtMap.ExtMap>_R
                                            ->_R Trans
                                                     (<GhcMonad.Session>_R
                                                      ->_R Sym (GHC.Types.N:IO[0]
                                                                    <(Language.Haskell.Tools.AST.ElementTypes.Name
                                                                        dom,
                                                                      ExtMap.ExtMap)>_R))
                                                     (Sym (GhcMonad.N:Ghc[0]
                                                               <(Language.Haskell.Tools.AST.ElementTypes.Name
                                                                   dom,
                                                                 ExtMap.ExtMap)>_R)))
                                           (Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                                     <ExtMap.ExtMap>_N
                                                     <GhcMonad.Ghc>_R
                                                     <Language.Haskell.Tools.AST.ElementTypes.Name
                                                        dom>_N)))
                                 (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                           <*>_N
                                           <[GHC.LanguageExtensions.Type.Extension]>_R
                                           <Control.Monad.Trans.State.Lazy.StateT
                                              ExtMap.ExtMap GhcMonad.Ghc>_R
                                           <Language.Haskell.Tools.AST.ElementTypes.Name dom>_N))) }
                 } in
                 let {
                   g :: Language.Haskell.Tools.AST.Ann.Ann
                          Language.Haskell.Tools.AST.Representation.TH.USplice
                          dom
                          Language.Haskell.Tools.AST.Ann.SrcTemplateStage
                        -> Control.Monad.Trans.Reader.ReaderT
                             [GHC.LanguageExtensions.Type.Extension]
                             (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc)
                             (Language.Haskell.Tools.AST.Ann.Ann
                                Language.Haskell.Tools.AST.Representation.TH.USplice
                                dom
                                Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   = case TraverseAST.traverseSplice1
                            @ dom of wild { Control.Reference.Representation.Reference ds1 ds2 ds3 ds4 ds5 ds6 ->
                     ds3 (TraverseAST.traverseExpr @ dom $d(%,%)) }
                 } in
                 (\ (x :: Language.Haskell.Tools.AST.ElementTypes.Splice dom)
                    (eta :: [GHC.LanguageExtensions.Type.Extension])
                    (eta1 :: ExtMap.ExtMap) ->
                  let {
                    m :: GhcMonad.Ghc
                           (Language.Haskell.Tools.AST.ElementTypes.Splice dom,
                            Data.Map.Base.Map
                              (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                              [SrcLoc.SrcSpan])
                    = TemplateHaskellChecker.$wchkTemplateHaskellSplice
                        @ dom
                        $d(%,%)
                        x
                        eta1
                  } in
                  (\ (s :: GhcMonad.Session)
                     (s1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                   case (m `cast`
                         (GhcMonad.N:Ghc[0]
                              <(Language.Haskell.Tools.AST.ElementTypes.Splice dom,
                                Data.Map.Base.Map
                                  (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                                  [SrcLoc.SrcSpan])>_R)
                           s)
                          `cast`
                        (GHC.Types.N:IO[0]
                             <(Language.Haskell.Tools.AST.ElementTypes.Splice dom,
                               Data.Map.Base.Map
                                 (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                                 [SrcLoc.SrcSpan])>_R)
                          s1 of ds1 { (#,#) ipv ipv1 ->
                   case ((((f (case ipv1 of wild { (,) a1 s' -> a1 }))
                             `cast`
                           (Control.Monad.Trans.Reader.N:ReaderT[0]
                                <*>_N
                                <[GHC.LanguageExtensions.Type.Extension]>_R
                                <Control.Monad.Trans.State.Lazy.StateT
                                   ExtMap.ExtMap GhcMonad.Ghc>_R
                                <Language.Haskell.Tools.AST.Ann.Ann
                                   Language.Haskell.Tools.AST.Representation.TH.USplice
                                   dom
                                   Language.Haskell.Tools.AST.Ann.SrcTemplateStage>_N)
                             eta)
                            `cast`
                          (Control.Monad.Trans.State.Lazy.N:StateT[0]
                               <Data.Map.Base.Map
                                  (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                                  [SrcLoc.SrcSpan]>_N
                               <GhcMonad.Ghc>_R
                               <Language.Haskell.Tools.AST.Ann.Ann
                                  Language.Haskell.Tools.AST.Representation.TH.USplice
                                  dom
                                  Language.Haskell.Tools.AST.Ann.SrcTemplateStage>_N)
                            (case ipv1 of wild { (,) a1 s' -> s' }))
                           `cast`
                         (GhcMonad.N:Ghc[0]
                              <(Language.Haskell.Tools.AST.Ann.Ann
                                  Language.Haskell.Tools.AST.Representation.TH.USplice
                                  dom
                                  Language.Haskell.Tools.AST.Ann.SrcTemplateStage,
                                Data.Map.Base.Map
                                  (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                                  [SrcLoc.SrcSpan])>_R)
                           s)
                          `cast`
                        (GHC.Types.N:IO[0]
                             <(Language.Haskell.Tools.AST.Ann.Ann
                                 Language.Haskell.Tools.AST.Representation.TH.USplice
                                 dom
                                 Language.Haskell.Tools.AST.Ann.SrcTemplateStage,
                               Data.Map.Base.Map
                                 (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                                 [SrcLoc.SrcSpan])>_R)
                          ipv of ds2 { (#,#) ipv2 ipv3 ->
                   ((((g (case ipv3 of wild { (,) a1 s' -> a1 }))
                        `cast`
                      (Control.Monad.Trans.Reader.N:ReaderT[0]
                           <*>_N
                           <[GHC.LanguageExtensions.Type.Extension]>_R
                           <Control.Monad.Trans.State.Lazy.StateT
                              ExtMap.ExtMap GhcMonad.Ghc>_R
                           <Language.Haskell.Tools.AST.Ann.Ann
                              Language.Haskell.Tools.AST.Representation.TH.USplice
                              dom
                              Language.Haskell.Tools.AST.Ann.SrcTemplateStage>_N)
                        eta)
                       `cast`
                     (Control.Monad.Trans.State.Lazy.N:StateT[0]
                          <Data.Map.Base.Map
                             (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                             [SrcLoc.SrcSpan]>_N
                          <GhcMonad.Ghc>_R
                          <Language.Haskell.Tools.AST.Ann.Ann
                             Language.Haskell.Tools.AST.Representation.TH.USplice
                             dom
                             Language.Haskell.Tools.AST.Ann.SrcTemplateStage>_N)
                       (case ipv3 of wild { (,) a1 s' -> s' }))
                      `cast`
                    (GhcMonad.N:Ghc[0]
                         <(Language.Haskell.Tools.AST.Ann.Ann
                             Language.Haskell.Tools.AST.Representation.TH.USplice
                             dom
                             Language.Haskell.Tools.AST.Ann.SrcTemplateStage,
                           Data.Map.Base.Map
                             (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                             [SrcLoc.SrcSpan])>_R)
                      s)
                     `cast`
                   (GHC.Types.N:IO[0]
                        <(Language.Haskell.Tools.AST.Ann.Ann
                            Language.Haskell.Tools.AST.Representation.TH.USplice
                            dom
                            Language.Haskell.Tools.AST.Ann.SrcTemplateStage,
                          Data.Map.Base.Map
                            (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                            [SrcLoc.SrcSpan])>_R)
                     ipv2 } })
                    `cast`
                  (Trans
                       (<GhcMonad.Session>_R
                        ->_R Sym (GHC.Types.N:IO[0]
                                      <(Language.Haskell.Tools.AST.Ann.Ann
                                          Language.Haskell.Tools.AST.Representation.TH.USplice
                                          dom
                                          Language.Haskell.Tools.AST.Ann.SrcTemplateStage,
                                        Data.Map.Base.Map
                                          (ExtMap.LogicalRelation
                                             GHC.LanguageExtensions.Type.Extension)
                                          [SrcLoc.SrcSpan])>_R))
                       (Sym (GhcMonad.N:Ghc[0]
                                 <(Language.Haskell.Tools.AST.Ann.Ann
                                     Language.Haskell.Tools.AST.Representation.TH.USplice
                                     dom
                                     Language.Haskell.Tools.AST.Ann.SrcTemplateStage,
                                   Data.Map.Base.Map
                                     (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                                     [SrcLoc.SrcSpan])>_R))))
                   `cast`
                 (<Language.Haskell.Tools.AST.ElementTypes.Splice dom>_R
                  ->_R Trans
                           (<[GHC.LanguageExtensions.Type.Extension]>_R
                            ->_R Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                          <ExtMap.ExtMap>_N
                                          <GhcMonad.Ghc>_R
                                          <Language.Haskell.Tools.AST.Ann.Ann
                                             Language.Haskell.Tools.AST.Representation.TH.USplice
                                             dom
                                             Language.Haskell.Tools.AST.Ann.SrcTemplateStage>_N))
                           (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                     <*>_N
                                     <[GHC.LanguageExtensions.Type.Extension]>_R
                                     <Control.Monad.Trans.State.Lazy.StateT
                                        ExtMap.ExtMap GhcMonad.Ghc>_R
                                     <Language.Haskell.Tools.AST.Ann.Ann
                                        Language.Haskell.Tools.AST.Representation.TH.USplice
                                        dom
                                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage>_N))) }) -}
6014c453d9cb54ee334565fff6fe9747
  traverseSplice1 ::
    Control.Reference.Representation.Reference
      (Control.Monad.Trans.Reader.ReaderT
         [GHC.LanguageExtensions.Type.Extension]
         (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc))
      Control.Reference.Representation.MU
      Control.Reference.Representation.MU
      Control.Reference.Representation.MU
      (Language.Haskell.Tools.AST.Ann.Ann
         Language.Haskell.Tools.AST.Representation.TH.USplice
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
      (Language.Haskell.Tools.AST.Ann.Ann
         Language.Haskell.Tools.AST.Representation.TH.USplice
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
      (Language.Haskell.Tools.AST.Ann.Ann
         Language.Haskell.Tools.AST.Representation.Exprs.UExpr
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
      (Language.Haskell.Tools.AST.Ann.Ann
         Language.Haskell.Tools.AST.Representation.Exprs.UExpr
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
  {- Unfolding: (\ @ dom ->
                 case Language.Haskell.Tools.AST.References.$wspliceExpr
                        @ dom
                        @ Language.Haskell.Tools.AST.Ann.SrcTemplateStage
                        @ (Control.Monad.Trans.Reader.ReaderT
                             [GHC.LanguageExtensions.Type.Extension]
                             (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc))
                        @ Control.Reference.Representation.MU
                        (TraverseAST.$s$fMonadReaderT
                           @ [GHC.LanguageExtensions.Type.Extension])
                        Data.Proxy.$fMonadPlusProxy
                        TraverseAST.$sannJust1
                          `cast`
                        (Sym (Control.Instances.Morph.N:Morph[0]
                                  <GHC.Base.Maybe>_N
                                  <Data.Proxy.Proxy>_N)) of ww { (#,,,,,#) ww1 ww2 ww3 ww4 ww5 ww6 ->
                 Control.Reference.Representation.Reference
                   @ (Control.Monad.Trans.Reader.ReaderT
                        [GHC.LanguageExtensions.Type.Extension]
                        (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc))
                   @ Control.Reference.Representation.MU
                   @ Control.Reference.Representation.MU
                   @ Control.Reference.Representation.MU
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        Language.Haskell.Tools.AST.Representation.TH.USplice
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        Language.Haskell.Tools.AST.Representation.TH.USplice
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        Language.Haskell.Tools.AST.Representation.Exprs.UExpr
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        Language.Haskell.Tools.AST.Representation.Exprs.UExpr
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   ww1
                   ww2
                   ww3
                   ww4
                   ww5
                   ww6 }) -}
5d2c3e282a4121689e2d2bcadd124e73
  traverseSplice2 ::
    Control.Reference.Representation.Reference
      (Control.Monad.Trans.Reader.ReaderT
         [GHC.LanguageExtensions.Type.Extension]
         (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc))
      Control.Reference.Representation.MU
      Control.Reference.Representation.MU
      Control.Reference.Representation.MU
      (Language.Haskell.Tools.AST.Ann.Ann
         Language.Haskell.Tools.AST.Representation.TH.USplice
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
      (Language.Haskell.Tools.AST.Ann.Ann
         Language.Haskell.Tools.AST.Representation.TH.USplice
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
      (Language.Haskell.Tools.AST.Ann.Ann
         Language.Haskell.Tools.AST.Representation.Names.UName
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
      (Language.Haskell.Tools.AST.Ann.Ann
         Language.Haskell.Tools.AST.Representation.Names.UName
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
  {- Unfolding: (\ @ dom ->
                 case Language.Haskell.Tools.AST.References.$wspliceId
                        @ dom
                        @ Language.Haskell.Tools.AST.Ann.SrcTemplateStage
                        @ (Control.Monad.Trans.Reader.ReaderT
                             [GHC.LanguageExtensions.Type.Extension]
                             (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc))
                        @ Control.Reference.Representation.MU
                        (TraverseAST.$s$fMonadReaderT
                           @ [GHC.LanguageExtensions.Type.Extension])
                        Data.Proxy.$fMonadPlusProxy
                        TraverseAST.$sannJust1
                          `cast`
                        (Sym (Control.Instances.Morph.N:Morph[0]
                                  <GHC.Base.Maybe>_N
                                  <Data.Proxy.Proxy>_N)) of ww { (#,,,,,#) ww1 ww2 ww3 ww4 ww5 ww6 ->
                 Control.Reference.Representation.Reference
                   @ (Control.Monad.Trans.Reader.ReaderT
                        [GHC.LanguageExtensions.Type.Extension]
                        (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc))
                   @ Control.Reference.Representation.MU
                   @ Control.Reference.Representation.MU
                   @ Control.Reference.Representation.MU
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        Language.Haskell.Tools.AST.Representation.TH.USplice
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        Language.Haskell.Tools.AST.Representation.TH.USplice
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        Language.Haskell.Tools.AST.Representation.Names.UName
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        Language.Haskell.Tools.AST.Representation.Names.UName
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   ww1
                   ww2
                   ww3
                   ww4
                   ww5
                   ww6 }) -}
8a26737bca9ccaf8773545e28a0abf0f
  traverseStmt ::
    ExtMonad.CheckUNode uexpr
    -> ExtMonad.CheckNode (TraverseAST.StmtG uexpr)
  {- Arity: 2,
     Strictness: <L,C(U)><S(S(LLS(S)LLLLLLLLLL)L),U(U(U,U,U(U),U,U,U,U,U,U,U,U,U,U),U)> -}
853b19d6c6fa65ee53bdaaf6ec022f12
  traverseTupSecElem ::
    ExtMonad.CheckNode
      Language.Haskell.Tools.AST.ElementTypes.TupSecElem
  {- Arity: 1,
     Strictness: <S(S(LLS(S)LLLLLLLLLL)L),U(U(U,U,U(U),U,U,U,U,U,U,U,U,U,U),U)>,
     Unfolding: (\ @ dom ($d(%,%) :: ExtMonad.ExtDomain dom) ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Language.Haskell.Tools.AST.Ann.SemanticInfo'
                             dom Language.Haskell.Tools.AST.Ann.SameInfoDefaultCls)
                        @ Language.Haskell.Tools.AST.SemaInfoTypes.NoSemanticInfo
                        (Language.Haskell.Tools.AST.Ann.$p3Domain
                           @ dom
                           (GHC.Classes.$p1(%,%)
                              @ (Language.Haskell.Tools.AST.Ann.Domain dom)
                              @ (Language.Haskell.Tools.AST.SemaInfoClasses.HasNameInfo'
                                   (Language.Haskell.Tools.AST.Ann.SemanticInfo
                                      dom
                                      Language.Haskell.Tools.AST.Representation.Names.UQualifiedName))
                              $d(%,%)))
                          `cast`
                        (Data.Type.Equality.N:~[0]
                             <*>_N <Language.Haskell.Tools.AST.Ann.SemanticInfo'
                                      dom
                                      Language.Haskell.Tools.AST.Ann.SameInfoDefaultCls>_N <Language.Haskell.Tools.AST.SemaInfoTypes.NoSemanticInfo>_N) of cobox0 { DEFAULT ->
                 case TraverseAST.traverseTupSecElem1
                        @ dom of wild { Control.Reference.Representation.Reference ds1 ds2 ds3 ds4 ds5 ds6 ->
                 ds3 (TraverseAST.traverseExpr @ dom $d(%,%)) } }) -}
2f14b423045fe7e248c11f640feacff2
  traverseTupSecElem1 ::
    Control.Reference.Representation.Reference
      (Control.Monad.Trans.Reader.ReaderT
         [GHC.LanguageExtensions.Type.Extension]
         (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc))
      Control.Reference.Representation.MU
      Control.Reference.Representation.MU
      Control.Reference.Representation.MU
      (Language.Haskell.Tools.AST.Ann.Ann
         Language.Haskell.Tools.AST.Representation.Exprs.UTupSecElem
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
      (Language.Haskell.Tools.AST.Ann.Ann
         Language.Haskell.Tools.AST.Representation.Exprs.UTupSecElem
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
      (Language.Haskell.Tools.AST.Ann.Ann
         Language.Haskell.Tools.AST.Representation.Exprs.UExpr
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
      (Language.Haskell.Tools.AST.Ann.Ann
         Language.Haskell.Tools.AST.Representation.Exprs.UExpr
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
  {- Unfolding: (\ @ dom ->
                 case Language.Haskell.Tools.AST.References.$wtupSecExpr
                        @ GHC.Prim.Any
                        @ GHC.Prim.Any
                        @ dom
                        @ Language.Haskell.Tools.AST.Ann.SrcTemplateStage
                        @ (Control.Monad.Trans.Reader.ReaderT
                             [GHC.LanguageExtensions.Type.Extension]
                             (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc))
                        @ Control.Reference.Representation.MU
                        (TraverseAST.$s$fMonadReaderT
                           @ [GHC.LanguageExtensions.Type.Extension])
                        Data.Proxy.$fMonadPlusProxy
                        TraverseAST.$sannJust1
                          `cast`
                        (Sym (Control.Instances.Morph.N:Morph[0]
                                  <GHC.Base.Maybe>_N
                                  <Data.Proxy.Proxy>_N)) of ww { (#,,,,,#) ww1 ww2 ww3 ww4 ww5 ww6 ->
                 Control.Reference.Representation.Reference
                   @ (Control.Monad.Trans.Reader.ReaderT
                        [GHC.LanguageExtensions.Type.Extension]
                        (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc))
                   @ Control.Reference.Representation.MU
                   @ Control.Reference.Representation.MU
                   @ Control.Reference.Representation.MU
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        Language.Haskell.Tools.AST.Representation.Exprs.UTupSecElem
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        Language.Haskell.Tools.AST.Representation.Exprs.UTupSecElem
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        Language.Haskell.Tools.AST.Representation.Exprs.UExpr
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        Language.Haskell.Tools.AST.Representation.Exprs.UExpr
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   ww1
                   ww2
                   ww3
                   ww4
                   ww5
                   ww6 }) -}
858277f2788310e22b9b37099e6c56c5
  traverseTyVar ::
    ExtMonad.CheckNode Language.Haskell.Tools.AST.ElementTypes.TyVar
  {- Arity: 1,
     Strictness: <S(S(LLS(S)LLLLLLLLLL)L),U(U(A,A,U(U),A,A,A,A,A,A,A,A,A,A),A)>,
     Unfolding: (\ @ dom ($d(%,%) :: ExtMonad.ExtDomain dom) ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Language.Haskell.Tools.AST.Ann.SemanticInfo'
                             dom Language.Haskell.Tools.AST.Ann.SameInfoDefaultCls)
                        @ Language.Haskell.Tools.AST.SemaInfoTypes.NoSemanticInfo
                        (Language.Haskell.Tools.AST.Ann.$p3Domain
                           @ dom
                           (GHC.Classes.$p1(%,%)
                              @ (Language.Haskell.Tools.AST.Ann.Domain dom)
                              @ (Language.Haskell.Tools.AST.SemaInfoClasses.HasNameInfo'
                                   (Language.Haskell.Tools.AST.Ann.SemanticInfo
                                      dom
                                      Language.Haskell.Tools.AST.Representation.Names.UQualifiedName))
                              $d(%,%)))
                          `cast`
                        (Data.Type.Equality.N:~[0]
                             <*>_N <Language.Haskell.Tools.AST.Ann.SemanticInfo'
                                      dom
                                      Language.Haskell.Tools.AST.Ann.SameInfoDefaultCls>_N <Language.Haskell.Tools.AST.SemaInfoTypes.NoSemanticInfo>_N) of cobox0 { DEFAULT ->
                 let {
                   f :: Language.Haskell.Tools.AST.Ann.Ann
                          Language.Haskell.Tools.AST.Representation.Types.UTyVar
                          dom
                          Language.Haskell.Tools.AST.Ann.SrcTemplateStage
                        -> Control.Monad.Trans.Reader.ReaderT
                             [GHC.LanguageExtensions.Type.Extension]
                             (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc)
                             (Language.Haskell.Tools.AST.Ann.Ann
                                Language.Haskell.Tools.AST.Representation.Types.UTyVar
                                dom
                                Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   = case TraverseAST.traverseTyVar4
                            @ dom of wild { Control.Reference.Representation.Reference ds1 ds2 ds3 ds4 ds5 ds6 ->
                     ds3
                       (TraverseAST.traverseFieldUpdate2 @ dom $d(%,%))
                         `cast`
                       (<Language.Haskell.Tools.AST.ElementTypes.Name dom>_R
                        ->_R Trans
                                 (<[GHC.LanguageExtensions.Type.Extension]>_R
                                  ->_R Trans
                                           (<ExtMap.ExtMap>_R
                                            ->_R Trans
                                                     (<GhcMonad.Session>_R
                                                      ->_R Sym (GHC.Types.N:IO[0]
                                                                    <(Language.Haskell.Tools.AST.ElementTypes.Name
                                                                        dom,
                                                                      ExtMap.ExtMap)>_R))
                                                     (Sym (GhcMonad.N:Ghc[0]
                                                               <(Language.Haskell.Tools.AST.ElementTypes.Name
                                                                   dom,
                                                                 ExtMap.ExtMap)>_R)))
                                           (Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                                     <ExtMap.ExtMap>_N
                                                     <GhcMonad.Ghc>_R
                                                     <Language.Haskell.Tools.AST.ElementTypes.Name
                                                        dom>_N)))
                                 (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                           <*>_N
                                           <[GHC.LanguageExtensions.Type.Extension]>_R
                                           <Control.Monad.Trans.State.Lazy.StateT
                                              ExtMap.ExtMap GhcMonad.Ghc>_R
                                           <Language.Haskell.Tools.AST.ElementTypes.Name dom>_N))) }
                 } in
                 let {
                   g :: Language.Haskell.Tools.AST.Ann.Ann
                          Language.Haskell.Tools.AST.Representation.Types.UTyVar
                          dom
                          Language.Haskell.Tools.AST.Ann.SrcTemplateStage
                        -> Control.Monad.Trans.Reader.ReaderT
                             [GHC.LanguageExtensions.Type.Extension]
                             (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc)
                             (Language.Haskell.Tools.AST.Ann.Ann
                                Language.Haskell.Tools.AST.Representation.Types.UTyVar
                                dom
                                Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   = case TraverseAST.traverseTyVar1
                            @ dom of wild { Control.Reference.Representation.Reference ds1 ds2 ds3 ds4 ds5 ds6 ->
                     ds3 (TraverseAST.traverseKindContraint @ dom $d(%,%)) }
                 } in
                 \ (x :: Language.Haskell.Tools.AST.Ann.Ann
                           Language.Haskell.Tools.AST.Representation.Types.UTyVar
                           dom
                           Language.Haskell.Tools.AST.Ann.SrcTemplateStage) ->
                 let {
                   m1 :: Control.Monad.Trans.Reader.ReaderT
                           [GHC.LanguageExtensions.Type.Extension]
                           (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc)
                           (Language.Haskell.Tools.AST.Ann.Ann
                              Language.Haskell.Tools.AST.Representation.Types.UTyVar
                              dom
                              Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   = f x
                 } in
                 (\ (r1 :: [GHC.LanguageExtensions.Type.Extension]) ->
                  let {
                    m2 :: Control.Monad.Trans.State.Lazy.StateT
                            (Data.Map.Base.Map
                               (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                               [SrcLoc.SrcSpan])
                            GhcMonad.Ghc
                            (Language.Haskell.Tools.AST.Ann.Ann
                               Language.Haskell.Tools.AST.Representation.Types.UTyVar
                               dom
                               Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                    = m1
                        `cast`
                      (Control.Monad.Trans.Reader.N:ReaderT[0]
                           <*>_N
                           <[GHC.LanguageExtensions.Type.Extension]>_R
                           <Control.Monad.Trans.State.Lazy.StateT
                              ExtMap.ExtMap GhcMonad.Ghc>_R
                           <Language.Haskell.Tools.AST.Ann.Ann
                              Language.Haskell.Tools.AST.Representation.Types.UTyVar
                              dom
                              Language.Haskell.Tools.AST.Ann.SrcTemplateStage>_N)
                        r1
                  } in
                  (\ (s1 :: Data.Map.Base.Map
                              (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                              [SrcLoc.SrcSpan]) ->
                   let {
                     m :: GhcMonad.Ghc
                            (Language.Haskell.Tools.AST.Ann.Ann
                               Language.Haskell.Tools.AST.Representation.Types.UTyVar
                               dom
                               Language.Haskell.Tools.AST.Ann.SrcTemplateStage,
                             Data.Map.Base.Map
                               (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                               [SrcLoc.SrcSpan])
                     = m2
                         `cast`
                       (Control.Monad.Trans.State.Lazy.N:StateT[0]
                            <Data.Map.Base.Map
                               (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                               [SrcLoc.SrcSpan]>_N
                            <GhcMonad.Ghc>_R
                            <Language.Haskell.Tools.AST.Ann.Ann
                               Language.Haskell.Tools.AST.Representation.Types.UTyVar
                               dom
                               Language.Haskell.Tools.AST.Ann.SrcTemplateStage>_N)
                         s1
                   } in
                   (\ (s :: GhcMonad.Session)
                      (s2 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                    case (m `cast`
                          (GhcMonad.N:Ghc[0]
                               <(Language.Haskell.Tools.AST.Ann.Ann
                                   Language.Haskell.Tools.AST.Representation.Types.UTyVar
                                   dom
                                   Language.Haskell.Tools.AST.Ann.SrcTemplateStage,
                                 Data.Map.Base.Map
                                   (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                                   [SrcLoc.SrcSpan])>_R)
                            s)
                           `cast`
                         (GHC.Types.N:IO[0]
                              <(Language.Haskell.Tools.AST.Ann.Ann
                                  Language.Haskell.Tools.AST.Representation.Types.UTyVar
                                  dom
                                  Language.Haskell.Tools.AST.Ann.SrcTemplateStage,
                                Data.Map.Base.Map
                                  (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                                  [SrcLoc.SrcSpan])>_R)
                           s2 of ds1 { (#,#) ipv ipv1 ->
                    ((((g (case ipv1 of wild { (,) a1 s' -> a1 }))
                         `cast`
                       (Control.Monad.Trans.Reader.N:ReaderT[0]
                            <*>_N
                            <[GHC.LanguageExtensions.Type.Extension]>_R
                            <Control.Monad.Trans.State.Lazy.StateT
                               ExtMap.ExtMap GhcMonad.Ghc>_R
                            <Language.Haskell.Tools.AST.Ann.Ann
                               Language.Haskell.Tools.AST.Representation.Types.UTyVar
                               dom
                               Language.Haskell.Tools.AST.Ann.SrcTemplateStage>_N)
                         r1)
                        `cast`
                      (Control.Monad.Trans.State.Lazy.N:StateT[0]
                           <Data.Map.Base.Map
                              (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                              [SrcLoc.SrcSpan]>_N
                           <GhcMonad.Ghc>_R
                           <Language.Haskell.Tools.AST.Ann.Ann
                              Language.Haskell.Tools.AST.Representation.Types.UTyVar
                              dom
                              Language.Haskell.Tools.AST.Ann.SrcTemplateStage>_N)
                        (case ipv1 of wild { (,) a1 s' -> s' }))
                       `cast`
                     (GhcMonad.N:Ghc[0]
                          <(Language.Haskell.Tools.AST.Ann.Ann
                              Language.Haskell.Tools.AST.Representation.Types.UTyVar
                              dom
                              Language.Haskell.Tools.AST.Ann.SrcTemplateStage,
                            Data.Map.Base.Map
                              (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                              [SrcLoc.SrcSpan])>_R)
                       s)
                      `cast`
                    (GHC.Types.N:IO[0]
                         <(Language.Haskell.Tools.AST.Ann.Ann
                             Language.Haskell.Tools.AST.Representation.Types.UTyVar
                             dom
                             Language.Haskell.Tools.AST.Ann.SrcTemplateStage,
                           Data.Map.Base.Map
                             (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                             [SrcLoc.SrcSpan])>_R)
                      ipv })
                     `cast`
                   (Trans
                        (<GhcMonad.Session>_R
                         ->_R Sym (GHC.Types.N:IO[0]
                                       <(Language.Haskell.Tools.AST.Ann.Ann
                                           Language.Haskell.Tools.AST.Representation.Types.UTyVar
                                           dom
                                           Language.Haskell.Tools.AST.Ann.SrcTemplateStage,
                                         Data.Map.Base.Map
                                           (ExtMap.LogicalRelation
                                              GHC.LanguageExtensions.Type.Extension)
                                           [SrcLoc.SrcSpan])>_R))
                        (Sym (GhcMonad.N:Ghc[0]
                                  <(Language.Haskell.Tools.AST.Ann.Ann
                                      Language.Haskell.Tools.AST.Representation.Types.UTyVar
                                      dom
                                      Language.Haskell.Tools.AST.Ann.SrcTemplateStage,
                                    Data.Map.Base.Map
                                      (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                                      [SrcLoc.SrcSpan])>_R))))
                    `cast`
                  (Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                            <Data.Map.Base.Map
                               (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                               [SrcLoc.SrcSpan]>_N
                            <GhcMonad.Ghc>_R
                            <Language.Haskell.Tools.AST.Ann.Ann
                               Language.Haskell.Tools.AST.Representation.Types.UTyVar
                               dom
                               Language.Haskell.Tools.AST.Ann.SrcTemplateStage>_N)))
                   `cast`
                 (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                           <*>_N
                           <[GHC.LanguageExtensions.Type.Extension]>_R
                           <Control.Monad.Trans.State.Lazy.StateT
                              ExtMap.ExtMap GhcMonad.Ghc>_R
                           <Language.Haskell.Tools.AST.Ann.Ann
                              Language.Haskell.Tools.AST.Representation.Types.UTyVar
                              dom
                              Language.Haskell.Tools.AST.Ann.SrcTemplateStage>_N)) }) -}
63ac95f09d7a781d40aed22973d4d8f0
  traverseTyVar1 ::
    Control.Reference.Representation.Reference
      (Control.Monad.Trans.Reader.ReaderT
         [GHC.LanguageExtensions.Type.Extension]
         (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc))
      Control.Reference.Representation.MU
      Control.Reference.Representation.MU
      Control.Reference.Representation.MU
      (Language.Haskell.Tools.AST.Ann.Ann
         Language.Haskell.Tools.AST.Representation.Types.UTyVar
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
      (Language.Haskell.Tools.AST.Ann.Ann
         Language.Haskell.Tools.AST.Representation.Types.UTyVar
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
      (Language.Haskell.Tools.AST.Ann.Ann
         Language.Haskell.Tools.AST.Representation.Kinds.UKindConstraint
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
      (Language.Haskell.Tools.AST.Ann.Ann
         Language.Haskell.Tools.AST.Representation.Kinds.UKindConstraint
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
  {- Unfolding: (\ @ dom ->
                 case Control.Reference.Combinators.$w&
                        @ (Control.Monad.Trans.Reader.ReaderT
                             [GHC.LanguageExtensions.Type.Extension]
                             (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc))
                        @ Control.Reference.Representation.MU
                        @ Control.Reference.Representation.MU
                        @ Control.Reference.Representation.MU
                        @ (Language.Haskell.Tools.AST.Ann.Ann
                             Language.Haskell.Tools.AST.Representation.Types.UTyVar
                             dom
                             Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                        @ (Language.Haskell.Tools.AST.Ann.Ann
                             Language.Haskell.Tools.AST.Representation.Types.UTyVar
                             dom
                             Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                        @ (Language.Haskell.Tools.AST.Ann.AnnMaybeG
                             Language.Haskell.Tools.AST.Representation.Kinds.UKindConstraint
                             dom
                             Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                        @ (Language.Haskell.Tools.AST.Ann.AnnMaybeG
                             Language.Haskell.Tools.AST.Representation.Kinds.UKindConstraint
                             dom
                             Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                        @ (Language.Haskell.Tools.AST.Ann.Ann
                             Language.Haskell.Tools.AST.Representation.Kinds.UKindConstraint
                             dom
                             Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                        @ (Language.Haskell.Tools.AST.Ann.Ann
                             Language.Haskell.Tools.AST.Representation.Kinds.UKindConstraint
                             dom
                             Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                        (TraverseAST.traverseTyVar3 @ dom)
                        (TraverseAST.traverseTyVar2
                           @ dom) of ww { (#,,,,,#) ww1 ww2 ww3 ww4 ww5 ww6 ->
                 Control.Reference.Representation.Reference
                   @ (Control.Monad.Trans.Reader.ReaderT
                        [GHC.LanguageExtensions.Type.Extension]
                        (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc))
                   @ Control.Reference.Representation.MU
                   @ Control.Reference.Representation.MU
                   @ Control.Reference.Representation.MU
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        Language.Haskell.Tools.AST.Representation.Types.UTyVar
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        Language.Haskell.Tools.AST.Representation.Types.UTyVar
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        Language.Haskell.Tools.AST.Representation.Kinds.UKindConstraint
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        Language.Haskell.Tools.AST.Representation.Kinds.UKindConstraint
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   ww1
                   ww2
                   ww3
                   ww4
                   ww5
                   ww6 }) -}
583d0a24e66c087386b9dfcc07b76951
  traverseTyVar2 ::
    Control.Reference.Representation.Reference
      (Control.Monad.Trans.Reader.ReaderT
         [GHC.LanguageExtensions.Type.Extension]
         (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc))
      Control.Reference.Representation.MU
      Control.Reference.Representation.MU
      Control.Reference.Representation.MU
      (Language.Haskell.Tools.AST.Ann.AnnMaybeG
         Language.Haskell.Tools.AST.Representation.Kinds.UKindConstraint
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
      (Language.Haskell.Tools.AST.Ann.AnnMaybeG
         Language.Haskell.Tools.AST.Representation.Kinds.UKindConstraint
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
      (Language.Haskell.Tools.AST.Ann.Ann
         Language.Haskell.Tools.AST.Representation.Kinds.UKindConstraint
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
      (Language.Haskell.Tools.AST.Ann.Ann
         Language.Haskell.Tools.AST.Representation.Kinds.UKindConstraint
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
  {- Unfolding: (\ @ dom ->
                 case Language.Haskell.Tools.AST.Ann.$wannJust
                        @ Language.Haskell.Tools.AST.Representation.Kinds.UKindConstraint
                        @ dom
                        @ Language.Haskell.Tools.AST.Ann.SrcTemplateStage
                        @ (Control.Monad.Trans.Reader.ReaderT
                             [GHC.LanguageExtensions.Type.Extension]
                             (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc))
                        @ Control.Reference.Representation.MU
                        (TraverseAST.$s$fApplicativeReaderT
                           @ [GHC.LanguageExtensions.Type.Extension])
                        (TraverseAST.$s$fMonadReaderT
                           @ [GHC.LanguageExtensions.Type.Extension])
                        Data.Proxy.$fApplicativeProxy
                        Data.Proxy.$fMonadPlusProxy
                        TraverseAST.$sannJust1
                          `cast`
                        (Sym (Control.Instances.Morph.N:Morph[0]
                                  <GHC.Base.Maybe>_N
                                  <Data.Proxy.Proxy>_N)) of ww { (#,,,,,#) ww1 ww2 ww3 ww4 ww5 ww6 ->
                 Control.Reference.Representation.Reference
                   @ (Control.Monad.Trans.Reader.ReaderT
                        [GHC.LanguageExtensions.Type.Extension]
                        (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc))
                   @ Control.Reference.Representation.MU
                   @ Control.Reference.Representation.MU
                   @ Control.Reference.Representation.MU
                   @ (Language.Haskell.Tools.AST.Ann.AnnMaybeG
                        Language.Haskell.Tools.AST.Representation.Kinds.UKindConstraint
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   @ (Language.Haskell.Tools.AST.Ann.AnnMaybeG
                        Language.Haskell.Tools.AST.Representation.Kinds.UKindConstraint
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        Language.Haskell.Tools.AST.Representation.Kinds.UKindConstraint
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        Language.Haskell.Tools.AST.Representation.Kinds.UKindConstraint
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   ww1
                   ww2
                   ww3
                   ww4
                   ww5
                   ww6 }) -}
fe33985b9de20a456e09cdb587861b66
  traverseTyVar3 ::
    Control.Reference.Representation.Reference
      (Control.Monad.Trans.Reader.ReaderT
         [GHC.LanguageExtensions.Type.Extension]
         (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc))
      Control.Reference.Representation.MU
      Control.Reference.Representation.MU
      Control.Reference.Representation.MU
      (Language.Haskell.Tools.AST.Ann.Ann
         Language.Haskell.Tools.AST.Representation.Types.UTyVar
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
      (Language.Haskell.Tools.AST.Ann.Ann
         Language.Haskell.Tools.AST.Representation.Types.UTyVar
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
      (Language.Haskell.Tools.AST.Ann.AnnMaybeG
         Language.Haskell.Tools.AST.Representation.Kinds.UKindConstraint
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
      (Language.Haskell.Tools.AST.Ann.AnnMaybeG
         Language.Haskell.Tools.AST.Representation.Kinds.UKindConstraint
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
  {- Unfolding: (\ @ dom ->
                 case Language.Haskell.Tools.AST.References.$wtyVarKind
                        @ dom
                        @ Language.Haskell.Tools.AST.Ann.SrcTemplateStage
                        @ (Control.Monad.Trans.Reader.ReaderT
                             [GHC.LanguageExtensions.Type.Extension]
                             (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc))
                        @ Control.Reference.Representation.MU
                        TraverseAST.$s$fRefMonadswr of ww { (#,,,,,#) ww1 ww2 ww3 ww4 ww5 ww6 ->
                 Control.Reference.Representation.Reference
                   @ (Control.Monad.Trans.Reader.ReaderT
                        [GHC.LanguageExtensions.Type.Extension]
                        (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc))
                   @ Control.Reference.Representation.MU
                   @ Control.Reference.Representation.MU
                   @ Control.Reference.Representation.MU
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        Language.Haskell.Tools.AST.Representation.Types.UTyVar
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        Language.Haskell.Tools.AST.Representation.Types.UTyVar
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   @ (Language.Haskell.Tools.AST.Ann.AnnMaybeG
                        Language.Haskell.Tools.AST.Representation.Kinds.UKindConstraint
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   @ (Language.Haskell.Tools.AST.Ann.AnnMaybeG
                        Language.Haskell.Tools.AST.Representation.Kinds.UKindConstraint
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   ww1
                   ww2
                   ww3
                   ww4
                   ww5
                   ww6 }) -}
11e75e455d0a769de0db6bfc1a95b4a2
  traverseTyVar4 ::
    Control.Reference.Representation.Reference
      (Control.Monad.Trans.Reader.ReaderT
         [GHC.LanguageExtensions.Type.Extension]
         (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc))
      Control.Reference.Representation.MU
      Control.Reference.Representation.MU
      Control.Reference.Representation.MU
      (Language.Haskell.Tools.AST.Ann.Ann
         Language.Haskell.Tools.AST.Representation.Types.UTyVar
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
      (Language.Haskell.Tools.AST.Ann.Ann
         Language.Haskell.Tools.AST.Representation.Types.UTyVar
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
      (Language.Haskell.Tools.AST.Ann.Ann
         Language.Haskell.Tools.AST.Representation.Names.UName
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
      (Language.Haskell.Tools.AST.Ann.Ann
         Language.Haskell.Tools.AST.Representation.Names.UName
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
  {- Unfolding: (\ @ dom ->
                 case Language.Haskell.Tools.AST.References.$wtyVarName
                        @ dom
                        @ Language.Haskell.Tools.AST.Ann.SrcTemplateStage
                        @ (Control.Monad.Trans.Reader.ReaderT
                             [GHC.LanguageExtensions.Type.Extension]
                             (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc))
                        @ Control.Reference.Representation.MU
                        TraverseAST.$s$fRefMonadswr of ww { (#,,,,,#) ww1 ww2 ww3 ww4 ww5 ww6 ->
                 Control.Reference.Representation.Reference
                   @ (Control.Monad.Trans.Reader.ReaderT
                        [GHC.LanguageExtensions.Type.Extension]
                        (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc))
                   @ Control.Reference.Representation.MU
                   @ Control.Reference.Representation.MU
                   @ Control.Reference.Representation.MU
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        Language.Haskell.Tools.AST.Representation.Types.UTyVar
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        Language.Haskell.Tools.AST.Representation.Types.UTyVar
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        Language.Haskell.Tools.AST.Representation.Names.UName
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        Language.Haskell.Tools.AST.Representation.Names.UName
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   ww1
                   ww2
                   ww3
                   ww4
                   ww5
                   ww6 }) -}
27db4fc42bed4f841746bce170ae6039
  traverseType ::
    ExtMonad.CheckNode Language.Haskell.Tools.AST.ElementTypes.Type
  {- Arity: 1,
     Strictness: <S(S(LLS(S)LLLLLLLLLL)L),U(U(U,U,U(U),U,U,U,U,U,U,U,U,U,U),U)> -}
e3e2430065ff6af51ba4bd69287c988b
  traverseTypeEqn ::
    ExtMonad.CheckNode Language.Haskell.Tools.AST.ElementTypes.TypeEqn
  {- Arity: 1,
     Strictness: <S(S(LLS(S)LLLLLLLLLL)L),U(U(U,U,U(U),U,U,U,U,U,U,U,U,U,U),U)>,
     Unfolding: (\ @ dom ($d(%,%) :: ExtMonad.ExtDomain dom) ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Language.Haskell.Tools.AST.Ann.SemanticInfo'
                             dom Language.Haskell.Tools.AST.Ann.SameInfoDefaultCls)
                        @ Language.Haskell.Tools.AST.SemaInfoTypes.NoSemanticInfo
                        (Language.Haskell.Tools.AST.Ann.$p3Domain
                           @ dom
                           (GHC.Classes.$p1(%,%)
                              @ (Language.Haskell.Tools.AST.Ann.Domain dom)
                              @ (Language.Haskell.Tools.AST.SemaInfoClasses.HasNameInfo'
                                   (Language.Haskell.Tools.AST.Ann.SemanticInfo
                                      dom
                                      Language.Haskell.Tools.AST.Representation.Names.UQualifiedName))
                              $d(%,%)))
                          `cast`
                        (Data.Type.Equality.N:~[0]
                             <*>_N <Language.Haskell.Tools.AST.Ann.SemanticInfo'
                                      dom
                                      Language.Haskell.Tools.AST.Ann.SameInfoDefaultCls>_N <Language.Haskell.Tools.AST.SemaInfoTypes.NoSemanticInfo>_N) of cobox0 { DEFAULT ->
                 case TraverseAST.traverseTypeEqn1
                        @ dom of wild { Control.Reference.Representation.Reference ds1 ds2 ds3 ds4 ds5 ds6 ->
                 ds3 (TraverseAST.traverseType @ dom $d(%,%)) } }) -}
ac056136f693062af95073aab85c96d5
  traverseTypeEqn1 ::
    Control.Reference.Representation.Reference
      (Control.Monad.Trans.Reader.ReaderT
         [GHC.LanguageExtensions.Type.Extension]
         (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc))
      Control.Reference.Representation.MU
      Control.Reference.Representation.MU
      Control.Reference.Representation.MU
      (Language.Haskell.Tools.AST.Ann.Ann
         Language.Haskell.Tools.AST.Representation.Decls.UTypeEqn
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
      (Language.Haskell.Tools.AST.Ann.Ann
         Language.Haskell.Tools.AST.Representation.Decls.UTypeEqn
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
      (Language.Haskell.Tools.AST.Ann.Ann
         Language.Haskell.Tools.AST.Representation.Types.UType
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
      (Language.Haskell.Tools.AST.Ann.Ann
         Language.Haskell.Tools.AST.Representation.Types.UType
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
  {- Unfolding: (\ @ dom ->
                 case Control.Reference.Combinators.$w&+&
                        @ (Control.Monad.Trans.Reader.ReaderT
                             [GHC.LanguageExtensions.Type.Extension]
                             (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc))
                        @ Control.Reference.Representation.MU
                        @ Control.Reference.Representation.MU
                        @ Control.Reference.Representation.MU
                        @ (Language.Haskell.Tools.AST.Ann.Ann
                             Language.Haskell.Tools.AST.Representation.Decls.UTypeEqn
                             dom
                             Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                        @ (Language.Haskell.Tools.AST.Ann.Ann
                             Language.Haskell.Tools.AST.Representation.Types.UType
                             dom
                             Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                        TraverseAST.$s$fRefMonadswr
                        Control.Reference.Predefined.Containers.Tree.$s$fRefMonadswr1
                        Data.Proxy.$fMonadPlusProxy
                        Data.Proxy.$fMonadPlusProxy
                        (TraverseAST.traverseTypeEqn3 @ dom)
                        (TraverseAST.traverseTypeEqn2
                           @ dom) of ww { (#,,,,,#) ww1 ww2 ww3 ww4 ww5 ww6 ->
                 Control.Reference.Representation.Reference
                   @ (Control.Monad.Trans.Reader.ReaderT
                        [GHC.LanguageExtensions.Type.Extension]
                        (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc))
                   @ Control.Reference.Representation.MU
                   @ Control.Reference.Representation.MU
                   @ Control.Reference.Representation.MU
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        Language.Haskell.Tools.AST.Representation.Decls.UTypeEqn
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        Language.Haskell.Tools.AST.Representation.Decls.UTypeEqn
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        Language.Haskell.Tools.AST.Representation.Types.UType
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        Language.Haskell.Tools.AST.Representation.Types.UType
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   ww1
                   ww2
                   ww3
                   ww4
                   ww5
                   ww6 }) -}
9040a04ffed9e04fa99deb34a254d7e1
  traverseTypeEqn2 ::
    Control.Reference.Representation.Reference
      (Control.Monad.Trans.Reader.ReaderT
         [GHC.LanguageExtensions.Type.Extension]
         (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc))
      Control.Reference.Representation.MU
      Control.Reference.Representation.MU
      Control.Reference.Representation.MU
      (Language.Haskell.Tools.AST.Ann.Ann
         Language.Haskell.Tools.AST.Representation.Decls.UTypeEqn
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
      (Language.Haskell.Tools.AST.Ann.Ann
         Language.Haskell.Tools.AST.Representation.Decls.UTypeEqn
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
      (Language.Haskell.Tools.AST.Ann.Ann
         Language.Haskell.Tools.AST.Representation.Types.UType
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
      (Language.Haskell.Tools.AST.Ann.Ann
         Language.Haskell.Tools.AST.Representation.Types.UType
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
  {- Unfolding: (\ @ dom ->
                 case Language.Haskell.Tools.AST.References.$wteRhs
                        @ dom
                        @ Language.Haskell.Tools.AST.Ann.SrcTemplateStage
                        @ (Control.Monad.Trans.Reader.ReaderT
                             [GHC.LanguageExtensions.Type.Extension]
                             (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc))
                        @ Control.Reference.Representation.MU
                        TraverseAST.$s$fRefMonadswr of ww { (#,,,,,#) ww1 ww2 ww3 ww4 ww5 ww6 ->
                 Control.Reference.Representation.Reference
                   @ (Control.Monad.Trans.Reader.ReaderT
                        [GHC.LanguageExtensions.Type.Extension]
                        (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc))
                   @ Control.Reference.Representation.MU
                   @ Control.Reference.Representation.MU
                   @ Control.Reference.Representation.MU
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        Language.Haskell.Tools.AST.Representation.Decls.UTypeEqn
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        Language.Haskell.Tools.AST.Representation.Decls.UTypeEqn
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        Language.Haskell.Tools.AST.Representation.Types.UType
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        Language.Haskell.Tools.AST.Representation.Types.UType
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   ww1
                   ww2
                   ww3
                   ww4
                   ww5
                   ww6 }) -}
b6e3dec7905c1361f878ae923b9f0039
  traverseTypeEqn3 ::
    Control.Reference.Representation.Reference
      (Control.Monad.Trans.Reader.ReaderT
         [GHC.LanguageExtensions.Type.Extension]
         (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc))
      Control.Reference.Representation.MU
      Control.Reference.Representation.MU
      Control.Reference.Representation.MU
      (Language.Haskell.Tools.AST.Ann.Ann
         Language.Haskell.Tools.AST.Representation.Decls.UTypeEqn
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
      (Language.Haskell.Tools.AST.Ann.Ann
         Language.Haskell.Tools.AST.Representation.Decls.UTypeEqn
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
      (Language.Haskell.Tools.AST.Ann.Ann
         Language.Haskell.Tools.AST.Representation.Types.UType
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
      (Language.Haskell.Tools.AST.Ann.Ann
         Language.Haskell.Tools.AST.Representation.Types.UType
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
  {- Unfolding: (\ @ dom ->
                 case Language.Haskell.Tools.AST.References.$wteLhs
                        @ dom
                        @ Language.Haskell.Tools.AST.Ann.SrcTemplateStage
                        @ (Control.Monad.Trans.Reader.ReaderT
                             [GHC.LanguageExtensions.Type.Extension]
                             (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc))
                        @ Control.Reference.Representation.MU
                        TraverseAST.$s$fRefMonadswr of ww { (#,,,,,#) ww1 ww2 ww3 ww4 ww5 ww6 ->
                 Control.Reference.Representation.Reference
                   @ (Control.Monad.Trans.Reader.ReaderT
                        [GHC.LanguageExtensions.Type.Extension]
                        (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc))
                   @ Control.Reference.Representation.MU
                   @ Control.Reference.Representation.MU
                   @ Control.Reference.Representation.MU
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        Language.Haskell.Tools.AST.Representation.Decls.UTypeEqn
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        Language.Haskell.Tools.AST.Representation.Decls.UTypeEqn
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        Language.Haskell.Tools.AST.Representation.Types.UType
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        Language.Haskell.Tools.AST.Representation.Types.UType
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   ww1
                   ww2
                   ww3
                   ww4
                   ww5
                   ww6 }) -}
a84e52479ba48ceefd1a3e1b1327fa47
  traverseTypeSignature ::
    ExtMonad.CheckNode
      Language.Haskell.Tools.AST.ElementTypes.TypeSignature
  {- Arity: 6, HasNoCafRefs,
     Strictness: <S(S(LLS(S)LLLLLLLLLL)L),1*U(1*U(A,A,1*U(1*U),A,A,A,A,A,A,A,A,A,A),A)><L,U><L,A><L,U><L,A><S,U>,
     Unfolding: InlineRule (0, True, True)
                TraverseAST.traverseInstBodyDecl3
                  `cast`
                (forall (dom :: <*>_N).
                 <ExtMonad.ExtDomain dom>_R
                 ->_R <Language.Haskell.Tools.AST.ElementTypes.TypeSignature dom>_R
                 ->_R Trans
                          (<[GHC.LanguageExtensions.Type.Extension]>_R
                           ->_R Trans
                                    (<ExtMap.ExtMap>_R
                                     ->_R Trans
                                              (<GhcMonad.Session>_R
                                               ->_R Sym (GHC.Types.N:IO[0]
                                                             <(Language.Haskell.Tools.AST.ElementTypes.TypeSignature
                                                                 dom,
                                                               ExtMap.ExtMap)>_R))
                                              (Sym (GhcMonad.N:Ghc[0]
                                                        <(Language.Haskell.Tools.AST.ElementTypes.TypeSignature
                                                            dom,
                                                          ExtMap.ExtMap)>_R)))
                                    (Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                              <ExtMap.ExtMap>_N
                                              <GhcMonad.Ghc>_R
                                              <Language.Haskell.Tools.AST.ElementTypes.TypeSignature
                                                 dom>_N)))
                          (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                    <*>_N
                                    <[GHC.LanguageExtensions.Type.Extension]>_R
                                    <Control.Monad.Trans.State.Lazy.StateT
                                       ExtMap.ExtMap GhcMonad.Ghc>_R
                                    <Language.Haskell.Tools.AST.ElementTypes.TypeSignature
                                       dom>_N))) -}
d4572205d33af96baf47cc77d0828ae7
  traverseValueBind ::
    ExtMonad.CheckNode
      Language.Haskell.Tools.AST.ElementTypes.ValueBind
  {- Arity: 1,
     Strictness: <S(S(LLS(S)LLLLLLLLLL)L),U(U(U,U,U(U),U,U,U,U,U,U,U,U,U,U),U)> -}
"SPEC/TraverseAST $fApplicativeReaderT @ (StateT ExtMap Ghc) _" [ALWAYS] forall @ r
                                                                                ($dApplicative :: GHC.Base.Applicative
                                                                                                    (Control.Monad.Trans.State.Lazy.StateT
                                                                                                       ExtMap.ExtMap
                                                                                                       GhcMonad.Ghc))
  Control.Monad.Trans.Reader.$fApplicativeReaderT @ (Control.Monad.Trans.State.Lazy.StateT
                                                       ExtMap.ExtMap GhcMonad.Ghc)
                                                  @ r
                                                  $dApplicative
  = TraverseAST.$s$fApplicativeReaderT @ r
"SPEC/TraverseAST $fApplicativeStateT @ Ghc _" [ALWAYS] forall @ s
                                                               ($dMonad :: GHC.Base.Monad
                                                                             GhcMonad.Ghc)
                                                               ($dFunctor :: GHC.Base.Functor
                                                                               GhcMonad.Ghc)
  Control.Monad.Trans.State.Lazy.$fApplicativeStateT @ GhcMonad.Ghc
                                                     @ s
                                                     $dFunctor
                                                     $dMonad
  = TraverseAST.$s$fApplicativeReaderT_$s$fApplicativeStateT @ s
"SPEC/TraverseAST $fApplicativeStateT_$c<*> @ Ghc _" [ALWAYS] forall @ s
                                                                     ($dMonad :: GHC.Base.Monad
                                                                                   GhcMonad.Ghc)
                                                                     ($dFunctor :: GHC.Base.Functor
                                                                                     GhcMonad.Ghc)
  Control.Monad.Trans.State.Lazy.$fApplicativeStateT_$c<*> @ GhcMonad.Ghc
                                                           @ s
                                                           $dFunctor
                                                           $dMonad
  = TraverseAST.$s$fApplicativeReaderT_$s$fApplicativeStateT_$c<*>
      @ s
"SPEC/TraverseAST $fApplicativeStateT_$cp1Applicative @ Ghc _" [ALWAYS] forall @ s
                                                                               ($dMonad :: GHC.Base.Monad
                                                                                             GhcMonad.Ghc)
                                                                               ($dFunctor :: GHC.Base.Functor
                                                                                               GhcMonad.Ghc)
  Control.Monad.Trans.State.Lazy.$fApplicativeStateT_$cp1Applicative @ GhcMonad.Ghc
                                                                     @ s
                                                                     $dFunctor
                                                                     $dMonad
  = TraverseAST.$s$fApplicativeReaderT_$s$fApplicativeStateT_$cp1Applicative
      @ s
"SPEC/TraverseAST $fApplicativeStateT_$cpure @ Ghc _" [ALWAYS] forall @ s
                                                                      ($dMonad :: GHC.Base.Monad
                                                                                    GhcMonad.Ghc)
                                                                      ($dFunctor :: GHC.Base.Functor
                                                                                      GhcMonad.Ghc)
  Control.Monad.Trans.State.Lazy.$fApplicativeStateT_$cpure @ GhcMonad.Ghc
                                                            @ s
                                                            $dFunctor
                                                            $dMonad
  = TraverseAST.$s$fApplicativeReaderT_$s$fApplicativeStateT_$cpure
      @ s
"SPEC/TraverseAST $fFunctorReaderT @ (StateT ExtMap Ghc) _" [ALWAYS] forall @ r
                                                                            ($dFunctor :: GHC.Base.Functor
                                                                                            (Control.Monad.Trans.State.Lazy.StateT
                                                                                               ExtMap.ExtMap
                                                                                               GhcMonad.Ghc))
  Control.Monad.Trans.Reader.$fFunctorReaderT @ (Control.Monad.Trans.State.Lazy.StateT
                                                   ExtMap.ExtMap GhcMonad.Ghc)
                                              @ r
                                              $dFunctor
  = TraverseAST.$s$fFunctorReaderT @ r
"SPEC/TraverseAST $fFunctorStateT @ Ghc _" [ALWAYS] forall @ s
                                                           ($dFunctor :: GHC.Base.Functor
                                                                           GhcMonad.Ghc)
  Control.Monad.Trans.State.Lazy.$fFunctorStateT @ GhcMonad.Ghc
                                                 @ s
                                                 $dFunctor
  = TraverseAST.$s$fApplicativeReaderT_$s$fFunctorStateT @ s
"SPEC/TraverseAST $fFunctorStateT_$cfmap @ Ghc _" [ALWAYS] forall @ s
                                                                  ($dFunctor :: GHC.Base.Functor
                                                                                  GhcMonad.Ghc)
  Control.Monad.Trans.State.Lazy.$fFunctorStateT_$cfmap @ GhcMonad.Ghc
                                                        @ s
                                                        $dFunctor
  = TraverseAST.$s$fApplicativeReaderT_$s$fFunctorStateT_$cfmap @ s
"SPEC/TraverseAST $fMonadReaderT @ (StateT ExtMap Ghc) _" [ALWAYS] forall @ r
                                                                          ($dMonad :: GHC.Base.Monad
                                                                                        (Control.Monad.Trans.State.Lazy.StateT
                                                                                           ExtMap.ExtMap
                                                                                           GhcMonad.Ghc))
  Control.Monad.Trans.Reader.$fMonadReaderT @ (Control.Monad.Trans.State.Lazy.StateT
                                                 ExtMap.ExtMap GhcMonad.Ghc)
                                            @ r
                                            $dMonad
  = TraverseAST.$s$fMonadReaderT @ r
"SPEC/TraverseAST $fMonadReaderT_$creturn @ (StateT ExtMap Ghc) _" [ALWAYS] forall @ r
                                                                                   ($dMonad :: GHC.Base.Monad
                                                                                                 (Control.Monad.Trans.State.Lazy.StateT
                                                                                                    ExtMap.ExtMap
                                                                                                    GhcMonad.Ghc))
  Control.Monad.Trans.Reader.$fMonadReaderT_$creturn @ (Control.Monad.Trans.State.Lazy.StateT
                                                          ExtMap.ExtMap GhcMonad.Ghc)
                                                     @ r
                                                     $dMonad
  = TraverseAST.$s$fMonadReaderT_$s$fMonadReaderT_$creturn @ r
"SPEC/TraverseAST $fMonadStateT @ Ghc _" [ALWAYS] forall @ s
                                                         ($dMonad :: GHC.Base.Monad GhcMonad.Ghc)
  Control.Monad.Trans.State.Lazy.$fMonadStateT @ GhcMonad.Ghc
                                               @ s
                                               $dMonad
  = TraverseAST.$s$fMonadReaderT_$s$fMonadStateT @ s
"SPEC/TraverseAST $fMonadStateT_$c>> @ Ghc _" [ALWAYS] forall @ s
                                                              ($dMonad :: GHC.Base.Monad
                                                                            GhcMonad.Ghc)
  Control.Monad.Trans.State.Lazy.$fMonadStateT_$c>> @ GhcMonad.Ghc
                                                    @ s
                                                    $dMonad
  = TraverseAST.$s$fMonadReaderT_$s$fMonadStateT_$c>> @ s
"SPEC/TraverseAST $fMonadStateT_$c>>= @ Ghc _" [ALWAYS] forall @ s
                                                               ($dMonad :: GHC.Base.Monad
                                                                             GhcMonad.Ghc)
  Control.Monad.Trans.State.Lazy.$fMonadStateT_$c>>= @ GhcMonad.Ghc
                                                     @ s
                                                     $dMonad
  = TraverseAST.$s$fMonadReaderT_$s$fMonadStateT_$c>>= @ s
"SPEC/TraverseAST $fMonadStateT_$cfail @ Ghc _" [ALWAYS] forall @ s
                                                                ($dMonad :: GHC.Base.Monad
                                                                              GhcMonad.Ghc)
  Control.Monad.Trans.State.Lazy.$fMonadStateT_$cfail @ GhcMonad.Ghc
                                                      @ s
                                                      $dMonad
  = TraverseAST.$s$fMonadReaderT_$s$fMonadStateT_$cfail @ s
"SPEC/TraverseAST $fMonadStateT_$cp1Monad @ Ghc _" [ALWAYS] forall @ s
                                                                   ($dMonad :: GHC.Base.Monad
                                                                                 GhcMonad.Ghc)
  Control.Monad.Trans.State.Lazy.$fMonadStateT_$cp1Monad @ GhcMonad.Ghc
                                                         @ s
                                                         $dMonad
  = TraverseAST.$s$fMonadReaderT_$s$fMonadStateT_$cp1Monad @ s
"SPEC/TraverseAST $fRefMonadswr @ (ReaderT
                                    [Extension] (StateT ExtMap Ghc)) @ Proxy" [ALWAYS] forall ($dMonad1 :: GHC.Base.Monad
                                                                                                                                                        Data.Proxy.Proxy)
                                                                                                                                         ($dApplicative1 :: GHC.Base.Applicative
                                                                                                                                                              Data.Proxy.Proxy)
                                                                                                                                         ($dFunctor1 :: GHC.Base.Functor
                                                                                                                                                          Data.Proxy.Proxy)
                                                                                                                                         ($dMonad :: GHC.Base.Monad
                                                                                                                                                       (Control.Monad.Trans.Reader.ReaderT
                                                                                                                                                          [GHC.LanguageExtensions.Type.Extension]
                                                                                                                                                          (Control.Monad.Trans.State.Lazy.StateT
                                                                                                                                                             ExtMap.ExtMap
                                                                                                                                                             GhcMonad.Ghc)))
                                                                                                                                         ($dApplicative :: GHC.Base.Applicative
                                                                                                                                                             (Control.Monad.Trans.Reader.ReaderT
                                                                                                                                                                [GHC.LanguageExtensions.Type.Extension]
                                                                                                                                                                (Control.Monad.Trans.State.Lazy.StateT
                                                                                                                                                                   ExtMap.ExtMap
                                                                                                                                                                   GhcMonad.Ghc)))
                                                                                                                                         ($dFunctor :: GHC.Base.Functor
                                                                                                                                                         (Control.Monad.Trans.Reader.ReaderT
                                                                                                                                                            [GHC.LanguageExtensions.Type.Extension]
                                                                                                                                                            (Control.Monad.Trans.State.Lazy.StateT
                                                                                                                                                               ExtMap.ExtMap
                                                                                                                                                               GhcMonad.Ghc)))
  Control.Reference.Representation.$fRefMonadswr @ (Control.Monad.Trans.Reader.ReaderT
                                                      [GHC.LanguageExtensions.Type.Extension]
                                                      (Control.Monad.Trans.State.Lazy.StateT
                                                         ExtMap.ExtMap GhcMonad.Ghc))
                                                 @ Data.Proxy.Proxy
                                                 $dFunctor
                                                 $dApplicative
                                                 $dMonad
                                                 $dFunctor1
                                                 $dApplicative1
                                                 $dMonad1
  = TraverseAST.$s$fRefMonadswr
"SPEC/TraverseAST $fRefMonadswr_$cp4RefMonads @ (ReaderT
                                                  [Extension] (StateT ExtMap Ghc)) @ Proxy" [ALWAYS] forall ($dMonad1 :: GHC.Base.Monad
                                                                                                                                                                                    Data.Proxy.Proxy)
                                                                                                                                                                     ($dApplicative1 :: GHC.Base.Applicative
                                                                                                                                                                                          Data.Proxy.Proxy)
                                                                                                                                                                     ($dFunctor1 :: GHC.Base.Functor
                                                                                                                                                                                      Data.Proxy.Proxy)
                                                                                                                                                                     ($dMonad :: GHC.Base.Monad
                                                                                                                                                                                   (Control.Monad.Trans.Reader.ReaderT
                                                                                                                                                                                      [GHC.LanguageExtensions.Type.Extension]
                                                                                                                                                                                      (Control.Monad.Trans.State.Lazy.StateT
                                                                                                                                                                                         ExtMap.ExtMap
                                                                                                                                                                                         GhcMonad.Ghc)))
                                                                                                                                                                     ($dApplicative :: GHC.Base.Applicative
                                                                                                                                                                                         (Control.Monad.Trans.Reader.ReaderT
                                                                                                                                                                                            [GHC.LanguageExtensions.Type.Extension]
                                                                                                                                                                                            (Control.Monad.Trans.State.Lazy.StateT
                                                                                                                                                                                               ExtMap.ExtMap
                                                                                                                                                                                               GhcMonad.Ghc)))
                                                                                                                                                                     ($dFunctor :: GHC.Base.Functor
                                                                                                                                                                                     (Control.Monad.Trans.Reader.ReaderT
                                                                                                                                                                                        [GHC.LanguageExtensions.Type.Extension]
                                                                                                                                                                                        (Control.Monad.Trans.State.Lazy.StateT
                                                                                                                                                                                           ExtMap.ExtMap
                                                                                                                                                                                           GhcMonad.Ghc)))
  Control.Reference.Representation.$fRefMonadswr_$cp4RefMonads @ (Control.Monad.Trans.Reader.ReaderT
                                                                    [GHC.LanguageExtensions.Type.Extension]
                                                                    (Control.Monad.Trans.State.Lazy.StateT
                                                                       ExtMap.ExtMap GhcMonad.Ghc))
                                                               @ Data.Proxy.Proxy
                                                               $dFunctor
                                                               $dApplicative
                                                               $dMonad
                                                               $dFunctor1
                                                               $dApplicative1
                                                               $dMonad1
  = TraverseAST.$s$fRefMonadswr_$s$fRefMonadswr_$cp4RefMonads
"SPEC/TraverseAST $fRefMonadswr_$cp5RefMonads @ (ReaderT
                                                  [Extension] (StateT ExtMap Ghc)) @ Proxy" [ALWAYS] forall ($dMonad1 :: GHC.Base.Monad
                                                                                                                                                                                    Data.Proxy.Proxy)
                                                                                                                                                                     ($dApplicative1 :: GHC.Base.Applicative
                                                                                                                                                                                          Data.Proxy.Proxy)
                                                                                                                                                                     ($dFunctor1 :: GHC.Base.Functor
                                                                                                                                                                                      Data.Proxy.Proxy)
                                                                                                                                                                     ($dMonad :: GHC.Base.Monad
                                                                                                                                                                                   (Control.Monad.Trans.Reader.ReaderT
                                                                                                                                                                                      [GHC.LanguageExtensions.Type.Extension]
                                                                                                                                                                                      (Control.Monad.Trans.State.Lazy.StateT
                                                                                                                                                                                         ExtMap.ExtMap
                                                                                                                                                                                         GhcMonad.Ghc)))
                                                                                                                                                                     ($dApplicative :: GHC.Base.Applicative
                                                                                                                                                                                         (Control.Monad.Trans.Reader.ReaderT
                                                                                                                                                                                            [GHC.LanguageExtensions.Type.Extension]
                                                                                                                                                                                            (Control.Monad.Trans.State.Lazy.StateT
                                                                                                                                                                                               ExtMap.ExtMap
                                                                                                                                                                                               GhcMonad.Ghc)))
                                                                                                                                                                     ($dFunctor :: GHC.Base.Functor
                                                                                                                                                                                     (Control.Monad.Trans.Reader.ReaderT
                                                                                                                                                                                        [GHC.LanguageExtensions.Type.Extension]
                                                                                                                                                                                        (Control.Monad.Trans.State.Lazy.StateT
                                                                                                                                                                                           ExtMap.ExtMap
                                                                                                                                                                                           GhcMonad.Ghc)))
  Control.Reference.Representation.$fRefMonadswr_$cp5RefMonads @ (Control.Monad.Trans.Reader.ReaderT
                                                                    [GHC.LanguageExtensions.Type.Extension]
                                                                    (Control.Monad.Trans.State.Lazy.StateT
                                                                       ExtMap.ExtMap GhcMonad.Ghc))
                                                               @ Data.Proxy.Proxy
                                                               $dFunctor
                                                               $dApplicative
                                                               $dMonad
                                                               $dFunctor1
                                                               $dApplicative1
                                                               $dMonad1
  = TraverseAST.$s$fRefMonadswr_$s$fRefMonadswr_$cp5RefMonads
"SPEC/TraverseAST $fRefMonadswr_$cp6RefMonads @ (ReaderT
                                                  [Extension] (StateT ExtMap Ghc)) @ Proxy" [ALWAYS] forall ($dMonad1 :: GHC.Base.Monad
                                                                                                                                                                                    Data.Proxy.Proxy)
                                                                                                                                                                     ($dApplicative1 :: GHC.Base.Applicative
                                                                                                                                                                                          Data.Proxy.Proxy)
                                                                                                                                                                     ($dFunctor1 :: GHC.Base.Functor
                                                                                                                                                                                      Data.Proxy.Proxy)
                                                                                                                                                                     ($dMonad :: GHC.Base.Monad
                                                                                                                                                                                   (Control.Monad.Trans.Reader.ReaderT
                                                                                                                                                                                      [GHC.LanguageExtensions.Type.Extension]
                                                                                                                                                                                      (Control.Monad.Trans.State.Lazy.StateT
                                                                                                                                                                                         ExtMap.ExtMap
                                                                                                                                                                                         GhcMonad.Ghc)))
                                                                                                                                                                     ($dApplicative :: GHC.Base.Applicative
                                                                                                                                                                                         (Control.Monad.Trans.Reader.ReaderT
                                                                                                                                                                                            [GHC.LanguageExtensions.Type.Extension]
                                                                                                                                                                                            (Control.Monad.Trans.State.Lazy.StateT
                                                                                                                                                                                               ExtMap.ExtMap
                                                                                                                                                                                               GhcMonad.Ghc)))
                                                                                                                                                                     ($dFunctor :: GHC.Base.Functor
                                                                                                                                                                                     (Control.Monad.Trans.Reader.ReaderT
                                                                                                                                                                                        [GHC.LanguageExtensions.Type.Extension]
                                                                                                                                                                                        (Control.Monad.Trans.State.Lazy.StateT
                                                                                                                                                                                           ExtMap.ExtMap
                                                                                                                                                                                           GhcMonad.Ghc)))
  Control.Reference.Representation.$fRefMonadswr_$cp6RefMonads @ (Control.Monad.Trans.Reader.ReaderT
                                                                    [GHC.LanguageExtensions.Type.Extension]
                                                                    (Control.Monad.Trans.State.Lazy.StateT
                                                                       ExtMap.ExtMap GhcMonad.Ghc))
                                                               @ Data.Proxy.Proxy
                                                               $dFunctor
                                                               $dApplicative
                                                               $dMonad
                                                               $dFunctor1
                                                               $dApplicative1
                                                               $dMonad1
  = TraverseAST.$s$fRefMonadswr_$s$fRefMonadswr_$cp6RefMonads
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

