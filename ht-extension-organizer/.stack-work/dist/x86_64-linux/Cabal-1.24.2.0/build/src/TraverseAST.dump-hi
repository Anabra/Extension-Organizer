
==================== FINAL INTERFACE ====================
2017-09-19 19:50:25.784306 UTC

interface ht-extension-organizer-0.1.0.0-y3uypH7gCtA60AaWeuyZL:TraverseAST 8002
  interface hash: 8f085e17b77aaa8cdffb77cf9c3158b6
  ABI hash: 270d4e7613c05c6f818621402852cc2c
  export-list hash: a169f679eeb64a0a94954f2e93aaf92b
  orphan hash: 37d5cf4cb553bd93b8502cbf01a3fdd0
  flag hash: 1b6e0e485aafb528ac0398d1e3625507
  sig of: Nothing
  used TH splices: False
  where
exports:
  Control.Monad.<$!>
  Control.Monad.<=<
  Control.Monad.>=>
  Control.Monad.filterM
  Control.Monad.foldM
  Control.Monad.foldM_
  Control.Monad.forever
  Control.Monad.guard
  Control.Monad.mapAndUnzipM
  Control.Monad.mfilter
  Control.Monad.replicateM
  Control.Monad.replicateM_
  Control.Monad.unless
  Control.Monad.zipWithM
  Control.Monad.zipWithM_
  Data.Foldable.forM_
  Data.Foldable.mapM_
  Data.Foldable.msum
  Data.Foldable.sequence_
  Data.Function.fix
  Data.Functor.void
  Data.Traversable.forM
  GHC.Base.=<<
  GHC.Base.ap
  GHC.Base.join
  GHC.Base.liftM
  GHC.Base.liftM2
  GHC.Base.liftM3
  GHC.Base.liftM4
  GHC.Base.liftM5
  GHC.Base.when
  ExtMonad.addOccurence
  ExtMonad.addOccurence'
  ExtMonad.addOccurence_
  ExtMonad.conditional
  ExtMonad.isTurnedOn
  ExtMonad.runExtMonadGHC
  ExtMonad.runExtMonadIO
  TraverseAST.chkDecl
  TraverseAST.chkFieldUpdate
  TraverseAST.chkPattern
  TraverseAST.chkPatternField
  TraverseAST.chkPatternSynonym
  TraverseAST.traverseAlt
  TraverseAST.traverseBracket
  TraverseAST.traverseCaseRhs
  TraverseAST.traverseClassBody
  TraverseAST.traverseClassElem
  TraverseAST.traverseCmd
  TraverseAST.traverseCompStmt
  TraverseAST.traverseDecl
  TraverseAST.traverseExpr
  TraverseAST.traverseFieldUpdate
  TraverseAST.traverseFixitySignature
  TraverseAST.traverseGuardedCaseRhs
  TraverseAST.traverseGuardedRhs
  TraverseAST.traverseInstBody
  TraverseAST.traverseInstBodyDecl
  TraverseAST.traverseListCompBody
  TraverseAST.traverseLiteral
  TraverseAST.traverseLocalBind
  TraverseAST.traverseLocalBinds
  TraverseAST.traverseMatch
  TraverseAST.traverseMatchLhs
  TraverseAST.traverseModule
  TraverseAST.traverseName
  TraverseAST.traverseOperator
  TraverseAST.traversePattern
  TraverseAST.traversePatternField
  TraverseAST.traversePatternSynonym
  TraverseAST.traverseQuasiQuote
  TraverseAST.traverseRhs
  TraverseAST.traverseRhsGuard
  TraverseAST.traverseSplice
  TraverseAST.traverseStmt
  TraverseAST.traverseTupSecElem
  TraverseAST.traverseType
  TraverseAST.traverseTypeEqn
  TraverseAST.traverseTypeSignature
  TraverseAST.traverseValueBind
  Control.Monad.Reader.Class.asks
  Control.Monad.State.Class.gets
  Control.Monad.State.Class.modify
  Control.Monad.State.Class.modify'
  Control.Monad.Trans.Reader.mapReader
  Control.Monad.Trans.Reader.mapReaderT
  Control.Monad.Trans.Reader.runReader
  Control.Monad.Trans.Reader.withReader
  Control.Monad.Trans.Reader.withReaderT
  Control.Monad.Trans.State.Lazy.evalState
  Control.Monad.Trans.State.Lazy.evalStateT
  Control.Monad.Trans.State.Lazy.execState
  Control.Monad.Trans.State.Lazy.execStateT
  Control.Monad.Trans.State.Lazy.mapState
  Control.Monad.Trans.State.Lazy.mapStateT
  Control.Monad.Trans.State.Lazy.runState
  Control.Monad.Trans.State.Lazy.withState
  Control.Monad.Trans.State.Lazy.withStateT
  Control.Monad.Fix.MonadFix{Control.Monad.Fix.mfix}
  Control.Monad.IO.Class.MonadIO{Control.Monad.IO.Class.liftIO}
  Data.Traversable.Traversable|{Data.Traversable.mapM Data.Traversable.sequence}
  GHC.Base.Functor{GHC.Base.fmap}
  GHC.Base.Monad{GHC.Base.>> GHC.Base.>>= GHC.Base.fail GHC.Base.return}
  GHC.Base.MonadPlus{GHC.Base.mplus GHC.Base.mzero}
  GHC.LanguageExtensions.Type.Extension{GHC.LanguageExtensions.Type.AllowAmbiguousTypes GHC.LanguageExtensions.Type.AlternativeLayoutRule GHC.LanguageExtensions.Type.AlternativeLayoutRuleTransitional GHC.LanguageExtensions.Type.ApplicativeDo GHC.LanguageExtensions.Type.Arrows GHC.LanguageExtensions.Type.AutoDeriveTypeable GHC.LanguageExtensions.Type.BangPatterns GHC.LanguageExtensions.Type.BinaryLiterals GHC.LanguageExtensions.Type.CApiFFI GHC.LanguageExtensions.Type.ConstrainedClassMethods GHC.LanguageExtensions.Type.ConstraintKinds GHC.LanguageExtensions.Type.Cpp GHC.LanguageExtensions.Type.DataKinds GHC.LanguageExtensions.Type.DatatypeContexts GHC.LanguageExtensions.Type.DefaultSignatures GHC.LanguageExtensions.Type.DeriveAnyClass GHC.LanguageExtensions.Type.DeriveDataTypeable GHC.LanguageExtensions.Type.DeriveFoldable GHC.LanguageExtensions.Type.DeriveFunctor GHC.LanguageExtensions.Type.DeriveGeneric GHC.LanguageExtensions.Type.DeriveLift GHC.LanguageExtensions.Type.DeriveTraversable GHC.LanguageExtensions.Type.DisambiguateRecordFields GHC.LanguageExtensions.Type.DoAndIfThenElse GHC.LanguageExtensions.Type.DuplicateRecordFields GHC.LanguageExtensions.Type.EmptyCase GHC.LanguageExtensions.Type.EmptyDataDecls GHC.LanguageExtensions.Type.ExistentialQuantification GHC.LanguageExtensions.Type.ExplicitForAll GHC.LanguageExtensions.Type.ExplicitNamespaces GHC.LanguageExtensions.Type.ExtendedDefaultRules GHC.LanguageExtensions.Type.FlexibleContexts GHC.LanguageExtensions.Type.FlexibleInstances GHC.LanguageExtensions.Type.ForeignFunctionInterface GHC.LanguageExtensions.Type.FunctionalDependencies GHC.LanguageExtensions.Type.GADTSyntax GHC.LanguageExtensions.Type.GADTs GHC.LanguageExtensions.Type.GHCForeignImportPrim GHC.LanguageExtensions.Type.GeneralizedNewtypeDeriving GHC.LanguageExtensions.Type.ImplicitParams GHC.LanguageExtensions.Type.ImplicitPrelude GHC.LanguageExtensions.Type.ImpredicativeTypes GHC.LanguageExtensions.Type.IncoherentInstances GHC.LanguageExtensions.Type.InstanceSigs GHC.LanguageExtensions.Type.InterruptibleFFI GHC.LanguageExtensions.Type.JavaScriptFFI GHC.LanguageExtensions.Type.KindSignatures GHC.LanguageExtensions.Type.LambdaCase GHC.LanguageExtensions.Type.LiberalTypeSynonyms GHC.LanguageExtensions.Type.MagicHash GHC.LanguageExtensions.Type.MonadComprehensions GHC.LanguageExtensions.Type.MonadFailDesugaring GHC.LanguageExtensions.Type.MonoLocalBinds GHC.LanguageExtensions.Type.MonoPatBinds GHC.LanguageExtensions.Type.MonomorphismRestriction GHC.LanguageExtensions.Type.MultiParamTypeClasses GHC.LanguageExtensions.Type.MultiWayIf GHC.LanguageExtensions.Type.NPlusKPatterns GHC.LanguageExtensions.Type.NamedWildCards GHC.LanguageExtensions.Type.NegativeLiterals GHC.LanguageExtensions.Type.NondecreasingIndentation GHC.LanguageExtensions.Type.NullaryTypeClasses GHC.LanguageExtensions.Type.NumDecimals GHC.LanguageExtensions.Type.OverlappingInstances GHC.LanguageExtensions.Type.OverloadedLabels GHC.LanguageExtensions.Type.OverloadedLists GHC.LanguageExtensions.Type.OverloadedStrings GHC.LanguageExtensions.Type.PackageImports GHC.LanguageExtensions.Type.ParallelArrays GHC.LanguageExtensions.Type.ParallelListComp GHC.LanguageExtensions.Type.PartialTypeSignatures GHC.LanguageExtensions.Type.PatternGuards GHC.LanguageExtensions.Type.PatternSynonyms GHC.LanguageExtensions.Type.PolyKinds GHC.LanguageExtensions.Type.PostfixOperators GHC.LanguageExtensions.Type.QuasiQuotes GHC.LanguageExtensions.Type.RankNTypes GHC.LanguageExtensions.Type.RebindableSyntax GHC.LanguageExtensions.Type.RecordPuns GHC.LanguageExtensions.Type.RecordWildCards GHC.LanguageExtensions.Type.RecursiveDo GHC.LanguageExtensions.Type.RelaxedLayout GHC.LanguageExtensions.Type.RelaxedPolyRec GHC.LanguageExtensions.Type.RoleAnnotations GHC.LanguageExtensions.Type.ScopedTypeVariables GHC.LanguageExtensions.Type.StandaloneDeriving GHC.LanguageExtensions.Type.StaticPointers GHC.LanguageExtensions.Type.Strict GHC.LanguageExtensions.Type.StrictData GHC.LanguageExtensions.Type.TemplateHaskell GHC.LanguageExtensions.Type.TemplateHaskellQuotes GHC.LanguageExtensions.Type.TraditionalRecordSyntax GHC.LanguageExtensions.Type.TransformListComp GHC.LanguageExtensions.Type.TupleSections GHC.LanguageExtensions.Type.TypeApplications GHC.LanguageExtensions.Type.TypeFamilies GHC.LanguageExtensions.Type.TypeFamilyDependencies GHC.LanguageExtensions.Type.TypeInType GHC.LanguageExtensions.Type.TypeOperators GHC.LanguageExtensions.Type.TypeSynonymInstances GHC.LanguageExtensions.Type.UnboxedTuples GHC.LanguageExtensions.Type.UndecidableInstances GHC.LanguageExtensions.Type.UndecidableSuperClasses GHC.LanguageExtensions.Type.UnicodeSyntax GHC.LanguageExtensions.Type.UnliftedFFITypes GHC.LanguageExtensions.Type.ViewPatterns}
  ExtMap.ExtMap
  ExtMap.LogicalRelation{ExtMap.:&&: ExtMap.:||: ExtMap.LVar ExtMap.Not}
  ExtMonad.CheckNode
  ExtMonad.CheckUNode
  ExtMonad.ExtDomain
  ExtMonad.ExtMonad
  TraverseAST.AltG
  TraverseAST.CaseRhsG
  TraverseAST.GuardedCaseRhsG
  TraverseAST.StmtG
  Control.Monad.Reader.Class.MonadReader{Control.Monad.Reader.Class.ask Control.Monad.Reader.Class.local Control.Monad.Reader.Class.reader}
  Control.Monad.State.Class.MonadState{Control.Monad.State.Class.get Control.Monad.State.Class.put Control.Monad.State.Class.state}
  Control.Monad.Trans.Class.MonadTrans{Control.Monad.Trans.Class.lift}
  Control.Monad.Trans.Reader.Reader
  Control.Monad.Trans.Reader.ReaderT{Control.Monad.Trans.Reader.ReaderT runReaderT}
  Control.Monad.Trans.State.Lazy.State
  Control.Monad.Trans.State.Lazy.StateT{Control.Monad.Trans.State.Lazy.StateT runStateT}
module dependencies: BangPatternsChecker DerivingsChecker ExtMap
                     ExtMonad FlexibleInstancesChecker PatternSynonymsChecker
                     RecordWildCardsChecker TemplateHaskellChecker
package dependencies: array-0.5.1.1@array-0.5.1.1 base-4.9.1.0
                      binary-0.8.3.0@binary-0.8.3.0
                      bytestring-0.10.8.1@bytestring-0.10.8.1
                      containers-0.5.7.1@containers-0.5.7.1
                      deepseq-1.4.2.0@deepseq-1.4.2.0 directory-1.3.0.0@directory-1.3.0.0
                      either-4.4.1.1@either-4.4.1.1-6PiwKYkn4v6B4KO2R2Fu1b
                      filepath-1.4.1.1@filepath-1.4.1.1 ghc-8.0.2
                      ghc-boot-8.0.2@ghc-boot-8.0.2 ghc-boot-th-8.0.2@ghc-boot-th-8.0.2
                      ghc-paths-0.1.0.9@ghc-paths-0.1.0.9-AhaDlGOsRAepox069XzG
                      ghc-prim-0.5.0.0 ghci-8.0.2@ghci-8.0.2
                      hashable-1.2.6.1@hashable-1.2.6.1-2ZLNuHq395GGIHwEHuqZol
                      haskell-tools-ast-0.8.1.0@haskell-tools-ast-0.8.1.0-I9ZMaCkuuwT3FoQkwMjyW6
                      haskell-tools-backend-ghc-0.8.1.0@haskell-tools-backend-ghc-0.8.1.0-DqHnbK8OPi6CBD5cIPITWq
                      haskell-tools-prettyprint-0.8.1.0@haskell-tools-prettyprint-0.8.1.0-F9iWkGq5ppnLH6whHm0DlC
                      haskell-tools-refactor-0.8.1.0@haskell-tools-refactor-0.8.1.0-AF8Q4cA8mAnLNwu5t0Icw8
                      haskell-tools-rewrite-0.8.1.0@haskell-tools-rewrite-0.8.1.0-85A6q9dMQgvKEKG9I8fxVU
                      hoopl-3.10.2.1@hoopl-3.10.2.1 hpc-0.6.0.3@hpc-0.6.0.3
                      instance-control-0.1.1.1@instance-control-0.1.1.1-1defRS82vAAEmZKRhe67aa
                      integer-gmp-1.0.0.1 mtl-2.2.1@mtl-2.2.1-BLKBelFsPB3BoFeSWSOYj6
                      pretty-1.1.3.3@pretty-1.1.3.3 process-1.4.3.0@process-1.4.3.0
                      references-0.3.2.2@references-0.3.2.2-y362bKYomIKNQKMTfOWVo
                      safe-0.3.15@safe-0.3.15-2Yd45VWFfdcKqKyispOifY
                      split-0.2.3.2@split-0.2.3.2-CJl40zTyCIV16Pr60nb7CT
                      syb-0.7@syb-0.7-4OKdCpwGutyB1rNRmoa0ya template-haskell-2.11.1.0
                      text-1.2.2.2@text-1.2.2.2-9UQZjEJZQFSGMffj1Z5g00
                      time-1.6.0.1@time-1.6.0.1 transformers-0.5.2.0@transformers-0.5.2.0
                      uniplate-1.6.12@uniplate-1.6.12-4PyZX21trQJ5lfk0CDvC7U
                      unix-2.7.2.1@unix-2.7.2.1
                      unordered-containers-0.2.8.0@unordered-containers-0.2.8.0-Bp9XgxjuHxcI4tFehVMDGC
orphans: base-4.9.1.0:GHC.Base base-4.9.1.0:GHC.Float
         binary-0.8.3.0@binary-0.8.3.0:Data.Binary.Generic
         bytestring-0.10.8.1@bytestring-0.10.8.1:Data.ByteString.Builder
         ghc-8.0.2:BlockId ghc-8.0.2:DsMonad ghc-8.0.2:LoadIface
         ghc-8.0.2:PPC.Ppr ghc-8.0.2:PprCmm ghc-8.0.2:PprCmmDecl
         ghc-8.0.2:PprCmmExpr ghc-8.0.2:PprCore ghc-8.0.2:SPARC.Ppr
         ghc-8.0.2:TcEnv ghc-8.0.2:TcRnMonad ghc-8.0.2:X86.Ppr
         ghc-boot-8.0.2@ghc-boot-8.0.2:GHC.LanguageExtensions
         ghci-8.0.2@ghci-8.0.2:GHCi.Message
         ghci-8.0.2@ghci-8.0.2:GHCi.TH.Binary
         hashable-1.2.6.1@hashable-1.2.6.1-2ZLNuHq395GGIHwEHuqZol:Data.Hashable.Generic
         haskell-tools-ast-0.8.1.0@haskell-tools-ast-0.8.1.0-I9ZMaCkuuwT3FoQkwMjyW6:Language.Haskell.Tools.AST.Instances.Data
         haskell-tools-ast-0.8.1.0@haskell-tools-ast-0.8.1.0-I9ZMaCkuuwT3FoQkwMjyW6:Language.Haskell.Tools.AST.Instances.Eq
         haskell-tools-ast-0.8.1.0@haskell-tools-ast-0.8.1.0-I9ZMaCkuuwT3FoQkwMjyW6:Language.Haskell.Tools.AST.Instances.Generic
         haskell-tools-ast-0.8.1.0@haskell-tools-ast-0.8.1.0-I9ZMaCkuuwT3FoQkwMjyW6:Language.Haskell.Tools.AST.Instances.SemanticTraversal
         haskell-tools-ast-0.8.1.0@haskell-tools-ast-0.8.1.0-I9ZMaCkuuwT3FoQkwMjyW6:Language.Haskell.Tools.AST.Instances.Show
         haskell-tools-ast-0.8.1.0@haskell-tools-ast-0.8.1.0-I9ZMaCkuuwT3FoQkwMjyW6:Language.Haskell.Tools.AST.Instances.SourceInfoTraversal
         haskell-tools-ast-0.8.1.0@haskell-tools-ast-0.8.1.0-I9ZMaCkuuwT3FoQkwMjyW6:Language.Haskell.Tools.AST.SemaInfoTypes
         haskell-tools-ast-0.8.1.0@haskell-tools-ast-0.8.1.0-I9ZMaCkuuwT3FoQkwMjyW6:Language.Haskell.Tools.AST.Utils.GHCInstances
         haskell-tools-backend-ghc-0.8.1.0@haskell-tools-backend-ghc-0.8.1.0-DqHnbK8OPi6CBD5cIPITWq:Language.Haskell.Tools.AST.FromGHC.Utils
         haskell-tools-prettyprint-0.8.1.0@haskell-tools-prettyprint-0.8.1.0-F9iWkGq5ppnLH6whHm0DlC:Language.Haskell.Tools.Transform.RangeTemplate
         haskell-tools-prettyprint-0.8.1.0@haskell-tools-prettyprint-0.8.1.0-F9iWkGq5ppnLH6whHm0DlC:Language.Haskell.Tools.Transform.SourceTemplate
         haskell-tools-prettyprint-0.8.1.0@haskell-tools-prettyprint-0.8.1.0-F9iWkGq5ppnLH6whHm0DlC:Language.Haskell.Tools.Transform.SourceTemplateHelpers
         haskell-tools-refactor-0.8.1.0@haskell-tools-refactor-0.8.1.0-AF8Q4cA8mAnLNwu5t0Icw8:Language.Haskell.Tools.Refactor.RefactorBase
         ht-extension-organizer-0.1.0.0-y3uypH7gCtA60AaWeuyZL:ExtMonad
         references-0.3.2.2@references-0.3.2.2-y362bKYomIKNQKMTfOWVo:Control.Reference.Predefined.Containers.Tree
         references-0.3.2.2@references-0.3.2.2-y362bKYomIKNQKMTfOWVo:Control.Reference.TH.Records
         syb-0.7@syb-0.7-4OKdCpwGutyB1rNRmoa0ya:Data.Generics.Instances
         text-1.2.2.2@text-1.2.2.2-9UQZjEJZQFSGMffj1Z5g00:Data.Text
         text-1.2.2.2@text-1.2.2.2-9UQZjEJZQFSGMffj1Z5g00:Data.Text.Lazy
         text-1.2.2.2@text-1.2.2.2-9UQZjEJZQFSGMffj1Z5g00:Data.Text.Show
         time-1.6.0.1@time-1.6.0.1:Data.Time.Calendar.Gregorian
         time-1.6.0.1@time-1.6.0.1:Data.Time.Format.Parse
         time-1.6.0.1@time-1.6.0.1:Data.Time.LocalTime.LocalTime
         transformers-0.5.2.0@transformers-0.5.2.0:Control.Monad.Trans.Error
         uniplate-1.6.12@uniplate-1.6.12-4PyZX21trQJ5lfk0CDvC7U:Data.Generics.Uniplate.Data
family instance modules: base-4.9.1.0:Control.Applicative
                         base-4.9.1.0:Data.Complex base-4.9.1.0:Data.Either
                         base-4.9.1.0:Data.Functor.Compose base-4.9.1.0:Data.Functor.Const
                         base-4.9.1.0:Data.Functor.Identity
                         base-4.9.1.0:Data.Functor.Product base-4.9.1.0:Data.Functor.Sum
                         base-4.9.1.0:Data.List.NonEmpty base-4.9.1.0:Data.Monoid
                         base-4.9.1.0:Data.Semigroup base-4.9.1.0:Data.Type.Equality
                         base-4.9.1.0:Data.Version base-4.9.1.0:Data.Void
                         base-4.9.1.0:GHC.Exts base-4.9.1.0:GHC.Generics
                         base-4.9.1.0:GHC.IO.Exception base-4.9.1.0:GHC.TypeLits
                         containers-0.5.7.1@containers-0.5.7.1:Data.IntMap.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.IntSet.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.Map.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.Sequence
                         containers-0.5.7.1@containers-0.5.7.1:Data.Set.Base
                         ghc-8.0.2:PlaceHolder ghc-8.0.2:TrieMap
                         ghc-boot-th-8.0.2@ghc-boot-th-8.0.2:GHC.LanguageExtensions.Type
                         ghci-8.0.2@ghci-8.0.2:GHCi.FFI ghci-8.0.2@ghci-8.0.2:GHCi.Message
                         ghci-8.0.2@ghci-8.0.2:GHCi.ResolvedBCO
                         ghci-8.0.2@ghci-8.0.2:SizedSeq
                         haskell-tools-ast-0.8.1.0@haskell-tools-ast-0.8.1.0-I9ZMaCkuuwT3FoQkwMjyW6:Language.Haskell.Tools.AST.Ann
                         haskell-tools-ast-0.8.1.0@haskell-tools-ast-0.8.1.0-I9ZMaCkuuwT3FoQkwMjyW6:Language.Haskell.Tools.AST.Instances.Generic
                         haskell-tools-prettyprint-0.8.1.0@haskell-tools-prettyprint-0.8.1.0-F9iWkGq5ppnLH6whHm0DlC:Language.Haskell.Tools.Transform.RangeTemplate
                         haskell-tools-prettyprint-0.8.1.0@haskell-tools-prettyprint-0.8.1.0-F9iWkGq5ppnLH6whHm0DlC:Language.Haskell.Tools.Transform.SourceTemplate
                         hoopl-3.10.2.1@hoopl-3.10.2.1:Compiler.Hoopl.Block
                         hoopl-3.10.2.1@hoopl-3.10.2.1:Compiler.Hoopl.Dataflow
                         hoopl-3.10.2.1@hoopl-3.10.2.1:Compiler.Hoopl.Fuel
                         hoopl-3.10.2.1@hoopl-3.10.2.1:Compiler.Hoopl.Label
                         hoopl-3.10.2.1@hoopl-3.10.2.1:Compiler.Hoopl.Unique
                         pretty-1.1.3.3@pretty-1.1.3.3:Text.PrettyPrint.Annotated.HughesPJ
                         pretty-1.1.3.3@pretty-1.1.3.3:Text.PrettyPrint.HughesPJ
                         references-0.3.2.2@references-0.3.2.2-y362bKYomIKNQKMTfOWVo:Control.Reference.Predefined.Containers
                         references-0.3.2.2@references-0.3.2.2-y362bKYomIKNQKMTfOWVo:Control.Reference.Predefined.Containers.Tree
                         references-0.3.2.2@references-0.3.2.2-y362bKYomIKNQKMTfOWVo:Control.Reference.Types
                         template-haskell-2.11.1.0:Language.Haskell.TH.Syntax
                         text-1.2.2.2@text-1.2.2.2-9UQZjEJZQFSGMffj1Z5g00:Data.Text
                         text-1.2.2.2@text-1.2.2.2-9UQZjEJZQFSGMffj1Z5g00:Data.Text.Lazy
                         unordered-containers-0.2.8.0@unordered-containers-0.2.8.0-Bp9XgxjuHxcI4tFehVMDGC:Data.HashMap.Base
                         unordered-containers-0.2.8.0@unordered-containers-0.2.8.0-Bp9XgxjuHxcI4tFehVMDGC:Data.HashSet
import  -/  base-4.9.1.0:Control.Monad a6784c5dab0d75c63dabec5a37843f98
import  -/  base-4.9.1.0:Data.Foldable 3e0b6967a1da89945d0e2d47266337a2
import  -/  base-4.9.1.0:Data.Functor 5ab1dc703df5b482e77efb697833ca3c
import  -/  base-4.9.1.0:Data.Traversable 556020d7cf3c4a34a774600512918a37
import  -/  base-4.9.1.0:Debug.Trace a9edf3aec504f4423d8ba829ab373a25
import  -/  base-4.9.1.0:GHC.Base c4231c43c07e46080a26bf94094c7aa1
import  -/  base-4.9.1.0:Prelude 22dd289b8469a8fa8dc81cab7b237771
import  -/  ghc-boot-th-8.0.2@ghc-boot-th-8.0.2:GHC.LanguageExtensions.Type 92441ea50916fa3940e20fae60f255d7
import  -/  haskell-tools-ast-0.8.1.0@haskell-tools-ast-0.8.1.0-I9ZMaCkuuwT3FoQkwMjyW6:Language.Haskell.Tools.AST 3560a1061fd66e2c7888fe18991ca1cc
import  -/  haskell-tools-ast-0.8.1.0@haskell-tools-ast-0.8.1.0-I9ZMaCkuuwT3FoQkwMjyW6:Language.Haskell.Tools.AST.Ann 07e8f66a2b6d7f18951fb774264c8644
import  -/  haskell-tools-ast-0.8.1.0@haskell-tools-ast-0.8.1.0-I9ZMaCkuuwT3FoQkwMjyW6:Language.Haskell.Tools.AST.References 46cb31a69f53297ab865876852473aa3
import  -/  haskell-tools-ast-0.8.1.0@haskell-tools-ast-0.8.1.0-I9ZMaCkuuwT3FoQkwMjyW6:Language.Haskell.Tools.AST.Representation.Exprs b23d8cf73adba2681e60d36c0a6f14a3
import  -/  haskell-tools-ast-0.8.1.0@haskell-tools-ast-0.8.1.0-I9ZMaCkuuwT3FoQkwMjyW6:Language.Haskell.Tools.AST.Representation.Stmts 5e2214d0839f02b86c37355caa69e034
import  -/  haskell-tools-prettyprint-0.8.1.0@haskell-tools-prettyprint-0.8.1.0-F9iWkGq5ppnLH6whHm0DlC:Language.Haskell.Tools.PrettyPrint da7dea6ac299ef1620d7160216fb97b0
import  -/  haskell-tools-refactor-0.8.1.0@haskell-tools-refactor-0.8.1.0-AF8Q4cA8mAnLNwu5t0Icw8:Language.Haskell.Tools.Refactor 84acc8d60e278de91351468f26f90e1c
import  -/  haskell-tools-refactor-0.8.1.0@haskell-tools-refactor-0.8.1.0-AF8Q4cA8mAnLNwu5t0Icw8:Language.Haskell.Tools.Refactor.RefactorBase d8cc79a36102a900280f4d51e9bf8f8a
import  -/  haskell-tools-rewrite-0.8.1.0@haskell-tools-rewrite-0.8.1.0-85A6q9dMQgvKEKG9I8fxVU:Language.Haskell.Tools.AST.ElementTypes df954b524d036aee274d8ad0f571417a
import  -/  BangPatternsChecker f42dc1624d94d92d8eaf535720f55ebc
  exports: b384d4aba88e8297ccfed74c60cab264
  chkBangPatterns c2c55ce8bfa7b47ff22b7f25978aa177
import  -/  DerivingsChecker 508b12dc2c43e9c76a38bc9f50ae230e
  exports: c9c99a13421ec9464a9b0877252e817a
  chkDerivings 312dc4ded8018c8b659e198ee893ff28
import  -/  ExtMap ce208fa2f233772cc4b03c60efef446e
  :&&: 4a12e4fbb68353aea1ce40a572e2a5f4
  :||: b024d415aaaed601318f0e8fa0ffaa04
  ExtMap 86d8b8e09d7cd6f6e3831751b6397a46
  LVar c2b251913343abac99e887c1b70f0c95
  LogicalRelation 244102f8a6d7434a090b758121b05523
  Not a790822a2ae7d0c293b41158b7bc0e52
import  -/  ExtMonad 059f5fd988c212e6bf2913400d89e5c4
  exports: e114cdeb7f705ff3639c044bf88c57d7
  CheckNode d2a8a000f373c241c0362787c4b3f842
  CheckUNode 9a3c78de9fdd35033f52f4944cc68138
  ExtDomain 7fc7ae623015a9d2031eb05f95b73507
  ExtMonad 6ab37cbe93709f9dcdeffcf18c24ce9b
  addOccurence c9603992ac2a28741343ebc5c8fe7b56
  addOccurence' 806962a54b1c16e16558458575c9a479
  addOccurence_ 0a70efda5e7142f7b588f7458ea99597
  conditional 170d45fd139eef252718316404a1e1aa
  isTurnedOn 58326d046a06fcac13f090ffdee96f9d
  runExtMonadGHC 64013254a8a069463528a96ade6c9f65
  runExtMonadIO 7d696a7ab8d541e03e4a3c0a61328a95
import  -/  FlexibleInstancesChecker 26cd061368bb1a0bf0611eb326d384a1
  exports: e3e5947061f31e3de9af61a2611cb8cf
  chkFlexibleInstances 4389e59d587d99c1c0d4846dd3a58fda
import  -/  PatternSynonymsChecker 4d00c81a2e1cb0839b4614ab76e37ee6
  exports: cc58466d11f708e17113e46f0997b812
  chkPatternSynonyms 5c6a04e5fe98212584351c5e521f1628
import  -/  RecordWildCardsChecker e2f49d4df4442f9537924c3d04d106da
  exports: e1d6c5023d5d4bebad625065ab76cd62
  chkRecordWildCardsFieldUpdate 4ce49b110f7017fd4d53c3e26084f75a
  chkRecordWildCardsPatField ea9d5814572d9012b3c7b47299adb40c
import  -/  TemplateHaskellChecker 6b055ac3b574e2a59aed83905d635a0f
  exports: 6b876baa0770906a0f5ca7b25a09757f
  chkTemplateHaskellBracket b40d662889b540ee1015cef72058d53b
  chkTemplateHaskellQuasiQuote 0a4c3c26672378c840bfb514df3e8ee3
  chkTemplateHaskellSplice 7ed124f42a42221af99a92d023c5d80c
import  -/  mtl-2.2.1@mtl-2.2.1-BLKBelFsPB3BoFeSWSOYj6:Control.Monad.Reader.Class 9573b8d2ba4bcf8261d19527e0170c4d
import  -/  mtl-2.2.1@mtl-2.2.1-BLKBelFsPB3BoFeSWSOYj6:Control.Monad.State.Class 6d31234b0a911b56412061943d18b89e
import  -/  references-0.3.2.2@references-0.3.2.2-y362bKYomIKNQKMTfOWVo:Control.Reference d89ee82346f6e25c55a8a19dbf84658e
import  -/  references-0.3.2.2@references-0.3.2.2-y362bKYomIKNQKMTfOWVo:Control.Reference.Combinators ab836299cfb9898d02f637bc65b3765a
import  -/  references-0.3.2.2@references-0.3.2.2-y362bKYomIKNQKMTfOWVo:Control.Reference.Operators 55e717f4df077a71cb70a96f85f6a393
import  -/  transformers-0.5.2.0@transformers-0.5.2.0:Control.Monad.Trans.Class 45530f1305724ee3931a9be21b40ca7e
import  -/  transformers-0.5.2.0@transformers-0.5.2.0:Control.Monad.Trans.Reader 1b607a084a390ae0e50e8f8dcbf2541a
import  -/  transformers-0.5.2.0@transformers-0.5.2.0:Control.Monad.Trans.State.Lazy 371607e50dde46b5f4103b3ab334a497
48a824e02f20d31fb37d47c7114ef901
  $s$fApplicativeReaderT ::
    GHC.Base.Applicative
      (Control.Monad.Trans.Reader.ReaderT
         r
         (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc))
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ r.
                  @ (Control.Monad.Trans.Reader.ReaderT
                       r
                       (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc))
                  (TraverseAST.$s$fApplicativeReaderT_$s$fApplicativeReaderT_$cp1Applicative
                     @ r)
                  (\ @ a (eta :: a) ->
                   let {
                     m1 :: Control.Monad.Trans.State.Lazy.StateT
                             ExtMap.ExtMap GhcMonad.Ghc a
                     = GHC.Base.$
                         @ 'GHC.Types.PtrRepLifted
                         @ (Data.Map.Base.Map
                              (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                              [SrcLoc.SrcSpan]
                            -> GhcMonad.Ghc
                                 (a,
                                  Data.Map.Base.Map
                                    (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                                    [SrcLoc.SrcSpan]))
                         @ (Control.Monad.Trans.State.Lazy.StateT
                              (Data.Map.Base.Map
                                 (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                                 [SrcLoc.SrcSpan])
                              GhcMonad.Ghc
                              a)
                         (\ (tpl :: Data.Map.Base.Map
                                      (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                                      [SrcLoc.SrcSpan]
                                    -> GhcMonad.Ghc
                                         (a,
                                          Data.Map.Base.Map
                                            (ExtMap.LogicalRelation
                                               GHC.LanguageExtensions.Type.Extension)
                                            [SrcLoc.SrcSpan])) ->
                          tpl)
                           `cast`
                         (<Data.Map.Base.Map
                             (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                             [SrcLoc.SrcSpan]
                           -> GhcMonad.Ghc
                                (a,
                                 Data.Map.Base.Map
                                   (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                                   [SrcLoc.SrcSpan])>_R
                          ->_R Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                        <Data.Map.Base.Map
                                           (ExtMap.LogicalRelation
                                              GHC.LanguageExtensions.Type.Extension)
                                           [SrcLoc.SrcSpan]>_N
                                        <GhcMonad.Ghc>_R
                                        <a>_N))
                         (\ (s1 :: Data.Map.Base.Map
                                     (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                                     [SrcLoc.SrcSpan])
                            (eta1 :: GhcMonad.Session)
                            (eta2 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                          ((GhcMonad.$fApplicativeGhc_$cpure
                              @ (a,
                                 Data.Map.Base.Map
                                   (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                                   [SrcLoc.SrcSpan])
                              (eta, s1))
                             `cast`
                           (GhcMonad.N:Ghc[0]
                                <(a,
                                  Data.Map.Base.Map
                                    (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                                    [SrcLoc.SrcSpan])>_R)
                             eta1)
                            `cast`
                          (GHC.Types.N:IO[0]
                               <(a,
                                 Data.Map.Base.Map
                                   (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                                   [SrcLoc.SrcSpan])>_R)
                            eta2)
                           `cast`
                         (<Data.Map.Base.Map
                             (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                             [SrcLoc.SrcSpan]>_R
                          ->_R Trans
                                   (<GhcMonad.Session>_R
                                    ->_R Sym (GHC.Types.N:IO[0]
                                                  <(a,
                                                    Data.Map.Base.Map
                                                      (ExtMap.LogicalRelation
                                                         GHC.LanguageExtensions.Type.Extension)
                                                      [SrcLoc.SrcSpan])>_R))
                                   (Sym (GhcMonad.N:Ghc[0]
                                             <(a,
                                               Data.Map.Base.Map
                                                 (ExtMap.LogicalRelation
                                                    GHC.LanguageExtensions.Type.Extension)
                                                 [SrcLoc.SrcSpan])>_R)))
                   } in
                   (\ (eta1 :: r) ->
                    GHC.Base.const
                      @ (Control.Monad.Trans.State.Lazy.StateT
                           ExtMap.ExtMap GhcMonad.Ghc a)
                      @ r
                      m1
                      eta1)
                     `cast`
                   (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                             <*>_N
                             <r>_R
                             <Control.Monad.Trans.State.Lazy.StateT
                                ExtMap.ExtMap GhcMonad.Ghc>_R
                             <a>_N)))
                  (TraverseAST.$s$fApplicativeReaderT_$s$fApplicativeReaderT_$c<*>
                     @ r)
                  (Control.Monad.Trans.Reader.$fApplicativeReaderT_$c*>
                     @ (Control.Monad.Trans.State.Lazy.StateT
                          ExtMap.ExtMap GhcMonad.Ghc)
                     @ r
                     TraverseAST.$s$fApplicativeReaderT_$dApplicative)
                  (Control.Monad.Trans.Reader.$fApplicativeReaderT_$c<*
                     @ (Control.Monad.Trans.State.Lazy.StateT
                          ExtMap.ExtMap GhcMonad.Ghc)
                     @ r
                     TraverseAST.$s$fApplicativeReaderT_$dApplicative) -}
829bff366d1872598e38b935c40ca66c
  $s$fApplicativeReaderT_$cpure ::
    a
    -> Control.Monad.Trans.Reader.ReaderT
         r
         (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc)
         a
  {- Arity: 5, HasNoCafRefs, Strictness: <L,U><L,A><L,U><L,A><S,U>,
     Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, False)
                (\ @ r @ a (eta :: a) ->
                 let {
                   m1 :: Control.Monad.Trans.State.Lazy.StateT
                           ExtMap.ExtMap GhcMonad.Ghc a
                   = GHC.Base.$
                       @ 'GHC.Types.PtrRepLifted
                       @ (Data.Map.Base.Map
                            (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                            [SrcLoc.SrcSpan]
                          -> GhcMonad.Ghc
                               (a,
                                Data.Map.Base.Map
                                  (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                                  [SrcLoc.SrcSpan]))
                       @ (Control.Monad.Trans.State.Lazy.StateT
                            (Data.Map.Base.Map
                               (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                               [SrcLoc.SrcSpan])
                            GhcMonad.Ghc
                            a)
                       (\ (tpl :: Data.Map.Base.Map
                                    (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                                    [SrcLoc.SrcSpan]
                                  -> GhcMonad.Ghc
                                       (a,
                                        Data.Map.Base.Map
                                          (ExtMap.LogicalRelation
                                             GHC.LanguageExtensions.Type.Extension)
                                          [SrcLoc.SrcSpan])) ->
                        tpl)
                         `cast`
                       (<Data.Map.Base.Map
                           (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                           [SrcLoc.SrcSpan]
                         -> GhcMonad.Ghc
                              (a,
                               Data.Map.Base.Map
                                 (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                                 [SrcLoc.SrcSpan])>_R
                        ->_R Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                      <Data.Map.Base.Map
                                         (ExtMap.LogicalRelation
                                            GHC.LanguageExtensions.Type.Extension)
                                         [SrcLoc.SrcSpan]>_N
                                      <GhcMonad.Ghc>_R
                                      <a>_N))
                       (\ (s1 :: Data.Map.Base.Map
                                   (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                                   [SrcLoc.SrcSpan])
                          (eta1 :: GhcMonad.Session)
                          (eta2 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                        ((GhcMonad.$fApplicativeGhc_$cpure
                            @ (a,
                               Data.Map.Base.Map
                                 (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                                 [SrcLoc.SrcSpan])
                            (eta, s1))
                           `cast`
                         (GhcMonad.N:Ghc[0]
                              <(a,
                                Data.Map.Base.Map
                                  (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                                  [SrcLoc.SrcSpan])>_R)
                           eta1)
                          `cast`
                        (GHC.Types.N:IO[0]
                             <(a,
                               Data.Map.Base.Map
                                 (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                                 [SrcLoc.SrcSpan])>_R)
                          eta2)
                         `cast`
                       (<Data.Map.Base.Map
                           (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                           [SrcLoc.SrcSpan]>_R
                        ->_R Trans
                                 (<GhcMonad.Session>_R
                                  ->_R Sym (GHC.Types.N:IO[0]
                                                <(a,
                                                  Data.Map.Base.Map
                                                    (ExtMap.LogicalRelation
                                                       GHC.LanguageExtensions.Type.Extension)
                                                    [SrcLoc.SrcSpan])>_R))
                                 (Sym (GhcMonad.N:Ghc[0]
                                           <(a,
                                             Data.Map.Base.Map
                                               (ExtMap.LogicalRelation
                                                  GHC.LanguageExtensions.Type.Extension)
                                               [SrcLoc.SrcSpan])>_R)))
                 } in
                 (\ (eta1 :: r) ->
                  GHC.Base.const
                    @ (Control.Monad.Trans.State.Lazy.StateT
                         ExtMap.ExtMap GhcMonad.Ghc a)
                    @ r
                    m1
                    eta1)
                   `cast`
                 (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                           <*>_N
                           <r>_R
                           <Control.Monad.Trans.State.Lazy.StateT
                              ExtMap.ExtMap GhcMonad.Ghc>_R
                           <a>_N))) -}
eaee93725e2353d178319b439c6e7216
  $s$fApplicativeReaderT_$dApplicative ::
    GHC.Base.Applicative
      (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc)
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                (TraverseAST.$s$fApplicativeReaderT_$s$fApplicativeStateT
                   @ (Data.Map.Base.Map
                        (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                        [SrcLoc.SrcSpan])) -}
6861a44ed845a3981669c9465a0f1eb2
  $s$fApplicativeReaderT_$s$fApplicativeReaderT_$c<*> ::
    Control.Monad.Trans.Reader.ReaderT
      r
      (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc)
      (a -> b)
    -> Control.Monad.Trans.Reader.ReaderT
         r
         (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc)
         a
    -> Control.Monad.Trans.Reader.ReaderT
         r
         (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc)
         b
  {- Arity: 3, HasNoCafRefs, Strictness: <L,1*C1(U)><L,1*C1(U)><L,U>,
     Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ @ r
                   @ a
                   @ b
                   (f :: Control.Monad.Trans.Reader.ReaderT
                           r
                           (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc)
                           (a -> b))
                   (v :: Control.Monad.Trans.Reader.ReaderT
                           r
                           (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc)
                           a) ->
                 GHC.Base.$
                   @ 'GHC.Types.PtrRepLifted
                   @ (r
                      -> Control.Monad.Trans.State.Lazy.StateT
                           ExtMap.ExtMap GhcMonad.Ghc b)
                   @ (Control.Monad.Trans.Reader.ReaderT
                        r
                        (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc)
                        b)
                   (\ (tpl :: r
                              -> Control.Monad.Trans.State.Lazy.StateT
                                   ExtMap.ExtMap GhcMonad.Ghc b) ->
                    tpl)
                     `cast`
                   (<r
                     -> Control.Monad.Trans.State.Lazy.StateT
                          ExtMap.ExtMap GhcMonad.Ghc b>_R
                    ->_R Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                  <*>_N
                                  <r>_R
                                  <Control.Monad.Trans.State.Lazy.StateT
                                     ExtMap.ExtMap GhcMonad.Ghc>_R
                                  <b>_N))
                   (\ (r1 :: r) ->
                    let {
                      ds :: Control.Monad.Trans.State.Lazy.StateT
                              (Data.Map.Base.Map
                                 (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                                 [SrcLoc.SrcSpan])
                              GhcMonad.Ghc
                              (a -> b)
                      = Control.Monad.Trans.Reader.runReaderT
                          @ r
                          @ *
                          @ (Control.Monad.Trans.State.Lazy.StateT
                               ExtMap.ExtMap GhcMonad.Ghc)
                          @ (a -> b)
                          f
                          r1
                    } in
                    let {
                      ds1 :: Control.Monad.Trans.State.Lazy.StateT
                               (Data.Map.Base.Map
                                  (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                                  [SrcLoc.SrcSpan])
                               GhcMonad.Ghc
                               a
                      = Control.Monad.Trans.Reader.runReaderT
                          @ r
                          @ *
                          @ (Control.Monad.Trans.State.Lazy.StateT
                               ExtMap.ExtMap GhcMonad.Ghc)
                          @ a
                          v
                          r1
                    } in
                    GHC.Base.$
                      @ 'GHC.Types.PtrRepLifted
                      @ (Data.Map.Base.Map
                           (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                           [SrcLoc.SrcSpan]
                         -> GhcMonad.Ghc
                              (b,
                               Data.Map.Base.Map
                                 (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                                 [SrcLoc.SrcSpan]))
                      @ (Control.Monad.Trans.State.Lazy.StateT
                           (Data.Map.Base.Map
                              (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                              [SrcLoc.SrcSpan])
                           GhcMonad.Ghc
                           b)
                      (\ (tpl :: Data.Map.Base.Map
                                   (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                                   [SrcLoc.SrcSpan]
                                 -> GhcMonad.Ghc
                                      (b,
                                       Data.Map.Base.Map
                                         (ExtMap.LogicalRelation
                                            GHC.LanguageExtensions.Type.Extension)
                                         [SrcLoc.SrcSpan])) ->
                       tpl)
                        `cast`
                      (<Data.Map.Base.Map
                          (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                          [SrcLoc.SrcSpan]
                        -> GhcMonad.Ghc
                             (b,
                              Data.Map.Base.Map
                                (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                                [SrcLoc.SrcSpan])>_R
                       ->_R Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                     <Data.Map.Base.Map
                                        (ExtMap.LogicalRelation
                                           GHC.LanguageExtensions.Type.Extension)
                                        [SrcLoc.SrcSpan]>_N
                                     <GhcMonad.Ghc>_R
                                     <b>_N))
                      (\ (s1 :: Data.Map.Base.Map
                                  (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                                  [SrcLoc.SrcSpan]) ->
                       GhcMonad.$fMonadGhc_$c>>=
                         @ (a -> b,
                            Data.Map.Base.Map
                              (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                              [SrcLoc.SrcSpan])
                         @ (b,
                            Data.Map.Base.Map
                              (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                              [SrcLoc.SrcSpan])
                         (ds
                            `cast`
                          (Control.Monad.Trans.State.Lazy.N:StateT[0]
                               <Data.Map.Base.Map
                                  (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                                  [SrcLoc.SrcSpan]>_N
                               <GhcMonad.Ghc>_R
                               <a -> b>_N)
                            s1)
                         (\ (ds2 :: (a -> b,
                                     Data.Map.Base.Map
                                       (ExtMap.LogicalRelation
                                          GHC.LanguageExtensions.Type.Extension)
                                       [SrcLoc.SrcSpan])) ->
                          GhcMonad.$fMonadGhc_$c>>=
                            @ (a,
                               Data.Map.Base.Map
                                 (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                                 [SrcLoc.SrcSpan])
                            @ (b,
                               Data.Map.Base.Map
                                 (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                                 [SrcLoc.SrcSpan])
                            (ds1
                               `cast`
                             (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                  <Data.Map.Base.Map
                                     (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                                     [SrcLoc.SrcSpan]>_N
                                  <GhcMonad.Ghc>_R
                                  <a>_N)
                               (case ds2 of wild { (,) f1 s' -> s' }))
                            (\ (ds3 :: (a,
                                        Data.Map.Base.Map
                                          (ExtMap.LogicalRelation
                                             GHC.LanguageExtensions.Type.Extension)
                                          [SrcLoc.SrcSpan])) ->
                             GhcMonad.$fApplicativeGhc_$cpure
                               @ (b,
                                  Data.Map.Base.Map
                                    (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                                    [SrcLoc.SrcSpan])
                               (case ds2 of wild { (,) f1 s' ->
                                f1 (case ds3 of wild1 { (,) x s'' -> x }) },
                                case ds3 of wild { (,) x s'' -> s'' })))))) -}
adccb92dc3fce3de02654ce2f6fabb7a
  $s$fApplicativeReaderT_$s$fApplicativeReaderT_$cp1Applicative ::
    GHC.Base.Functor
      (Control.Monad.Trans.Reader.ReaderT
         r
         (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc))
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                TraverseAST.$s$fApplicativeReaderT_$s$fFunctorReaderT -}
d72d380c5d7e5e3d0c7ab70124b72f3a
  $s$fApplicativeReaderT_$s$fApplicativeStateT ::
    GHC.Base.Applicative
      (Control.Monad.Trans.State.Lazy.StateT s GhcMonad.Ghc)
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ s.
                  @ (Control.Monad.Trans.State.Lazy.StateT s GhcMonad.Ghc)
                  (TraverseAST.$s$fApplicativeReaderT_$s$fApplicativeStateT_$cp1Applicative
                     @ s)
                  (TraverseAST.$s$fApplicativeReaderT_$s$fApplicativeStateT_$cpure
                     @ s)
                  (TraverseAST.$s$fApplicativeReaderT_$s$fApplicativeStateT_$c<*>
                     @ s)
                  (Control.Monad.Trans.State.Lazy.$fApplicativeStateT_$c*>
                     @ GhcMonad.Ghc
                     @ s
                     GhcMonad.$fFunctorGhc
                     GhcMonad.$fMonadGhc)
                  (Control.Monad.Trans.State.Lazy.$fApplicativeStateT_$c<*
                     @ GhcMonad.Ghc
                     @ s
                     GhcMonad.$fFunctorGhc
                     GhcMonad.$fMonadGhc) -}
b44e58f90835fffc638c71f1c893638e
  $s$fApplicativeReaderT_$s$fApplicativeStateT_$c<*> ::
    Control.Monad.Trans.State.Lazy.StateT s GhcMonad.Ghc (a -> b)
    -> Control.Monad.Trans.State.Lazy.StateT s GhcMonad.Ghc a
    -> Control.Monad.Trans.State.Lazy.StateT s GhcMonad.Ghc b
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*C1(U)><L,C(C1(C1(U(U,U(1*U,1*U)))))><L,U>,
     Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ @ s
                   @ a
                   @ b
                   (ds :: Control.Monad.Trans.State.Lazy.StateT
                            s GhcMonad.Ghc (a -> b))
                   (ds1 :: Control.Monad.Trans.State.Lazy.StateT s GhcMonad.Ghc a) ->
                 GHC.Base.$
                   @ 'GHC.Types.PtrRepLifted
                   @ (s -> GhcMonad.Ghc (b, s))
                   @ (Control.Monad.Trans.State.Lazy.StateT s GhcMonad.Ghc b)
                   (\ (tpl :: s -> GhcMonad.Ghc (b, s)) -> tpl)
                     `cast`
                   (<s -> GhcMonad.Ghc (b, s)>_R
                    ->_R Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                  <s>_N <GhcMonad.Ghc>_R <b>_N))
                   (\ (s1 :: s) ->
                    GhcMonad.$fMonadGhc_$c>>=
                      @ (a -> b, s)
                      @ (b, s)
                      (ds
                         `cast`
                       (Control.Monad.Trans.State.Lazy.N:StateT[0]
                            <s>_N <GhcMonad.Ghc>_R <a -> b>_N)
                         s1)
                      (\ (ds2 :: (a -> b, s)) ->
                       GhcMonad.$fMonadGhc_$c>>=
                         @ (a, s)
                         @ (b, s)
                         (ds1
                            `cast`
                          (Control.Monad.Trans.State.Lazy.N:StateT[0]
                               <s>_N <GhcMonad.Ghc>_R <a>_N)
                            (case ds2 of wild { (,) f s' -> s' }))
                         (\ (ds3 :: (a, s)) ->
                          GhcMonad.$fApplicativeGhc_$cpure
                            @ (b, s)
                            (case ds2 of wild { (,) f s' ->
                             f (case ds3 of wild1 { (,) x s'' -> x }) },
                             case ds3 of wild { (,) x s'' -> s'' }))))) -}
d851fa14f8cc0e96039a83efec8095c6
  $s$fApplicativeReaderT_$s$fApplicativeStateT_$cp1Applicative ::
    GHC.Base.Functor
      (Control.Monad.Trans.State.Lazy.StateT s GhcMonad.Ghc)
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                TraverseAST.$s$fApplicativeReaderT_$s$fFunctorStateT -}
a9fde17882145c6d62239de104d97adf
  $s$fApplicativeReaderT_$s$fApplicativeStateT_$cpure ::
    a -> Control.Monad.Trans.State.Lazy.StateT s GhcMonad.Ghc a
  {- Arity: 4, HasNoCafRefs, Strictness: <L,U><L,U><L,A><S,U>,
     Inline: INLINE (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ @ s @ a (a1 :: a) ->
                 GHC.Base.$
                   @ 'GHC.Types.PtrRepLifted
                   @ (s -> GhcMonad.Ghc (a, s))
                   @ (Control.Monad.Trans.State.Lazy.StateT s GhcMonad.Ghc a)
                   (\ (tpl :: s -> GhcMonad.Ghc (a, s)) -> tpl)
                     `cast`
                   (<s -> GhcMonad.Ghc (a, s)>_R
                    ->_R Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                  <s>_N <GhcMonad.Ghc>_R <a>_N))
                   (\ (s1 :: s)
                      (eta :: GhcMonad.Session)
                      (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                    ((GhcMonad.$fApplicativeGhc_$cpure @ (a, s) (a1, s1))
                       `cast`
                     (GhcMonad.N:Ghc[0] <(a, s)>_R)
                       eta)
                      `cast`
                    (GHC.Types.N:IO[0] <(a, s)>_R)
                      eta1)
                     `cast`
                   (<s>_R
                    ->_R Trans
                             (<GhcMonad.Session>_R ->_R Sym (GHC.Types.N:IO[0] <(a, s)>_R))
                             (Sym (GhcMonad.N:Ghc[0] <(a, s)>_R)))) -}
055c87bf6369ef533bb3061839f885fd
  $s$fApplicativeReaderT_$s$fFunctorReaderT ::
    GHC.Base.Functor
      (Control.Monad.Trans.Reader.ReaderT
         r
         (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc))
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ r.
                  @ (Control.Monad.Trans.Reader.ReaderT
                       r
                       (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc))
                  (TraverseAST.$s$fApplicativeReaderT_$s$fFunctorReaderT_$cfmap @ r)
                  (TraverseAST.$s$fApplicativeReaderT_$s$fFunctorReaderT_$c<$ @ r) -}
0b55fde5b962d4bd4b2c3927309bc204
  $s$fApplicativeReaderT_$s$fFunctorReaderT_$c<$ ::
    a
    -> Control.Monad.Trans.Reader.ReaderT
         r
         (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc)
         b
    -> Control.Monad.Trans.Reader.ReaderT
         r
         (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc)
         a
  {- Arity: 3, HasNoCafRefs, Strictness: <L,U><L,1*C1(U)><L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ @ r
                   @ a
                   @ b
                   (eta :: a)
                   (eta1 :: Control.Monad.Trans.Reader.ReaderT
                              r
                              (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc)
                              b)
                   (eta2 :: r) ->
                 (GHC.Base.$
                    @ 'GHC.Types.PtrRepLifted
                    @ (r
                       -> Control.Monad.Trans.State.Lazy.StateT
                            ExtMap.ExtMap GhcMonad.Ghc a)
                    @ (Control.Monad.Trans.Reader.ReaderT
                         r
                         (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc)
                         a)
                    (\ (tpl :: r
                               -> Control.Monad.Trans.State.Lazy.StateT
                                    ExtMap.ExtMap GhcMonad.Ghc a) ->
                     tpl)
                      `cast`
                    (<r
                      -> Control.Monad.Trans.State.Lazy.StateT
                           ExtMap.ExtMap GhcMonad.Ghc a>_R
                     ->_R Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                   <*>_N
                                   <r>_R
                                   <Control.Monad.Trans.State.Lazy.StateT
                                      ExtMap.ExtMap GhcMonad.Ghc>_R
                                   <a>_N))
                    (let {
                       g :: r
                            -> Control.Monad.Trans.State.Lazy.StateT
                                 ExtMap.ExtMap GhcMonad.Ghc b
                       = Control.Monad.Trans.Reader.runReaderT
                           @ r
                           @ *
                           @ (Control.Monad.Trans.State.Lazy.StateT
                                ExtMap.ExtMap GhcMonad.Ghc)
                           @ b
                           eta1
                     } in
                     \ (x :: r) ->
                     let {
                       m1 :: Control.Monad.Trans.State.Lazy.StateT
                               (Data.Map.Base.Map
                                  (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                                  [SrcLoc.SrcSpan])
                               GhcMonad.Ghc
                               b
                       = g x
                     } in
                     GHC.Base.$
                       @ 'GHC.Types.PtrRepLifted
                       @ (Data.Map.Base.Map
                            (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                            [SrcLoc.SrcSpan]
                          -> GhcMonad.Ghc
                               (a,
                                Data.Map.Base.Map
                                  (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                                  [SrcLoc.SrcSpan]))
                       @ (Control.Monad.Trans.State.Lazy.StateT
                            (Data.Map.Base.Map
                               (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                               [SrcLoc.SrcSpan])
                            GhcMonad.Ghc
                            a)
                       (\ (tpl :: Data.Map.Base.Map
                                    (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                                    [SrcLoc.SrcSpan]
                                  -> GhcMonad.Ghc
                                       (a,
                                        Data.Map.Base.Map
                                          (ExtMap.LogicalRelation
                                             GHC.LanguageExtensions.Type.Extension)
                                          [SrcLoc.SrcSpan])) ->
                        tpl)
                         `cast`
                       (<Data.Map.Base.Map
                           (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                           [SrcLoc.SrcSpan]
                         -> GhcMonad.Ghc
                              (a,
                               Data.Map.Base.Map
                                 (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                                 [SrcLoc.SrcSpan])>_R
                        ->_R Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                      <Data.Map.Base.Map
                                         (ExtMap.LogicalRelation
                                            GHC.LanguageExtensions.Type.Extension)
                                         [SrcLoc.SrcSpan]>_N
                                      <GhcMonad.Ghc>_R
                                      <a>_N))
                       (\ (s1 :: Data.Map.Base.Map
                                   (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                                   [SrcLoc.SrcSpan]) ->
                        GHC.Base.$
                          @ 'GHC.Types.PtrRepLifted
                          @ (GhcMonad.Ghc
                               (b,
                                Data.Map.Base.Map
                                  (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                                  [SrcLoc.SrcSpan]))
                          @ (GhcMonad.Ghc
                               (a,
                                Data.Map.Base.Map
                                  (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                                  [SrcLoc.SrcSpan]))
                          (GhcMonad.$fFunctorGhc_$cfmap
                             @ (b,
                                Data.Map.Base.Map
                                  (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                                  [SrcLoc.SrcSpan])
                             @ (a,
                                Data.Map.Base.Map
                                  (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                                  [SrcLoc.SrcSpan])
                             (\ (ds :: (b,
                                        Data.Map.Base.Map
                                          (ExtMap.LogicalRelation
                                             GHC.LanguageExtensions.Type.Extension)
                                          [SrcLoc.SrcSpan])) ->
                              (eta, case ds of wild { (,) a1 s' -> s' })))
                          (Control.Monad.Trans.State.Lazy.runStateT
                             @ (Data.Map.Base.Map
                                  (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                                  [SrcLoc.SrcSpan])
                             @ GhcMonad.Ghc
                             @ b
                             m1
                             s1))))
                   `cast`
                 (Control.Monad.Trans.Reader.N:ReaderT[0]
                      <*>_N
                      <r>_R
                      <Control.Monad.Trans.State.Lazy.StateT
                         ExtMap.ExtMap GhcMonad.Ghc>_R
                      <a>_N)
                   eta2)
                  `cast`
                (forall (r :: <*>_N) (a :: <*>_N) (b :: <*>_N).
                 <a>_R
                 ->_R <Control.Monad.Trans.Reader.ReaderT
                         r
                         (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc)
                         b>_R
                 ->_R Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                               <*>_N
                               <r>_R
                               <Control.Monad.Trans.State.Lazy.StateT
                                  ExtMap.ExtMap GhcMonad.Ghc>_R
                               <a>_N)) -}
babe13285fc6b4f2b0e1244e9d64d85f
  $s$fApplicativeReaderT_$s$fFunctorReaderT_$cfmap ::
    (a -> b)
    -> Control.Monad.Trans.Reader.ReaderT
         r
         (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc)
         a
    -> Control.Monad.Trans.Reader.ReaderT
         r
         (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc)
         b
  {- Arity: 3, HasNoCafRefs, Strictness: <L,C(U)><L,1*C1(U)><L,U>,
     Inline: INLINE (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ @ r
                   @ a
                   @ b
                   (f :: a -> b)
                   (eta :: Control.Monad.Trans.Reader.ReaderT
                             r
                             (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc)
                             a)
                   (eta1 :: r) ->
                 (GHC.Base.$
                    @ 'GHC.Types.PtrRepLifted
                    @ (r
                       -> Control.Monad.Trans.State.Lazy.StateT
                            ExtMap.ExtMap GhcMonad.Ghc b)
                    @ (Control.Monad.Trans.Reader.ReaderT
                         r
                         (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc)
                         b)
                    (\ (tpl :: r
                               -> Control.Monad.Trans.State.Lazy.StateT
                                    ExtMap.ExtMap GhcMonad.Ghc b) ->
                     tpl)
                      `cast`
                    (<r
                      -> Control.Monad.Trans.State.Lazy.StateT
                           ExtMap.ExtMap GhcMonad.Ghc b>_R
                     ->_R Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                   <*>_N
                                   <r>_R
                                   <Control.Monad.Trans.State.Lazy.StateT
                                      ExtMap.ExtMap GhcMonad.Ghc>_R
                                   <b>_N))
                    (let {
                       g :: r
                            -> Control.Monad.Trans.State.Lazy.StateT
                                 ExtMap.ExtMap GhcMonad.Ghc a
                       = Control.Monad.Trans.Reader.runReaderT
                           @ r
                           @ *
                           @ (Control.Monad.Trans.State.Lazy.StateT
                                ExtMap.ExtMap GhcMonad.Ghc)
                           @ a
                           eta
                     } in
                     \ (x :: r) ->
                     let {
                       m1 :: Control.Monad.Trans.State.Lazy.StateT
                               (Data.Map.Base.Map
                                  (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                                  [SrcLoc.SrcSpan])
                               GhcMonad.Ghc
                               a
                       = g x
                     } in
                     GHC.Base.$
                       @ 'GHC.Types.PtrRepLifted
                       @ (Data.Map.Base.Map
                            (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                            [SrcLoc.SrcSpan]
                          -> GhcMonad.Ghc
                               (b,
                                Data.Map.Base.Map
                                  (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                                  [SrcLoc.SrcSpan]))
                       @ (Control.Monad.Trans.State.Lazy.StateT
                            (Data.Map.Base.Map
                               (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                               [SrcLoc.SrcSpan])
                            GhcMonad.Ghc
                            b)
                       (\ (tpl :: Data.Map.Base.Map
                                    (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                                    [SrcLoc.SrcSpan]
                                  -> GhcMonad.Ghc
                                       (b,
                                        Data.Map.Base.Map
                                          (ExtMap.LogicalRelation
                                             GHC.LanguageExtensions.Type.Extension)
                                          [SrcLoc.SrcSpan])) ->
                        tpl)
                         `cast`
                       (<Data.Map.Base.Map
                           (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                           [SrcLoc.SrcSpan]
                         -> GhcMonad.Ghc
                              (b,
                               Data.Map.Base.Map
                                 (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                                 [SrcLoc.SrcSpan])>_R
                        ->_R Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                      <Data.Map.Base.Map
                                         (ExtMap.LogicalRelation
                                            GHC.LanguageExtensions.Type.Extension)
                                         [SrcLoc.SrcSpan]>_N
                                      <GhcMonad.Ghc>_R
                                      <b>_N))
                       (\ (s1 :: Data.Map.Base.Map
                                   (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                                   [SrcLoc.SrcSpan]) ->
                        GHC.Base.$
                          @ 'GHC.Types.PtrRepLifted
                          @ (GhcMonad.Ghc
                               (a,
                                Data.Map.Base.Map
                                  (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                                  [SrcLoc.SrcSpan]))
                          @ (GhcMonad.Ghc
                               (b,
                                Data.Map.Base.Map
                                  (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                                  [SrcLoc.SrcSpan]))
                          (GhcMonad.$fFunctorGhc_$cfmap
                             @ (a,
                                Data.Map.Base.Map
                                  (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                                  [SrcLoc.SrcSpan])
                             @ (b,
                                Data.Map.Base.Map
                                  (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                                  [SrcLoc.SrcSpan])
                             (\ (ds :: (a,
                                        Data.Map.Base.Map
                                          (ExtMap.LogicalRelation
                                             GHC.LanguageExtensions.Type.Extension)
                                          [SrcLoc.SrcSpan])) ->
                              (f (case ds of wild { (,) a1 s' -> a1 }),
                               case ds of wild { (,) a1 s' -> s' })))
                          (Control.Monad.Trans.State.Lazy.runStateT
                             @ (Data.Map.Base.Map
                                  (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                                  [SrcLoc.SrcSpan])
                             @ GhcMonad.Ghc
                             @ a
                             m1
                             s1))))
                   `cast`
                 (Control.Monad.Trans.Reader.N:ReaderT[0]
                      <*>_N
                      <r>_R
                      <Control.Monad.Trans.State.Lazy.StateT
                         ExtMap.ExtMap GhcMonad.Ghc>_R
                      <b>_N)
                   eta1)
                  `cast`
                (forall (r :: <*>_N) (a :: <*>_N) (b :: <*>_N).
                 <a -> b>_R
                 ->_R <Control.Monad.Trans.Reader.ReaderT
                         r
                         (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc)
                         a>_R
                 ->_R Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                               <*>_N
                               <r>_R
                               <Control.Monad.Trans.State.Lazy.StateT
                                  ExtMap.ExtMap GhcMonad.Ghc>_R
                               <b>_N)) -}
de15cd3e68bd64c3da77d3fff3a181af
  $s$fApplicativeReaderT_$s$fFunctorStateT ::
    GHC.Base.Functor
      (Control.Monad.Trans.State.Lazy.StateT s GhcMonad.Ghc)
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ s.
                  @ (Control.Monad.Trans.State.Lazy.StateT s GhcMonad.Ghc)
                  (TraverseAST.$s$fApplicativeReaderT_$s$fFunctorStateT_$cfmap @ s)
                  (Control.Monad.Trans.State.Lazy.$fFunctorStateT_$c<$
                     @ GhcMonad.Ghc
                     @ s
                     GhcMonad.$fFunctorGhc) -}
383437c34cf2c23c8613b404f6a486e7
  $s$fApplicativeReaderT_$s$fFunctorStateT_$cfmap ::
    (a -> b)
    -> Control.Monad.Trans.State.Lazy.StateT s GhcMonad.Ghc a
    -> Control.Monad.Trans.State.Lazy.StateT s GhcMonad.Ghc b
  {- Arity: 3, HasNoCafRefs, Strictness: <L,C(U)><L,1*C1(U)><L,U>,
     Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ @ s
                   @ a
                   @ b
                   (f :: a -> b)
                   (m1 :: Control.Monad.Trans.State.Lazy.StateT s GhcMonad.Ghc a) ->
                 GHC.Base.$
                   @ 'GHC.Types.PtrRepLifted
                   @ (s -> GhcMonad.Ghc (b, s))
                   @ (Control.Monad.Trans.State.Lazy.StateT s GhcMonad.Ghc b)
                   (\ (tpl :: s -> GhcMonad.Ghc (b, s)) -> tpl)
                     `cast`
                   (<s -> GhcMonad.Ghc (b, s)>_R
                    ->_R Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                  <s>_N <GhcMonad.Ghc>_R <b>_N))
                   (\ (s1 :: s) ->
                    GHC.Base.$
                      @ 'GHC.Types.PtrRepLifted
                      @ (GhcMonad.Ghc (a, s))
                      @ (GhcMonad.Ghc (b, s))
                      (GhcMonad.$fFunctorGhc_$cfmap
                         @ (a, s)
                         @ (b, s)
                         (\ (ds :: (a, s)) ->
                          (f (case ds of wild { (,) a1 s' -> a1 }),
                           case ds of wild { (,) a1 s' -> s' })))
                      (Control.Monad.Trans.State.Lazy.runStateT
                         @ s
                         @ GhcMonad.Ghc
                         @ a
                         m1
                         s1))) -}
246cdd135f79c62292c50585a177d585
  $s$fMonadReaderT ::
    GHC.Base.Monad
      (Control.Monad.Trans.Reader.ReaderT
         r
         (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc))
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ r.
                  @ (Control.Monad.Trans.Reader.ReaderT
                       r
                       (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc))
                  (TraverseAST.$s$fMonadReaderT_$s$fMonadReaderT_$cp1Monad @ r)
                  (TraverseAST.$s$fMonadReaderT_$s$fMonadReaderT_$c>>= @ r)
                  (TraverseAST.$s$fMonadReaderT_$s$fMonadReaderT_$c>> @ r)
                  (TraverseAST.$s$fApplicativeReaderT_$cpure @ r)
                  (TraverseAST.$s$fMonadReaderT_$s$fMonadReaderT_$cfail @ r) -}
22920775acd545db323b159dc915d645
  $s$fMonadReaderT_$s$fMonadReaderT_$c>> ::
    Control.Monad.Trans.Reader.ReaderT
      r
      (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc)
      a
    -> Control.Monad.Trans.Reader.ReaderT
         r
         (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc)
         b
    -> Control.Monad.Trans.Reader.ReaderT
         r
         (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc)
         b
  {- Arity: 3, HasNoCafRefs, Strictness: <L,1*C1(U)><L,1*C1(U)><L,U>,
     Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ @ r
                   @ a
                   @ b
                   (m1 :: Control.Monad.Trans.Reader.ReaderT
                            r
                            (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc)
                            a)
                   (k :: Control.Monad.Trans.Reader.ReaderT
                           r
                           (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc)
                           b) ->
                 GHC.Base.$
                   @ 'GHC.Types.PtrRepLifted
                   @ (r
                      -> Control.Monad.Trans.State.Lazy.StateT
                           ExtMap.ExtMap GhcMonad.Ghc b)
                   @ (Control.Monad.Trans.Reader.ReaderT
                        r
                        (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc)
                        b)
                   (\ (tpl :: r
                              -> Control.Monad.Trans.State.Lazy.StateT
                                   ExtMap.ExtMap GhcMonad.Ghc b) ->
                    tpl)
                     `cast`
                   (<r
                     -> Control.Monad.Trans.State.Lazy.StateT
                          ExtMap.ExtMap GhcMonad.Ghc b>_R
                    ->_R Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                  <*>_N
                                  <r>_R
                                  <Control.Monad.Trans.State.Lazy.StateT
                                     ExtMap.ExtMap GhcMonad.Ghc>_R
                                  <b>_N))
                   (\ (r1 :: r) ->
                    let {
                      m2 :: Control.Monad.Trans.State.Lazy.StateT
                              (Data.Map.Base.Map
                                 (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                                 [SrcLoc.SrcSpan])
                              GhcMonad.Ghc
                              a
                      = Control.Monad.Trans.Reader.runReaderT
                          @ r
                          @ *
                          @ (Control.Monad.Trans.State.Lazy.StateT
                               ExtMap.ExtMap GhcMonad.Ghc)
                          @ a
                          m1
                          r1
                    } in
                    GHC.Base.$
                      @ 'GHC.Types.PtrRepLifted
                      @ (Data.Map.Base.Map
                           (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                           [SrcLoc.SrcSpan]
                         -> GhcMonad.Ghc
                              (b,
                               Data.Map.Base.Map
                                 (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                                 [SrcLoc.SrcSpan]))
                      @ (Control.Monad.Trans.State.Lazy.StateT
                           (Data.Map.Base.Map
                              (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                              [SrcLoc.SrcSpan])
                           GhcMonad.Ghc
                           b)
                      (\ (tpl :: Data.Map.Base.Map
                                   (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                                   [SrcLoc.SrcSpan]
                                 -> GhcMonad.Ghc
                                      (b,
                                       Data.Map.Base.Map
                                         (ExtMap.LogicalRelation
                                            GHC.LanguageExtensions.Type.Extension)
                                         [SrcLoc.SrcSpan])) ->
                       tpl)
                        `cast`
                      (<Data.Map.Base.Map
                          (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                          [SrcLoc.SrcSpan]
                        -> GhcMonad.Ghc
                             (b,
                              Data.Map.Base.Map
                                (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                                [SrcLoc.SrcSpan])>_R
                       ->_R Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                     <Data.Map.Base.Map
                                        (ExtMap.LogicalRelation
                                           GHC.LanguageExtensions.Type.Extension)
                                        [SrcLoc.SrcSpan]>_N
                                     <GhcMonad.Ghc>_R
                                     <b>_N))
                      (\ (s1 :: Data.Map.Base.Map
                                  (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                                  [SrcLoc.SrcSpan]) ->
                       GhcMonad.$fMonadGhc_$c>>=
                         @ (a,
                            Data.Map.Base.Map
                              (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                              [SrcLoc.SrcSpan])
                         @ (b,
                            Data.Map.Base.Map
                              (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                              [SrcLoc.SrcSpan])
                         (Control.Monad.Trans.State.Lazy.runStateT
                            @ (Data.Map.Base.Map
                                 (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                                 [SrcLoc.SrcSpan])
                            @ GhcMonad.Ghc
                            @ a
                            m2
                            s1)
                         (\ (ds :: (a,
                                    Data.Map.Base.Map
                                      (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                                      [SrcLoc.SrcSpan])) ->
                          Control.Monad.Trans.State.Lazy.runStateT
                            @ (Data.Map.Base.Map
                                 (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                                 [SrcLoc.SrcSpan])
                            @ GhcMonad.Ghc
                            @ b
                            (Control.Monad.Trans.Reader.runReaderT
                               @ r
                               @ *
                               @ (Control.Monad.Trans.State.Lazy.StateT
                                    ExtMap.ExtMap GhcMonad.Ghc)
                               @ b
                               k
                               r1)
                            (case ds of wild { (,) a1 s' -> s' }))))) -}
fa18fee98c9309bc7942e3c441c6fc94
  $s$fMonadReaderT_$s$fMonadReaderT_$c>>= ::
    Control.Monad.Trans.Reader.ReaderT
      r
      (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc)
      a
    -> (a
        -> Control.Monad.Trans.Reader.ReaderT
             r
             (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc)
             b)
    -> Control.Monad.Trans.Reader.ReaderT
         r
         (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc)
         b
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*C1(U)><L,C(C1(C1(C1(C1(U)))))><L,U>,
     Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ @ r
                   @ a
                   @ b
                   (m1 :: Control.Monad.Trans.Reader.ReaderT
                            r
                            (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc)
                            a)
                   (k :: a
                         -> Control.Monad.Trans.Reader.ReaderT
                              r
                              (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc)
                              b) ->
                 GHC.Base.$
                   @ 'GHC.Types.PtrRepLifted
                   @ (r
                      -> Control.Monad.Trans.State.Lazy.StateT
                           ExtMap.ExtMap GhcMonad.Ghc b)
                   @ (Control.Monad.Trans.Reader.ReaderT
                        r
                        (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc)
                        b)
                   (\ (tpl :: r
                              -> Control.Monad.Trans.State.Lazy.StateT
                                   ExtMap.ExtMap GhcMonad.Ghc b) ->
                    tpl)
                     `cast`
                   (<r
                     -> Control.Monad.Trans.State.Lazy.StateT
                          ExtMap.ExtMap GhcMonad.Ghc b>_R
                    ->_R Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                  <*>_N
                                  <r>_R
                                  <Control.Monad.Trans.State.Lazy.StateT
                                     ExtMap.ExtMap GhcMonad.Ghc>_R
                                  <b>_N))
                   (\ (r1 :: r) ->
                    let {
                      m2 :: Control.Monad.Trans.State.Lazy.StateT
                              (Data.Map.Base.Map
                                 (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                                 [SrcLoc.SrcSpan])
                              GhcMonad.Ghc
                              a
                      = Control.Monad.Trans.Reader.runReaderT
                          @ r
                          @ *
                          @ (Control.Monad.Trans.State.Lazy.StateT
                               ExtMap.ExtMap GhcMonad.Ghc)
                          @ a
                          m1
                          r1
                    } in
                    GHC.Base.$
                      @ 'GHC.Types.PtrRepLifted
                      @ (Data.Map.Base.Map
                           (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                           [SrcLoc.SrcSpan]
                         -> GhcMonad.Ghc
                              (b,
                               Data.Map.Base.Map
                                 (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                                 [SrcLoc.SrcSpan]))
                      @ (Control.Monad.Trans.State.Lazy.StateT
                           (Data.Map.Base.Map
                              (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                              [SrcLoc.SrcSpan])
                           GhcMonad.Ghc
                           b)
                      (\ (tpl :: Data.Map.Base.Map
                                   (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                                   [SrcLoc.SrcSpan]
                                 -> GhcMonad.Ghc
                                      (b,
                                       Data.Map.Base.Map
                                         (ExtMap.LogicalRelation
                                            GHC.LanguageExtensions.Type.Extension)
                                         [SrcLoc.SrcSpan])) ->
                       tpl)
                        `cast`
                      (<Data.Map.Base.Map
                          (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                          [SrcLoc.SrcSpan]
                        -> GhcMonad.Ghc
                             (b,
                              Data.Map.Base.Map
                                (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                                [SrcLoc.SrcSpan])>_R
                       ->_R Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                     <Data.Map.Base.Map
                                        (ExtMap.LogicalRelation
                                           GHC.LanguageExtensions.Type.Extension)
                                        [SrcLoc.SrcSpan]>_N
                                     <GhcMonad.Ghc>_R
                                     <b>_N))
                      (\ (s1 :: Data.Map.Base.Map
                                  (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                                  [SrcLoc.SrcSpan]) ->
                       GhcMonad.$fMonadGhc_$c>>=
                         @ (a,
                            Data.Map.Base.Map
                              (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                              [SrcLoc.SrcSpan])
                         @ (b,
                            Data.Map.Base.Map
                              (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                              [SrcLoc.SrcSpan])
                         (Control.Monad.Trans.State.Lazy.runStateT
                            @ (Data.Map.Base.Map
                                 (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                                 [SrcLoc.SrcSpan])
                            @ GhcMonad.Ghc
                            @ a
                            m2
                            s1)
                         (\ (ds :: (a,
                                    Data.Map.Base.Map
                                      (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                                      [SrcLoc.SrcSpan])) ->
                          Control.Monad.Trans.State.Lazy.runStateT
                            @ (Data.Map.Base.Map
                                 (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                                 [SrcLoc.SrcSpan])
                            @ GhcMonad.Ghc
                            @ b
                            (Control.Monad.Trans.Reader.runReaderT
                               @ r
                               @ *
                               @ (Control.Monad.Trans.State.Lazy.StateT
                                    ExtMap.ExtMap GhcMonad.Ghc)
                               @ b
                               (k (case ds of wild { (,) a1 s' -> a1 }))
                               r1)
                            (case ds of wild { (,) a1 s' -> s' }))))) -}
ad208fc8f48692ea4c7042e18470c530
  $s$fMonadReaderT_$s$fMonadReaderT_$cfail ::
    GHC.Base.String
    -> Control.Monad.Trans.Reader.ReaderT
         r
         (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc)
         a
  {- Arity: 3, Strictness: <B,U><B,A><B,A>x,
     Inline: INLINE (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ @ r @ a (msg :: GHC.Base.String) ->
                 let {
                   eta :: Control.Monad.Trans.State.Lazy.StateT
                            ExtMap.ExtMap GhcMonad.Ghc a
                   = GHC.Base.$
                       @ 'GHC.Types.PtrRepLifted
                       @ (Data.Map.Base.Map
                            (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                            [SrcLoc.SrcSpan]
                          -> GhcMonad.Ghc
                               (a,
                                Data.Map.Base.Map
                                  (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                                  [SrcLoc.SrcSpan]))
                       @ (Control.Monad.Trans.State.Lazy.StateT
                            (Data.Map.Base.Map
                               (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                               [SrcLoc.SrcSpan])
                            GhcMonad.Ghc
                            a)
                       (\ (tpl :: Data.Map.Base.Map
                                    (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                                    [SrcLoc.SrcSpan]
                                  -> GhcMonad.Ghc
                                       (a,
                                        Data.Map.Base.Map
                                          (ExtMap.LogicalRelation
                                             GHC.LanguageExtensions.Type.Extension)
                                          [SrcLoc.SrcSpan])) ->
                        tpl)
                         `cast`
                       (<Data.Map.Base.Map
                           (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                           [SrcLoc.SrcSpan]
                         -> GhcMonad.Ghc
                              (a,
                               Data.Map.Base.Map
                                 (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                                 [SrcLoc.SrcSpan])>_R
                        ->_R Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                      <Data.Map.Base.Map
                                         (ExtMap.LogicalRelation
                                            GHC.LanguageExtensions.Type.Extension)
                                         [SrcLoc.SrcSpan]>_N
                                      <GhcMonad.Ghc>_R
                                      <a>_N))
                       (\ (ds :: Data.Map.Base.Map
                                   (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                                   [SrcLoc.SrcSpan]) ->
                        GhcMonad.$fMonadGhc_$s$dmfail
                          @ (a,
                             Data.Map.Base.Map
                               (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                               [SrcLoc.SrcSpan])
                          msg)
                 } in
                 (\ (eta1 :: r) ->
                  GHC.Base.const
                    @ (Control.Monad.Trans.State.Lazy.StateT
                         ExtMap.ExtMap GhcMonad.Ghc a)
                    @ r
                    eta
                    eta1)
                   `cast`
                 (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                           <*>_N
                           <r>_R
                           <Control.Monad.Trans.State.Lazy.StateT
                              ExtMap.ExtMap GhcMonad.Ghc>_R
                           <a>_N))) -}
96164c2f1c0f9a37d3c2ccdbb9357d4a
  $s$fMonadReaderT_$s$fMonadReaderT_$cp1Monad ::
    GHC.Base.Applicative
      (Control.Monad.Trans.Reader.ReaderT
         r
         (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc))
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                TraverseAST.$s$fApplicativeReaderT -}
36ec6d1293d71207afc60939db5a63eb
  $s$fRefMonadswr ::
    Control.Reference.Representation.RefMonads
      (Control.Monad.Trans.Reader.ReaderT
         [GHC.LanguageExtensions.Type.Extension]
         (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc))
      Control.Reference.Representation.MU
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (Control.Monad.Trans.Reader.ReaderT
                       [GHC.LanguageExtensions.Type.Extension]
                       (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc))
                  @ Control.Reference.Representation.MU
                  TraverseAST.$s$fRefMonadswr3
                  TraverseAST.$s$fRefMonadswr2
                  TraverseAST.$s$fRefMonadswr1
                  TraverseAST.$s$fRefMonadswr_$s$fRefMonadswr_$cp4RefMonads
                  TraverseAST.$s$fRefMonadswr_$s$fRefMonadswr_$cp5RefMonads
                  TraverseAST.$s$fRefMonadswr_$s$fRefMonadswr_$cp6RefMonads -}
e1116d36c7c955931755dc50656cbc9c
  $s$fRefMonadswr1 ::
    GHC.Base.Monad
      (Control.Monad.Trans.Reader.ReaderT
         [GHC.LanguageExtensions.Type.Extension]
         (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc))
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                (TraverseAST.$s$fMonadReaderT
                   @ [GHC.LanguageExtensions.Type.Extension]) -}
9d57e82963f9e7da4af8b0df656e0aa2
  $s$fRefMonadswr2 ::
    GHC.Base.Applicative
      (Control.Monad.Trans.Reader.ReaderT
         [GHC.LanguageExtensions.Type.Extension]
         (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc))
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                (TraverseAST.$s$fApplicativeReaderT
                   @ [GHC.LanguageExtensions.Type.Extension]) -}
6a0de0f996748d57bded1909a6e7f4e6
  $s$fRefMonadswr3 ::
    GHC.Base.Functor
      (Control.Monad.Trans.Reader.ReaderT
         [GHC.LanguageExtensions.Type.Extension]
         (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc))
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                (TraverseAST.$s$fApplicativeReaderT_$s$fFunctorReaderT
                   @ [GHC.LanguageExtensions.Type.Extension]) -}
1b4edd9c4337ad37f98c4b47e7ad45ca
  $s$fRefMonadswr_$s$fRefMonadswr_$cp4RefMonads ::
    GHC.Base.Functor Control.Reference.Representation.MU
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True) Data.Proxy.$fFunctorProxy -}
a6c590526cfc592ca2ff25def617f1f4
  $s$fRefMonadswr_$s$fRefMonadswr_$cp5RefMonads ::
    GHC.Base.Applicative Control.Reference.Representation.MU
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                Data.Proxy.$fApplicativeProxy -}
a75593fa7f25cc280bc8e7f7cb2b3b82
  $s$fRefMonadswr_$s$fRefMonadswr_$cp6RefMonads ::
    GHC.Base.Monad Control.Reference.Representation.MU
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True) Data.Proxy.$fMonadProxy -}
5c9a48282d5419e97aa1cb332f3535cc
  $sannJust1 :: GHC.Base.Maybe a -> Data.Proxy.Proxy a
  {- Arity: 1, HasNoCafRefs, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ @ a (eta :: GHC.Base.Maybe a) -> Data.Proxy.Proxy @ * @ a) -}
5965d5c1783ae1dfdd27a0c5fa60ba70
  $sannList1 :: [a] -> Data.Proxy.Proxy a
  {- Arity: 1, HasNoCafRefs, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ @ a (eta :: [a]) -> Data.Proxy.Proxy @ * @ a) -}
a85271a49aa13d0cbfb11bb04c01e65d
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   TraverseAST.$trModule2
                   TraverseAST.$trModule1) -}
2dc0b66173410c8c5643b3619815ff02
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "TraverseAST"#) -}
f7fea55006eb18a4f12210830660702b
  $trModule2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   "ht-extension-organizer-0.1.0.0-y3uypH7gCtA60AaWeuyZL"#) -}
99076470a825161ce886ab61efed755c
  $wchkFieldUpdate ::
    ExtMonad.ExtDomain dom =>
    Language.Haskell.Tools.AST.Ann.NodeInfo
      (Language.Haskell.Tools.AST.Ann.SemanticInfo
         dom Language.Haskell.Tools.AST.Representation.Exprs.UFieldUpdate)
      (Language.Haskell.Tools.AST.Ann.SpanInfo
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
    -> Language.Haskell.Tools.AST.Representation.Exprs.UFieldUpdate
         dom Language.Haskell.Tools.AST.Ann.SrcTemplateStage
    -> ExtMap.ExtMap
    -> GhcMonad.Ghc
         (Language.Haskell.Tools.AST.ElementTypes.FieldUpdate dom,
          ExtMap.ExtMap)
  {- Arity: 4,
     Strictness: <S(S(LLS(S)LLLLLLLLLL)L),U(U(A,A,U(U),A,A,A,A,A,A,A,A,A,A),A)><L,U(U,U(U,U,U,U))><S,U><L,U>,
     Inline: [0],
     Unfolding: (\ @ dom
                   (w :: ExtMonad.ExtDomain dom)
                   (ww :: Language.Haskell.Tools.AST.Ann.NodeInfo
                            (Language.Haskell.Tools.AST.Ann.SemanticInfo
                               dom Language.Haskell.Tools.AST.Representation.Exprs.UFieldUpdate)
                            (Language.Haskell.Tools.AST.Ann.SpanInfo
                               Language.Haskell.Tools.AST.Ann.SrcTemplateStage))
                   (ww1 :: Language.Haskell.Tools.AST.Representation.Exprs.UFieldUpdate
                             dom Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   (w1 :: ExtMap.ExtMap) ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Language.Haskell.Tools.AST.Ann.SemanticInfo'
                             dom Language.Haskell.Tools.AST.Ann.SameInfoDefaultCls)
                        @ Language.Haskell.Tools.AST.SemaInfoTypes.NoSemanticInfo
                        (Language.Haskell.Tools.AST.Ann.$p3Domain
                           @ dom
                           (GHC.Classes.$p1(%,%)
                              @ (Language.Haskell.Tools.AST.Ann.Domain dom)
                              @ (Language.Haskell.Tools.AST.SemaInfoClasses.HasNameInfo'
                                   (Language.Haskell.Tools.AST.Ann.SemanticInfo
                                      dom
                                      Language.Haskell.Tools.AST.Representation.Names.UQualifiedName))
                              w))
                          `cast`
                        (Data.Type.Equality.N:~[0]
                             <*>_N <Language.Haskell.Tools.AST.Ann.SemanticInfo'
                                      dom
                                      Language.Haskell.Tools.AST.Ann.SameInfoDefaultCls>_N <Language.Haskell.Tools.AST.SemaInfoTypes.NoSemanticInfo>_N) of cobox0 { DEFAULT ->
                 RecordWildCardsChecker.$wchkRecordWildCardsFieldUpdate
                   @ dom
                   w
                   ww
                   ww1
                   w1 }) -}
23a2d8ab7c07b49089721f9ae7b0bcff
  $wchkPatternField ::
    ExtMonad.ExtDomain dom =>
    Language.Haskell.Tools.AST.Ann.NodeInfo
      (Language.Haskell.Tools.AST.Ann.SemanticInfo
         dom
         Language.Haskell.Tools.AST.Representation.Patterns.UPatternField)
      (Language.Haskell.Tools.AST.Ann.SpanInfo
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
    -> Language.Haskell.Tools.AST.Representation.Patterns.UPatternField
         dom Language.Haskell.Tools.AST.Ann.SrcTemplateStage
    -> ExtMap.ExtMap
    -> GhcMonad.Ghc
         (Language.Haskell.Tools.AST.ElementTypes.PatternField dom,
          ExtMap.ExtMap)
  {- Arity: 4,
     Strictness: <S(S(LLS(S)LLLLLLLLLL)L),U(U(A,A,U(U),A,A,A,A,A,A,A,A,A,A),A)><L,U(U,U(U,U,U,U))><S,U><L,U>,
     Inline: [0],
     Unfolding: (\ @ dom
                   (w :: ExtMonad.ExtDomain dom)
                   (ww :: Language.Haskell.Tools.AST.Ann.NodeInfo
                            (Language.Haskell.Tools.AST.Ann.SemanticInfo
                               dom
                               Language.Haskell.Tools.AST.Representation.Patterns.UPatternField)
                            (Language.Haskell.Tools.AST.Ann.SpanInfo
                               Language.Haskell.Tools.AST.Ann.SrcTemplateStage))
                   (ww1 :: Language.Haskell.Tools.AST.Representation.Patterns.UPatternField
                             dom Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   (w1 :: ExtMap.ExtMap) ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Language.Haskell.Tools.AST.Ann.SemanticInfo'
                             dom Language.Haskell.Tools.AST.Ann.SameInfoDefaultCls)
                        @ Language.Haskell.Tools.AST.SemaInfoTypes.NoSemanticInfo
                        (Language.Haskell.Tools.AST.Ann.$p3Domain
                           @ dom
                           (GHC.Classes.$p1(%,%)
                              @ (Language.Haskell.Tools.AST.Ann.Domain dom)
                              @ (Language.Haskell.Tools.AST.SemaInfoClasses.HasNameInfo'
                                   (Language.Haskell.Tools.AST.Ann.SemanticInfo
                                      dom
                                      Language.Haskell.Tools.AST.Representation.Names.UQualifiedName))
                              w))
                          `cast`
                        (Data.Type.Equality.N:~[0]
                             <*>_N <Language.Haskell.Tools.AST.Ann.SemanticInfo'
                                      dom
                                      Language.Haskell.Tools.AST.Ann.SameInfoDefaultCls>_N <Language.Haskell.Tools.AST.SemaInfoTypes.NoSemanticInfo>_N) of cobox0 { DEFAULT ->
                 RecordWildCardsChecker.$wchkRecordWildCardsPatField
                   @ dom
                   w
                   ww
                   ww1
                   w1 }) -}
8bc16f7431c879c406cedfb196148862
  type AltG (uexpr :: GHC.Types.* -> * -> *) dom =
    Language.Haskell.Tools.AST.Ann.Ann
      (Language.Haskell.Tools.AST.Representation.Exprs.UAlt' uexpr)
      dom
      Language.Haskell.Tools.AST.Ann.SrcTemplateStage
88e6b86261f4d225b1f74823fe4a8b41
  type CaseRhsG (uexpr :: GHC.Types.* -> * -> *) dom =
    Language.Haskell.Tools.AST.Ann.Ann
      (Language.Haskell.Tools.AST.Representation.Exprs.UCaseRhs' uexpr)
      dom
      Language.Haskell.Tools.AST.Ann.SrcTemplateStage
7b4ada0f847f70185564db1503bfc3f7
  type GuardedCaseRhsG (uexpr :: GHC.Types.* -> * -> *) dom =
    Language.Haskell.Tools.AST.Ann.Ann
      (Language.Haskell.Tools.AST.Representation.Exprs.UGuardedCaseRhs'
         uexpr)
      dom
      Language.Haskell.Tools.AST.Ann.SrcTemplateStage
e63146b5c2a71d5cc5fc81e52a861bd2
  type StmtG (uexpr :: GHC.Types.* -> GHC.Types.* -> GHC.Types.*)
             dom =
    Language.Haskell.Tools.AST.Ann.Ann
      (Language.Haskell.Tools.AST.Representation.Stmts.UStmt' uexpr)
      dom
      Language.Haskell.Tools.AST.Ann.SrcTemplateStage
440ac7bb668095ee03cc95fb0be3977a
  chkDecl ::
    ExtMonad.CheckNode Language.Haskell.Tools.AST.ElementTypes.Decl
  {- Arity: 3,
     Strictness: <S(S(LLS(S)LLLLLLLLLL)L),U(U(U,U,U(U),U,U,U,U,U,U,U,U,U,U),U)><L,U(U,U)><L,U>,
     Unfolding: InlineRule (0, True, True)
                TraverseAST.chkDecl1
                  `cast`
                (forall (dom :: <*>_N).
                 <ExtMonad.ExtDomain dom>_R
                 ->_R <Language.Haskell.Tools.AST.ElementTypes.Decl dom>_R
                 ->_R Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                               <*>_N
                               <[GHC.LanguageExtensions.Type.Extension]>_R
                               <Control.Monad.Trans.State.Lazy.StateT
                                  ExtMap.ExtMap GhcMonad.Ghc>_R
                               <Language.Haskell.Tools.AST.ElementTypes.Decl dom>_N)) -}
6d2f2ebb56ab35765bbd3eb166deb22f
  chkDecl1 ::
    ExtMonad.ExtDomain dom =>
    Language.Haskell.Tools.AST.ElementTypes.Decl dom
    -> [GHC.LanguageExtensions.Type.Extension]
    -> Control.Monad.Trans.State.Lazy.StateT
         ExtMap.ExtMap
         GhcMonad.Ghc
         (Language.Haskell.Tools.AST.ElementTypes.Decl dom)
  {- Arity: 3,
     Strictness: <S(S(LLS(S)LLLLLLLLLL)L),U(U(U,U,U(U),U,U,U,U,U,U,U,U,U,U),U)><L,U(U,U)><L,U>,
     Unfolding: (\ @ dom
                   ($d(%,%) :: ExtMonad.ExtDomain dom)
                   (eta :: Language.Haskell.Tools.AST.ElementTypes.Decl dom)
                   (eta1 :: [GHC.LanguageExtensions.Type.Extension]) ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Language.Haskell.Tools.AST.Ann.SemanticInfo'
                             dom Language.Haskell.Tools.AST.Ann.SameInfoDefaultCls)
                        @ Language.Haskell.Tools.AST.SemaInfoTypes.NoSemanticInfo
                        (Language.Haskell.Tools.AST.Ann.$p3Domain
                           @ dom
                           (GHC.Classes.$p1(%,%)
                              @ (Language.Haskell.Tools.AST.Ann.Domain dom)
                              @ (Language.Haskell.Tools.AST.SemaInfoClasses.HasNameInfo'
                                   (Language.Haskell.Tools.AST.Ann.SemanticInfo
                                      dom
                                      Language.Haskell.Tools.AST.Representation.Names.UQualifiedName))
                              $d(%,%)))
                          `cast`
                        (Data.Type.Equality.N:~[0]
                             <*>_N <Language.Haskell.Tools.AST.Ann.SemanticInfo'
                                      dom
                                      Language.Haskell.Tools.AST.Ann.SameInfoDefaultCls>_N <Language.Haskell.Tools.AST.SemaInfoTypes.NoSemanticInfo>_N) of cobox0 { DEFAULT ->
                 let {
                   m1 :: Control.Monad.Trans.State.Lazy.StateT
                           (Data.Map.Base.Map
                              (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                              [SrcLoc.SrcSpan])
                           GhcMonad.Ghc
                           (Language.Haskell.Tools.AST.ElementTypes.Decl dom)
                   = FlexibleInstancesChecker.chkFlexibleInstances1
                       @ dom
                       $d(%,%)
                       eta
                       eta1
                 } in
                 (\ (s1 :: Data.Map.Base.Map
                             (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                             [SrcLoc.SrcSpan]) ->
                  let {
                    m :: GhcMonad.Ghc
                           (Language.Haskell.Tools.AST.ElementTypes.Decl dom,
                            Data.Map.Base.Map
                              (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                              [SrcLoc.SrcSpan])
                    = m1
                        `cast`
                      (Control.Monad.Trans.State.Lazy.N:StateT[0]
                           <Data.Map.Base.Map
                              (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                              [SrcLoc.SrcSpan]>_N
                           <GhcMonad.Ghc>_R
                           <Language.Haskell.Tools.AST.ElementTypes.Decl dom>_N)
                        s1
                  } in
                  (\ (s :: GhcMonad.Session)
                     (s2 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                   case (m `cast`
                         (GhcMonad.N:Ghc[0]
                              <(Language.Haskell.Tools.AST.ElementTypes.Decl dom,
                                Data.Map.Base.Map
                                  (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                                  [SrcLoc.SrcSpan])>_R)
                           s)
                          `cast`
                        (GHC.Types.N:IO[0]
                             <(Language.Haskell.Tools.AST.ElementTypes.Decl dom,
                               Data.Map.Base.Map
                                 (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                                 [SrcLoc.SrcSpan])>_R)
                          s2 of ds1 { (#,#) ipv ipv1 ->
                   ((((DerivingsChecker.chkDerivings
                         @ dom
                         $d(%,%)
                         (case ipv1 of wild { (,) a1 s' -> a1 }))
                        `cast`
                      (Control.Monad.Trans.Reader.N:ReaderT[0]
                           <*>_N
                           <[GHC.LanguageExtensions.Type.Extension]>_R
                           <Control.Monad.Trans.State.Lazy.StateT
                              ExtMap.ExtMap GhcMonad.Ghc>_R
                           <Language.Haskell.Tools.AST.ElementTypes.Decl dom>_N)
                        eta1)
                       `cast`
                     (Control.Monad.Trans.State.Lazy.N:StateT[0]
                          <Data.Map.Base.Map
                             (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                             [SrcLoc.SrcSpan]>_N
                          <GhcMonad.Ghc>_R
                          <Language.Haskell.Tools.AST.ElementTypes.Decl dom>_N)
                       (case ipv1 of wild { (,) a1 s' -> s' }))
                      `cast`
                    (GhcMonad.N:Ghc[0]
                         <(Language.Haskell.Tools.AST.ElementTypes.Decl dom,
                           Data.Map.Base.Map
                             (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                             [SrcLoc.SrcSpan])>_R)
                      s)
                     `cast`
                   (GHC.Types.N:IO[0]
                        <(Language.Haskell.Tools.AST.ElementTypes.Decl dom,
                          Data.Map.Base.Map
                            (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                            [SrcLoc.SrcSpan])>_R)
                     ipv })
                    `cast`
                  (Trans
                       (<GhcMonad.Session>_R
                        ->_R Sym (GHC.Types.N:IO[0]
                                      <(Language.Haskell.Tools.AST.ElementTypes.Decl dom,
                                        Data.Map.Base.Map
                                          (ExtMap.LogicalRelation
                                             GHC.LanguageExtensions.Type.Extension)
                                          [SrcLoc.SrcSpan])>_R))
                       (Sym (GhcMonad.N:Ghc[0]
                                 <(Language.Haskell.Tools.AST.ElementTypes.Decl dom,
                                   Data.Map.Base.Map
                                     (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                                     [SrcLoc.SrcSpan])>_R))))
                   `cast`
                 (Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                           <Data.Map.Base.Map
                              (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                              [SrcLoc.SrcSpan]>_N
                           <GhcMonad.Ghc>_R
                           <Language.Haskell.Tools.AST.ElementTypes.Decl dom>_N)) }) -}
1bbc196fce0cb105d6ebe5a8241b1508
  chkFieldUpdate ::
    ExtMonad.CheckNode
      Language.Haskell.Tools.AST.ElementTypes.FieldUpdate
  {- Arity: 4,
     Strictness: <S(S(LLS(S)LLLLLLLLLL)L),U(U(A,A,U(U),A,A,A,A,A,A,A,A,A,A),A)><S(LS),1*U(U(U,U(U,U,U,U)),U)><L,A><L,U>,
     Unfolding: InlineRule (0, True, True)
                TraverseAST.chkFieldUpdate1
                  `cast`
                (forall (dom :: <*>_N).
                 <ExtMonad.ExtDomain dom>_R
                 ->_R <Language.Haskell.Tools.AST.ElementTypes.FieldUpdate dom>_R
                 ->_R Trans
                          (<[GHC.LanguageExtensions.Type.Extension]>_R
                           ->_R Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                         <ExtMap.ExtMap>_N
                                         <GhcMonad.Ghc>_R
                                         <Language.Haskell.Tools.AST.ElementTypes.FieldUpdate
                                            dom>_N))
                          (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                    <*>_N
                                    <[GHC.LanguageExtensions.Type.Extension]>_R
                                    <Control.Monad.Trans.State.Lazy.StateT
                                       ExtMap.ExtMap GhcMonad.Ghc>_R
                                    <Language.Haskell.Tools.AST.ElementTypes.FieldUpdate
                                       dom>_N))) -}
8cbfb951180ec1b128938e7242ac3acc
  chkFieldUpdate1 ::
    ExtMonad.ExtDomain dom =>
    Language.Haskell.Tools.AST.ElementTypes.FieldUpdate dom
    -> [GHC.LanguageExtensions.Type.Extension]
    -> ExtMap.ExtMap
    -> GhcMonad.Ghc
         (Language.Haskell.Tools.AST.ElementTypes.FieldUpdate dom,
          ExtMap.ExtMap)
  {- Arity: 4,
     Strictness: <S(S(LLS(S)LLLLLLLLLL)L),U(U(A,A,U(U),A,A,A,A,A,A,A,A,A,A),A)><S(LS),1*U(U(U,U(U,U,U,U)),U)><L,A><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (4, True, False)
                (\ @ dom
                   (w :: ExtMonad.ExtDomain dom)
                   (w1 :: Language.Haskell.Tools.AST.ElementTypes.FieldUpdate dom)
                   (w2 :: [GHC.LanguageExtensions.Type.Extension])
                   (w3 :: ExtMap.ExtMap) ->
                 case w1 of ww { Language.Haskell.Tools.AST.Ann.Ann ww1 ww2 ->
                 TraverseAST.$wchkFieldUpdate @ dom w ww1 ww2 w3 }) -}
e492a66b39aa85f4e38085233d9c02fd
  chkPattern ::
    ExtMonad.CheckNode Language.Haskell.Tools.AST.ElementTypes.Pattern
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(S(LLS(S)LLLLLLLLLL)L),U(U(A,A,U(U),A,A,A,A,A,A,A,A,A,A),A)><L,U><L,U>,
     Unfolding: InlineRule (0, True, True)
                TraverseAST.chkPattern1
                  `cast`
                (forall (dom :: <*>_N).
                 <ExtMonad.ExtDomain dom>_R
                 ->_R <Language.Haskell.Tools.AST.ElementTypes.Pattern dom>_R
                 ->_R Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                               <*>_N
                               <[GHC.LanguageExtensions.Type.Extension]>_R
                               <Control.Monad.Trans.State.Lazy.StateT
                                  ExtMap.ExtMap GhcMonad.Ghc>_R
                               <Language.Haskell.Tools.AST.ElementTypes.Pattern dom>_N)) -}
42f6bab966b35f61c915a3d6c83c3146
  chkPattern1 ::
    ExtMonad.ExtDomain dom =>
    Language.Haskell.Tools.AST.ElementTypes.Pattern dom
    -> [GHC.LanguageExtensions.Type.Extension]
    -> Control.Monad.Trans.State.Lazy.StateT
         ExtMap.ExtMap
         GhcMonad.Ghc
         (Language.Haskell.Tools.AST.ElementTypes.Pattern dom)
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(S(LLS(S)LLLLLLLLLL)L),U(U(A,A,U(U),A,A,A,A,A,A,A,A,A,A),A)><L,U><L,U>,
     Unfolding: (\ @ dom
                   ($d(%,%) :: ExtMonad.ExtDomain dom)
                   (eta :: Language.Haskell.Tools.AST.ElementTypes.Pattern dom)
                   (eta1 :: [GHC.LanguageExtensions.Type.Extension]) ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Language.Haskell.Tools.AST.Ann.SemanticInfo'
                             dom Language.Haskell.Tools.AST.Ann.SameInfoDefaultCls)
                        @ Language.Haskell.Tools.AST.SemaInfoTypes.NoSemanticInfo
                        (Language.Haskell.Tools.AST.Ann.$p3Domain
                           @ dom
                           (GHC.Classes.$p1(%,%)
                              @ (Language.Haskell.Tools.AST.Ann.Domain dom)
                              @ (Language.Haskell.Tools.AST.SemaInfoClasses.HasNameInfo'
                                   (Language.Haskell.Tools.AST.Ann.SemanticInfo
                                      dom
                                      Language.Haskell.Tools.AST.Representation.Names.UQualifiedName))
                              $d(%,%)))
                          `cast`
                        (Data.Type.Equality.N:~[0]
                             <*>_N <Language.Haskell.Tools.AST.Ann.SemanticInfo'
                                      dom
                                      Language.Haskell.Tools.AST.Ann.SameInfoDefaultCls>_N <Language.Haskell.Tools.AST.SemaInfoTypes.NoSemanticInfo>_N) of cobox0 { DEFAULT ->
                 BangPatternsChecker.chkBangPatterns1 @ dom $d(%,%) eta eta1 }) -}
704ce35a2ac95d71759103d3094e63ba
  chkPatternField ::
    ExtMonad.CheckNode
      Language.Haskell.Tools.AST.ElementTypes.PatternField
  {- Arity: 4,
     Strictness: <S(S(LLS(S)LLLLLLLLLL)L),U(U(A,A,U(U),A,A,A,A,A,A,A,A,A,A),A)><S(LS),1*U(U(U,U(U,U,U,U)),U)><L,A><L,U>,
     Unfolding: InlineRule (0, True, True)
                TraverseAST.chkPatternField1
                  `cast`
                (forall (dom :: <*>_N).
                 <ExtMonad.ExtDomain dom>_R
                 ->_R <Language.Haskell.Tools.AST.ElementTypes.PatternField dom>_R
                 ->_R Trans
                          (<[GHC.LanguageExtensions.Type.Extension]>_R
                           ->_R Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                         <ExtMap.ExtMap>_N
                                         <GhcMonad.Ghc>_R
                                         <Language.Haskell.Tools.AST.ElementTypes.PatternField
                                            dom>_N))
                          (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                    <*>_N
                                    <[GHC.LanguageExtensions.Type.Extension]>_R
                                    <Control.Monad.Trans.State.Lazy.StateT
                                       ExtMap.ExtMap GhcMonad.Ghc>_R
                                    <Language.Haskell.Tools.AST.ElementTypes.PatternField
                                       dom>_N))) -}
c31e0ed18154257988f32ab121725c16
  chkPatternField1 ::
    ExtMonad.ExtDomain dom =>
    Language.Haskell.Tools.AST.ElementTypes.PatternField dom
    -> [GHC.LanguageExtensions.Type.Extension]
    -> ExtMap.ExtMap
    -> GhcMonad.Ghc
         (Language.Haskell.Tools.AST.ElementTypes.PatternField dom,
          ExtMap.ExtMap)
  {- Arity: 4,
     Strictness: <S(S(LLS(S)LLLLLLLLLL)L),U(U(A,A,U(U),A,A,A,A,A,A,A,A,A,A),A)><S(LS),1*U(U(U,U(U,U,U,U)),U)><L,A><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (4, True, False)
                (\ @ dom
                   (w :: ExtMonad.ExtDomain dom)
                   (w1 :: Language.Haskell.Tools.AST.ElementTypes.PatternField dom)
                   (w2 :: [GHC.LanguageExtensions.Type.Extension])
                   (w3 :: ExtMap.ExtMap) ->
                 case w1 of ww { Language.Haskell.Tools.AST.Ann.Ann ww1 ww2 ->
                 TraverseAST.$wchkPatternField @ dom w ww1 ww2 w3 }) -}
ce7de2cdbe1f8f76f3db04f884c7eacb
  chkPatternSynonym ::
    ExtMonad.CheckNode
      Language.Haskell.Tools.AST.ElementTypes.PatternSynonym
  {- Arity: 3,
     Strictness: <S(S(LLS(S)LLLLLLLLLL)L),U(U(A,A,U(U),A,A,A,A,A,A,A,A,A,A),A)><L,U(U(U,U(U,U,U,U)),U)><L,U>,
     Unfolding: InlineRule (0, True, True)
                TraverseAST.chkPatternSynonym1
                  `cast`
                (forall (dom :: <*>_N).
                 <ExtMonad.ExtDomain dom>_R
                 ->_R <Language.Haskell.Tools.AST.ElementTypes.PatternSynonym dom>_R
                 ->_R Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                               <*>_N
                               <[GHC.LanguageExtensions.Type.Extension]>_R
                               <Control.Monad.Trans.State.Lazy.StateT
                                  ExtMap.ExtMap GhcMonad.Ghc>_R
                               <Language.Haskell.Tools.AST.ElementTypes.PatternSynonym dom>_N)) -}
d0f458542e6bdeac804956f33f4b7b53
  chkPatternSynonym1 ::
    ExtMonad.ExtDomain dom =>
    Language.Haskell.Tools.AST.ElementTypes.PatternSynonym dom
    -> [GHC.LanguageExtensions.Type.Extension]
    -> Control.Monad.Trans.State.Lazy.StateT
         ExtMap.ExtMap
         GhcMonad.Ghc
         (Language.Haskell.Tools.AST.ElementTypes.PatternSynonym dom)
  {- Arity: 3,
     Strictness: <S(S(LLS(S)LLLLLLLLLL)L),U(U(A,A,U(U),A,A,A,A,A,A,A,A,A,A),A)><L,U(U(U,U(U,U,U,U)),U)><L,U>,
     Unfolding: (\ @ dom
                   ($d(%,%) :: ExtMonad.ExtDomain dom)
                   (eta :: Language.Haskell.Tools.AST.ElementTypes.PatternSynonym dom)
                   (eta1 :: [GHC.LanguageExtensions.Type.Extension]) ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Language.Haskell.Tools.AST.Ann.SemanticInfo'
                             dom Language.Haskell.Tools.AST.Ann.SameInfoDefaultCls)
                        @ Language.Haskell.Tools.AST.SemaInfoTypes.NoSemanticInfo
                        (Language.Haskell.Tools.AST.Ann.$p3Domain
                           @ dom
                           (GHC.Classes.$p1(%,%)
                              @ (Language.Haskell.Tools.AST.Ann.Domain dom)
                              @ (Language.Haskell.Tools.AST.SemaInfoClasses.HasNameInfo'
                                   (Language.Haskell.Tools.AST.Ann.SemanticInfo
                                      dom
                                      Language.Haskell.Tools.AST.Representation.Names.UQualifiedName))
                              $d(%,%)))
                          `cast`
                        (Data.Type.Equality.N:~[0]
                             <*>_N <Language.Haskell.Tools.AST.Ann.SemanticInfo'
                                      dom
                                      Language.Haskell.Tools.AST.Ann.SameInfoDefaultCls>_N <Language.Haskell.Tools.AST.SemaInfoTypes.NoSemanticInfo>_N) of cobox0 { DEFAULT ->
                 PatternSynonymsChecker.chkPatternSynonyms1
                   @ dom
                   $d(%,%)
                   eta
                   eta1 }) -}
8c6ff0d0829f439015d16f072f198864
  traverseAlt ::
    ExtMonad.CheckUNode uexpr
    -> ExtMonad.CheckNode (TraverseAST.AltG uexpr)
  {- Arity: 2,
     Strictness: <L,C(U)><S(S(LLS(S)LLLLLLLLLL)L),U(U(U,U,U(U),U,U,U,U,U,U,U,U,U,U),U)>,
     Unfolding: (\ @ (uexpr :: GHC.Types.*
                               -> GHC.Types.* -> GHC.Types.*)
                   (dk :: ExtMonad.CheckUNode uexpr)
                   @ dom
                   ($d(%,%) :: ExtMonad.ExtDomain dom) ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Language.Haskell.Tools.AST.Ann.SemanticInfo'
                             dom Language.Haskell.Tools.AST.Ann.SameInfoDefaultCls)
                        @ Language.Haskell.Tools.AST.SemaInfoTypes.NoSemanticInfo
                        (Language.Haskell.Tools.AST.Ann.$p3Domain
                           @ dom
                           (GHC.Classes.$p1(%,%)
                              @ (Language.Haskell.Tools.AST.Ann.Domain dom)
                              @ (Language.Haskell.Tools.AST.SemaInfoClasses.HasNameInfo'
                                   (Language.Haskell.Tools.AST.Ann.SemanticInfo
                                      dom
                                      Language.Haskell.Tools.AST.Representation.Names.UQualifiedName))
                              $d(%,%)))
                          `cast`
                        (Data.Type.Equality.N:~[0]
                             <*>_N <Language.Haskell.Tools.AST.Ann.SemanticInfo'
                                      dom
                                      Language.Haskell.Tools.AST.Ann.SameInfoDefaultCls>_N <Language.Haskell.Tools.AST.SemaInfoTypes.NoSemanticInfo>_N) of cobox0 { DEFAULT ->
                 let {
                   f :: Language.Haskell.Tools.AST.Ann.Ann
                          (Language.Haskell.Tools.AST.Representation.Exprs.UAlt' uexpr)
                          dom
                          Language.Haskell.Tools.AST.Ann.SrcTemplateStage
                        -> Control.Monad.Trans.Reader.ReaderT
                             [GHC.LanguageExtensions.Type.Extension]
                             (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc)
                             (Language.Haskell.Tools.AST.Ann.Ann
                                (Language.Haskell.Tools.AST.Representation.Exprs.UAlt' uexpr)
                                dom
                                Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   = case TraverseAST.traverseAlt5
                            @ dom
                            @ uexpr of wild { Control.Reference.Representation.Reference ds1 ds2 ds3 ds4 ds5 ds6 ->
                     ds3 (TraverseAST.traversePattern @ dom $d(%,%)) }
                 } in
                 let {
                   f1 :: Language.Haskell.Tools.AST.Ann.Ann
                           (Language.Haskell.Tools.AST.Representation.Exprs.UAlt' uexpr)
                           dom
                           Language.Haskell.Tools.AST.Ann.SrcTemplateStage
                         -> Control.Monad.Trans.Reader.ReaderT
                              [GHC.LanguageExtensions.Type.Extension]
                              (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc)
                              (Language.Haskell.Tools.AST.Ann.Ann
                                 (Language.Haskell.Tools.AST.Representation.Exprs.UAlt' uexpr)
                                 dom
                                 Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   = case TraverseAST.traverseAlt4
                            @ dom
                            @ uexpr of wild { Control.Reference.Representation.Reference ds1 ds2 ds3 ds4 ds5 ds6 ->
                     ds3
                       (TraverseAST.traverseCaseRhs
                          @ uexpr
                          (\ @ dom1 ($d(%,%)1 :: ExtMonad.ExtDomain dom1) ->
                           case GHC.Types.HEq_sc
                                  @ *
                                  @ *
                                  @ (Language.Haskell.Tools.AST.Ann.SemanticInfo'
                                       dom1 Language.Haskell.Tools.AST.Ann.SameInfoDefaultCls)
                                  @ Language.Haskell.Tools.AST.SemaInfoTypes.NoSemanticInfo
                                  (Language.Haskell.Tools.AST.Ann.$p3Domain
                                     @ dom1
                                     (GHC.Classes.$p1(%,%)
                                        @ (Language.Haskell.Tools.AST.Ann.Domain dom1)
                                        @ (Language.Haskell.Tools.AST.SemaInfoClasses.HasNameInfo'
                                             (Language.Haskell.Tools.AST.Ann.SemanticInfo
                                                dom1
                                                Language.Haskell.Tools.AST.Representation.Names.UQualifiedName))
                                        $d(%,%)1))
                                    `cast`
                                  (Data.Type.Equality.N:~[0]
                                       <*>_N <Language.Haskell.Tools.AST.Ann.SemanticInfo'
                                                dom1
                                                Language.Haskell.Tools.AST.Ann.SameInfoDefaultCls>_N <Language.Haskell.Tools.AST.SemaInfoTypes.NoSemanticInfo>_N) of cobox1 { DEFAULT ->
                           dk @ dom1 $d(%,%)1 })
                          @ dom
                          $d(%,%)) }
                 } in
                 let {
                   g :: Language.Haskell.Tools.AST.Ann.Ann
                          (Language.Haskell.Tools.AST.Representation.Exprs.UAlt' uexpr)
                          dom
                          Language.Haskell.Tools.AST.Ann.SrcTemplateStage
                        -> Control.Monad.Trans.Reader.ReaderT
                             [GHC.LanguageExtensions.Type.Extension]
                             (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc)
                             (Language.Haskell.Tools.AST.Ann.Ann
                                (Language.Haskell.Tools.AST.Representation.Exprs.UAlt' uexpr)
                                dom
                                Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   = case TraverseAST.traverseAlt1
                            @ uexpr
                            @ dom of wild { Control.Reference.Representation.Reference ds1 ds2 ds3 ds4 ds5 ds6 ->
                     ds3 (TraverseAST.traverseLocalBinds @ dom $d(%,%)) }
                 } in
                 \ (x :: Language.Haskell.Tools.AST.Ann.Ann
                           (Language.Haskell.Tools.AST.Representation.Exprs.UAlt' uexpr)
                           dom
                           Language.Haskell.Tools.AST.Ann.SrcTemplateStage) ->
                 let {
                   m1 :: Control.Monad.Trans.Reader.ReaderT
                           [GHC.LanguageExtensions.Type.Extension]
                           (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc)
                           (Language.Haskell.Tools.AST.Ann.Ann
                              (Language.Haskell.Tools.AST.Representation.Exprs.UAlt' uexpr)
                              dom
                              Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   = f x
                 } in
                 (\ (r1 :: [GHC.LanguageExtensions.Type.Extension]) ->
                  let {
                    m2 :: Control.Monad.Trans.State.Lazy.StateT
                            (Data.Map.Base.Map
                               (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                               [SrcLoc.SrcSpan])
                            GhcMonad.Ghc
                            (Language.Haskell.Tools.AST.Ann.Ann
                               (Language.Haskell.Tools.AST.Representation.Exprs.UAlt' uexpr)
                               dom
                               Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                    = m1
                        `cast`
                      (Control.Monad.Trans.Reader.N:ReaderT[0]
                           <*>_N
                           <[GHC.LanguageExtensions.Type.Extension]>_R
                           <Control.Monad.Trans.State.Lazy.StateT
                              ExtMap.ExtMap GhcMonad.Ghc>_R
                           <Language.Haskell.Tools.AST.Ann.Ann
                              (Language.Haskell.Tools.AST.Representation.Exprs.UAlt' uexpr)
                              dom
                              Language.Haskell.Tools.AST.Ann.SrcTemplateStage>_N)
                        r1
                  } in
                  (\ (s1 :: Data.Map.Base.Map
                              (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                              [SrcLoc.SrcSpan]) ->
                   let {
                     m :: GhcMonad.Ghc
                            (Language.Haskell.Tools.AST.Ann.Ann
                               (Language.Haskell.Tools.AST.Representation.Exprs.UAlt' uexpr)
                               dom
                               Language.Haskell.Tools.AST.Ann.SrcTemplateStage,
                             Data.Map.Base.Map
                               (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                               [SrcLoc.SrcSpan])
                     = m2
                         `cast`
                       (Control.Monad.Trans.State.Lazy.N:StateT[0]
                            <Data.Map.Base.Map
                               (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                               [SrcLoc.SrcSpan]>_N
                            <GhcMonad.Ghc>_R
                            <Language.Haskell.Tools.AST.Ann.Ann
                               (Language.Haskell.Tools.AST.Representation.Exprs.UAlt' uexpr)
                               dom
                               Language.Haskell.Tools.AST.Ann.SrcTemplateStage>_N)
                         s1
                   } in
                   (\ (s :: GhcMonad.Session)
                      (s2 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                    case (m `cast`
                          (GhcMonad.N:Ghc[0]
                               <(Language.Haskell.Tools.AST.Ann.Ann
                                   (Language.Haskell.Tools.AST.Representation.Exprs.UAlt' uexpr)
                                   dom
                                   Language.Haskell.Tools.AST.Ann.SrcTemplateStage,
                                 Data.Map.Base.Map
                                   (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                                   [SrcLoc.SrcSpan])>_R)
                            s)
                           `cast`
                         (GHC.Types.N:IO[0]
                              <(Language.Haskell.Tools.AST.Ann.Ann
                                  (Language.Haskell.Tools.AST.Representation.Exprs.UAlt' uexpr)
                                  dom
                                  Language.Haskell.Tools.AST.Ann.SrcTemplateStage,
                                Data.Map.Base.Map
                                  (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                                  [SrcLoc.SrcSpan])>_R)
                           s2 of ds1 { (#,#) ipv ipv1 ->
                    case ((((f1 (case ipv1 of wild { (,) a1 s' -> a1 }))
                              `cast`
                            (Control.Monad.Trans.Reader.N:ReaderT[0]
                                 <*>_N
                                 <[GHC.LanguageExtensions.Type.Extension]>_R
                                 <Control.Monad.Trans.State.Lazy.StateT
                                    ExtMap.ExtMap GhcMonad.Ghc>_R
                                 <Language.Haskell.Tools.AST.Ann.Ann
                                    (Language.Haskell.Tools.AST.Representation.Exprs.UAlt' uexpr)
                                    dom
                                    Language.Haskell.Tools.AST.Ann.SrcTemplateStage>_N)
                              r1)
                             `cast`
                           (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                <Data.Map.Base.Map
                                   (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                                   [SrcLoc.SrcSpan]>_N
                                <GhcMonad.Ghc>_R
                                <Language.Haskell.Tools.AST.Ann.Ann
                                   (Language.Haskell.Tools.AST.Representation.Exprs.UAlt' uexpr)
                                   dom
                                   Language.Haskell.Tools.AST.Ann.SrcTemplateStage>_N)
                             (case ipv1 of wild { (,) a1 s' -> s' }))
                            `cast`
                          (GhcMonad.N:Ghc[0]
                               <(Language.Haskell.Tools.AST.Ann.Ann
                                   (Language.Haskell.Tools.AST.Representation.Exprs.UAlt' uexpr)
                                   dom
                                   Language.Haskell.Tools.AST.Ann.SrcTemplateStage,
                                 Data.Map.Base.Map
                                   (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                                   [SrcLoc.SrcSpan])>_R)
                            s)
                           `cast`
                         (GHC.Types.N:IO[0]
                              <(Language.Haskell.Tools.AST.Ann.Ann
                                  (Language.Haskell.Tools.AST.Representation.Exprs.UAlt' uexpr)
                                  dom
                                  Language.Haskell.Tools.AST.Ann.SrcTemplateStage,
                                Data.Map.Base.Map
                                  (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                                  [SrcLoc.SrcSpan])>_R)
                           ipv of ds2 { (#,#) ipv2 ipv3 ->
                    ((((g (case ipv3 of wild { (,) a1 s' -> a1 }))
                         `cast`
                       (Control.Monad.Trans.Reader.N:ReaderT[0]
                            <*>_N
                            <[GHC.LanguageExtensions.Type.Extension]>_R
                            <Control.Monad.Trans.State.Lazy.StateT
                               ExtMap.ExtMap GhcMonad.Ghc>_R
                            <Language.Haskell.Tools.AST.Ann.Ann
                               (Language.Haskell.Tools.AST.Representation.Exprs.UAlt' uexpr)
                               dom
                               Language.Haskell.Tools.AST.Ann.SrcTemplateStage>_N)
                         r1)
                        `cast`
                      (Control.Monad.Trans.State.Lazy.N:StateT[0]
                           <Data.Map.Base.Map
                              (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                              [SrcLoc.SrcSpan]>_N
                           <GhcMonad.Ghc>_R
                           <Language.Haskell.Tools.AST.Ann.Ann
                              (Language.Haskell.Tools.AST.Representation.Exprs.UAlt' uexpr)
                              dom
                              Language.Haskell.Tools.AST.Ann.SrcTemplateStage>_N)
                        (case ipv3 of wild { (,) a1 s' -> s' }))
                       `cast`
                     (GhcMonad.N:Ghc[0]
                          <(Language.Haskell.Tools.AST.Ann.Ann
                              (Language.Haskell.Tools.AST.Representation.Exprs.UAlt' uexpr)
                              dom
                              Language.Haskell.Tools.AST.Ann.SrcTemplateStage,
                            Data.Map.Base.Map
                              (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                              [SrcLoc.SrcSpan])>_R)
                       s)
                      `cast`
                    (GHC.Types.N:IO[0]
                         <(Language.Haskell.Tools.AST.Ann.Ann
                             (Language.Haskell.Tools.AST.Representation.Exprs.UAlt' uexpr)
                             dom
                             Language.Haskell.Tools.AST.Ann.SrcTemplateStage,
                           Data.Map.Base.Map
                             (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                             [SrcLoc.SrcSpan])>_R)
                      ipv2 } })
                     `cast`
                   (Trans
                        (<GhcMonad.Session>_R
                         ->_R Sym (GHC.Types.N:IO[0]
                                       <(Language.Haskell.Tools.AST.Ann.Ann
                                           (Language.Haskell.Tools.AST.Representation.Exprs.UAlt'
                                              uexpr)
                                           dom
                                           Language.Haskell.Tools.AST.Ann.SrcTemplateStage,
                                         Data.Map.Base.Map
                                           (ExtMap.LogicalRelation
                                              GHC.LanguageExtensions.Type.Extension)
                                           [SrcLoc.SrcSpan])>_R))
                        (Sym (GhcMonad.N:Ghc[0]
                                  <(Language.Haskell.Tools.AST.Ann.Ann
                                      (Language.Haskell.Tools.AST.Representation.Exprs.UAlt' uexpr)
                                      dom
                                      Language.Haskell.Tools.AST.Ann.SrcTemplateStage,
                                    Data.Map.Base.Map
                                      (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                                      [SrcLoc.SrcSpan])>_R))))
                    `cast`
                  (Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                            <Data.Map.Base.Map
                               (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                               [SrcLoc.SrcSpan]>_N
                            <GhcMonad.Ghc>_R
                            <Language.Haskell.Tools.AST.Ann.Ann
                               (Language.Haskell.Tools.AST.Representation.Exprs.UAlt' uexpr)
                               dom
                               Language.Haskell.Tools.AST.Ann.SrcTemplateStage>_N)))
                   `cast`
                 (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                           <*>_N
                           <[GHC.LanguageExtensions.Type.Extension]>_R
                           <Control.Monad.Trans.State.Lazy.StateT
                              ExtMap.ExtMap GhcMonad.Ghc>_R
                           <Language.Haskell.Tools.AST.Ann.Ann
                              (Language.Haskell.Tools.AST.Representation.Exprs.UAlt' uexpr)
                              dom
                              Language.Haskell.Tools.AST.Ann.SrcTemplateStage>_N)) }) -}
9bd7f6d53a49f53c380e85b7dd13b5c8
  traverseAlt1 ::
    Control.Reference.Representation.Reference
      (Control.Monad.Trans.Reader.ReaderT
         [GHC.LanguageExtensions.Type.Extension]
         (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc))
      Control.Reference.Representation.MU
      Control.Reference.Representation.MU
      Control.Reference.Representation.MU
      (Language.Haskell.Tools.AST.Ann.Ann
         (Language.Haskell.Tools.AST.Representation.Exprs.UAlt' uexpr)
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
      (Language.Haskell.Tools.AST.Ann.Ann
         (Language.Haskell.Tools.AST.Representation.Exprs.UAlt' uexpr)
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
      (Language.Haskell.Tools.AST.Ann.Ann
         Language.Haskell.Tools.AST.Representation.Binds.ULocalBinds
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
      (Language.Haskell.Tools.AST.Ann.Ann
         Language.Haskell.Tools.AST.Representation.Binds.ULocalBinds
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
  {- Unfolding: (\ @ (uexpr :: GHC.Types.*
                               -> GHC.Types.* -> GHC.Types.*)
                   @ dom ->
                 case Control.Reference.Combinators.$w&
                        @ (Control.Monad.Trans.Reader.ReaderT
                             [GHC.LanguageExtensions.Type.Extension]
                             (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc))
                        @ Control.Reference.Representation.MU
                        @ Control.Reference.Representation.MU
                        @ Control.Reference.Representation.MU
                        @ (Language.Haskell.Tools.AST.Ann.Ann
                             (Language.Haskell.Tools.AST.Representation.Exprs.UAlt' uexpr)
                             dom
                             Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                        @ (Language.Haskell.Tools.AST.Ann.Ann
                             (Language.Haskell.Tools.AST.Representation.Exprs.UAlt' uexpr)
                             dom
                             Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                        @ (Language.Haskell.Tools.AST.Ann.AnnMaybeG
                             Language.Haskell.Tools.AST.Representation.Binds.ULocalBinds
                             dom
                             Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                        @ (Language.Haskell.Tools.AST.Ann.AnnMaybeG
                             Language.Haskell.Tools.AST.Representation.Binds.ULocalBinds
                             dom
                             Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                        @ (Language.Haskell.Tools.AST.Ann.Ann
                             Language.Haskell.Tools.AST.Representation.Binds.ULocalBinds
                             dom
                             Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                        @ (Language.Haskell.Tools.AST.Ann.Ann
                             Language.Haskell.Tools.AST.Representation.Binds.ULocalBinds
                             dom
                             Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                        (TraverseAST.traverseAlt3 @ uexpr @ dom)
                        (TraverseAST.traverseAlt2
                           @ dom) of ww { (#,,,,,#) ww1 ww2 ww3 ww4 ww5 ww6 ->
                 Control.Reference.Representation.Reference
                   @ (Control.Monad.Trans.Reader.ReaderT
                        [GHC.LanguageExtensions.Type.Extension]
                        (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc))
                   @ Control.Reference.Representation.MU
                   @ Control.Reference.Representation.MU
                   @ Control.Reference.Representation.MU
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        (Language.Haskell.Tools.AST.Representation.Exprs.UAlt' uexpr)
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        (Language.Haskell.Tools.AST.Representation.Exprs.UAlt' uexpr)
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        Language.Haskell.Tools.AST.Representation.Binds.ULocalBinds
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        Language.Haskell.Tools.AST.Representation.Binds.ULocalBinds
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   ww1
                   ww2
                   ww3
                   ww4
                   ww5
                   ww6 }) -}
b9f1b0fd712eb107b27c8ff4b9255125
  traverseAlt2 ::
    Control.Reference.Representation.Reference
      (Control.Monad.Trans.Reader.ReaderT
         [GHC.LanguageExtensions.Type.Extension]
         (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc))
      Control.Reference.Representation.MU
      Control.Reference.Representation.MU
      Control.Reference.Representation.MU
      (Language.Haskell.Tools.AST.Ann.AnnMaybeG
         Language.Haskell.Tools.AST.Representation.Binds.ULocalBinds
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
      (Language.Haskell.Tools.AST.Ann.AnnMaybeG
         Language.Haskell.Tools.AST.Representation.Binds.ULocalBinds
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
      (Language.Haskell.Tools.AST.Ann.Ann
         Language.Haskell.Tools.AST.Representation.Binds.ULocalBinds
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
      (Language.Haskell.Tools.AST.Ann.Ann
         Language.Haskell.Tools.AST.Representation.Binds.ULocalBinds
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
  {- Unfolding: (\ @ dom ->
                 case Language.Haskell.Tools.AST.Ann.$wannJust
                        @ Language.Haskell.Tools.AST.Representation.Binds.ULocalBinds
                        @ dom
                        @ Language.Haskell.Tools.AST.Ann.SrcTemplateStage
                        @ (Control.Monad.Trans.Reader.ReaderT
                             [GHC.LanguageExtensions.Type.Extension]
                             (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc))
                        @ Control.Reference.Representation.MU
                        (TraverseAST.$s$fApplicativeReaderT
                           @ [GHC.LanguageExtensions.Type.Extension])
                        (TraverseAST.$s$fMonadReaderT
                           @ [GHC.LanguageExtensions.Type.Extension])
                        Data.Proxy.$fApplicativeProxy
                        Data.Proxy.$fMonadPlusProxy
                        TraverseAST.$sannJust1
                          `cast`
                        (Sym (Control.Instances.Morph.N:Morph[0]
                                  <GHC.Base.Maybe>_N
                                  <Data.Proxy.Proxy>_N)) of ww { (#,,,,,#) ww1 ww2 ww3 ww4 ww5 ww6 ->
                 Control.Reference.Representation.Reference
                   @ (Control.Monad.Trans.Reader.ReaderT
                        [GHC.LanguageExtensions.Type.Extension]
                        (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc))
                   @ Control.Reference.Representation.MU
                   @ Control.Reference.Representation.MU
                   @ Control.Reference.Representation.MU
                   @ (Language.Haskell.Tools.AST.Ann.AnnMaybeG
                        Language.Haskell.Tools.AST.Representation.Binds.ULocalBinds
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   @ (Language.Haskell.Tools.AST.Ann.AnnMaybeG
                        Language.Haskell.Tools.AST.Representation.Binds.ULocalBinds
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        Language.Haskell.Tools.AST.Representation.Binds.ULocalBinds
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        Language.Haskell.Tools.AST.Representation.Binds.ULocalBinds
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   ww1
                   ww2
                   ww3
                   ww4
                   ww5
                   ww6 }) -}
a71baea7bb3d712120d9ca39d4cf5176
  traverseAlt3 ::
    Control.Reference.Representation.Reference
      (Control.Monad.Trans.Reader.ReaderT
         [GHC.LanguageExtensions.Type.Extension]
         (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc))
      Control.Reference.Representation.MU
      Control.Reference.Representation.MU
      Control.Reference.Representation.MU
      (Language.Haskell.Tools.AST.Ann.Ann
         (Language.Haskell.Tools.AST.Representation.Exprs.UAlt' uexpr)
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
      (Language.Haskell.Tools.AST.Ann.Ann
         (Language.Haskell.Tools.AST.Representation.Exprs.UAlt' uexpr)
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
      (Language.Haskell.Tools.AST.Ann.AnnMaybeG
         Language.Haskell.Tools.AST.Representation.Binds.ULocalBinds
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
      (Language.Haskell.Tools.AST.Ann.AnnMaybeG
         Language.Haskell.Tools.AST.Representation.Binds.ULocalBinds
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
  {- Unfolding: (\ @ (uexpr :: GHC.Types.*
                               -> GHC.Types.* -> GHC.Types.*)
                   @ dom ->
                 case Language.Haskell.Tools.AST.References.$waltBinds
                        @ uexpr
                        @ dom
                        @ Language.Haskell.Tools.AST.Ann.SrcTemplateStage
                        @ (Control.Monad.Trans.Reader.ReaderT
                             [GHC.LanguageExtensions.Type.Extension]
                             (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc))
                        @ Control.Reference.Representation.MU
                        TraverseAST.$s$fRefMonadswr of ww { (#,,,,,#) ww1 ww2 ww3 ww4 ww5 ww6 ->
                 Control.Reference.Representation.Reference
                   @ (Control.Monad.Trans.Reader.ReaderT
                        [GHC.LanguageExtensions.Type.Extension]
                        (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc))
                   @ Control.Reference.Representation.MU
                   @ Control.Reference.Representation.MU
                   @ Control.Reference.Representation.MU
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        (Language.Haskell.Tools.AST.Representation.Exprs.UAlt' uexpr)
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        (Language.Haskell.Tools.AST.Representation.Exprs.UAlt' uexpr)
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   @ (Language.Haskell.Tools.AST.Ann.AnnMaybeG
                        Language.Haskell.Tools.AST.Representation.Binds.ULocalBinds
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   @ (Language.Haskell.Tools.AST.Ann.AnnMaybeG
                        Language.Haskell.Tools.AST.Representation.Binds.ULocalBinds
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   ww1
                   ww2
                   ww3
                   ww4
                   ww5
                   ww6 }) -}
a0b4e3c6a292cabed11e6fdb45ad8a9b
  traverseAlt4 ::
    Control.Reference.Representation.Reference
      (Control.Monad.Trans.Reader.ReaderT
         [GHC.LanguageExtensions.Type.Extension]
         (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc))
      Control.Reference.Representation.MU
      Control.Reference.Representation.MU
      Control.Reference.Representation.MU
      (Language.Haskell.Tools.AST.Ann.Ann
         (Language.Haskell.Tools.AST.Representation.Exprs.UAlt' uexpr)
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
      (Language.Haskell.Tools.AST.Ann.Ann
         (Language.Haskell.Tools.AST.Representation.Exprs.UAlt' uexpr)
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
      (Language.Haskell.Tools.AST.Ann.Ann
         (Language.Haskell.Tools.AST.Representation.Exprs.UCaseRhs' uexpr)
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
      (Language.Haskell.Tools.AST.Ann.Ann
         (Language.Haskell.Tools.AST.Representation.Exprs.UCaseRhs' uexpr)
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
  {- Unfolding: (\ @ dom
                   @ (uexpr :: GHC.Types.* -> GHC.Types.* -> GHC.Types.*) ->
                 case Language.Haskell.Tools.AST.References.$waltRhs
                        @ GHC.Prim.Any
                        @ uexpr
                        @ dom
                        @ Language.Haskell.Tools.AST.Ann.SrcTemplateStage
                        @ (Control.Monad.Trans.Reader.ReaderT
                             [GHC.LanguageExtensions.Type.Extension]
                             (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc))
                        @ Control.Reference.Representation.MU
                        TraverseAST.$s$fRefMonadswr of ww { (#,,,,,#) ww1 ww2 ww3 ww4 ww5 ww6 ->
                 Control.Reference.Representation.Reference
                   @ (Control.Monad.Trans.Reader.ReaderT
                        [GHC.LanguageExtensions.Type.Extension]
                        (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc))
                   @ Control.Reference.Representation.MU
                   @ Control.Reference.Representation.MU
                   @ Control.Reference.Representation.MU
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        (Language.Haskell.Tools.AST.Representation.Exprs.UAlt' uexpr)
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        (Language.Haskell.Tools.AST.Representation.Exprs.UAlt' uexpr)
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        (Language.Haskell.Tools.AST.Representation.Exprs.UCaseRhs' uexpr)
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        (Language.Haskell.Tools.AST.Representation.Exprs.UCaseRhs' uexpr)
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   ww1
                   ww2
                   ww3
                   ww4
                   ww5
                   ww6 }) -}
c4b2e2bb33e3200e3104adbcafd3714f
  traverseAlt5 ::
    Control.Reference.Representation.Reference
      (Control.Monad.Trans.Reader.ReaderT
         [GHC.LanguageExtensions.Type.Extension]
         (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc))
      Control.Reference.Representation.MU
      Control.Reference.Representation.MU
      Control.Reference.Representation.MU
      (Language.Haskell.Tools.AST.Ann.Ann
         (Language.Haskell.Tools.AST.Representation.Exprs.UAlt' uexpr)
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
      (Language.Haskell.Tools.AST.Ann.Ann
         (Language.Haskell.Tools.AST.Representation.Exprs.UAlt' uexpr)
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
      (Language.Haskell.Tools.AST.Ann.Ann
         Language.Haskell.Tools.AST.Representation.Patterns.UPattern
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
      (Language.Haskell.Tools.AST.Ann.Ann
         Language.Haskell.Tools.AST.Representation.Patterns.UPattern
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
  {- Unfolding: (\ @ dom
                   @ (uexpr :: GHC.Types.* -> GHC.Types.* -> GHC.Types.*) ->
                 case Language.Haskell.Tools.AST.References.$waltPattern
                        @ uexpr
                        @ dom
                        @ Language.Haskell.Tools.AST.Ann.SrcTemplateStage
                        @ (Control.Monad.Trans.Reader.ReaderT
                             [GHC.LanguageExtensions.Type.Extension]
                             (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc))
                        @ Control.Reference.Representation.MU
                        TraverseAST.$s$fRefMonadswr of ww { (#,,,,,#) ww1 ww2 ww3 ww4 ww5 ww6 ->
                 Control.Reference.Representation.Reference
                   @ (Control.Monad.Trans.Reader.ReaderT
                        [GHC.LanguageExtensions.Type.Extension]
                        (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc))
                   @ Control.Reference.Representation.MU
                   @ Control.Reference.Representation.MU
                   @ Control.Reference.Representation.MU
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        (Language.Haskell.Tools.AST.Representation.Exprs.UAlt' uexpr)
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        (Language.Haskell.Tools.AST.Representation.Exprs.UAlt' uexpr)
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        Language.Haskell.Tools.AST.Representation.Patterns.UPattern
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        Language.Haskell.Tools.AST.Representation.Patterns.UPattern
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   ww1
                   ww2
                   ww3
                   ww4
                   ww5
                   ww6 }) -}
1bf3226e40f30af4659b400acbdcab18
  traverseBracket ::
    ExtMonad.CheckNode Language.Haskell.Tools.AST.ElementTypes.Bracket
  {- Arity: 1,
     Strictness: <S(S(LLS(S)LLLLLLLLLL)L),U(U(U,U,U(U),U,U,U,U,U,U,U,U,U,U),U)>,
     Unfolding: (\ @ dom ($d(%,%) :: ExtMonad.ExtDomain dom) ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Language.Haskell.Tools.AST.Ann.SemanticInfo'
                             dom Language.Haskell.Tools.AST.Ann.SameInfoDefaultCls)
                        @ Language.Haskell.Tools.AST.SemaInfoTypes.NoSemanticInfo
                        (Language.Haskell.Tools.AST.Ann.$p3Domain
                           @ dom
                           (GHC.Classes.$p1(%,%)
                              @ (Language.Haskell.Tools.AST.Ann.Domain dom)
                              @ (Language.Haskell.Tools.AST.SemaInfoClasses.HasNameInfo'
                                   (Language.Haskell.Tools.AST.Ann.SemanticInfo
                                      dom
                                      Language.Haskell.Tools.AST.Representation.Names.UQualifiedName))
                              $d(%,%)))
                          `cast`
                        (Data.Type.Equality.N:~[0]
                             <*>_N <Language.Haskell.Tools.AST.Ann.SemanticInfo'
                                      dom
                                      Language.Haskell.Tools.AST.Ann.SameInfoDefaultCls>_N <Language.Haskell.Tools.AST.SemaInfoTypes.NoSemanticInfo>_N) of cobox0 { DEFAULT ->
                 let {
                   f :: Language.Haskell.Tools.AST.Ann.Ann
                          Language.Haskell.Tools.AST.Representation.TH.UBracket
                          dom
                          Language.Haskell.Tools.AST.Ann.SrcTemplateStage
                        -> Control.Monad.Trans.Reader.ReaderT
                             [GHC.LanguageExtensions.Type.Extension]
                             (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc)
                             (Language.Haskell.Tools.AST.Ann.Ann
                                Language.Haskell.Tools.AST.Representation.TH.UBracket
                                dom
                                Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   = case TraverseAST.traverseBracket6
                            @ dom of wild { Control.Reference.Representation.Reference ds1 ds2 ds3 ds4 ds5 ds6 ->
                     ds3 (TraverseAST.traverseExpr @ dom $d(%,%)) }
                 } in
                 let {
                   f1 :: Language.Haskell.Tools.AST.Ann.Ann
                           Language.Haskell.Tools.AST.Representation.TH.UBracket
                           dom
                           Language.Haskell.Tools.AST.Ann.SrcTemplateStage
                         -> Control.Monad.Trans.Reader.ReaderT
                              [GHC.LanguageExtensions.Type.Extension]
                              (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc)
                              (Language.Haskell.Tools.AST.Ann.Ann
                                 Language.Haskell.Tools.AST.Representation.TH.UBracket
                                 dom
                                 Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   = case TraverseAST.traverseBracket5
                            @ dom of wild { Control.Reference.Representation.Reference ds1 ds2 ds3 ds4 ds5 ds6 ->
                     ds3 (TraverseAST.traversePattern @ dom $d(%,%)) }
                 } in
                 let {
                   f2 :: Language.Haskell.Tools.AST.Ann.Ann
                           Language.Haskell.Tools.AST.Representation.TH.UBracket
                           dom
                           Language.Haskell.Tools.AST.Ann.SrcTemplateStage
                         -> Control.Monad.Trans.Reader.ReaderT
                              [GHC.LanguageExtensions.Type.Extension]
                              (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc)
                              (Language.Haskell.Tools.AST.Ann.Ann
                                 Language.Haskell.Tools.AST.Representation.TH.UBracket
                                 dom
                                 Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   = case TraverseAST.traverseBracket4
                            @ dom of wild { Control.Reference.Representation.Reference ds1 ds2 ds3 ds4 ds5 ds6 ->
                     ds3 (TraverseAST.traverseType @ dom $d(%,%)) }
                 } in
                 let {
                   g :: Language.Haskell.Tools.AST.Ann.Ann
                          Language.Haskell.Tools.AST.Representation.TH.UBracket
                          dom
                          Language.Haskell.Tools.AST.Ann.SrcTemplateStage
                        -> Control.Monad.Trans.Reader.ReaderT
                             [GHC.LanguageExtensions.Type.Extension]
                             (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc)
                             (Language.Haskell.Tools.AST.Ann.Ann
                                Language.Haskell.Tools.AST.Representation.TH.UBracket
                                dom
                                Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   = case TraverseAST.traverseBracket1
                            @ dom of wild { Control.Reference.Representation.Reference ds1 ds2 ds3 ds4 ds5 ds6 ->
                     ds3 (TraverseAST.traverseDecl @ dom $d(%,%)) }
                 } in
                 (\ (x :: Language.Haskell.Tools.AST.ElementTypes.Bracket dom)
                    (eta :: [GHC.LanguageExtensions.Type.Extension])
                    (eta1 :: ExtMap.ExtMap) ->
                  let {
                    m :: GhcMonad.Ghc
                           (Language.Haskell.Tools.AST.ElementTypes.Bracket dom,
                            Data.Map.Base.Map
                              (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                              [SrcLoc.SrcSpan])
                    = TemplateHaskellChecker.$wchkTemplateHaskellBracket
                        @ dom
                        $d(%,%)
                        x
                        eta1
                  } in
                  (\ (s :: GhcMonad.Session)
                     (s1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                   case (m `cast`
                         (GhcMonad.N:Ghc[0]
                              <(Language.Haskell.Tools.AST.ElementTypes.Bracket dom,
                                Data.Map.Base.Map
                                  (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                                  [SrcLoc.SrcSpan])>_R)
                           s)
                          `cast`
                        (GHC.Types.N:IO[0]
                             <(Language.Haskell.Tools.AST.ElementTypes.Bracket dom,
                               Data.Map.Base.Map
                                 (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                                 [SrcLoc.SrcSpan])>_R)
                          s1 of ds1 { (#,#) ipv ipv1 ->
                   case ((((f (case ipv1 of wild { (,) a1 s' -> a1 }))
                             `cast`
                           (Control.Monad.Trans.Reader.N:ReaderT[0]
                                <*>_N
                                <[GHC.LanguageExtensions.Type.Extension]>_R
                                <Control.Monad.Trans.State.Lazy.StateT
                                   ExtMap.ExtMap GhcMonad.Ghc>_R
                                <Language.Haskell.Tools.AST.Ann.Ann
                                   Language.Haskell.Tools.AST.Representation.TH.UBracket
                                   dom
                                   Language.Haskell.Tools.AST.Ann.SrcTemplateStage>_N)
                             eta)
                            `cast`
                          (Control.Monad.Trans.State.Lazy.N:StateT[0]
                               <Data.Map.Base.Map
                                  (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                                  [SrcLoc.SrcSpan]>_N
                               <GhcMonad.Ghc>_R
                               <Language.Haskell.Tools.AST.Ann.Ann
                                  Language.Haskell.Tools.AST.Representation.TH.UBracket
                                  dom
                                  Language.Haskell.Tools.AST.Ann.SrcTemplateStage>_N)
                            (case ipv1 of wild { (,) a1 s' -> s' }))
                           `cast`
                         (GhcMonad.N:Ghc[0]
                              <(Language.Haskell.Tools.AST.Ann.Ann
                                  Language.Haskell.Tools.AST.Representation.TH.UBracket
                                  dom
                                  Language.Haskell.Tools.AST.Ann.SrcTemplateStage,
                                Data.Map.Base.Map
                                  (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                                  [SrcLoc.SrcSpan])>_R)
                           s)
                          `cast`
                        (GHC.Types.N:IO[0]
                             <(Language.Haskell.Tools.AST.Ann.Ann
                                 Language.Haskell.Tools.AST.Representation.TH.UBracket
                                 dom
                                 Language.Haskell.Tools.AST.Ann.SrcTemplateStage,
                               Data.Map.Base.Map
                                 (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                                 [SrcLoc.SrcSpan])>_R)
                          ipv of ds2 { (#,#) ipv2 ipv3 ->
                   case ((((f1 (case ipv3 of wild { (,) a1 s' -> a1 }))
                             `cast`
                           (Control.Monad.Trans.Reader.N:ReaderT[0]
                                <*>_N
                                <[GHC.LanguageExtensions.Type.Extension]>_R
                                <Control.Monad.Trans.State.Lazy.StateT
                                   ExtMap.ExtMap GhcMonad.Ghc>_R
                                <Language.Haskell.Tools.AST.Ann.Ann
                                   Language.Haskell.Tools.AST.Representation.TH.UBracket
                                   dom
                                   Language.Haskell.Tools.AST.Ann.SrcTemplateStage>_N)
                             eta)
                            `cast`
                          (Control.Monad.Trans.State.Lazy.N:StateT[0]
                               <Data.Map.Base.Map
                                  (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                                  [SrcLoc.SrcSpan]>_N
                               <GhcMonad.Ghc>_R
                               <Language.Haskell.Tools.AST.Ann.Ann
                                  Language.Haskell.Tools.AST.Representation.TH.UBracket
                                  dom
                                  Language.Haskell.Tools.AST.Ann.SrcTemplateStage>_N)
                            (case ipv3 of wild { (,) a1 s' -> s' }))
                           `cast`
                         (GhcMonad.N:Ghc[0]
                              <(Language.Haskell.Tools.AST.Ann.Ann
                                  Language.Haskell.Tools.AST.Representation.TH.UBracket
                                  dom
                                  Language.Haskell.Tools.AST.Ann.SrcTemplateStage,
                                Data.Map.Base.Map
                                  (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                                  [SrcLoc.SrcSpan])>_R)
                           s)
                          `cast`
                        (GHC.Types.N:IO[0]
                             <(Language.Haskell.Tools.AST.Ann.Ann
                                 Language.Haskell.Tools.AST.Representation.TH.UBracket
                                 dom
                                 Language.Haskell.Tools.AST.Ann.SrcTemplateStage,
                               Data.Map.Base.Map
                                 (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                                 [SrcLoc.SrcSpan])>_R)
                          ipv2 of ds3 { (#,#) ipv4 ipv5 ->
                   case ((((f2 (case ipv5 of wild { (,) a1 s' -> a1 }))
                             `cast`
                           (Control.Monad.Trans.Reader.N:ReaderT[0]
                                <*>_N
                                <[GHC.LanguageExtensions.Type.Extension]>_R
                                <Control.Monad.Trans.State.Lazy.StateT
                                   ExtMap.ExtMap GhcMonad.Ghc>_R
                                <Language.Haskell.Tools.AST.Ann.Ann
                                   Language.Haskell.Tools.AST.Representation.TH.UBracket
                                   dom
                                   Language.Haskell.Tools.AST.Ann.SrcTemplateStage>_N)
                             eta)
                            `cast`
                          (Control.Monad.Trans.State.Lazy.N:StateT[0]
                               <Data.Map.Base.Map
                                  (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                                  [SrcLoc.SrcSpan]>_N
                               <GhcMonad.Ghc>_R
                               <Language.Haskell.Tools.AST.Ann.Ann
                                  Language.Haskell.Tools.AST.Representation.TH.UBracket
                                  dom
                                  Language.Haskell.Tools.AST.Ann.SrcTemplateStage>_N)
                            (case ipv5 of wild { (,) a1 s' -> s' }))
                           `cast`
                         (GhcMonad.N:Ghc[0]
                              <(Language.Haskell.Tools.AST.Ann.Ann
                                  Language.Haskell.Tools.AST.Representation.TH.UBracket
                                  dom
                                  Language.Haskell.Tools.AST.Ann.SrcTemplateStage,
                                Data.Map.Base.Map
                                  (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                                  [SrcLoc.SrcSpan])>_R)
                           s)
                          `cast`
                        (GHC.Types.N:IO[0]
                             <(Language.Haskell.Tools.AST.Ann.Ann
                                 Language.Haskell.Tools.AST.Representation.TH.UBracket
                                 dom
                                 Language.Haskell.Tools.AST.Ann.SrcTemplateStage,
                               Data.Map.Base.Map
                                 (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                                 [SrcLoc.SrcSpan])>_R)
                          ipv4 of ds4 { (#,#) ipv6 ipv7 ->
                   ((((g (case ipv7 of wild { (,) a1 s' -> a1 }))
                        `cast`
                      (Control.Monad.Trans.Reader.N:ReaderT[0]
                           <*>_N
                           <[GHC.LanguageExtensions.Type.Extension]>_R
                           <Control.Monad.Trans.State.Lazy.StateT
                              ExtMap.ExtMap GhcMonad.Ghc>_R
                           <Language.Haskell.Tools.AST.Ann.Ann
                              Language.Haskell.Tools.AST.Representation.TH.UBracket
                              dom
                              Language.Haskell.Tools.AST.Ann.SrcTemplateStage>_N)
                        eta)
                       `cast`
                     (Control.Monad.Trans.State.Lazy.N:StateT[0]
                          <Data.Map.Base.Map
                             (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                             [SrcLoc.SrcSpan]>_N
                          <GhcMonad.Ghc>_R
                          <Language.Haskell.Tools.AST.Ann.Ann
                             Language.Haskell.Tools.AST.Representation.TH.UBracket
                             dom
                             Language.Haskell.Tools.AST.Ann.SrcTemplateStage>_N)
                       (case ipv7 of wild { (,) a1 s' -> s' }))
                      `cast`
                    (GhcMonad.N:Ghc[0]
                         <(Language.Haskell.Tools.AST.Ann.Ann
                             Language.Haskell.Tools.AST.Representation.TH.UBracket
                             dom
                             Language.Haskell.Tools.AST.Ann.SrcTemplateStage,
                           Data.Map.Base.Map
                             (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                             [SrcLoc.SrcSpan])>_R)
                      s)
                     `cast`
                   (GHC.Types.N:IO[0]
                        <(Language.Haskell.Tools.AST.Ann.Ann
                            Language.Haskell.Tools.AST.Representation.TH.UBracket
                            dom
                            Language.Haskell.Tools.AST.Ann.SrcTemplateStage,
                          Data.Map.Base.Map
                            (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                            [SrcLoc.SrcSpan])>_R)
                     ipv6 } } } })
                    `cast`
                  (Trans
                       (<GhcMonad.Session>_R
                        ->_R Sym (GHC.Types.N:IO[0]
                                      <(Language.Haskell.Tools.AST.Ann.Ann
                                          Language.Haskell.Tools.AST.Representation.TH.UBracket
                                          dom
                                          Language.Haskell.Tools.AST.Ann.SrcTemplateStage,
                                        Data.Map.Base.Map
                                          (ExtMap.LogicalRelation
                                             GHC.LanguageExtensions.Type.Extension)
                                          [SrcLoc.SrcSpan])>_R))
                       (Sym (GhcMonad.N:Ghc[0]
                                 <(Language.Haskell.Tools.AST.Ann.Ann
                                     Language.Haskell.Tools.AST.Representation.TH.UBracket
                                     dom
                                     Language.Haskell.Tools.AST.Ann.SrcTemplateStage,
                                   Data.Map.Base.Map
                                     (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                                     [SrcLoc.SrcSpan])>_R))))
                   `cast`
                 (<Language.Haskell.Tools.AST.ElementTypes.Bracket dom>_R
                  ->_R Trans
                           (<[GHC.LanguageExtensions.Type.Extension]>_R
                            ->_R Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                          <ExtMap.ExtMap>_N
                                          <GhcMonad.Ghc>_R
                                          <Language.Haskell.Tools.AST.Ann.Ann
                                             Language.Haskell.Tools.AST.Representation.TH.UBracket
                                             dom
                                             Language.Haskell.Tools.AST.Ann.SrcTemplateStage>_N))
                           (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                     <*>_N
                                     <[GHC.LanguageExtensions.Type.Extension]>_R
                                     <Control.Monad.Trans.State.Lazy.StateT
                                        ExtMap.ExtMap GhcMonad.Ghc>_R
                                     <Language.Haskell.Tools.AST.Ann.Ann
                                        Language.Haskell.Tools.AST.Representation.TH.UBracket
                                        dom
                                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage>_N))) }) -}
168d1d9fef8c5561e6bf9a90a9d8e511
  traverseBracket1 ::
    Control.Reference.Representation.Reference
      (Control.Monad.Trans.Reader.ReaderT
         [GHC.LanguageExtensions.Type.Extension]
         (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc))
      Control.Reference.Representation.MU
      Control.Reference.Representation.MU
      Control.Reference.Representation.MU
      (Language.Haskell.Tools.AST.Ann.Ann
         Language.Haskell.Tools.AST.Representation.TH.UBracket
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
      (Language.Haskell.Tools.AST.Ann.Ann
         Language.Haskell.Tools.AST.Representation.TH.UBracket
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
      (Language.Haskell.Tools.AST.Ann.Ann
         Language.Haskell.Tools.AST.Representation.Decls.UDecl
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
      (Language.Haskell.Tools.AST.Ann.Ann
         Language.Haskell.Tools.AST.Representation.Decls.UDecl
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
  {- Unfolding: (\ @ dom ->
                 case Control.Reference.Combinators.$w&
                        @ (Control.Monad.Trans.Reader.ReaderT
                             [GHC.LanguageExtensions.Type.Extension]
                             (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc))
                        @ Control.Reference.Representation.MU
                        @ Control.Reference.Representation.MU
                        @ Control.Reference.Representation.MU
                        @ (Language.Haskell.Tools.AST.Ann.Ann
                             Language.Haskell.Tools.AST.Representation.TH.UBracket
                             dom
                             Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                        @ (Language.Haskell.Tools.AST.Ann.Ann
                             Language.Haskell.Tools.AST.Representation.TH.UBracket
                             dom
                             Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                        @ (Language.Haskell.Tools.AST.Ann.AnnListG
                             Language.Haskell.Tools.AST.Representation.Decls.UDecl
                             dom
                             Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                        @ (Language.Haskell.Tools.AST.Ann.AnnListG
                             Language.Haskell.Tools.AST.Representation.Decls.UDecl
                             dom
                             Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                        @ (Language.Haskell.Tools.AST.Ann.Ann
                             Language.Haskell.Tools.AST.Representation.Decls.UDecl
                             dom
                             Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                        @ (Language.Haskell.Tools.AST.Ann.Ann
                             Language.Haskell.Tools.AST.Representation.Decls.UDecl
                             dom
                             Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                        (TraverseAST.traverseBracket3 @ dom)
                        (TraverseAST.traverseBracket2
                           @ dom) of ww { (#,,,,,#) ww1 ww2 ww3 ww4 ww5 ww6 ->
                 Control.Reference.Representation.Reference
                   @ (Control.Monad.Trans.Reader.ReaderT
                        [GHC.LanguageExtensions.Type.Extension]
                        (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc))
                   @ Control.Reference.Representation.MU
                   @ Control.Reference.Representation.MU
                   @ Control.Reference.Representation.MU
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        Language.Haskell.Tools.AST.Representation.TH.UBracket
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        Language.Haskell.Tools.AST.Representation.TH.UBracket
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        Language.Haskell.Tools.AST.Representation.Decls.UDecl
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        Language.Haskell.Tools.AST.Representation.Decls.UDecl
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   ww1
                   ww2
                   ww3
                   ww4
                   ww5
                   ww6 }) -}
06a79452e65239dde544ddd2e9ed6c03
  traverseBracket2 ::
    Control.Reference.Representation.Reference
      (Control.Monad.Trans.Reader.ReaderT
         [GHC.LanguageExtensions.Type.Extension]
         (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc))
      Control.Reference.Representation.MU
      Control.Reference.Representation.MU
      Control.Reference.Representation.MU
      (Language.Haskell.Tools.AST.Ann.AnnListG
         Language.Haskell.Tools.AST.Representation.Decls.UDecl
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
      (Language.Haskell.Tools.AST.Ann.AnnListG
         Language.Haskell.Tools.AST.Representation.Decls.UDecl
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
      (Language.Haskell.Tools.AST.Ann.Ann
         Language.Haskell.Tools.AST.Representation.Decls.UDecl
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
      (Language.Haskell.Tools.AST.Ann.Ann
         Language.Haskell.Tools.AST.Representation.Decls.UDecl
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
  {- Unfolding: (\ @ dom ->
                 case Language.Haskell.Tools.AST.Ann.$wannList
                        @ Language.Haskell.Tools.AST.Representation.Decls.UDecl
                        @ dom
                        @ Language.Haskell.Tools.AST.Ann.SrcTemplateStage
                        @ (Control.Monad.Trans.Reader.ReaderT
                             [GHC.LanguageExtensions.Type.Extension]
                             (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc))
                        @ Control.Reference.Representation.MU
                        TraverseAST.$s$fRefMonadswr
                        TraverseAST.$sannList1
                          `cast`
                        (Sym (Control.Instances.Morph.N:Morph[0]
                                  <[]>_N
                                  <Data.Proxy.Proxy>_N)) of ww { (#,,,,,#) ww1 ww2 ww3 ww4 ww5 ww6 ->
                 Control.Reference.Representation.Reference
                   @ (Control.Monad.Trans.Reader.ReaderT
                        [GHC.LanguageExtensions.Type.Extension]
                        (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc))
                   @ Control.Reference.Representation.MU
                   @ Control.Reference.Representation.MU
                   @ Control.Reference.Representation.MU
                   @ (Language.Haskell.Tools.AST.Ann.AnnListG
                        Language.Haskell.Tools.AST.Representation.Decls.UDecl
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   @ (Language.Haskell.Tools.AST.Ann.AnnListG
                        Language.Haskell.Tools.AST.Representation.Decls.UDecl
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        Language.Haskell.Tools.AST.Representation.Decls.UDecl
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        Language.Haskell.Tools.AST.Representation.Decls.UDecl
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   ww1
                   ww2
                   ww3
                   ww4
                   ww5
                   ww6 }) -}
b5c21ba036f4cb85e4cef94aad888118
  traverseBracket3 ::
    Control.Reference.Representation.Reference
      (Control.Monad.Trans.Reader.ReaderT
         [GHC.LanguageExtensions.Type.Extension]
         (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc))
      Control.Reference.Representation.MU
      Control.Reference.Representation.MU
      Control.Reference.Representation.MU
      (Language.Haskell.Tools.AST.Ann.Ann
         Language.Haskell.Tools.AST.Representation.TH.UBracket
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
      (Language.Haskell.Tools.AST.Ann.Ann
         Language.Haskell.Tools.AST.Representation.TH.UBracket
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
      (Language.Haskell.Tools.AST.Ann.AnnListG
         Language.Haskell.Tools.AST.Representation.Decls.UDecl
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
      (Language.Haskell.Tools.AST.Ann.AnnListG
         Language.Haskell.Tools.AST.Representation.Decls.UDecl
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
  {- Unfolding: (\ @ dom ->
                 case Language.Haskell.Tools.AST.References.$wbracketDecl
                        @ dom
                        @ Language.Haskell.Tools.AST.Ann.SrcTemplateStage
                        @ (Control.Monad.Trans.Reader.ReaderT
                             [GHC.LanguageExtensions.Type.Extension]
                             (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc))
                        @ Control.Reference.Representation.MU
                        (TraverseAST.$s$fMonadReaderT
                           @ [GHC.LanguageExtensions.Type.Extension])
                        Data.Proxy.$fMonadPlusProxy
                        TraverseAST.$sannJust1
                          `cast`
                        (Sym (Control.Instances.Morph.N:Morph[0]
                                  <GHC.Base.Maybe>_N
                                  <Data.Proxy.Proxy>_N)) of ww { (#,,,,,#) ww1 ww2 ww3 ww4 ww5 ww6 ->
                 Control.Reference.Representation.Reference
                   @ (Control.Monad.Trans.Reader.ReaderT
                        [GHC.LanguageExtensions.Type.Extension]
                        (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc))
                   @ Control.Reference.Representation.MU
                   @ Control.Reference.Representation.MU
                   @ Control.Reference.Representation.MU
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        Language.Haskell.Tools.AST.Representation.TH.UBracket
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        Language.Haskell.Tools.AST.Representation.TH.UBracket
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   @ (Language.Haskell.Tools.AST.Ann.AnnListG
                        Language.Haskell.Tools.AST.Representation.Decls.UDecl
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   @ (Language.Haskell.Tools.AST.Ann.AnnListG
                        Language.Haskell.Tools.AST.Representation.Decls.UDecl
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   ww1
                   ww2
                   ww3
                   ww4
                   ww5
                   ww6 }) -}
be32cd34e4ceff617e01154c18f2ed5b
  traverseBracket4 ::
    Control.Reference.Representation.Reference
      (Control.Monad.Trans.Reader.ReaderT
         [GHC.LanguageExtensions.Type.Extension]
         (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc))
      Control.Reference.Representation.MU
      Control.Reference.Representation.MU
      Control.Reference.Representation.MU
      (Language.Haskell.Tools.AST.Ann.Ann
         Language.Haskell.Tools.AST.Representation.TH.UBracket
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
      (Language.Haskell.Tools.AST.Ann.Ann
         Language.Haskell.Tools.AST.Representation.TH.UBracket
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
      (Language.Haskell.Tools.AST.Ann.Ann
         Language.Haskell.Tools.AST.Representation.Types.UType
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
      (Language.Haskell.Tools.AST.Ann.Ann
         Language.Haskell.Tools.AST.Representation.Types.UType
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
  {- Unfolding: (\ @ dom ->
                 case Language.Haskell.Tools.AST.References.$wbracketType
                        @ dom
                        @ Language.Haskell.Tools.AST.Ann.SrcTemplateStage
                        @ (Control.Monad.Trans.Reader.ReaderT
                             [GHC.LanguageExtensions.Type.Extension]
                             (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc))
                        @ Control.Reference.Representation.MU
                        (TraverseAST.$s$fMonadReaderT
                           @ [GHC.LanguageExtensions.Type.Extension])
                        Data.Proxy.$fMonadPlusProxy
                        TraverseAST.$sannJust1
                          `cast`
                        (Sym (Control.Instances.Morph.N:Morph[0]
                                  <GHC.Base.Maybe>_N
                                  <Data.Proxy.Proxy>_N)) of ww { (#,,,,,#) ww1 ww2 ww3 ww4 ww5 ww6 ->
                 Control.Reference.Representation.Reference
                   @ (Control.Monad.Trans.Reader.ReaderT
                        [GHC.LanguageExtensions.Type.Extension]
                        (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc))
                   @ Control.Reference.Representation.MU
                   @ Control.Reference.Representation.MU
                   @ Control.Reference.Representation.MU
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        Language.Haskell.Tools.AST.Representation.TH.UBracket
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        Language.Haskell.Tools.AST.Representation.TH.UBracket
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        Language.Haskell.Tools.AST.Representation.Types.UType
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        Language.Haskell.Tools.AST.Representation.Types.UType
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   ww1
                   ww2
                   ww3
                   ww4
                   ww5
                   ww6 }) -}
f59a006618e07acc04ddfb90aee5c565
  traverseBracket5 ::
    Control.Reference.Representation.Reference
      (Control.Monad.Trans.Reader.ReaderT
         [GHC.LanguageExtensions.Type.Extension]
         (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc))
      Control.Reference.Representation.MU
      Control.Reference.Representation.MU
      Control.Reference.Representation.MU
      (Language.Haskell.Tools.AST.Ann.Ann
         Language.Haskell.Tools.AST.Representation.TH.UBracket
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
      (Language.Haskell.Tools.AST.Ann.Ann
         Language.Haskell.Tools.AST.Representation.TH.UBracket
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
      (Language.Haskell.Tools.AST.Ann.Ann
         Language.Haskell.Tools.AST.Representation.Patterns.UPattern
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
      (Language.Haskell.Tools.AST.Ann.Ann
         Language.Haskell.Tools.AST.Representation.Patterns.UPattern
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
  {- Unfolding: (\ @ dom ->
                 case Language.Haskell.Tools.AST.References.$wbracketPattern
                        @ dom
                        @ Language.Haskell.Tools.AST.Ann.SrcTemplateStage
                        @ (Control.Monad.Trans.Reader.ReaderT
                             [GHC.LanguageExtensions.Type.Extension]
                             (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc))
                        @ Control.Reference.Representation.MU
                        (TraverseAST.$s$fMonadReaderT
                           @ [GHC.LanguageExtensions.Type.Extension])
                        Data.Proxy.$fMonadPlusProxy
                        TraverseAST.$sannJust1
                          `cast`
                        (Sym (Control.Instances.Morph.N:Morph[0]
                                  <GHC.Base.Maybe>_N
                                  <Data.Proxy.Proxy>_N)) of ww { (#,,,,,#) ww1 ww2 ww3 ww4 ww5 ww6 ->
                 Control.Reference.Representation.Reference
                   @ (Control.Monad.Trans.Reader.ReaderT
                        [GHC.LanguageExtensions.Type.Extension]
                        (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc))
                   @ Control.Reference.Representation.MU
                   @ Control.Reference.Representation.MU
                   @ Control.Reference.Representation.MU
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        Language.Haskell.Tools.AST.Representation.TH.UBracket
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        Language.Haskell.Tools.AST.Representation.TH.UBracket
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        Language.Haskell.Tools.AST.Representation.Patterns.UPattern
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        Language.Haskell.Tools.AST.Representation.Patterns.UPattern
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   ww1
                   ww2
                   ww3
                   ww4
                   ww5
                   ww6 }) -}
2e7993ed265742e48d0e7feba6bb4bd8
  traverseBracket6 ::
    Control.Reference.Representation.Reference
      (Control.Monad.Trans.Reader.ReaderT
         [GHC.LanguageExtensions.Type.Extension]
         (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc))
      Control.Reference.Representation.MU
      Control.Reference.Representation.MU
      Control.Reference.Representation.MU
      (Language.Haskell.Tools.AST.Ann.Ann
         Language.Haskell.Tools.AST.Representation.TH.UBracket
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
      (Language.Haskell.Tools.AST.Ann.Ann
         Language.Haskell.Tools.AST.Representation.TH.UBracket
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
      (Language.Haskell.Tools.AST.Ann.Ann
         Language.Haskell.Tools.AST.Representation.Exprs.UExpr
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
      (Language.Haskell.Tools.AST.Ann.Ann
         Language.Haskell.Tools.AST.Representation.Exprs.UExpr
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
  {- Unfolding: (\ @ dom ->
                 case Language.Haskell.Tools.AST.References.$wbracketExpr
                        @ dom
                        @ Language.Haskell.Tools.AST.Ann.SrcTemplateStage
                        @ (Control.Monad.Trans.Reader.ReaderT
                             [GHC.LanguageExtensions.Type.Extension]
                             (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc))
                        @ Control.Reference.Representation.MU
                        (TraverseAST.$s$fMonadReaderT
                           @ [GHC.LanguageExtensions.Type.Extension])
                        Data.Proxy.$fMonadPlusProxy
                        TraverseAST.$sannJust1
                          `cast`
                        (Sym (Control.Instances.Morph.N:Morph[0]
                                  <GHC.Base.Maybe>_N
                                  <Data.Proxy.Proxy>_N)) of ww { (#,,,,,#) ww1 ww2 ww3 ww4 ww5 ww6 ->
                 Control.Reference.Representation.Reference
                   @ (Control.Monad.Trans.Reader.ReaderT
                        [GHC.LanguageExtensions.Type.Extension]
                        (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc))
                   @ Control.Reference.Representation.MU
                   @ Control.Reference.Representation.MU
                   @ Control.Reference.Representation.MU
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        Language.Haskell.Tools.AST.Representation.TH.UBracket
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        Language.Haskell.Tools.AST.Representation.TH.UBracket
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        Language.Haskell.Tools.AST.Representation.Exprs.UExpr
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        Language.Haskell.Tools.AST.Representation.Exprs.UExpr
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   ww1
                   ww2
                   ww3
                   ww4
                   ww5
                   ww6 }) -}
887f3b1dfb33da9b06643f7104e1417d
  traverseCaseRhs ::
    ExtMonad.CheckUNode uexpr
    -> ExtMonad.CheckNode (TraverseAST.CaseRhsG uexpr)
  {- Arity: 2,
     Strictness: <L,C(U)><S(S(LLS(S)LLLLLLLLLL)L),U(U(U,U,U(U),U,U,U,U,U,U,U,U,U,U),U)>,
     Unfolding: (\ @ (uexpr :: GHC.Types.*
                               -> GHC.Types.* -> GHC.Types.*)
                   (dk :: ExtMonad.CheckUNode uexpr)
                   @ dom
                   ($d(%,%) :: ExtMonad.ExtDomain dom) ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Language.Haskell.Tools.AST.Ann.SemanticInfo'
                             dom Language.Haskell.Tools.AST.Ann.SameInfoDefaultCls)
                        @ Language.Haskell.Tools.AST.SemaInfoTypes.NoSemanticInfo
                        (Language.Haskell.Tools.AST.Ann.$p3Domain
                           @ dom
                           (GHC.Classes.$p1(%,%)
                              @ (Language.Haskell.Tools.AST.Ann.Domain dom)
                              @ (Language.Haskell.Tools.AST.SemaInfoClasses.HasNameInfo'
                                   (Language.Haskell.Tools.AST.Ann.SemanticInfo
                                      dom
                                      Language.Haskell.Tools.AST.Representation.Names.UQualifiedName))
                              $d(%,%)))
                          `cast`
                        (Data.Type.Equality.N:~[0]
                             <*>_N <Language.Haskell.Tools.AST.Ann.SemanticInfo'
                                      dom
                                      Language.Haskell.Tools.AST.Ann.SameInfoDefaultCls>_N <Language.Haskell.Tools.AST.SemaInfoTypes.NoSemanticInfo>_N) of cobox0 { DEFAULT ->
                 let {
                   f :: Language.Haskell.Tools.AST.Ann.Ann
                          (Language.Haskell.Tools.AST.Representation.Exprs.UCaseRhs' uexpr)
                          dom
                          Language.Haskell.Tools.AST.Ann.SrcTemplateStage
                        -> Control.Monad.Trans.Reader.ReaderT
                             [GHC.LanguageExtensions.Type.Extension]
                             (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc)
                             (Language.Haskell.Tools.AST.Ann.Ann
                                (Language.Haskell.Tools.AST.Representation.Exprs.UCaseRhs' uexpr)
                                dom
                                Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   = case TraverseAST.traverseCaseRhs4
                            @ dom
                            @ uexpr of wild { Control.Reference.Representation.Reference ds1 ds2 ds3 ds4 ds5 ds6 ->
                     ds3 (dk @ dom $d(%,%)) }
                 } in
                 let {
                   g :: Language.Haskell.Tools.AST.Ann.Ann
                          (Language.Haskell.Tools.AST.Representation.Exprs.UCaseRhs' uexpr)
                          dom
                          Language.Haskell.Tools.AST.Ann.SrcTemplateStage
                        -> Control.Monad.Trans.Reader.ReaderT
                             [GHC.LanguageExtensions.Type.Extension]
                             (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc)
                             (Language.Haskell.Tools.AST.Ann.Ann
                                (Language.Haskell.Tools.AST.Representation.Exprs.UCaseRhs' uexpr)
                                dom
                                Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   = case TraverseAST.traverseCaseRhs1
                            @ dom
                            @ uexpr of wild { Control.Reference.Representation.Reference ds1 ds2 ds3 ds4 ds5 ds6 ->
                     ds3
                       (TraverseAST.traverseGuardedCaseRhs
                          @ uexpr
                          (\ @ dom1 ($d(%,%)1 :: ExtMonad.ExtDomain dom1)[OneShot] ->
                           case GHC.Types.HEq_sc
                                  @ *
                                  @ *
                                  @ (Language.Haskell.Tools.AST.Ann.SemanticInfo'
                                       dom1 Language.Haskell.Tools.AST.Ann.SameInfoDefaultCls)
                                  @ Language.Haskell.Tools.AST.SemaInfoTypes.NoSemanticInfo
                                  (Language.Haskell.Tools.AST.Ann.$p3Domain
                                     @ dom1
                                     (GHC.Classes.$p1(%,%)
                                        @ (Language.Haskell.Tools.AST.Ann.Domain dom1)
                                        @ (Language.Haskell.Tools.AST.SemaInfoClasses.HasNameInfo'
                                             (Language.Haskell.Tools.AST.Ann.SemanticInfo
                                                dom1
                                                Language.Haskell.Tools.AST.Representation.Names.UQualifiedName))
                                        $d(%,%)1))
                                    `cast`
                                  (Data.Type.Equality.N:~[0]
                                       <*>_N <Language.Haskell.Tools.AST.Ann.SemanticInfo'
                                                dom1
                                                Language.Haskell.Tools.AST.Ann.SameInfoDefaultCls>_N <Language.Haskell.Tools.AST.SemaInfoTypes.NoSemanticInfo>_N) of cobox1 { DEFAULT ->
                           dk @ dom1 $d(%,%)1 })
                          @ dom
                          $d(%,%)) }
                 } in
                 \ (x :: Language.Haskell.Tools.AST.Ann.Ann
                           (Language.Haskell.Tools.AST.Representation.Exprs.UCaseRhs' uexpr)
                           dom
                           Language.Haskell.Tools.AST.Ann.SrcTemplateStage) ->
                 let {
                   m1 :: Control.Monad.Trans.Reader.ReaderT
                           [GHC.LanguageExtensions.Type.Extension]
                           (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc)
                           (Language.Haskell.Tools.AST.Ann.Ann
                              (Language.Haskell.Tools.AST.Representation.Exprs.UCaseRhs' uexpr)
                              dom
                              Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   = f x
                 } in
                 (\ (r1 :: [GHC.LanguageExtensions.Type.Extension]) ->
                  let {
                    m2 :: Control.Monad.Trans.State.Lazy.StateT
                            (Data.Map.Base.Map
                               (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                               [SrcLoc.SrcSpan])
                            GhcMonad.Ghc
                            (Language.Haskell.Tools.AST.Ann.Ann
                               (Language.Haskell.Tools.AST.Representation.Exprs.UCaseRhs' uexpr)
                               dom
                               Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                    = m1
                        `cast`
                      (Control.Monad.Trans.Reader.N:ReaderT[0]
                           <*>_N
                           <[GHC.LanguageExtensions.Type.Extension]>_R
                           <Control.Monad.Trans.State.Lazy.StateT
                              ExtMap.ExtMap GhcMonad.Ghc>_R
                           <Language.Haskell.Tools.AST.Ann.Ann
                              (Language.Haskell.Tools.AST.Representation.Exprs.UCaseRhs' uexpr)
                              dom
                              Language.Haskell.Tools.AST.Ann.SrcTemplateStage>_N)
                        r1
                  } in
                  (\ (s1 :: Data.Map.Base.Map
                              (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                              [SrcLoc.SrcSpan]) ->
                   let {
                     m :: GhcMonad.Ghc
                            (Language.Haskell.Tools.AST.Ann.Ann
                               (Language.Haskell.Tools.AST.Representation.Exprs.UCaseRhs' uexpr)
                               dom
                               Language.Haskell.Tools.AST.Ann.SrcTemplateStage,
                             Data.Map.Base.Map
                               (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                               [SrcLoc.SrcSpan])
                     = m2
                         `cast`
                       (Control.Monad.Trans.State.Lazy.N:StateT[0]
                            <Data.Map.Base.Map
                               (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                               [SrcLoc.SrcSpan]>_N
                            <GhcMonad.Ghc>_R
                            <Language.Haskell.Tools.AST.Ann.Ann
                               (Language.Haskell.Tools.AST.Representation.Exprs.UCaseRhs' uexpr)
                               dom
                               Language.Haskell.Tools.AST.Ann.SrcTemplateStage>_N)
                         s1
                   } in
                   (\ (s :: GhcMonad.Session)
                      (s2 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                    case (m `cast`
                          (GhcMonad.N:Ghc[0]
                               <(Language.Haskell.Tools.AST.Ann.Ann
                                   (Language.Haskell.Tools.AST.Representation.Exprs.UCaseRhs' uexpr)
                                   dom
                                   Language.Haskell.Tools.AST.Ann.SrcTemplateStage,
                                 Data.Map.Base.Map
                                   (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                                   [SrcLoc.SrcSpan])>_R)
                            s)
                           `cast`
                         (GHC.Types.N:IO[0]
                              <(Language.Haskell.Tools.AST.Ann.Ann
                                  (Language.Haskell.Tools.AST.Representation.Exprs.UCaseRhs' uexpr)
                                  dom
                                  Language.Haskell.Tools.AST.Ann.SrcTemplateStage,
                                Data.Map.Base.Map
                                  (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                                  [SrcLoc.SrcSpan])>_R)
                           s2 of ds1 { (#,#) ipv ipv1 ->
                    ((((g (case ipv1 of wild { (,) a1 s' -> a1 }))
                         `cast`
                       (Control.Monad.Trans.Reader.N:ReaderT[0]
                            <*>_N
                            <[GHC.LanguageExtensions.Type.Extension]>_R
                            <Control.Monad.Trans.State.Lazy.StateT
                               ExtMap.ExtMap GhcMonad.Ghc>_R
                            <Language.Haskell.Tools.AST.Ann.Ann
                               (Language.Haskell.Tools.AST.Representation.Exprs.UCaseRhs' uexpr)
                               dom
                               Language.Haskell.Tools.AST.Ann.SrcTemplateStage>_N)
                         r1)
                        `cast`
                      (Control.Monad.Trans.State.Lazy.N:StateT[0]
                           <Data.Map.Base.Map
                              (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                              [SrcLoc.SrcSpan]>_N
                           <GhcMonad.Ghc>_R
                           <Language.Haskell.Tools.AST.Ann.Ann
                              (Language.Haskell.Tools.AST.Representation.Exprs.UCaseRhs' uexpr)
                              dom
                              Language.Haskell.Tools.AST.Ann.SrcTemplateStage>_N)
                        (case ipv1 of wild { (,) a1 s' -> s' }))
                       `cast`
                     (GhcMonad.N:Ghc[0]
                          <(Language.Haskell.Tools.AST.Ann.Ann
                              (Language.Haskell.Tools.AST.Representation.Exprs.UCaseRhs' uexpr)
                              dom
                              Language.Haskell.Tools.AST.Ann.SrcTemplateStage,
                            Data.Map.Base.Map
                              (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                              [SrcLoc.SrcSpan])>_R)
                       s)
                      `cast`
                    (GHC.Types.N:IO[0]
                         <(Language.Haskell.Tools.AST.Ann.Ann
                             (Language.Haskell.Tools.AST.Representation.Exprs.UCaseRhs' uexpr)
                             dom
                             Language.Haskell.Tools.AST.Ann.SrcTemplateStage,
                           Data.Map.Base.Map
                             (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                             [SrcLoc.SrcSpan])>_R)
                      ipv })
                     `cast`
                   (Trans
                        (<GhcMonad.Session>_R
                         ->_R Sym (GHC.Types.N:IO[0]
                                       <(Language.Haskell.Tools.AST.Ann.Ann
                                           (Language.Haskell.Tools.AST.Representation.Exprs.UCaseRhs'
                                              uexpr)
                                           dom
                                           Language.Haskell.Tools.AST.Ann.SrcTemplateStage,
                                         Data.Map.Base.Map
                                           (ExtMap.LogicalRelation
                                              GHC.LanguageExtensions.Type.Extension)
                                           [SrcLoc.SrcSpan])>_R))
                        (Sym (GhcMonad.N:Ghc[0]
                                  <(Language.Haskell.Tools.AST.Ann.Ann
                                      (Language.Haskell.Tools.AST.Representation.Exprs.UCaseRhs'
                                         uexpr)
                                      dom
                                      Language.Haskell.Tools.AST.Ann.SrcTemplateStage,
                                    Data.Map.Base.Map
                                      (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                                      [SrcLoc.SrcSpan])>_R))))
                    `cast`
                  (Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                            <Data.Map.Base.Map
                               (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                               [SrcLoc.SrcSpan]>_N
                            <GhcMonad.Ghc>_R
                            <Language.Haskell.Tools.AST.Ann.Ann
                               (Language.Haskell.Tools.AST.Representation.Exprs.UCaseRhs' uexpr)
                               dom
                               Language.Haskell.Tools.AST.Ann.SrcTemplateStage>_N)))
                   `cast`
                 (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                           <*>_N
                           <[GHC.LanguageExtensions.Type.Extension]>_R
                           <Control.Monad.Trans.State.Lazy.StateT
                              ExtMap.ExtMap GhcMonad.Ghc>_R
                           <Language.Haskell.Tools.AST.Ann.Ann
                              (Language.Haskell.Tools.AST.Representation.Exprs.UCaseRhs' uexpr)
                              dom
                              Language.Haskell.Tools.AST.Ann.SrcTemplateStage>_N)) }) -}
26e736fe53da4ec335f6cc0b9734b61c
  traverseCaseRhs1 ::
    Control.Reference.Representation.Reference
      (Control.Monad.Trans.Reader.ReaderT
         [GHC.LanguageExtensions.Type.Extension]
         (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc))
      Control.Reference.Representation.MU
      Control.Reference.Representation.MU
      Control.Reference.Representation.MU
      (Language.Haskell.Tools.AST.Ann.Ann
         (Language.Haskell.Tools.AST.Representation.Exprs.UCaseRhs' uexpr)
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
      (Language.Haskell.Tools.AST.Ann.Ann
         (Language.Haskell.Tools.AST.Representation.Exprs.UCaseRhs' uexpr)
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
      (Language.Haskell.Tools.AST.Ann.Ann
         (Language.Haskell.Tools.AST.Representation.Exprs.UGuardedCaseRhs'
            uexpr)
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
      (Language.Haskell.Tools.AST.Ann.Ann
         (Language.Haskell.Tools.AST.Representation.Exprs.UGuardedCaseRhs'
            uexpr)
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
  {- Unfolding: (\ @ dom
                   @ (uexpr :: GHC.Types.* -> GHC.Types.* -> GHC.Types.*) ->
                 case Control.Reference.Combinators.$w&
                        @ (Control.Monad.Trans.Reader.ReaderT
                             [GHC.LanguageExtensions.Type.Extension]
                             (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc))
                        @ Control.Reference.Representation.MU
                        @ Control.Reference.Representation.MU
                        @ Control.Reference.Representation.MU
                        @ (Language.Haskell.Tools.AST.Ann.Ann
                             (Language.Haskell.Tools.AST.Representation.Exprs.UCaseRhs' uexpr)
                             dom
                             Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                        @ (Language.Haskell.Tools.AST.Ann.Ann
                             (Language.Haskell.Tools.AST.Representation.Exprs.UCaseRhs' uexpr)
                             dom
                             Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                        @ (Language.Haskell.Tools.AST.Ann.AnnListG
                             (Language.Haskell.Tools.AST.Representation.Exprs.UGuardedCaseRhs'
                                uexpr)
                             dom
                             Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                        @ (Language.Haskell.Tools.AST.Ann.AnnListG
                             (Language.Haskell.Tools.AST.Representation.Exprs.UGuardedCaseRhs'
                                uexpr)
                             dom
                             Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                        @ (Language.Haskell.Tools.AST.Ann.Ann
                             (Language.Haskell.Tools.AST.Representation.Exprs.UGuardedCaseRhs'
                                uexpr)
                             dom
                             Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                        @ (Language.Haskell.Tools.AST.Ann.Ann
                             (Language.Haskell.Tools.AST.Representation.Exprs.UGuardedCaseRhs'
                                uexpr)
                             dom
                             Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                        (TraverseAST.traverseCaseRhs3 @ uexpr @ dom)
                        (TraverseAST.traverseCaseRhs2
                           @ uexpr
                           @ dom) of ww { (#,,,,,#) ww1 ww2 ww3 ww4 ww5 ww6 ->
                 Control.Reference.Representation.Reference
                   @ (Control.Monad.Trans.Reader.ReaderT
                        [GHC.LanguageExtensions.Type.Extension]
                        (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc))
                   @ Control.Reference.Representation.MU
                   @ Control.Reference.Representation.MU
                   @ Control.Reference.Representation.MU
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        (Language.Haskell.Tools.AST.Representation.Exprs.UCaseRhs' uexpr)
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        (Language.Haskell.Tools.AST.Representation.Exprs.UCaseRhs' uexpr)
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        (Language.Haskell.Tools.AST.Representation.Exprs.UGuardedCaseRhs'
                           uexpr)
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        (Language.Haskell.Tools.AST.Representation.Exprs.UGuardedCaseRhs'
                           uexpr)
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   ww1
                   ww2
                   ww3
                   ww4
                   ww5
                   ww6 }) -}
0ac6e02b17d0cf1f58670bdc2907358f
  traverseCaseRhs2 ::
    Control.Reference.Representation.Reference
      (Control.Monad.Trans.Reader.ReaderT
         [GHC.LanguageExtensions.Type.Extension]
         (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc))
      Control.Reference.Representation.MU
      Control.Reference.Representation.MU
      Control.Reference.Representation.MU
      (Language.Haskell.Tools.AST.Ann.AnnListG
         (Language.Haskell.Tools.AST.Representation.Exprs.UGuardedCaseRhs'
            uexpr)
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
      (Language.Haskell.Tools.AST.Ann.AnnListG
         (Language.Haskell.Tools.AST.Representation.Exprs.UGuardedCaseRhs'
            uexpr)
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
      (Language.Haskell.Tools.AST.Ann.Ann
         (Language.Haskell.Tools.AST.Representation.Exprs.UGuardedCaseRhs'
            uexpr)
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
      (Language.Haskell.Tools.AST.Ann.Ann
         (Language.Haskell.Tools.AST.Representation.Exprs.UGuardedCaseRhs'
            uexpr)
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
  {- Unfolding: (\ @ (uexpr :: GHC.Types.*
                               -> GHC.Types.* -> GHC.Types.*)
                   @ dom ->
                 case Language.Haskell.Tools.AST.Ann.$wannList
                        @ (Language.Haskell.Tools.AST.Representation.Exprs.UGuardedCaseRhs'
                             uexpr)
                        @ dom
                        @ Language.Haskell.Tools.AST.Ann.SrcTemplateStage
                        @ (Control.Monad.Trans.Reader.ReaderT
                             [GHC.LanguageExtensions.Type.Extension]
                             (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc))
                        @ Control.Reference.Representation.MU
                        TraverseAST.$s$fRefMonadswr
                        TraverseAST.$sannList1
                          `cast`
                        (Sym (Control.Instances.Morph.N:Morph[0]
                                  <[]>_N
                                  <Data.Proxy.Proxy>_N)) of ww { (#,,,,,#) ww1 ww2 ww3 ww4 ww5 ww6 ->
                 Control.Reference.Representation.Reference
                   @ (Control.Monad.Trans.Reader.ReaderT
                        [GHC.LanguageExtensions.Type.Extension]
                        (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc))
                   @ Control.Reference.Representation.MU
                   @ Control.Reference.Representation.MU
                   @ Control.Reference.Representation.MU
                   @ (Language.Haskell.Tools.AST.Ann.AnnListG
                        (Language.Haskell.Tools.AST.Representation.Exprs.UGuardedCaseRhs'
                           uexpr)
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   @ (Language.Haskell.Tools.AST.Ann.AnnListG
                        (Language.Haskell.Tools.AST.Representation.Exprs.UGuardedCaseRhs'
                           uexpr)
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        (Language.Haskell.Tools.AST.Representation.Exprs.UGuardedCaseRhs'
                           uexpr)
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        (Language.Haskell.Tools.AST.Representation.Exprs.UGuardedCaseRhs'
                           uexpr)
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   ww1
                   ww2
                   ww3
                   ww4
                   ww5
                   ww6 }) -}
e4b76286b7ad8e9e99ffdf3b728d3591
  traverseCaseRhs3 ::
    Control.Reference.Representation.Reference
      (Control.Monad.Trans.Reader.ReaderT
         [GHC.LanguageExtensions.Type.Extension]
         (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc))
      Control.Reference.Representation.MU
      Control.Reference.Representation.MU
      Control.Reference.Representation.MU
      (Language.Haskell.Tools.AST.Ann.Ann
         (Language.Haskell.Tools.AST.Representation.Exprs.UCaseRhs' uexpr)
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
      (Language.Haskell.Tools.AST.Ann.Ann
         (Language.Haskell.Tools.AST.Representation.Exprs.UCaseRhs' uexpr)
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
      (Language.Haskell.Tools.AST.Ann.AnnListG
         (Language.Haskell.Tools.AST.Representation.Exprs.UGuardedCaseRhs'
            uexpr)
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
      (Language.Haskell.Tools.AST.Ann.AnnListG
         (Language.Haskell.Tools.AST.Representation.Exprs.UGuardedCaseRhs'
            uexpr)
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
  {- Unfolding: (\ @ (uexpr :: GHC.Types.*
                               -> GHC.Types.* -> GHC.Types.*)
                   @ dom ->
                 case Language.Haskell.Tools.AST.References.$wrhsCaseGuards
                        @ uexpr
                        @ dom
                        @ Language.Haskell.Tools.AST.Ann.SrcTemplateStage
                        @ (Control.Monad.Trans.Reader.ReaderT
                             [GHC.LanguageExtensions.Type.Extension]
                             (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc))
                        @ Control.Reference.Representation.MU
                        (TraverseAST.$s$fMonadReaderT
                           @ [GHC.LanguageExtensions.Type.Extension])
                        Data.Proxy.$fMonadPlusProxy
                        TraverseAST.$sannJust1
                          `cast`
                        (Sym (Control.Instances.Morph.N:Morph[0]
                                  <GHC.Base.Maybe>_N
                                  <Data.Proxy.Proxy>_N)) of ww { (#,,,,,#) ww1 ww2 ww3 ww4 ww5 ww6 ->
                 Control.Reference.Representation.Reference
                   @ (Control.Monad.Trans.Reader.ReaderT
                        [GHC.LanguageExtensions.Type.Extension]
                        (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc))
                   @ Control.Reference.Representation.MU
                   @ Control.Reference.Representation.MU
                   @ Control.Reference.Representation.MU
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        (Language.Haskell.Tools.AST.Representation.Exprs.UCaseRhs' uexpr)
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        (Language.Haskell.Tools.AST.Representation.Exprs.UCaseRhs' uexpr)
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   @ (Language.Haskell.Tools.AST.Ann.AnnListG
                        (Language.Haskell.Tools.AST.Representation.Exprs.UGuardedCaseRhs'
                           uexpr)
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   @ (Language.Haskell.Tools.AST.Ann.AnnListG
                        (Language.Haskell.Tools.AST.Representation.Exprs.UGuardedCaseRhs'
                           uexpr)
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   ww1
                   ww2
                   ww3
                   ww4
                   ww5
                   ww6 }) -}
6a4429a9dfb3b8e585b36c57fcd4b2f0
  traverseCaseRhs4 ::
    Control.Reference.Representation.Reference
      (Control.Monad.Trans.Reader.ReaderT
         [GHC.LanguageExtensions.Type.Extension]
         (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc))
      Control.Reference.Representation.MU
      Control.Reference.Representation.MU
      Control.Reference.Representation.MU
      (Language.Haskell.Tools.AST.Ann.Ann
         (Language.Haskell.Tools.AST.Representation.Exprs.UCaseRhs' uexpr)
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
      (Language.Haskell.Tools.AST.Ann.Ann
         (Language.Haskell.Tools.AST.Representation.Exprs.UCaseRhs' uexpr)
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
      (Language.Haskell.Tools.AST.Ann.Ann
         uexpr dom Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
      (Language.Haskell.Tools.AST.Ann.Ann
         uexpr dom Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
  {- Unfolding: (\ @ dom
                   @ (uexpr :: GHC.Types.* -> GHC.Types.* -> GHC.Types.*) ->
                 case Language.Haskell.Tools.AST.References.$wrhsCaseExpr
                        @ uexpr
                        @ dom
                        @ Language.Haskell.Tools.AST.Ann.SrcTemplateStage
                        @ (Control.Monad.Trans.Reader.ReaderT
                             [GHC.LanguageExtensions.Type.Extension]
                             (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc))
                        @ Control.Reference.Representation.MU
                        (TraverseAST.$s$fMonadReaderT
                           @ [GHC.LanguageExtensions.Type.Extension])
                        Data.Proxy.$fMonadPlusProxy
                        TraverseAST.$sannJust1
                          `cast`
                        (Sym (Control.Instances.Morph.N:Morph[0]
                                  <GHC.Base.Maybe>_N
                                  <Data.Proxy.Proxy>_N)) of ww { (#,,,,,#) ww1 ww2 ww3 ww4 ww5 ww6 ->
                 Control.Reference.Representation.Reference
                   @ (Control.Monad.Trans.Reader.ReaderT
                        [GHC.LanguageExtensions.Type.Extension]
                        (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc))
                   @ Control.Reference.Representation.MU
                   @ Control.Reference.Representation.MU
                   @ Control.Reference.Representation.MU
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        (Language.Haskell.Tools.AST.Representation.Exprs.UCaseRhs' uexpr)
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        (Language.Haskell.Tools.AST.Representation.Exprs.UCaseRhs' uexpr)
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        uexpr dom Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        uexpr dom Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   ww1
                   ww2
                   ww3
                   ww4
                   ww5
                   ww6 }) -}
462b80328fac89db1cf512870324043d
  traverseClassBody ::
    ExtMonad.CheckNode
      Language.Haskell.Tools.AST.ElementTypes.ClassBody
  {- Arity: 1,
     Strictness: <S(S(LLS(S)LLLLLLLLLL)L),U(U(U,U,U(U),U,U,U,U,U,U,U,U,U,U),U)>,
     Unfolding: (\ @ dom ($d(%,%) :: ExtMonad.ExtDomain dom) ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Language.Haskell.Tools.AST.Ann.SemanticInfo'
                             dom Language.Haskell.Tools.AST.Ann.SameInfoDefaultCls)
                        @ Language.Haskell.Tools.AST.SemaInfoTypes.NoSemanticInfo
                        (Language.Haskell.Tools.AST.Ann.$p3Domain
                           @ dom
                           (GHC.Classes.$p1(%,%)
                              @ (Language.Haskell.Tools.AST.Ann.Domain dom)
                              @ (Language.Haskell.Tools.AST.SemaInfoClasses.HasNameInfo'
                                   (Language.Haskell.Tools.AST.Ann.SemanticInfo
                                      dom
                                      Language.Haskell.Tools.AST.Representation.Names.UQualifiedName))
                              $d(%,%)))
                          `cast`
                        (Data.Type.Equality.N:~[0]
                             <*>_N <Language.Haskell.Tools.AST.Ann.SemanticInfo'
                                      dom
                                      Language.Haskell.Tools.AST.Ann.SameInfoDefaultCls>_N <Language.Haskell.Tools.AST.SemaInfoTypes.NoSemanticInfo>_N) of cobox0 { DEFAULT ->
                 case TraverseAST.traverseClassBody1
                        @ dom of wild { Control.Reference.Representation.Reference ds1 ds2 ds3 ds4 ds5 ds6 ->
                 ds3 (TraverseAST.traverseClassElem @ dom $d(%,%)) } }) -}
6eba8796ed6298cbcd8dc8f40546f16b
  traverseClassBody1 ::
    Control.Reference.Representation.Reference
      (Control.Monad.Trans.Reader.ReaderT
         [GHC.LanguageExtensions.Type.Extension]
         (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc))
      Control.Reference.Representation.MU
      Control.Reference.Representation.MU
      Control.Reference.Representation.MU
      (Language.Haskell.Tools.AST.Ann.Ann
         Language.Haskell.Tools.AST.Representation.Decls.UClassBody
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
      (Language.Haskell.Tools.AST.Ann.Ann
         Language.Haskell.Tools.AST.Representation.Decls.UClassBody
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
      (Language.Haskell.Tools.AST.Ann.Ann
         Language.Haskell.Tools.AST.Representation.Decls.UClassElement
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
      (Language.Haskell.Tools.AST.Ann.Ann
         Language.Haskell.Tools.AST.Representation.Decls.UClassElement
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
  {- Unfolding: (\ @ dom ->
                 case Control.Reference.Combinators.$w&
                        @ (Control.Monad.Trans.Reader.ReaderT
                             [GHC.LanguageExtensions.Type.Extension]
                             (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc))
                        @ Control.Reference.Representation.MU
                        @ Control.Reference.Representation.MU
                        @ Control.Reference.Representation.MU
                        @ (Language.Haskell.Tools.AST.Ann.Ann
                             Language.Haskell.Tools.AST.Representation.Decls.UClassBody
                             dom
                             Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                        @ (Language.Haskell.Tools.AST.Ann.Ann
                             Language.Haskell.Tools.AST.Representation.Decls.UClassBody
                             dom
                             Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                        @ (Language.Haskell.Tools.AST.Ann.AnnListG
                             Language.Haskell.Tools.AST.Representation.Decls.UClassElement
                             dom
                             Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                        @ (Language.Haskell.Tools.AST.Ann.AnnListG
                             Language.Haskell.Tools.AST.Representation.Decls.UClassElement
                             dom
                             Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                        @ (Language.Haskell.Tools.AST.Ann.Ann
                             Language.Haskell.Tools.AST.Representation.Decls.UClassElement
                             dom
                             Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                        @ (Language.Haskell.Tools.AST.Ann.Ann
                             Language.Haskell.Tools.AST.Representation.Decls.UClassElement
                             dom
                             Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                        (TraverseAST.traverseClassBody3 @ dom)
                        (TraverseAST.traverseClassBody2
                           @ dom) of ww { (#,,,,,#) ww1 ww2 ww3 ww4 ww5 ww6 ->
                 Control.Reference.Representation.Reference
                   @ (Control.Monad.Trans.Reader.ReaderT
                        [GHC.LanguageExtensions.Type.Extension]
                        (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc))
                   @ Control.Reference.Representation.MU
                   @ Control.Reference.Representation.MU
                   @ Control.Reference.Representation.MU
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        Language.Haskell.Tools.AST.Representation.Decls.UClassBody
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        Language.Haskell.Tools.AST.Representation.Decls.UClassBody
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        Language.Haskell.Tools.AST.Representation.Decls.UClassElement
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        Language.Haskell.Tools.AST.Representation.Decls.UClassElement
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   ww1
                   ww2
                   ww3
                   ww4
                   ww5
                   ww6 }) -}
0174c498c31f0e2bff029ec04de2a335
  traverseClassBody2 ::
    Control.Reference.Representation.Reference
      (Control.Monad.Trans.Reader.ReaderT
         [GHC.LanguageExtensions.Type.Extension]
         (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc))
      Control.Reference.Representation.MU
      Control.Reference.Representation.MU
      Control.Reference.Representation.MU
      (Language.Haskell.Tools.AST.Ann.AnnListG
         Language.Haskell.Tools.AST.Representation.Decls.UClassElement
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
      (Language.Haskell.Tools.AST.Ann.AnnListG
         Language.Haskell.Tools.AST.Representation.Decls.UClassElement
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
      (Language.Haskell.Tools.AST.Ann.Ann
         Language.Haskell.Tools.AST.Representation.Decls.UClassElement
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
      (Language.Haskell.Tools.AST.Ann.Ann
         Language.Haskell.Tools.AST.Representation.Decls.UClassElement
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
  {- Unfolding: (\ @ dom ->
                 case Language.Haskell.Tools.AST.Ann.$wannList
                        @ Language.Haskell.Tools.AST.Representation.Decls.UClassElement
                        @ dom
                        @ Language.Haskell.Tools.AST.Ann.SrcTemplateStage
                        @ (Control.Monad.Trans.Reader.ReaderT
                             [GHC.LanguageExtensions.Type.Extension]
                             (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc))
                        @ Control.Reference.Representation.MU
                        TraverseAST.$s$fRefMonadswr
                        TraverseAST.$sannList1
                          `cast`
                        (Sym (Control.Instances.Morph.N:Morph[0]
                                  <[]>_N
                                  <Data.Proxy.Proxy>_N)) of ww { (#,,,,,#) ww1 ww2 ww3 ww4 ww5 ww6 ->
                 Control.Reference.Representation.Reference
                   @ (Control.Monad.Trans.Reader.ReaderT
                        [GHC.LanguageExtensions.Type.Extension]
                        (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc))
                   @ Control.Reference.Representation.MU
                   @ Control.Reference.Representation.MU
                   @ Control.Reference.Representation.MU
                   @ (Language.Haskell.Tools.AST.Ann.AnnListG
                        Language.Haskell.Tools.AST.Representation.Decls.UClassElement
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   @ (Language.Haskell.Tools.AST.Ann.AnnListG
                        Language.Haskell.Tools.AST.Representation.Decls.UClassElement
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        Language.Haskell.Tools.AST.Representation.Decls.UClassElement
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        Language.Haskell.Tools.AST.Representation.Decls.UClassElement
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   ww1
                   ww2
                   ww3
                   ww4
                   ww5
                   ww6 }) -}
9e0f53f91f72b47b54b1f5d86e3c629b
  traverseClassBody3 ::
    Control.Reference.Representation.Reference
      (Control.Monad.Trans.Reader.ReaderT
         [GHC.LanguageExtensions.Type.Extension]
         (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc))
      Control.Reference.Representation.MU
      Control.Reference.Representation.MU
      Control.Reference.Representation.MU
      (Language.Haskell.Tools.AST.Ann.Ann
         Language.Haskell.Tools.AST.Representation.Decls.UClassBody
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
      (Language.Haskell.Tools.AST.Ann.Ann
         Language.Haskell.Tools.AST.Representation.Decls.UClassBody
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
      (Language.Haskell.Tools.AST.Ann.AnnListG
         Language.Haskell.Tools.AST.Representation.Decls.UClassElement
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
      (Language.Haskell.Tools.AST.Ann.AnnListG
         Language.Haskell.Tools.AST.Representation.Decls.UClassElement
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
  {- Unfolding: (\ @ dom ->
                 case Language.Haskell.Tools.AST.References.$wcbElements
                        @ GHC.Prim.Any
                        @ GHC.Prim.Any
                        @ dom
                        @ Language.Haskell.Tools.AST.Ann.SrcTemplateStage
                        @ (Control.Monad.Trans.Reader.ReaderT
                             [GHC.LanguageExtensions.Type.Extension]
                             (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc))
                        @ Control.Reference.Representation.MU
                        TraverseAST.$s$fRefMonadswr of ww { (#,,,,,#) ww1 ww2 ww3 ww4 ww5 ww6 ->
                 Control.Reference.Representation.Reference
                   @ (Control.Monad.Trans.Reader.ReaderT
                        [GHC.LanguageExtensions.Type.Extension]
                        (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc))
                   @ Control.Reference.Representation.MU
                   @ Control.Reference.Representation.MU
                   @ Control.Reference.Representation.MU
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        Language.Haskell.Tools.AST.Representation.Decls.UClassBody
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        Language.Haskell.Tools.AST.Representation.Decls.UClassBody
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   @ (Language.Haskell.Tools.AST.Ann.AnnListG
                        Language.Haskell.Tools.AST.Representation.Decls.UClassElement
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   @ (Language.Haskell.Tools.AST.Ann.AnnListG
                        Language.Haskell.Tools.AST.Representation.Decls.UClassElement
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   ww1
                   ww2
                   ww3
                   ww4
                   ww5
                   ww6 }) -}
5827974a441b3ba36fd0d1b0b744dc27
  traverseClassElem ::
    ExtMonad.CheckNode
      Language.Haskell.Tools.AST.ElementTypes.ClassElement
  {- Arity: 1,
     Strictness: <S(S(LLS(S)LLLLLLLLLL)L),U(U(U,U,U(U),U,U,U,U,U,U,U,U,U,U),U)> -}
ae8393b666b585439e68092f9237dfa8
  traverseCmd ::
    ExtMonad.CheckNode Language.Haskell.Tools.AST.ElementTypes.Cmd
  {- Arity: 6, HasNoCafRefs,
     Strictness: <S(S(LLS(S)LLLLLLLLLL)L),1*U(1*U(A,A,1*U(1*U),A,A,A,A,A,A,A,A,A,A),A)><L,U><L,A><L,U><L,A><S,U>,
     Unfolding: InlineRule (0, True, True)
                TraverseAST.traverseCmd1
                  `cast`
                (forall (dom :: <*>_N).
                 <ExtMonad.ExtDomain dom>_R
                 ->_R <Language.Haskell.Tools.AST.ElementTypes.Cmd dom>_R
                 ->_R Trans
                          (<[GHC.LanguageExtensions.Type.Extension]>_R
                           ->_R Trans
                                    (<ExtMap.ExtMap>_R
                                     ->_R Trans
                                              (<GhcMonad.Session>_R
                                               ->_R Sym (GHC.Types.N:IO[0]
                                                             <(Language.Haskell.Tools.AST.ElementTypes.Cmd
                                                                 dom,
                                                               ExtMap.ExtMap)>_R))
                                              (Sym (GhcMonad.N:Ghc[0]
                                                        <(Language.Haskell.Tools.AST.ElementTypes.Cmd
                                                            dom,
                                                          ExtMap.ExtMap)>_R)))
                                    (Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                              <ExtMap.ExtMap>_N
                                              <GhcMonad.Ghc>_R
                                              <Language.Haskell.Tools.AST.ElementTypes.Cmd dom>_N)))
                          (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                    <*>_N
                                    <[GHC.LanguageExtensions.Type.Extension]>_R
                                    <Control.Monad.Trans.State.Lazy.StateT
                                       ExtMap.ExtMap GhcMonad.Ghc>_R
                                    <Language.Haskell.Tools.AST.ElementTypes.Cmd dom>_N))) -}
d03f571125db325da615c2aa995dff38
  traverseCmd1 ::
    ExtMonad.ExtDomain dom =>
    Language.Haskell.Tools.AST.ElementTypes.Cmd dom
    -> [GHC.LanguageExtensions.Type.Extension]
    -> ExtMap.ExtMap
    -> GhcMonad.Session
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          (Language.Haskell.Tools.AST.ElementTypes.Cmd dom, ExtMap.ExtMap) #)
  {- Arity: 6, HasNoCafRefs,
     Strictness: <S(S(LLS(S)LLLLLLLLLL)L),1*U(1*U(A,A,1*U(1*U),A,A,A,A,A,A,A,A,A,A),A)><L,U><L,A><L,U><L,A><S,U>,
     Unfolding: InlineRule (6, True, False)
                (\ @ dom
                   ($d(%,%) :: ExtMonad.ExtDomain dom)
                   (eta :: Language.Haskell.Tools.AST.ElementTypes.Cmd dom)
                   (eta1 :: [GHC.LanguageExtensions.Type.Extension])
                   (eta2 :: ExtMap.ExtMap)
                   (eta3 :: GhcMonad.Session)
                   (eta4 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Language.Haskell.Tools.AST.Ann.SemanticInfo'
                             dom Language.Haskell.Tools.AST.Ann.SameInfoDefaultCls)
                        @ Language.Haskell.Tools.AST.SemaInfoTypes.NoSemanticInfo
                        (Language.Haskell.Tools.AST.Ann.$p3Domain
                           @ dom
                           (GHC.Classes.$p1(%,%)
                              @ (Language.Haskell.Tools.AST.Ann.Domain dom)
                              @ (Language.Haskell.Tools.AST.SemaInfoClasses.HasNameInfo'
                                   (Language.Haskell.Tools.AST.Ann.SemanticInfo
                                      dom
                                      Language.Haskell.Tools.AST.Representation.Names.UQualifiedName))
                              $d(%,%)))
                          `cast`
                        (Data.Type.Equality.N:~[0]
                             <*>_N <Language.Haskell.Tools.AST.Ann.SemanticInfo'
                                      dom
                                      Language.Haskell.Tools.AST.Ann.SameInfoDefaultCls>_N <Language.Haskell.Tools.AST.SemaInfoTypes.NoSemanticInfo>_N) of cobox0 { DEFAULT ->
                 (# eta4, (eta, eta2) #) }) -}
fa65cd8b724aaeb87066f9ef0cbf0fda
  traverseCompStmt ::
    ExtMonad.CheckNode Language.Haskell.Tools.AST.ElementTypes.CompStmt
  {- Arity: 1,
     Strictness: <S(S(LLS(S)LLLLLLLLLL)L),U(U(U,U,U(U),U,U,U,U,U,U,U,U,U,U),U)>,
     Unfolding: (\ @ dom ($d(%,%) :: ExtMonad.ExtDomain dom) ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Language.Haskell.Tools.AST.Ann.SemanticInfo'
                             dom Language.Haskell.Tools.AST.Ann.SameInfoDefaultCls)
                        @ Language.Haskell.Tools.AST.SemaInfoTypes.NoSemanticInfo
                        (Language.Haskell.Tools.AST.Ann.$p3Domain
                           @ dom
                           (GHC.Classes.$p1(%,%)
                              @ (Language.Haskell.Tools.AST.Ann.Domain dom)
                              @ (Language.Haskell.Tools.AST.SemaInfoClasses.HasNameInfo'
                                   (Language.Haskell.Tools.AST.Ann.SemanticInfo
                                      dom
                                      Language.Haskell.Tools.AST.Representation.Names.UQualifiedName))
                              $d(%,%)))
                          `cast`
                        (Data.Type.Equality.N:~[0]
                             <*>_N <Language.Haskell.Tools.AST.Ann.SemanticInfo'
                                      dom
                                      Language.Haskell.Tools.AST.Ann.SameInfoDefaultCls>_N <Language.Haskell.Tools.AST.SemaInfoTypes.NoSemanticInfo>_N) of cobox0 { DEFAULT ->
                 let {
                   f :: Language.Haskell.Tools.AST.Ann.Ann
                          Language.Haskell.Tools.AST.Representation.Stmts.UCompStmt
                          dom
                          Language.Haskell.Tools.AST.Ann.SrcTemplateStage
                        -> Control.Monad.Trans.Reader.ReaderT
                             [GHC.LanguageExtensions.Type.Extension]
                             (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc)
                             (Language.Haskell.Tools.AST.Ann.Ann
                                Language.Haskell.Tools.AST.Representation.Stmts.UCompStmt
                                dom
                                Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   = case TraverseAST.traverseCompStmt10
                            @ dom of wild { Control.Reference.Representation.Reference ds1 ds2 ds3 ds4 ds5 ds6 ->
                     ds3
                       (TraverseAST.traverseStmt
                          @ Language.Haskell.Tools.AST.Representation.Exprs.UExpr
                          TraverseAST.traverseCompStmt9
                          @ dom
                          $d(%,%)) }
                 } in
                 let {
                   g :: Language.Haskell.Tools.AST.Ann.Ann
                          Language.Haskell.Tools.AST.Representation.Stmts.UCompStmt
                          dom
                          Language.Haskell.Tools.AST.Ann.SrcTemplateStage
                        -> Control.Monad.Trans.Reader.ReaderT
                             [GHC.LanguageExtensions.Type.Extension]
                             (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc)
                             (Language.Haskell.Tools.AST.Ann.Ann
                                Language.Haskell.Tools.AST.Representation.Stmts.UCompStmt
                                dom
                                Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   = case TraverseAST.traverseCompStmt1
                            @ dom of wild { Control.Reference.Representation.Reference ds1 ds2 ds3 ds4 ds5 ds6 ->
                     ds3 (TraverseAST.traverseExpr @ dom $d(%,%)) }
                 } in
                 \ (x :: Language.Haskell.Tools.AST.Ann.Ann
                           Language.Haskell.Tools.AST.Representation.Stmts.UCompStmt
                           dom
                           Language.Haskell.Tools.AST.Ann.SrcTemplateStage) ->
                 let {
                   m1 :: Control.Monad.Trans.Reader.ReaderT
                           [GHC.LanguageExtensions.Type.Extension]
                           (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc)
                           (Language.Haskell.Tools.AST.Ann.Ann
                              Language.Haskell.Tools.AST.Representation.Stmts.UCompStmt
                              dom
                              Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   = f x
                 } in
                 (\ (r1 :: [GHC.LanguageExtensions.Type.Extension]) ->
                  let {
                    m2 :: Control.Monad.Trans.State.Lazy.StateT
                            (Data.Map.Base.Map
                               (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                               [SrcLoc.SrcSpan])
                            GhcMonad.Ghc
                            (Language.Haskell.Tools.AST.Ann.Ann
                               Language.Haskell.Tools.AST.Representation.Stmts.UCompStmt
                               dom
                               Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                    = m1
                        `cast`
                      (Control.Monad.Trans.Reader.N:ReaderT[0]
                           <*>_N
                           <[GHC.LanguageExtensions.Type.Extension]>_R
                           <Control.Monad.Trans.State.Lazy.StateT
                              ExtMap.ExtMap GhcMonad.Ghc>_R
                           <Language.Haskell.Tools.AST.Ann.Ann
                              Language.Haskell.Tools.AST.Representation.Stmts.UCompStmt
                              dom
                              Language.Haskell.Tools.AST.Ann.SrcTemplateStage>_N)
                        r1
                  } in
                  (\ (s1 :: Data.Map.Base.Map
                              (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                              [SrcLoc.SrcSpan]) ->
                   let {
                     m :: GhcMonad.Ghc
                            (Language.Haskell.Tools.AST.Ann.Ann
                               Language.Haskell.Tools.AST.Representation.Stmts.UCompStmt
                               dom
                               Language.Haskell.Tools.AST.Ann.SrcTemplateStage,
                             Data.Map.Base.Map
                               (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                               [SrcLoc.SrcSpan])
                     = m2
                         `cast`
                       (Control.Monad.Trans.State.Lazy.N:StateT[0]
                            <Data.Map.Base.Map
                               (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                               [SrcLoc.SrcSpan]>_N
                            <GhcMonad.Ghc>_R
                            <Language.Haskell.Tools.AST.Ann.Ann
                               Language.Haskell.Tools.AST.Representation.Stmts.UCompStmt
                               dom
                               Language.Haskell.Tools.AST.Ann.SrcTemplateStage>_N)
                         s1
                   } in
                   (\ (s :: GhcMonad.Session)
                      (s2 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                    case (m `cast`
                          (GhcMonad.N:Ghc[0]
                               <(Language.Haskell.Tools.AST.Ann.Ann
                                   Language.Haskell.Tools.AST.Representation.Stmts.UCompStmt
                                   dom
                                   Language.Haskell.Tools.AST.Ann.SrcTemplateStage,
                                 Data.Map.Base.Map
                                   (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                                   [SrcLoc.SrcSpan])>_R)
                            s)
                           `cast`
                         (GHC.Types.N:IO[0]
                              <(Language.Haskell.Tools.AST.Ann.Ann
                                  Language.Haskell.Tools.AST.Representation.Stmts.UCompStmt
                                  dom
                                  Language.Haskell.Tools.AST.Ann.SrcTemplateStage,
                                Data.Map.Base.Map
                                  (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                                  [SrcLoc.SrcSpan])>_R)
                           s2 of ds1 { (#,#) ipv ipv1 ->
                    ((((g (case ipv1 of wild { (,) a1 s' -> a1 }))
                         `cast`
                       (Control.Monad.Trans.Reader.N:ReaderT[0]
                            <*>_N
                            <[GHC.LanguageExtensions.Type.Extension]>_R
                            <Control.Monad.Trans.State.Lazy.StateT
                               ExtMap.ExtMap GhcMonad.Ghc>_R
                            <Language.Haskell.Tools.AST.Ann.Ann
                               Language.Haskell.Tools.AST.Representation.Stmts.UCompStmt
                               dom
                               Language.Haskell.Tools.AST.Ann.SrcTemplateStage>_N)
                         r1)
                        `cast`
                      (Control.Monad.Trans.State.Lazy.N:StateT[0]
                           <Data.Map.Base.Map
                              (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                              [SrcLoc.SrcSpan]>_N
                           <GhcMonad.Ghc>_R
                           <Language.Haskell.Tools.AST.Ann.Ann
                              Language.Haskell.Tools.AST.Representation.Stmts.UCompStmt
                              dom
                              Language.Haskell.Tools.AST.Ann.SrcTemplateStage>_N)
                        (case ipv1 of wild { (,) a1 s' -> s' }))
                       `cast`
                     (GhcMonad.N:Ghc[0]
                          <(Language.Haskell.Tools.AST.Ann.Ann
                              Language.Haskell.Tools.AST.Representation.Stmts.UCompStmt
                              dom
                              Language.Haskell.Tools.AST.Ann.SrcTemplateStage,
                            Data.Map.Base.Map
                              (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                              [SrcLoc.SrcSpan])>_R)
                       s)
                      `cast`
                    (GHC.Types.N:IO[0]
                         <(Language.Haskell.Tools.AST.Ann.Ann
                             Language.Haskell.Tools.AST.Representation.Stmts.UCompStmt
                             dom
                             Language.Haskell.Tools.AST.Ann.SrcTemplateStage,
                           Data.Map.Base.Map
                             (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                             [SrcLoc.SrcSpan])>_R)
                      ipv })
                     `cast`
                   (Trans
                        (<GhcMonad.Session>_R
                         ->_R Sym (GHC.Types.N:IO[0]
                                       <(Language.Haskell.Tools.AST.Ann.Ann
                                           Language.Haskell.Tools.AST.Representation.Stmts.UCompStmt
                                           dom
                                           Language.Haskell.Tools.AST.Ann.SrcTemplateStage,
                                         Data.Map.Base.Map
                                           (ExtMap.LogicalRelation
                                              GHC.LanguageExtensions.Type.Extension)
                                           [SrcLoc.SrcSpan])>_R))
                        (Sym (GhcMonad.N:Ghc[0]
                                  <(Language.Haskell.Tools.AST.Ann.Ann
                                      Language.Haskell.Tools.AST.Representation.Stmts.UCompStmt
                                      dom
                                      Language.Haskell.Tools.AST.Ann.SrcTemplateStage,
                                    Data.Map.Base.Map
                                      (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                                      [SrcLoc.SrcSpan])>_R))))
                    `cast`
                  (Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                            <Data.Map.Base.Map
                               (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                               [SrcLoc.SrcSpan]>_N
                            <GhcMonad.Ghc>_R
                            <Language.Haskell.Tools.AST.Ann.Ann
                               Language.Haskell.Tools.AST.Representation.Stmts.UCompStmt
                               dom
                               Language.Haskell.Tools.AST.Ann.SrcTemplateStage>_N)))
                   `cast`
                 (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                           <*>_N
                           <[GHC.LanguageExtensions.Type.Extension]>_R
                           <Control.Monad.Trans.State.Lazy.StateT
                              ExtMap.ExtMap GhcMonad.Ghc>_R
                           <Language.Haskell.Tools.AST.Ann.Ann
                              Language.Haskell.Tools.AST.Representation.Stmts.UCompStmt
                              dom
                              Language.Haskell.Tools.AST.Ann.SrcTemplateStage>_N)) }) -}
e8f73f5f2d613e06964eb27d563d31c0
  traverseCompStmt1 ::
    Control.Reference.Representation.Reference
      (Control.Monad.Trans.Reader.ReaderT
         [GHC.LanguageExtensions.Type.Extension]
         (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc))
      Control.Reference.Representation.MU
      Control.Reference.Representation.MU
      Control.Reference.Representation.MU
      (Language.Haskell.Tools.AST.Ann.Ann
         Language.Haskell.Tools.AST.Representation.Stmts.UCompStmt
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
      (Language.Haskell.Tools.AST.Ann.Ann
         Language.Haskell.Tools.AST.Representation.Stmts.UCompStmt
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
      (Language.Haskell.Tools.AST.Ann.Ann
         Language.Haskell.Tools.AST.Representation.Exprs.UExpr
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
      (Language.Haskell.Tools.AST.Ann.Ann
         Language.Haskell.Tools.AST.Representation.Exprs.UExpr
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
  {- Unfolding: (\ @ dom ->
                 case Control.Reference.Combinators.$w&+&
                        @ (Control.Monad.Trans.Reader.ReaderT
                             [GHC.LanguageExtensions.Type.Extension]
                             (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc))
                        @ Control.Reference.Representation.MU
                        @ Control.Reference.Representation.MU
                        @ Control.Reference.Representation.MU
                        @ (Language.Haskell.Tools.AST.Ann.Ann
                             Language.Haskell.Tools.AST.Representation.Stmts.UCompStmt
                             dom
                             Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                        @ (Language.Haskell.Tools.AST.Ann.Ann
                             Language.Haskell.Tools.AST.Representation.Exprs.UExpr
                             dom
                             Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                        TraverseAST.$s$fRefMonadswr
                        Control.Reference.Predefined.Containers.Tree.$s$fRefMonadswr1
                        Data.Proxy.$fMonadPlusProxy
                        Data.Proxy.$fMonadPlusProxy
                        (TraverseAST.traverseCompStmt5 @ dom)
                        (TraverseAST.traverseCompStmt2
                           @ dom) of ww { (#,,,,,#) ww1 ww2 ww3 ww4 ww5 ww6 ->
                 Control.Reference.Representation.Reference
                   @ (Control.Monad.Trans.Reader.ReaderT
                        [GHC.LanguageExtensions.Type.Extension]
                        (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc))
                   @ Control.Reference.Representation.MU
                   @ Control.Reference.Representation.MU
                   @ Control.Reference.Representation.MU
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        Language.Haskell.Tools.AST.Representation.Stmts.UCompStmt
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        Language.Haskell.Tools.AST.Representation.Stmts.UCompStmt
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        Language.Haskell.Tools.AST.Representation.Exprs.UExpr
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        Language.Haskell.Tools.AST.Representation.Exprs.UExpr
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   ww1
                   ww2
                   ww3
                   ww4
                   ww5
                   ww6 }) -}
9c13af7eb129536080f7dd19f3553f2b
  traverseCompStmt10 ::
    Control.Reference.Representation.Reference
      (Control.Monad.Trans.Reader.ReaderT
         [GHC.LanguageExtensions.Type.Extension]
         (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc))
      Control.Reference.Representation.MU
      Control.Reference.Representation.MU
      Control.Reference.Representation.MU
      (Language.Haskell.Tools.AST.Ann.Ann
         Language.Haskell.Tools.AST.Representation.Stmts.UCompStmt
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
      (Language.Haskell.Tools.AST.Ann.Ann
         Language.Haskell.Tools.AST.Representation.Stmts.UCompStmt
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
      (Language.Haskell.Tools.AST.Ann.Ann
         Language.Haskell.Tools.AST.Representation.Stmts.UStmt
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
      (Language.Haskell.Tools.AST.Ann.Ann
         Language.Haskell.Tools.AST.Representation.Stmts.UStmt
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
  {- Unfolding: (\ @ dom ->
                 case Language.Haskell.Tools.AST.References.$wcompStmt
                        @ dom
                        @ Language.Haskell.Tools.AST.Ann.SrcTemplateStage
                        @ (Control.Monad.Trans.Reader.ReaderT
                             [GHC.LanguageExtensions.Type.Extension]
                             (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc))
                        @ Control.Reference.Representation.MU
                        (TraverseAST.$s$fMonadReaderT
                           @ [GHC.LanguageExtensions.Type.Extension])
                        Data.Proxy.$fMonadPlusProxy
                        TraverseAST.$sannJust1
                          `cast`
                        (Sym (Control.Instances.Morph.N:Morph[0]
                                  <GHC.Base.Maybe>_N
                                  <Data.Proxy.Proxy>_N)) of ww { (#,,,,,#) ww1 ww2 ww3 ww4 ww5 ww6 ->
                 Control.Reference.Representation.Reference
                   @ (Control.Monad.Trans.Reader.ReaderT
                        [GHC.LanguageExtensions.Type.Extension]
                        (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc))
                   @ Control.Reference.Representation.MU
                   @ Control.Reference.Representation.MU
                   @ Control.Reference.Representation.MU
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        Language.Haskell.Tools.AST.Representation.Stmts.UCompStmt
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        Language.Haskell.Tools.AST.Representation.Stmts.UCompStmt
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        Language.Haskell.Tools.AST.Representation.Stmts.UStmt
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        Language.Haskell.Tools.AST.Representation.Stmts.UStmt
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   ww1
                   ww2
                   ww3
                   ww4
                   ww5
                   ww6 }) -}
92b9f61ba040a81583ba3e30b7176cc3
  traverseCompStmt2 ::
    Control.Reference.Representation.Reference
      (Control.Monad.Trans.Reader.ReaderT
         [GHC.LanguageExtensions.Type.Extension]
         (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc))
      Control.Reference.Representation.MU
      Control.Reference.Representation.MU
      Control.Reference.Representation.MU
      (Language.Haskell.Tools.AST.Ann.Ann
         Language.Haskell.Tools.AST.Representation.Stmts.UCompStmt
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
      (Language.Haskell.Tools.AST.Ann.Ann
         Language.Haskell.Tools.AST.Representation.Stmts.UCompStmt
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
      (Language.Haskell.Tools.AST.Ann.Ann
         Language.Haskell.Tools.AST.Representation.Exprs.UExpr
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
      (Language.Haskell.Tools.AST.Ann.Ann
         Language.Haskell.Tools.AST.Representation.Exprs.UExpr
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
  {- Unfolding: (\ @ dom ->
                 case Control.Reference.Combinators.$w&
                        @ (Control.Monad.Trans.Reader.ReaderT
                             [GHC.LanguageExtensions.Type.Extension]
                             (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc))
                        @ Control.Reference.Representation.MU
                        @ Control.Reference.Representation.MU
                        @ Control.Reference.Representation.MU
                        @ (Language.Haskell.Tools.AST.Ann.Ann
                             Language.Haskell.Tools.AST.Representation.Stmts.UCompStmt
                             dom
                             Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                        @ (Language.Haskell.Tools.AST.Ann.Ann
                             Language.Haskell.Tools.AST.Representation.Stmts.UCompStmt
                             dom
                             Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                        @ (Language.Haskell.Tools.AST.Ann.AnnMaybeG
                             Language.Haskell.Tools.AST.Representation.Exprs.UExpr
                             dom
                             Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                        @ (Language.Haskell.Tools.AST.Ann.AnnMaybeG
                             Language.Haskell.Tools.AST.Representation.Exprs.UExpr
                             dom
                             Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                        @ (Language.Haskell.Tools.AST.Ann.Ann
                             Language.Haskell.Tools.AST.Representation.Exprs.UExpr
                             dom
                             Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                        @ (Language.Haskell.Tools.AST.Ann.Ann
                             Language.Haskell.Tools.AST.Representation.Exprs.UExpr
                             dom
                             Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                        (TraverseAST.traverseCompStmt4 @ dom)
                        (TraverseAST.traverseCompStmt3
                           @ dom) of ww { (#,,,,,#) ww1 ww2 ww3 ww4 ww5 ww6 ->
                 Control.Reference.Representation.Reference
                   @ (Control.Monad.Trans.Reader.ReaderT
                        [GHC.LanguageExtensions.Type.Extension]
                        (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc))
                   @ Control.Reference.Representation.MU
                   @ Control.Reference.Representation.MU
                   @ Control.Reference.Representation.MU
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        Language.Haskell.Tools.AST.Representation.Stmts.UCompStmt
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        Language.Haskell.Tools.AST.Representation.Stmts.UCompStmt
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        Language.Haskell.Tools.AST.Representation.Exprs.UExpr
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        Language.Haskell.Tools.AST.Representation.Exprs.UExpr
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   ww1
                   ww2
                   ww3
                   ww4
                   ww5
                   ww6 }) -}
67ca94512465524a0340be48da59e33b
  traverseCompStmt3 ::
    Control.Reference.Representation.Reference
      (Control.Monad.Trans.Reader.ReaderT
         [GHC.LanguageExtensions.Type.Extension]
         (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc))
      Control.Reference.Representation.MU
      Control.Reference.Representation.MU
      Control.Reference.Representation.MU
      (Language.Haskell.Tools.AST.Ann.AnnMaybeG
         Language.Haskell.Tools.AST.Representation.Exprs.UExpr
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
      (Language.Haskell.Tools.AST.Ann.AnnMaybeG
         Language.Haskell.Tools.AST.Representation.Exprs.UExpr
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
      (Language.Haskell.Tools.AST.Ann.Ann
         Language.Haskell.Tools.AST.Representation.Exprs.UExpr
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
      (Language.Haskell.Tools.AST.Ann.Ann
         Language.Haskell.Tools.AST.Representation.Exprs.UExpr
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
  {- Unfolding: (\ @ dom ->
                 case Language.Haskell.Tools.AST.Ann.$wannJust
                        @ Language.Haskell.Tools.AST.Representation.Exprs.UExpr
                        @ dom
                        @ Language.Haskell.Tools.AST.Ann.SrcTemplateStage
                        @ (Control.Monad.Trans.Reader.ReaderT
                             [GHC.LanguageExtensions.Type.Extension]
                             (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc))
                        @ Control.Reference.Representation.MU
                        (TraverseAST.$s$fApplicativeReaderT
                           @ [GHC.LanguageExtensions.Type.Extension])
                        (TraverseAST.$s$fMonadReaderT
                           @ [GHC.LanguageExtensions.Type.Extension])
                        Data.Proxy.$fApplicativeProxy
                        Data.Proxy.$fMonadPlusProxy
                        TraverseAST.$sannJust1
                          `cast`
                        (Sym (Control.Instances.Morph.N:Morph[0]
                                  <GHC.Base.Maybe>_N
                                  <Control.Reference.Representation.MU>_N)) of ww { (#,,,,,#) ww1 ww2 ww3 ww4 ww5 ww6 ->
                 Control.Reference.Representation.Reference
                   @ (Control.Monad.Trans.Reader.ReaderT
                        [GHC.LanguageExtensions.Type.Extension]
                        (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc))
                   @ Control.Reference.Representation.MU
                   @ Control.Reference.Representation.MU
                   @ Control.Reference.Representation.MU
                   @ (Language.Haskell.Tools.AST.Ann.AnnMaybeG
                        Language.Haskell.Tools.AST.Representation.Exprs.UExpr
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   @ (Language.Haskell.Tools.AST.Ann.AnnMaybeG
                        Language.Haskell.Tools.AST.Representation.Exprs.UExpr
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        Language.Haskell.Tools.AST.Representation.Exprs.UExpr
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        Language.Haskell.Tools.AST.Representation.Exprs.UExpr
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   ww1
                   ww2
                   ww3
                   ww4
                   ww5
                   ww6 }) -}
18e23af5419cdbcbb3079b7f1a224f60
  traverseCompStmt4 ::
    Control.Reference.Representation.Reference
      (Control.Monad.Trans.Reader.ReaderT
         [GHC.LanguageExtensions.Type.Extension]
         (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc))
      Control.Reference.Representation.MU
      Control.Reference.Representation.MU
      Control.Reference.Representation.MU
      (Language.Haskell.Tools.AST.Ann.Ann
         Language.Haskell.Tools.AST.Representation.Stmts.UCompStmt
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
      (Language.Haskell.Tools.AST.Ann.Ann
         Language.Haskell.Tools.AST.Representation.Stmts.UCompStmt
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
      (Language.Haskell.Tools.AST.Ann.AnnMaybeG
         Language.Haskell.Tools.AST.Representation.Exprs.UExpr
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
      (Language.Haskell.Tools.AST.Ann.AnnMaybeG
         Language.Haskell.Tools.AST.Representation.Exprs.UExpr
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
  {- Unfolding: (\ @ dom ->
                 case Language.Haskell.Tools.AST.References.$wusingExpr
                        @ dom
                        @ Language.Haskell.Tools.AST.Ann.SrcTemplateStage
                        @ (Control.Monad.Trans.Reader.ReaderT
                             [GHC.LanguageExtensions.Type.Extension]
                             (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc))
                        @ Control.Reference.Representation.MU
                        (TraverseAST.$s$fMonadReaderT
                           @ [GHC.LanguageExtensions.Type.Extension])
                        Data.Proxy.$fMonadPlusProxy
                        TraverseAST.$sannJust1
                          `cast`
                        (Sym (Control.Instances.Morph.N:Morph[0]
                                  <GHC.Base.Maybe>_N
                                  <Control.Reference.Representation.MU>_N)) of ww { (#,,,,,#) ww1 ww2 ww3 ww4 ww5 ww6 ->
                 Control.Reference.Representation.Reference
                   @ (Control.Monad.Trans.Reader.ReaderT
                        [GHC.LanguageExtensions.Type.Extension]
                        (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc))
                   @ Control.Reference.Representation.MU
                   @ Control.Reference.Representation.MU
                   @ Control.Reference.Representation.MU
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        Language.Haskell.Tools.AST.Representation.Stmts.UCompStmt
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        Language.Haskell.Tools.AST.Representation.Stmts.UCompStmt
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   @ (Language.Haskell.Tools.AST.Ann.AnnMaybeG
                        Language.Haskell.Tools.AST.Representation.Exprs.UExpr
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   @ (Language.Haskell.Tools.AST.Ann.AnnMaybeG
                        Language.Haskell.Tools.AST.Representation.Exprs.UExpr
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   ww1
                   ww2
                   ww3
                   ww4
                   ww5
                   ww6 }) -}
1f9f141b9efe9548393b0aa995f2ed25
  traverseCompStmt5 ::
    Control.Reference.Representation.Reference
      (Control.Monad.Trans.Reader.ReaderT
         [GHC.LanguageExtensions.Type.Extension]
         (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc))
      Control.Reference.Representation.MU
      Control.Reference.Representation.MU
      Control.Reference.Representation.MU
      (Language.Haskell.Tools.AST.Ann.Ann
         Language.Haskell.Tools.AST.Representation.Stmts.UCompStmt
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
      (Language.Haskell.Tools.AST.Ann.Ann
         Language.Haskell.Tools.AST.Representation.Stmts.UCompStmt
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
      (Language.Haskell.Tools.AST.Ann.Ann
         Language.Haskell.Tools.AST.Representation.Exprs.UExpr
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
      (Language.Haskell.Tools.AST.Ann.Ann
         Language.Haskell.Tools.AST.Representation.Exprs.UExpr
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
  {- Unfolding: (\ @ dom ->
                 case Control.Reference.Combinators.$w&+&
                        @ (Control.Monad.Trans.Reader.ReaderT
                             [GHC.LanguageExtensions.Type.Extension]
                             (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc))
                        @ Control.Reference.Representation.MU
                        @ Control.Reference.Representation.MU
                        @ Control.Reference.Representation.MU
                        @ (Language.Haskell.Tools.AST.Ann.Ann
                             Language.Haskell.Tools.AST.Representation.Stmts.UCompStmt
                             dom
                             Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                        @ (Language.Haskell.Tools.AST.Ann.Ann
                             Language.Haskell.Tools.AST.Representation.Exprs.UExpr
                             dom
                             Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                        TraverseAST.$s$fRefMonadswr
                        Control.Reference.Predefined.Containers.Tree.$s$fRefMonadswr1
                        Data.Proxy.$fMonadPlusProxy
                        Data.Proxy.$fMonadPlusProxy
                        (TraverseAST.traverseCompStmt8 @ dom)
                        (TraverseAST.traverseCompStmt6
                           @ dom) of ww { (#,,,,,#) ww1 ww2 ww3 ww4 ww5 ww6 ->
                 Control.Reference.Representation.Reference
                   @ (Control.Monad.Trans.Reader.ReaderT
                        [GHC.LanguageExtensions.Type.Extension]
                        (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc))
                   @ Control.Reference.Representation.MU
                   @ Control.Reference.Representation.MU
                   @ Control.Reference.Representation.MU
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        Language.Haskell.Tools.AST.Representation.Stmts.UCompStmt
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        Language.Haskell.Tools.AST.Representation.Stmts.UCompStmt
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        Language.Haskell.Tools.AST.Representation.Exprs.UExpr
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        Language.Haskell.Tools.AST.Representation.Exprs.UExpr
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   ww1
                   ww2
                   ww3
                   ww4
                   ww5
                   ww6 }) -}
022652c0ba8f3eda1a512941e50f3035
  traverseCompStmt6 ::
    Control.Reference.Representation.Reference
      (Control.Monad.Trans.Reader.ReaderT
         [GHC.LanguageExtensions.Type.Extension]
         (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc))
      Control.Reference.Representation.MU
      Control.Reference.Representation.MU
      Control.Reference.Representation.MU
      (Language.Haskell.Tools.AST.Ann.Ann
         Language.Haskell.Tools.AST.Representation.Stmts.UCompStmt
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
      (Language.Haskell.Tools.AST.Ann.Ann
         Language.Haskell.Tools.AST.Representation.Stmts.UCompStmt
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
      (Language.Haskell.Tools.AST.Ann.Ann
         Language.Haskell.Tools.AST.Representation.Exprs.UExpr
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
      (Language.Haskell.Tools.AST.Ann.Ann
         Language.Haskell.Tools.AST.Representation.Exprs.UExpr
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
  {- Unfolding: (\ @ dom ->
                 case Control.Reference.Combinators.$w&
                        @ (Control.Monad.Trans.Reader.ReaderT
                             [GHC.LanguageExtensions.Type.Extension]
                             (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc))
                        @ Control.Reference.Representation.MU
                        @ Control.Reference.Representation.MU
                        @ Control.Reference.Representation.MU
                        @ (Language.Haskell.Tools.AST.Ann.Ann
                             Language.Haskell.Tools.AST.Representation.Stmts.UCompStmt
                             dom
                             Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                        @ (Language.Haskell.Tools.AST.Ann.Ann
                             Language.Haskell.Tools.AST.Representation.Stmts.UCompStmt
                             dom
                             Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                        @ (Language.Haskell.Tools.AST.Ann.AnnMaybeG
                             Language.Haskell.Tools.AST.Representation.Exprs.UExpr
                             dom
                             Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                        @ (Language.Haskell.Tools.AST.Ann.AnnMaybeG
                             Language.Haskell.Tools.AST.Representation.Exprs.UExpr
                             dom
                             Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                        @ (Language.Haskell.Tools.AST.Ann.Ann
                             Language.Haskell.Tools.AST.Representation.Exprs.UExpr
                             dom
                             Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                        @ (Language.Haskell.Tools.AST.Ann.Ann
                             Language.Haskell.Tools.AST.Representation.Exprs.UExpr
                             dom
                             Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                        (TraverseAST.traverseCompStmt7 @ dom)
                        (TraverseAST.traverseCompStmt3
                           @ dom) of ww { (#,,,,,#) ww1 ww2 ww3 ww4 ww5 ww6 ->
                 Control.Reference.Representation.Reference
                   @ (Control.Monad.Trans.Reader.ReaderT
                        [GHC.LanguageExtensions.Type.Extension]
                        (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc))
                   @ Control.Reference.Representation.MU
                   @ Control.Reference.Representation.MU
                   @ Control.Reference.Representation.MU
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        Language.Haskell.Tools.AST.Representation.Stmts.UCompStmt
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        Language.Haskell.Tools.AST.Representation.Stmts.UCompStmt
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        Language.Haskell.Tools.AST.Representation.Exprs.UExpr
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        Language.Haskell.Tools.AST.Representation.Exprs.UExpr
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   ww1
                   ww2
                   ww3
                   ww4
                   ww5
                   ww6 }) -}
aa1ee50bc69772ea24dec5742a21f11a
  traverseCompStmt7 ::
    Control.Reference.Representation.Reference
      (Control.Monad.Trans.Reader.ReaderT
         [GHC.LanguageExtensions.Type.Extension]
         (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc))
      Control.Reference.Representation.MU
      Control.Reference.Representation.MU
      Control.Reference.Representation.MU
      (Language.Haskell.Tools.AST.Ann.Ann
         Language.Haskell.Tools.AST.Representation.Stmts.UCompStmt
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
      (Language.Haskell.Tools.AST.Ann.Ann
         Language.Haskell.Tools.AST.Representation.Stmts.UCompStmt
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
      (Language.Haskell.Tools.AST.Ann.AnnMaybeG
         Language.Haskell.Tools.AST.Representation.Exprs.UExpr
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
      (Language.Haskell.Tools.AST.Ann.AnnMaybeG
         Language.Haskell.Tools.AST.Representation.Exprs.UExpr
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
  {- Unfolding: (\ @ dom ->
                 case Language.Haskell.Tools.AST.References.$wbyExpr
                        @ dom
                        @ Language.Haskell.Tools.AST.Ann.SrcTemplateStage
                        @ (Control.Monad.Trans.Reader.ReaderT
                             [GHC.LanguageExtensions.Type.Extension]
                             (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc))
                        @ Control.Reference.Representation.MU
                        (TraverseAST.$s$fMonadReaderT
                           @ [GHC.LanguageExtensions.Type.Extension])
                        Data.Proxy.$fMonadPlusProxy
                        TraverseAST.$sannJust1
                          `cast`
                        (Sym (Control.Instances.Morph.N:Morph[0]
                                  <GHC.Base.Maybe>_N
                                  <Control.Reference.Representation.MU>_N)) of ww { (#,,,,,#) ww1 ww2 ww3 ww4 ww5 ww6 ->
                 Control.Reference.Representation.Reference
                   @ (Control.Monad.Trans.Reader.ReaderT
                        [GHC.LanguageExtensions.Type.Extension]
                        (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc))
                   @ Control.Reference.Representation.MU
                   @ Control.Reference.Representation.MU
                   @ Control.Reference.Representation.MU
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        Language.Haskell.Tools.AST.Representation.Stmts.UCompStmt
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        Language.Haskell.Tools.AST.Representation.Stmts.UCompStmt
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   @ (Language.Haskell.Tools.AST.Ann.AnnMaybeG
                        Language.Haskell.Tools.AST.Representation.Exprs.UExpr
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   @ (Language.Haskell.Tools.AST.Ann.AnnMaybeG
                        Language.Haskell.Tools.AST.Representation.Exprs.UExpr
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   ww1
                   ww2
                   ww3
                   ww4
                   ww5
                   ww6 }) -}
54e8bfc7afeb81725b474e179ed1c3f5
  traverseCompStmt8 ::
    Control.Reference.Representation.Reference
      (Control.Monad.Trans.Reader.ReaderT
         [GHC.LanguageExtensions.Type.Extension]
         (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc))
      Control.Reference.Representation.MU
      Control.Reference.Representation.MU
      Control.Reference.Representation.MU
      (Language.Haskell.Tools.AST.Ann.Ann
         Language.Haskell.Tools.AST.Representation.Stmts.UCompStmt
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
      (Language.Haskell.Tools.AST.Ann.Ann
         Language.Haskell.Tools.AST.Representation.Stmts.UCompStmt
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
      (Language.Haskell.Tools.AST.Ann.Ann
         Language.Haskell.Tools.AST.Representation.Exprs.UExpr
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
      (Language.Haskell.Tools.AST.Ann.Ann
         Language.Haskell.Tools.AST.Representation.Exprs.UExpr
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
  {- Unfolding: (\ @ dom ->
                 case Language.Haskell.Tools.AST.References.$wthenExpr
                        @ dom
                        @ Language.Haskell.Tools.AST.Ann.SrcTemplateStage
                        @ (Control.Monad.Trans.Reader.ReaderT
                             [GHC.LanguageExtensions.Type.Extension]
                             (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc))
                        @ Control.Reference.Representation.MU
                        (TraverseAST.$s$fMonadReaderT
                           @ [GHC.LanguageExtensions.Type.Extension])
                        Data.Proxy.$fMonadPlusProxy
                        TraverseAST.$sannJust1
                          `cast`
                        (Sym (Control.Instances.Morph.N:Morph[0]
                                  <GHC.Base.Maybe>_N
                                  <Control.Reference.Representation.MU>_N)) of ww { (#,,,,,#) ww1 ww2 ww3 ww4 ww5 ww6 ->
                 Control.Reference.Representation.Reference
                   @ (Control.Monad.Trans.Reader.ReaderT
                        [GHC.LanguageExtensions.Type.Extension]
                        (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc))
                   @ Control.Reference.Representation.MU
                   @ Control.Reference.Representation.MU
                   @ Control.Reference.Representation.MU
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        Language.Haskell.Tools.AST.Representation.Stmts.UCompStmt
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        Language.Haskell.Tools.AST.Representation.Stmts.UCompStmt
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        Language.Haskell.Tools.AST.Representation.Exprs.UExpr
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        Language.Haskell.Tools.AST.Representation.Exprs.UExpr
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   ww1
                   ww2
                   ww3
                   ww4
                   ww5
                   ww6 }) -}
81534c6dc4f71b6aaa149ed6f5ac169e
  traverseCompStmt9 ::
    ExtMonad.ExtDomain dom =>
    Language.Haskell.Tools.AST.ElementTypes.Expr dom
    -> ExtMonad.ExtMonad
         (Language.Haskell.Tools.AST.ElementTypes.Expr dom)
  {- Arity: 1,
     Strictness: <S(S(LLS(S)LLLLLLLLLL)L),U(U(U,U,U(U),U,U,U,U,U,U,U,U,U,U),U)>,
     Unfolding: (\ @ dom ($d(%,%) :: ExtMonad.ExtDomain dom) ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Language.Haskell.Tools.AST.Ann.SemanticInfo'
                             dom Language.Haskell.Tools.AST.Ann.SameInfoDefaultCls)
                        @ Language.Haskell.Tools.AST.SemaInfoTypes.NoSemanticInfo
                        (Language.Haskell.Tools.AST.Ann.$p3Domain
                           @ dom
                           (GHC.Classes.$p1(%,%)
                              @ (Language.Haskell.Tools.AST.Ann.Domain dom)
                              @ (Language.Haskell.Tools.AST.SemaInfoClasses.HasNameInfo'
                                   (Language.Haskell.Tools.AST.Ann.SemanticInfo
                                      dom
                                      Language.Haskell.Tools.AST.Representation.Names.UQualifiedName))
                              $d(%,%)))
                          `cast`
                        (Data.Type.Equality.N:~[0]
                             <*>_N <Language.Haskell.Tools.AST.Ann.SemanticInfo'
                                      dom
                                      Language.Haskell.Tools.AST.Ann.SameInfoDefaultCls>_N <Language.Haskell.Tools.AST.SemaInfoTypes.NoSemanticInfo>_N) of cobox0 { DEFAULT ->
                 TraverseAST.traverseExpr @ dom $d(%,%) }) -}
57055c6ccf44eeb0408d71fa33d4cb39
  traverseDecl ::
    ExtMonad.CheckNode Language.Haskell.Tools.AST.ElementTypes.Decl
  {- Arity: 1,
     Strictness: <S(S(LLS(S)LLLLLLLLLL)L),U(U(U,U,U(U),U,U,U,U,U,U,U,U,U,U),U)> -}
f4667f8c836ffd53617d6badac06bcd7
  traverseExpr ::
    ExtMonad.CheckNode Language.Haskell.Tools.AST.ElementTypes.Expr
  {- Arity: 1,
     Strictness: <S(S(LLS(S)LLLLLLLLLL)L),U(U(U,U,U(U),U,U,U,U,U,U,U,U,U,U),U)> -}
0354c3886d39b02b619263b598752604
  traverseFieldUpdate ::
    ExtMonad.CheckNode
      Language.Haskell.Tools.AST.ElementTypes.FieldUpdate
  {- Arity: 1,
     Strictness: <S(S(LLS(S)LLLLLLLLLL)L),U(U(U,U,U(U),U,U,U,U,U,U,U,U,U,U),U)>,
     Unfolding: (\ @ dom ($d(%,%) :: ExtMonad.ExtDomain dom) ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Language.Haskell.Tools.AST.Ann.SemanticInfo'
                             dom Language.Haskell.Tools.AST.Ann.SameInfoDefaultCls)
                        @ Language.Haskell.Tools.AST.SemaInfoTypes.NoSemanticInfo
                        (Language.Haskell.Tools.AST.Ann.$p3Domain
                           @ dom
                           (GHC.Classes.$p1(%,%)
                              @ (Language.Haskell.Tools.AST.Ann.Domain dom)
                              @ (Language.Haskell.Tools.AST.SemaInfoClasses.HasNameInfo'
                                   (Language.Haskell.Tools.AST.Ann.SemanticInfo
                                      dom
                                      Language.Haskell.Tools.AST.Representation.Names.UQualifiedName))
                              $d(%,%)))
                          `cast`
                        (Data.Type.Equality.N:~[0]
                             <*>_N <Language.Haskell.Tools.AST.Ann.SemanticInfo'
                                      dom
                                      Language.Haskell.Tools.AST.Ann.SameInfoDefaultCls>_N <Language.Haskell.Tools.AST.SemaInfoTypes.NoSemanticInfo>_N) of cobox0 { DEFAULT ->
                 let {
                   f :: Language.Haskell.Tools.AST.Ann.Ann
                          Language.Haskell.Tools.AST.Representation.Exprs.UFieldUpdate
                          dom
                          Language.Haskell.Tools.AST.Ann.SrcTemplateStage
                        -> Control.Monad.Trans.Reader.ReaderT
                             [GHC.LanguageExtensions.Type.Extension]
                             (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc)
                             (Language.Haskell.Tools.AST.Ann.Ann
                                Language.Haskell.Tools.AST.Representation.Exprs.UFieldUpdate
                                dom
                                Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   = case TraverseAST.traverseFieldUpdate2
                            @ dom of wild { Control.Reference.Representation.Reference ds1 ds2 ds3 ds4 ds5 ds6 ->
                     ds3
                       (TraverseAST.traverseQuasiQuote1 @ dom $d(%,%))
                         `cast`
                       (<Language.Haskell.Tools.AST.ElementTypes.Name dom>_R
                        ->_R Trans
                                 (<[GHC.LanguageExtensions.Type.Extension]>_R
                                  ->_R Trans
                                           (<ExtMap.ExtMap>_R
                                            ->_R Trans
                                                     (<GhcMonad.Session>_R
                                                      ->_R Sym (GHC.Types.N:IO[0]
                                                                    <(Language.Haskell.Tools.AST.ElementTypes.Name
                                                                        dom,
                                                                      ExtMap.ExtMap)>_R))
                                                     (Sym (GhcMonad.N:Ghc[0]
                                                               <(Language.Haskell.Tools.AST.ElementTypes.Name
                                                                   dom,
                                                                 ExtMap.ExtMap)>_R)))
                                           (Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                                     <ExtMap.ExtMap>_N
                                                     <GhcMonad.Ghc>_R
                                                     <Language.Haskell.Tools.AST.ElementTypes.Name
                                                        dom>_N)))
                                 (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                           <*>_N
                                           <[GHC.LanguageExtensions.Type.Extension]>_R
                                           <Control.Monad.Trans.State.Lazy.StateT
                                              ExtMap.ExtMap GhcMonad.Ghc>_R
                                           <Language.Haskell.Tools.AST.ElementTypes.Name dom>_N))) }
                 } in
                 let {
                   g :: Language.Haskell.Tools.AST.Ann.Ann
                          Language.Haskell.Tools.AST.Representation.Exprs.UFieldUpdate
                          dom
                          Language.Haskell.Tools.AST.Ann.SrcTemplateStage
                        -> Control.Monad.Trans.Reader.ReaderT
                             [GHC.LanguageExtensions.Type.Extension]
                             (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc)
                             (Language.Haskell.Tools.AST.Ann.Ann
                                Language.Haskell.Tools.AST.Representation.Exprs.UFieldUpdate
                                dom
                                Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   = case TraverseAST.traverseFieldUpdate1
                            @ dom of wild { Control.Reference.Representation.Reference ds1 ds2 ds3 ds4 ds5 ds6 ->
                     ds3 (TraverseAST.traverseExpr @ dom $d(%,%)) }
                 } in
                 (\ (x :: Language.Haskell.Tools.AST.ElementTypes.FieldUpdate dom)
                    (eta :: [GHC.LanguageExtensions.Type.Extension])
                    (eta1 :: ExtMap.ExtMap) ->
                  let {
                    m :: GhcMonad.Ghc
                           (Language.Haskell.Tools.AST.ElementTypes.FieldUpdate dom,
                            Data.Map.Base.Map
                              (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                              [SrcLoc.SrcSpan])
                    = case x of ww { Language.Haskell.Tools.AST.Ann.Ann ww1 ww2 ->
                      TraverseAST.$wchkFieldUpdate @ dom $d(%,%) ww1 ww2 eta1 }
                  } in
                  (\ (s :: GhcMonad.Session)
                     (s1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                   case (m `cast`
                         (GhcMonad.N:Ghc[0]
                              <(Language.Haskell.Tools.AST.ElementTypes.FieldUpdate dom,
                                Data.Map.Base.Map
                                  (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                                  [SrcLoc.SrcSpan])>_R)
                           s)
                          `cast`
                        (GHC.Types.N:IO[0]
                             <(Language.Haskell.Tools.AST.ElementTypes.FieldUpdate dom,
                               Data.Map.Base.Map
                                 (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                                 [SrcLoc.SrcSpan])>_R)
                          s1 of ds1 { (#,#) ipv ipv1 ->
                   case ((((f (case ipv1 of wild { (,) a1 s' -> a1 }))
                             `cast`
                           (Control.Monad.Trans.Reader.N:ReaderT[0]
                                <*>_N
                                <[GHC.LanguageExtensions.Type.Extension]>_R
                                <Control.Monad.Trans.State.Lazy.StateT
                                   ExtMap.ExtMap GhcMonad.Ghc>_R
                                <Language.Haskell.Tools.AST.Ann.Ann
                                   Language.Haskell.Tools.AST.Representation.Exprs.UFieldUpdate
                                   dom
                                   Language.Haskell.Tools.AST.Ann.SrcTemplateStage>_N)
                             eta)
                            `cast`
                          (Control.Monad.Trans.State.Lazy.N:StateT[0]
                               <Data.Map.Base.Map
                                  (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                                  [SrcLoc.SrcSpan]>_N
                               <GhcMonad.Ghc>_R
                               <Language.Haskell.Tools.AST.Ann.Ann
                                  Language.Haskell.Tools.AST.Representation.Exprs.UFieldUpdate
                                  dom
                                  Language.Haskell.Tools.AST.Ann.SrcTemplateStage>_N)
                            (case ipv1 of wild { (,) a1 s' -> s' }))
                           `cast`
                         (GhcMonad.N:Ghc[0]
                              <(Language.Haskell.Tools.AST.Ann.Ann
                                  Language.Haskell.Tools.AST.Representation.Exprs.UFieldUpdate
                                  dom
                                  Language.Haskell.Tools.AST.Ann.SrcTemplateStage,
                                Data.Map.Base.Map
                                  (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                                  [SrcLoc.SrcSpan])>_R)
                           s)
                          `cast`
                        (GHC.Types.N:IO[0]
                             <(Language.Haskell.Tools.AST.Ann.Ann
                                 Language.Haskell.Tools.AST.Representation.Exprs.UFieldUpdate
                                 dom
                                 Language.Haskell.Tools.AST.Ann.SrcTemplateStage,
                               Data.Map.Base.Map
                                 (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                                 [SrcLoc.SrcSpan])>_R)
                          ipv of ds2 { (#,#) ipv2 ipv3 ->
                   ((((g (case ipv3 of wild { (,) a1 s' -> a1 }))
                        `cast`
                      (Control.Monad.Trans.Reader.N:ReaderT[0]
                           <*>_N
                           <[GHC.LanguageExtensions.Type.Extension]>_R
                           <Control.Monad.Trans.State.Lazy.StateT
                              ExtMap.ExtMap GhcMonad.Ghc>_R
                           <Language.Haskell.Tools.AST.Ann.Ann
                              Language.Haskell.Tools.AST.Representation.Exprs.UFieldUpdate
                              dom
                              Language.Haskell.Tools.AST.Ann.SrcTemplateStage>_N)
                        eta)
                       `cast`
                     (Control.Monad.Trans.State.Lazy.N:StateT[0]
                          <Data.Map.Base.Map
                             (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                             [SrcLoc.SrcSpan]>_N
                          <GhcMonad.Ghc>_R
                          <Language.Haskell.Tools.AST.Ann.Ann
                             Language.Haskell.Tools.AST.Representation.Exprs.UFieldUpdate
                             dom
                             Language.Haskell.Tools.AST.Ann.SrcTemplateStage>_N)
                       (case ipv3 of wild { (,) a1 s' -> s' }))
                      `cast`
                    (GhcMonad.N:Ghc[0]
                         <(Language.Haskell.Tools.AST.Ann.Ann
                             Language.Haskell.Tools.AST.Representation.Exprs.UFieldUpdate
                             dom
                             Language.Haskell.Tools.AST.Ann.SrcTemplateStage,
                           Data.Map.Base.Map
                             (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                             [SrcLoc.SrcSpan])>_R)
                      s)
                     `cast`
                   (GHC.Types.N:IO[0]
                        <(Language.Haskell.Tools.AST.Ann.Ann
                            Language.Haskell.Tools.AST.Representation.Exprs.UFieldUpdate
                            dom
                            Language.Haskell.Tools.AST.Ann.SrcTemplateStage,
                          Data.Map.Base.Map
                            (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                            [SrcLoc.SrcSpan])>_R)
                     ipv2 } })
                    `cast`
                  (Trans
                       (<GhcMonad.Session>_R
                        ->_R Sym (GHC.Types.N:IO[0]
                                      <(Language.Haskell.Tools.AST.Ann.Ann
                                          Language.Haskell.Tools.AST.Representation.Exprs.UFieldUpdate
                                          dom
                                          Language.Haskell.Tools.AST.Ann.SrcTemplateStage,
                                        Data.Map.Base.Map
                                          (ExtMap.LogicalRelation
                                             GHC.LanguageExtensions.Type.Extension)
                                          [SrcLoc.SrcSpan])>_R))
                       (Sym (GhcMonad.N:Ghc[0]
                                 <(Language.Haskell.Tools.AST.Ann.Ann
                                     Language.Haskell.Tools.AST.Representation.Exprs.UFieldUpdate
                                     dom
                                     Language.Haskell.Tools.AST.Ann.SrcTemplateStage,
                                   Data.Map.Base.Map
                                     (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                                     [SrcLoc.SrcSpan])>_R))))
                   `cast`
                 (<Language.Haskell.Tools.AST.ElementTypes.FieldUpdate dom>_R
                  ->_R Trans
                           (<[GHC.LanguageExtensions.Type.Extension]>_R
                            ->_R Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                          <ExtMap.ExtMap>_N
                                          <GhcMonad.Ghc>_R
                                          <Language.Haskell.Tools.AST.Ann.Ann
                                             Language.Haskell.Tools.AST.Representation.Exprs.UFieldUpdate
                                             dom
                                             Language.Haskell.Tools.AST.Ann.SrcTemplateStage>_N))
                           (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                     <*>_N
                                     <[GHC.LanguageExtensions.Type.Extension]>_R
                                     <Control.Monad.Trans.State.Lazy.StateT
                                        ExtMap.ExtMap GhcMonad.Ghc>_R
                                     <Language.Haskell.Tools.AST.Ann.Ann
                                        Language.Haskell.Tools.AST.Representation.Exprs.UFieldUpdate
                                        dom
                                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage>_N))) }) -}
9f07df5c31e0e4e40811df0b066d518f
  traverseFieldUpdate1 ::
    Control.Reference.Representation.Reference
      (Control.Monad.Trans.Reader.ReaderT
         [GHC.LanguageExtensions.Type.Extension]
         (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc))
      Control.Reference.Representation.MU
      Control.Reference.Representation.MU
      Control.Reference.Representation.MU
      (Language.Haskell.Tools.AST.Ann.Ann
         Language.Haskell.Tools.AST.Representation.Exprs.UFieldUpdate
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
      (Language.Haskell.Tools.AST.Ann.Ann
         Language.Haskell.Tools.AST.Representation.Exprs.UFieldUpdate
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
      (Language.Haskell.Tools.AST.Ann.Ann
         Language.Haskell.Tools.AST.Representation.Exprs.UExpr
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
      (Language.Haskell.Tools.AST.Ann.Ann
         Language.Haskell.Tools.AST.Representation.Exprs.UExpr
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
  {- Unfolding: (\ @ dom ->
                 case Language.Haskell.Tools.AST.References.$wfieldValue
                        @ dom
                        @ Language.Haskell.Tools.AST.Ann.SrcTemplateStage
                        @ (Control.Monad.Trans.Reader.ReaderT
                             [GHC.LanguageExtensions.Type.Extension]
                             (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc))
                        @ Control.Reference.Representation.MU
                        (TraverseAST.$s$fMonadReaderT
                           @ [GHC.LanguageExtensions.Type.Extension])
                        Data.Proxy.$fMonadPlusProxy
                        TraverseAST.$sannJust1
                          `cast`
                        (Sym (Control.Instances.Morph.N:Morph[0]
                                  <GHC.Base.Maybe>_N
                                  <Data.Proxy.Proxy>_N)) of ww { (#,,,,,#) ww1 ww2 ww3 ww4 ww5 ww6 ->
                 Control.Reference.Representation.Reference
                   @ (Control.Monad.Trans.Reader.ReaderT
                        [GHC.LanguageExtensions.Type.Extension]
                        (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc))
                   @ Control.Reference.Representation.MU
                   @ Control.Reference.Representation.MU
                   @ Control.Reference.Representation.MU
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        Language.Haskell.Tools.AST.Representation.Exprs.UFieldUpdate
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        Language.Haskell.Tools.AST.Representation.Exprs.UFieldUpdate
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        Language.Haskell.Tools.AST.Representation.Exprs.UExpr
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        Language.Haskell.Tools.AST.Representation.Exprs.UExpr
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   ww1
                   ww2
                   ww3
                   ww4
                   ww5
                   ww6 }) -}
3e9c644be1ecf829ae21886c7884f615
  traverseFieldUpdate2 ::
    Control.Reference.Representation.Reference
      (Control.Monad.Trans.Reader.ReaderT
         [GHC.LanguageExtensions.Type.Extension]
         (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc))
      Control.Reference.Representation.MU
      Control.Reference.Representation.MU
      Control.Reference.Representation.MU
      (Language.Haskell.Tools.AST.Ann.Ann
         Language.Haskell.Tools.AST.Representation.Exprs.UFieldUpdate
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
      (Language.Haskell.Tools.AST.Ann.Ann
         Language.Haskell.Tools.AST.Representation.Exprs.UFieldUpdate
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
      (Language.Haskell.Tools.AST.Ann.Ann
         Language.Haskell.Tools.AST.Representation.Names.UName
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
      (Language.Haskell.Tools.AST.Ann.Ann
         Language.Haskell.Tools.AST.Representation.Names.UName
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
  {- Unfolding: (\ @ dom ->
                 case Control.Reference.Combinators.$w&+&
                        @ (Control.Monad.Trans.Reader.ReaderT
                             [GHC.LanguageExtensions.Type.Extension]
                             (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc))
                        @ Control.Reference.Representation.MU
                        @ Control.Reference.Representation.MU
                        @ Control.Reference.Representation.MU
                        @ (Language.Haskell.Tools.AST.Ann.Ann
                             Language.Haskell.Tools.AST.Representation.Exprs.UFieldUpdate
                             dom
                             Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                        @ (Language.Haskell.Tools.AST.Ann.Ann
                             Language.Haskell.Tools.AST.Representation.Names.UName
                             dom
                             Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                        TraverseAST.$s$fRefMonadswr
                        Control.Reference.Predefined.Containers.Tree.$s$fRefMonadswr1
                        Data.Proxy.$fMonadPlusProxy
                        Data.Proxy.$fMonadPlusProxy
                        (TraverseAST.traverseFieldUpdate4 @ dom)
                        (TraverseAST.traverseFieldUpdate3
                           @ dom) of ww { (#,,,,,#) ww1 ww2 ww3 ww4 ww5 ww6 ->
                 Control.Reference.Representation.Reference
                   @ (Control.Monad.Trans.Reader.ReaderT
                        [GHC.LanguageExtensions.Type.Extension]
                        (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc))
                   @ Control.Reference.Representation.MU
                   @ Control.Reference.Representation.MU
                   @ Control.Reference.Representation.MU
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        Language.Haskell.Tools.AST.Representation.Exprs.UFieldUpdate
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        Language.Haskell.Tools.AST.Representation.Exprs.UFieldUpdate
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        Language.Haskell.Tools.AST.Representation.Names.UName
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        Language.Haskell.Tools.AST.Representation.Names.UName
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   ww1
                   ww2
                   ww3
                   ww4
                   ww5
                   ww6 }) -}
eb50d7bcb92dc2645aac8eb2e6bf1952
  traverseFieldUpdate3 ::
    Control.Reference.Representation.Reference
      (Control.Monad.Trans.Reader.ReaderT
         [GHC.LanguageExtensions.Type.Extension]
         (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc))
      Control.Reference.Representation.MU
      Control.Reference.Representation.MU
      Control.Reference.Representation.MU
      (Language.Haskell.Tools.AST.Ann.Ann
         Language.Haskell.Tools.AST.Representation.Exprs.UFieldUpdate
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
      (Language.Haskell.Tools.AST.Ann.Ann
         Language.Haskell.Tools.AST.Representation.Exprs.UFieldUpdate
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
      (Language.Haskell.Tools.AST.Ann.Ann
         Language.Haskell.Tools.AST.Representation.Names.UName
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
      (Language.Haskell.Tools.AST.Ann.Ann
         Language.Haskell.Tools.AST.Representation.Names.UName
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
  {- Unfolding: (\ @ dom ->
                 case Language.Haskell.Tools.AST.References.$wfieldUpdateName
                        @ dom
                        @ Language.Haskell.Tools.AST.Ann.SrcTemplateStage
                        @ (Control.Monad.Trans.Reader.ReaderT
                             [GHC.LanguageExtensions.Type.Extension]
                             (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc))
                        @ Control.Reference.Representation.MU
                        (TraverseAST.$s$fMonadReaderT
                           @ [GHC.LanguageExtensions.Type.Extension])
                        Data.Proxy.$fMonadPlusProxy
                        TraverseAST.$sannJust1
                          `cast`
                        (Sym (Control.Instances.Morph.N:Morph[0]
                                  <GHC.Base.Maybe>_N
                                  <Data.Proxy.Proxy>_N)) of ww { (#,,,,,#) ww1 ww2 ww3 ww4 ww5 ww6 ->
                 Control.Reference.Representation.Reference
                   @ (Control.Monad.Trans.Reader.ReaderT
                        [GHC.LanguageExtensions.Type.Extension]
                        (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc))
                   @ Control.Reference.Representation.MU
                   @ Control.Reference.Representation.MU
                   @ Control.Reference.Representation.MU
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        Language.Haskell.Tools.AST.Representation.Exprs.UFieldUpdate
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        Language.Haskell.Tools.AST.Representation.Exprs.UFieldUpdate
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        Language.Haskell.Tools.AST.Representation.Names.UName
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        Language.Haskell.Tools.AST.Representation.Names.UName
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   ww1
                   ww2
                   ww3
                   ww4
                   ww5
                   ww6 }) -}
0ce005ce8a20a3c4ea64ee567d6fd59c
  traverseFieldUpdate4 ::
    Control.Reference.Representation.Reference
      (Control.Monad.Trans.Reader.ReaderT
         [GHC.LanguageExtensions.Type.Extension]
         (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc))
      Control.Reference.Representation.MU
      Control.Reference.Representation.MU
      Control.Reference.Representation.MU
      (Language.Haskell.Tools.AST.Ann.Ann
         Language.Haskell.Tools.AST.Representation.Exprs.UFieldUpdate
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
      (Language.Haskell.Tools.AST.Ann.Ann
         Language.Haskell.Tools.AST.Representation.Exprs.UFieldUpdate
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
      (Language.Haskell.Tools.AST.Ann.Ann
         Language.Haskell.Tools.AST.Representation.Names.UName
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
      (Language.Haskell.Tools.AST.Ann.Ann
         Language.Haskell.Tools.AST.Representation.Names.UName
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
  {- Unfolding: (\ @ dom ->
                 case Language.Haskell.Tools.AST.References.$wfieldName
                        @ dom
                        @ Language.Haskell.Tools.AST.Ann.SrcTemplateStage
                        @ (Control.Monad.Trans.Reader.ReaderT
                             [GHC.LanguageExtensions.Type.Extension]
                             (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc))
                        @ Control.Reference.Representation.MU
                        (TraverseAST.$s$fMonadReaderT
                           @ [GHC.LanguageExtensions.Type.Extension])
                        Data.Proxy.$fMonadPlusProxy
                        TraverseAST.$sannJust1
                          `cast`
                        (Sym (Control.Instances.Morph.N:Morph[0]
                                  <GHC.Base.Maybe>_N
                                  <Data.Proxy.Proxy>_N)) of ww { (#,,,,,#) ww1 ww2 ww3 ww4 ww5 ww6 ->
                 Control.Reference.Representation.Reference
                   @ (Control.Monad.Trans.Reader.ReaderT
                        [GHC.LanguageExtensions.Type.Extension]
                        (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc))
                   @ Control.Reference.Representation.MU
                   @ Control.Reference.Representation.MU
                   @ Control.Reference.Representation.MU
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        Language.Haskell.Tools.AST.Representation.Exprs.UFieldUpdate
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        Language.Haskell.Tools.AST.Representation.Exprs.UFieldUpdate
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        Language.Haskell.Tools.AST.Representation.Names.UName
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        Language.Haskell.Tools.AST.Representation.Names.UName
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   ww1
                   ww2
                   ww3
                   ww4
                   ww5
                   ww6 }) -}
bfcae423cae9a0c5105195fe1ecdb746
  traverseFixitySignature ::
    ExtMonad.CheckNode
      Language.Haskell.Tools.AST.ElementTypes.FixitySignature
  {- Arity: 6, HasNoCafRefs,
     Strictness: <S(S(LLS(S)LLLLLLLLLL)L),1*U(1*U(A,A,1*U(1*U),A,A,A,A,A,A,A,A,A,A),A)><L,U><L,A><L,U><L,A><S,U>,
     Unfolding: InlineRule (0, True, True)
                TraverseAST.traverseFixitySignature1
                  `cast`
                (forall (dom :: <*>_N).
                 <ExtMonad.ExtDomain dom>_R
                 ->_R <Language.Haskell.Tools.AST.ElementTypes.FixitySignature
                         dom>_R
                 ->_R Trans
                          (<[GHC.LanguageExtensions.Type.Extension]>_R
                           ->_R Trans
                                    (<ExtMap.ExtMap>_R
                                     ->_R Trans
                                              (<GhcMonad.Session>_R
                                               ->_R Sym (GHC.Types.N:IO[0]
                                                             <(Language.Haskell.Tools.AST.ElementTypes.FixitySignature
                                                                 dom,
                                                               ExtMap.ExtMap)>_R))
                                              (Sym (GhcMonad.N:Ghc[0]
                                                        <(Language.Haskell.Tools.AST.ElementTypes.FixitySignature
                                                            dom,
                                                          ExtMap.ExtMap)>_R)))
                                    (Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                              <ExtMap.ExtMap>_N
                                              <GhcMonad.Ghc>_R
                                              <Language.Haskell.Tools.AST.ElementTypes.FixitySignature
                                                 dom>_N)))
                          (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                    <*>_N
                                    <[GHC.LanguageExtensions.Type.Extension]>_R
                                    <Control.Monad.Trans.State.Lazy.StateT
                                       ExtMap.ExtMap GhcMonad.Ghc>_R
                                    <Language.Haskell.Tools.AST.ElementTypes.FixitySignature
                                       dom>_N))) -}
4b54ae16e9d2ec6fb7da53b9196663ea
  traverseFixitySignature1 ::
    ExtMonad.ExtDomain dom =>
    Language.Haskell.Tools.AST.ElementTypes.FixitySignature dom
    -> [GHC.LanguageExtensions.Type.Extension]
    -> ExtMap.ExtMap
    -> GhcMonad.Session
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          (Language.Haskell.Tools.AST.ElementTypes.FixitySignature dom,
           ExtMap.ExtMap) #)
  {- Arity: 6, HasNoCafRefs,
     Strictness: <S(S(LLS(S)LLLLLLLLLL)L),1*U(1*U(A,A,1*U(1*U),A,A,A,A,A,A,A,A,A,A),A)><L,U><L,A><L,U><L,A><S,U>,
     Unfolding: InlineRule (6, True, False)
                (\ @ dom
                   ($d(%,%) :: ExtMonad.ExtDomain dom)
                   (eta :: Language.Haskell.Tools.AST.ElementTypes.FixitySignature
                             dom)
                   (eta1 :: [GHC.LanguageExtensions.Type.Extension])
                   (eta2 :: ExtMap.ExtMap)
                   (eta3 :: GhcMonad.Session)
                   (eta4 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Language.Haskell.Tools.AST.Ann.SemanticInfo'
                             dom Language.Haskell.Tools.AST.Ann.SameInfoDefaultCls)
                        @ Language.Haskell.Tools.AST.SemaInfoTypes.NoSemanticInfo
                        (Language.Haskell.Tools.AST.Ann.$p3Domain
                           @ dom
                           (GHC.Classes.$p1(%,%)
                              @ (Language.Haskell.Tools.AST.Ann.Domain dom)
                              @ (Language.Haskell.Tools.AST.SemaInfoClasses.HasNameInfo'
                                   (Language.Haskell.Tools.AST.Ann.SemanticInfo
                                      dom
                                      Language.Haskell.Tools.AST.Representation.Names.UQualifiedName))
                              $d(%,%)))
                          `cast`
                        (Data.Type.Equality.N:~[0]
                             <*>_N <Language.Haskell.Tools.AST.Ann.SemanticInfo'
                                      dom
                                      Language.Haskell.Tools.AST.Ann.SameInfoDefaultCls>_N <Language.Haskell.Tools.AST.SemaInfoTypes.NoSemanticInfo>_N) of cobox0 { DEFAULT ->
                 (# eta4, (eta, eta2) #) }) -}
0fa7aee2b3381728c07c8de860519a2e
  traverseGuardedCaseRhs ::
    ExtMonad.CheckUNode uexpr
    -> ExtMonad.CheckNode (TraverseAST.GuardedCaseRhsG uexpr)
  {- Arity: 2,
     Strictness: <L,1*C1(U)><S(S(LLS(S)LLLLLLLLLL)L),U(U(U,U,U(U),U,U,U,U,U,U,U,U,U,U),U)>,
     Unfolding: (\ @ (uexpr :: GHC.Types.*
                               -> GHC.Types.* -> GHC.Types.*)
                   (dk :: ExtMonad.CheckUNode uexpr)
                   @ dom
                   ($d(%,%) :: ExtMonad.ExtDomain dom) ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Language.Haskell.Tools.AST.Ann.SemanticInfo'
                             dom Language.Haskell.Tools.AST.Ann.SameInfoDefaultCls)
                        @ Language.Haskell.Tools.AST.SemaInfoTypes.NoSemanticInfo
                        (Language.Haskell.Tools.AST.Ann.$p3Domain
                           @ dom
                           (GHC.Classes.$p1(%,%)
                              @ (Language.Haskell.Tools.AST.Ann.Domain dom)
                              @ (Language.Haskell.Tools.AST.SemaInfoClasses.HasNameInfo'
                                   (Language.Haskell.Tools.AST.Ann.SemanticInfo
                                      dom
                                      Language.Haskell.Tools.AST.Representation.Names.UQualifiedName))
                              $d(%,%)))
                          `cast`
                        (Data.Type.Equality.N:~[0]
                             <*>_N <Language.Haskell.Tools.AST.Ann.SemanticInfo'
                                      dom
                                      Language.Haskell.Tools.AST.Ann.SameInfoDefaultCls>_N <Language.Haskell.Tools.AST.SemaInfoTypes.NoSemanticInfo>_N) of cobox0 { DEFAULT ->
                 let {
                   f :: Language.Haskell.Tools.AST.Ann.Ann
                          (Language.Haskell.Tools.AST.Representation.Exprs.UGuardedCaseRhs'
                             uexpr)
                          dom
                          Language.Haskell.Tools.AST.Ann.SrcTemplateStage
                        -> Control.Monad.Trans.Reader.ReaderT
                             [GHC.LanguageExtensions.Type.Extension]
                             (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc)
                             (Language.Haskell.Tools.AST.Ann.Ann
                                (Language.Haskell.Tools.AST.Representation.Exprs.UGuardedCaseRhs'
                                   uexpr)
                                dom
                                Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   = case TraverseAST.traverseGuardedCaseRhs2
                            @ uexpr
                            @ dom of wild { Control.Reference.Representation.Reference ds1 ds2 ds3 ds4 ds5 ds6 ->
                     ds3 (TraverseAST.traverseRhsGuard @ dom $d(%,%)) }
                 } in
                 let {
                   g :: Language.Haskell.Tools.AST.Ann.Ann
                          (Language.Haskell.Tools.AST.Representation.Exprs.UGuardedCaseRhs'
                             uexpr)
                          dom
                          Language.Haskell.Tools.AST.Ann.SrcTemplateStage
                        -> Control.Monad.Trans.Reader.ReaderT
                             [GHC.LanguageExtensions.Type.Extension]
                             (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc)
                             (Language.Haskell.Tools.AST.Ann.Ann
                                (Language.Haskell.Tools.AST.Representation.Exprs.UGuardedCaseRhs'
                                   uexpr)
                                dom
                                Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   = case TraverseAST.traverseGuardedCaseRhs1
                            @ dom
                            @ uexpr of wild { Control.Reference.Representation.Reference ds1 ds2 ds3 ds4 ds5 ds6 ->
                     ds3 (dk @ dom $d(%,%)) }
                 } in
                 \ (x :: Language.Haskell.Tools.AST.Ann.Ann
                           (Language.Haskell.Tools.AST.Representation.Exprs.UGuardedCaseRhs'
                              uexpr)
                           dom
                           Language.Haskell.Tools.AST.Ann.SrcTemplateStage) ->
                 let {
                   m1 :: Control.Monad.Trans.Reader.ReaderT
                           [GHC.LanguageExtensions.Type.Extension]
                           (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc)
                           (Language.Haskell.Tools.AST.Ann.Ann
                              (Language.Haskell.Tools.AST.Representation.Exprs.UGuardedCaseRhs'
                                 uexpr)
                              dom
                              Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   = f x
                 } in
                 (\ (r1 :: [GHC.LanguageExtensions.Type.Extension]) ->
                  let {
                    m2 :: Control.Monad.Trans.State.Lazy.StateT
                            (Data.Map.Base.Map
                               (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                               [SrcLoc.SrcSpan])
                            GhcMonad.Ghc
                            (Language.Haskell.Tools.AST.Ann.Ann
                               (Language.Haskell.Tools.AST.Representation.Exprs.UGuardedCaseRhs'
                                  uexpr)
                               dom
                               Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                    = m1
                        `cast`
                      (Control.Monad.Trans.Reader.N:ReaderT[0]
                           <*>_N
                           <[GHC.LanguageExtensions.Type.Extension]>_R
                           <Control.Monad.Trans.State.Lazy.StateT
                              ExtMap.ExtMap GhcMonad.Ghc>_R
                           <Language.Haskell.Tools.AST.Ann.Ann
                              (Language.Haskell.Tools.AST.Representation.Exprs.UGuardedCaseRhs'
                                 uexpr)
                              dom
                              Language.Haskell.Tools.AST.Ann.SrcTemplateStage>_N)
                        r1
                  } in
                  (\ (s1 :: Data.Map.Base.Map
                              (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                              [SrcLoc.SrcSpan]) ->
                   let {
                     m :: GhcMonad.Ghc
                            (Language.Haskell.Tools.AST.Ann.Ann
                               (Language.Haskell.Tools.AST.Representation.Exprs.UGuardedCaseRhs'
                                  uexpr)
                               dom
                               Language.Haskell.Tools.AST.Ann.SrcTemplateStage,
                             Data.Map.Base.Map
                               (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                               [SrcLoc.SrcSpan])
                     = m2
                         `cast`
                       (Control.Monad.Trans.State.Lazy.N:StateT[0]
                            <Data.Map.Base.Map
                               (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                               [SrcLoc.SrcSpan]>_N
                            <GhcMonad.Ghc>_R
                            <Language.Haskell.Tools.AST.Ann.Ann
                               (Language.Haskell.Tools.AST.Representation.Exprs.UGuardedCaseRhs'
                                  uexpr)
                               dom
                               Language.Haskell.Tools.AST.Ann.SrcTemplateStage>_N)
                         s1
                   } in
                   (\ (s :: GhcMonad.Session)
                      (s2 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                    case (m `cast`
                          (GhcMonad.N:Ghc[0]
                               <(Language.Haskell.Tools.AST.Ann.Ann
                                   (Language.Haskell.Tools.AST.Representation.Exprs.UGuardedCaseRhs'
                                      uexpr)
                                   dom
                                   Language.Haskell.Tools.AST.Ann.SrcTemplateStage,
                                 Data.Map.Base.Map
                                   (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                                   [SrcLoc.SrcSpan])>_R)
                            s)
                           `cast`
                         (GHC.Types.N:IO[0]
                              <(Language.Haskell.Tools.AST.Ann.Ann
                                  (Language.Haskell.Tools.AST.Representation.Exprs.UGuardedCaseRhs'
                                     uexpr)
                                  dom
                                  Language.Haskell.Tools.AST.Ann.SrcTemplateStage,
                                Data.Map.Base.Map
                                  (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                                  [SrcLoc.SrcSpan])>_R)
                           s2 of ds1 { (#,#) ipv ipv1 ->
                    ((((g (case ipv1 of wild { (,) a1 s' -> a1 }))
                         `cast`
                       (Control.Monad.Trans.Reader.N:ReaderT[0]
                            <*>_N
                            <[GHC.LanguageExtensions.Type.Extension]>_R
                            <Control.Monad.Trans.State.Lazy.StateT
                               ExtMap.ExtMap GhcMonad.Ghc>_R
                            <Language.Haskell.Tools.AST.Ann.Ann
                               (Language.Haskell.Tools.AST.Representation.Exprs.UGuardedCaseRhs'
                                  uexpr)
                               dom
                               Language.Haskell.Tools.AST.Ann.SrcTemplateStage>_N)
                         r1)
                        `cast`
                      (Control.Monad.Trans.State.Lazy.N:StateT[0]
                           <Data.Map.Base.Map
                              (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                              [SrcLoc.SrcSpan]>_N
                           <GhcMonad.Ghc>_R
                           <Language.Haskell.Tools.AST.Ann.Ann
                              (Language.Haskell.Tools.AST.Representation.Exprs.UGuardedCaseRhs'
                                 uexpr)
                              dom
                              Language.Haskell.Tools.AST.Ann.SrcTemplateStage>_N)
                        (case ipv1 of wild { (,) a1 s' -> s' }))
                       `cast`
                     (GhcMonad.N:Ghc[0]
                          <(Language.Haskell.Tools.AST.Ann.Ann
                              (Language.Haskell.Tools.AST.Representation.Exprs.UGuardedCaseRhs'
                                 uexpr)
                              dom
                              Language.Haskell.Tools.AST.Ann.SrcTemplateStage,
                            Data.Map.Base.Map
                              (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                              [SrcLoc.SrcSpan])>_R)
                       s)
                      `cast`
                    (GHC.Types.N:IO[0]
                         <(Language.Haskell.Tools.AST.Ann.Ann
                             (Language.Haskell.Tools.AST.Representation.Exprs.UGuardedCaseRhs'
                                uexpr)
                             dom
                             Language.Haskell.Tools.AST.Ann.SrcTemplateStage,
                           Data.Map.Base.Map
                             (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                             [SrcLoc.SrcSpan])>_R)
                      ipv })
                     `cast`
                   (Trans
                        (<GhcMonad.Session>_R
                         ->_R Sym (GHC.Types.N:IO[0]
                                       <(Language.Haskell.Tools.AST.Ann.Ann
                                           (Language.Haskell.Tools.AST.Representation.Exprs.UGuardedCaseRhs'
                                              uexpr)
                                           dom
                                           Language.Haskell.Tools.AST.Ann.SrcTemplateStage,
                                         Data.Map.Base.Map
                                           (ExtMap.LogicalRelation
                                              GHC.LanguageExtensions.Type.Extension)
                                           [SrcLoc.SrcSpan])>_R))
                        (Sym (GhcMonad.N:Ghc[0]
                                  <(Language.Haskell.Tools.AST.Ann.Ann
                                      (Language.Haskell.Tools.AST.Representation.Exprs.UGuardedCaseRhs'
                                         uexpr)
                                      dom
                                      Language.Haskell.Tools.AST.Ann.SrcTemplateStage,
                                    Data.Map.Base.Map
                                      (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                                      [SrcLoc.SrcSpan])>_R))))
                    `cast`
                  (Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                            <Data.Map.Base.Map
                               (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                               [SrcLoc.SrcSpan]>_N
                            <GhcMonad.Ghc>_R
                            <Language.Haskell.Tools.AST.Ann.Ann
                               (Language.Haskell.Tools.AST.Representation.Exprs.UGuardedCaseRhs'
                                  uexpr)
                               dom
                               Language.Haskell.Tools.AST.Ann.SrcTemplateStage>_N)))
                   `cast`
                 (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                           <*>_N
                           <[GHC.LanguageExtensions.Type.Extension]>_R
                           <Control.Monad.Trans.State.Lazy.StateT
                              ExtMap.ExtMap GhcMonad.Ghc>_R
                           <Language.Haskell.Tools.AST.Ann.Ann
                              (Language.Haskell.Tools.AST.Representation.Exprs.UGuardedCaseRhs'
                                 uexpr)
                              dom
                              Language.Haskell.Tools.AST.Ann.SrcTemplateStage>_N)) }) -}
12ac1a480f6fe1dec403f68e0cc67b95
  traverseGuardedCaseRhs1 ::
    Control.Reference.Representation.Reference
      (Control.Monad.Trans.Reader.ReaderT
         [GHC.LanguageExtensions.Type.Extension]
         (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc))
      Control.Reference.Representation.MU
      Control.Reference.Representation.MU
      Control.Reference.Representation.MU
      (Language.Haskell.Tools.AST.Ann.Ann
         (Language.Haskell.Tools.AST.Representation.Exprs.UGuardedCaseRhs'
            uexpr)
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
      (Language.Haskell.Tools.AST.Ann.Ann
         (Language.Haskell.Tools.AST.Representation.Exprs.UGuardedCaseRhs'
            uexpr)
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
      (Language.Haskell.Tools.AST.Ann.Ann
         uexpr dom Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
      (Language.Haskell.Tools.AST.Ann.Ann
         uexpr dom Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
  {- Unfolding: (\ @ dom
                   @ (uexpr :: GHC.Types.* -> GHC.Types.* -> GHC.Types.*) ->
                 case Language.Haskell.Tools.AST.References.$wcaseGuardExpr
                        @ GHC.Prim.Any
                        @ uexpr
                        @ dom
                        @ Language.Haskell.Tools.AST.Ann.SrcTemplateStage
                        @ (Control.Monad.Trans.Reader.ReaderT
                             [GHC.LanguageExtensions.Type.Extension]
                             (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc))
                        @ Control.Reference.Representation.MU
                        TraverseAST.$s$fRefMonadswr of ww { (#,,,,,#) ww1 ww2 ww3 ww4 ww5 ww6 ->
                 Control.Reference.Representation.Reference
                   @ (Control.Monad.Trans.Reader.ReaderT
                        [GHC.LanguageExtensions.Type.Extension]
                        (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc))
                   @ Control.Reference.Representation.MU
                   @ Control.Reference.Representation.MU
                   @ Control.Reference.Representation.MU
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        (Language.Haskell.Tools.AST.Representation.Exprs.UGuardedCaseRhs'
                           uexpr)
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        (Language.Haskell.Tools.AST.Representation.Exprs.UGuardedCaseRhs'
                           uexpr)
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        uexpr dom Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        uexpr dom Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   ww1
                   ww2
                   ww3
                   ww4
                   ww5
                   ww6 }) -}
f71c21a83d05d3af96248f3d7dab2245
  traverseGuardedCaseRhs2 ::
    Control.Reference.Representation.Reference
      (Control.Monad.Trans.Reader.ReaderT
         [GHC.LanguageExtensions.Type.Extension]
         (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc))
      Control.Reference.Representation.MU
      Control.Reference.Representation.MU
      Control.Reference.Representation.MU
      (Language.Haskell.Tools.AST.Ann.Ann
         (Language.Haskell.Tools.AST.Representation.Exprs.UGuardedCaseRhs'
            uexpr)
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
      (Language.Haskell.Tools.AST.Ann.Ann
         (Language.Haskell.Tools.AST.Representation.Exprs.UGuardedCaseRhs'
            uexpr)
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
      (Language.Haskell.Tools.AST.Ann.Ann
         Language.Haskell.Tools.AST.Representation.Binds.URhsGuard
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
      (Language.Haskell.Tools.AST.Ann.Ann
         Language.Haskell.Tools.AST.Representation.Binds.URhsGuard
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
  {- Unfolding: (\ @ (uexpr :: GHC.Types.*
                               -> GHC.Types.* -> GHC.Types.*)
                   @ dom ->
                 case Control.Reference.Combinators.$w&
                        @ (Control.Monad.Trans.Reader.ReaderT
                             [GHC.LanguageExtensions.Type.Extension]
                             (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc))
                        @ Control.Reference.Representation.MU
                        @ Control.Reference.Representation.MU
                        @ Control.Reference.Representation.MU
                        @ (Language.Haskell.Tools.AST.Ann.Ann
                             (Language.Haskell.Tools.AST.Representation.Exprs.UGuardedCaseRhs'
                                uexpr)
                             dom
                             Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                        @ (Language.Haskell.Tools.AST.Ann.Ann
                             (Language.Haskell.Tools.AST.Representation.Exprs.UGuardedCaseRhs'
                                uexpr)
                             dom
                             Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                        @ (Language.Haskell.Tools.AST.Ann.AnnListG
                             Language.Haskell.Tools.AST.Representation.Binds.URhsGuard
                             dom
                             Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                        @ (Language.Haskell.Tools.AST.Ann.AnnListG
                             Language.Haskell.Tools.AST.Representation.Binds.URhsGuard
                             dom
                             Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                        @ (Language.Haskell.Tools.AST.Ann.Ann
                             Language.Haskell.Tools.AST.Representation.Binds.URhsGuard
                             dom
                             Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                        @ (Language.Haskell.Tools.AST.Ann.Ann
                             Language.Haskell.Tools.AST.Representation.Binds.URhsGuard
                             dom
                             Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                        (TraverseAST.traverseGuardedCaseRhs4 @ uexpr @ dom)
                        (TraverseAST.traverseGuardedCaseRhs3
                           @ dom) of ww { (#,,,,,#) ww1 ww2 ww3 ww4 ww5 ww6 ->
                 Control.Reference.Representation.Reference
                   @ (Control.Monad.Trans.Reader.ReaderT
                        [GHC.LanguageExtensions.Type.Extension]
                        (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc))
                   @ Control.Reference.Representation.MU
                   @ Control.Reference.Representation.MU
                   @ Control.Reference.Representation.MU
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        (Language.Haskell.Tools.AST.Representation.Exprs.UGuardedCaseRhs'
                           uexpr)
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        (Language.Haskell.Tools.AST.Representation.Exprs.UGuardedCaseRhs'
                           uexpr)
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        Language.Haskell.Tools.AST.Representation.Binds.URhsGuard
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        Language.Haskell.Tools.AST.Representation.Binds.URhsGuard
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   ww1
                   ww2
                   ww3
                   ww4
                   ww5
                   ww6 }) -}
86219ec0a4339b96f34c71a592374cd8
  traverseGuardedCaseRhs3 ::
    Control.Reference.Representation.Reference
      (Control.Monad.Trans.Reader.ReaderT
         [GHC.LanguageExtensions.Type.Extension]
         (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc))
      Control.Reference.Representation.MU
      Control.Reference.Representation.MU
      Control.Reference.Representation.MU
      (Language.Haskell.Tools.AST.Ann.AnnListG
         Language.Haskell.Tools.AST.Representation.Binds.URhsGuard
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
      (Language.Haskell.Tools.AST.Ann.AnnListG
         Language.Haskell.Tools.AST.Representation.Binds.URhsGuard
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
      (Language.Haskell.Tools.AST.Ann.Ann
         Language.Haskell.Tools.AST.Representation.Binds.URhsGuard
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
      (Language.Haskell.Tools.AST.Ann.Ann
         Language.Haskell.Tools.AST.Representation.Binds.URhsGuard
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
  {- Unfolding: (\ @ dom ->
                 case Language.Haskell.Tools.AST.Ann.$wannList
                        @ Language.Haskell.Tools.AST.Representation.Binds.URhsGuard
                        @ dom
                        @ Language.Haskell.Tools.AST.Ann.SrcTemplateStage
                        @ (Control.Monad.Trans.Reader.ReaderT
                             [GHC.LanguageExtensions.Type.Extension]
                             (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc))
                        @ Control.Reference.Representation.MU
                        TraverseAST.$s$fRefMonadswr
                        TraverseAST.$sannList1
                          `cast`
                        (Sym (Control.Instances.Morph.N:Morph[0]
                                  <[]>_N
                                  <Data.Proxy.Proxy>_N)) of ww { (#,,,,,#) ww1 ww2 ww3 ww4 ww5 ww6 ->
                 Control.Reference.Representation.Reference
                   @ (Control.Monad.Trans.Reader.ReaderT
                        [GHC.LanguageExtensions.Type.Extension]
                        (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc))
                   @ Control.Reference.Representation.MU
                   @ Control.Reference.Representation.MU
                   @ Control.Reference.Representation.MU
                   @ (Language.Haskell.Tools.AST.Ann.AnnListG
                        Language.Haskell.Tools.AST.Representation.Binds.URhsGuard
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   @ (Language.Haskell.Tools.AST.Ann.AnnListG
                        Language.Haskell.Tools.AST.Representation.Binds.URhsGuard
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        Language.Haskell.Tools.AST.Representation.Binds.URhsGuard
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        Language.Haskell.Tools.AST.Representation.Binds.URhsGuard
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   ww1
                   ww2
                   ww3
                   ww4
                   ww5
                   ww6 }) -}
ee6492e752ace7f3712c3a30dc636cd5
  traverseGuardedCaseRhs4 ::
    Control.Reference.Representation.Reference
      (Control.Monad.Trans.Reader.ReaderT
         [GHC.LanguageExtensions.Type.Extension]
         (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc))
      Control.Reference.Representation.MU
      Control.Reference.Representation.MU
      Control.Reference.Representation.MU
      (Language.Haskell.Tools.AST.Ann.Ann
         (Language.Haskell.Tools.AST.Representation.Exprs.UGuardedCaseRhs'
            uexpr)
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
      (Language.Haskell.Tools.AST.Ann.Ann
         (Language.Haskell.Tools.AST.Representation.Exprs.UGuardedCaseRhs'
            uexpr)
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
      (Language.Haskell.Tools.AST.Ann.AnnListG
         Language.Haskell.Tools.AST.Representation.Binds.URhsGuard
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
      (Language.Haskell.Tools.AST.Ann.AnnListG
         Language.Haskell.Tools.AST.Representation.Binds.URhsGuard
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
  {- Unfolding: (\ @ (uexpr :: GHC.Types.*
                               -> GHC.Types.* -> GHC.Types.*)
                   @ dom ->
                 case Language.Haskell.Tools.AST.References.$wcaseGuardStmts
                        @ uexpr
                        @ dom
                        @ Language.Haskell.Tools.AST.Ann.SrcTemplateStage
                        @ (Control.Monad.Trans.Reader.ReaderT
                             [GHC.LanguageExtensions.Type.Extension]
                             (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc))
                        @ Control.Reference.Representation.MU
                        TraverseAST.$s$fRefMonadswr of ww { (#,,,,,#) ww1 ww2 ww3 ww4 ww5 ww6 ->
                 Control.Reference.Representation.Reference
                   @ (Control.Monad.Trans.Reader.ReaderT
                        [GHC.LanguageExtensions.Type.Extension]
                        (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc))
                   @ Control.Reference.Representation.MU
                   @ Control.Reference.Representation.MU
                   @ Control.Reference.Representation.MU
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        (Language.Haskell.Tools.AST.Representation.Exprs.UGuardedCaseRhs'
                           uexpr)
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        (Language.Haskell.Tools.AST.Representation.Exprs.UGuardedCaseRhs'
                           uexpr)
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   @ (Language.Haskell.Tools.AST.Ann.AnnListG
                        Language.Haskell.Tools.AST.Representation.Binds.URhsGuard
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   @ (Language.Haskell.Tools.AST.Ann.AnnListG
                        Language.Haskell.Tools.AST.Representation.Binds.URhsGuard
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   ww1
                   ww2
                   ww3
                   ww4
                   ww5
                   ww6 }) -}
a5c32e95f9822160c8863eb41de5ad1e
  traverseGuardedRhs ::
    ExtMonad.CheckNode
      Language.Haskell.Tools.AST.ElementTypes.GuardedRhs
  {- Arity: 1,
     Strictness: <S(S(LLS(S)LLLLLLLLLL)L),U(U(U,U,U(U),U,U,U,U,U,U,U,U,U,U),U)> -}
52799e5b92357b18294d2e2d7de7e9fd
  traverseInstBody ::
    ExtMonad.CheckNode Language.Haskell.Tools.AST.ElementTypes.InstBody
  {- Arity: 1,
     Strictness: <S(S(LLS(S)LLLLLLLLLL)L),U(U(U,U,U(U),U,U,U,U,U,U,U,U,U,U),U)>,
     Unfolding: (\ @ dom ($d(%,%) :: ExtMonad.ExtDomain dom) ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Language.Haskell.Tools.AST.Ann.SemanticInfo'
                             dom Language.Haskell.Tools.AST.Ann.SameInfoDefaultCls)
                        @ Language.Haskell.Tools.AST.SemaInfoTypes.NoSemanticInfo
                        (Language.Haskell.Tools.AST.Ann.$p3Domain
                           @ dom
                           (GHC.Classes.$p1(%,%)
                              @ (Language.Haskell.Tools.AST.Ann.Domain dom)
                              @ (Language.Haskell.Tools.AST.SemaInfoClasses.HasNameInfo'
                                   (Language.Haskell.Tools.AST.Ann.SemanticInfo
                                      dom
                                      Language.Haskell.Tools.AST.Representation.Names.UQualifiedName))
                              $d(%,%)))
                          `cast`
                        (Data.Type.Equality.N:~[0]
                             <*>_N <Language.Haskell.Tools.AST.Ann.SemanticInfo'
                                      dom
                                      Language.Haskell.Tools.AST.Ann.SameInfoDefaultCls>_N <Language.Haskell.Tools.AST.SemaInfoTypes.NoSemanticInfo>_N) of cobox0 { DEFAULT ->
                 case TraverseAST.traverseInstBody1
                        @ dom of wild { Control.Reference.Representation.Reference ds1 ds2 ds3 ds4 ds5 ds6 ->
                 ds3 (TraverseAST.traverseInstBodyDecl @ dom $d(%,%)) } }) -}
264a40bfea41fd05d2b64aa6192305bf
  traverseInstBody1 ::
    Control.Reference.Representation.Reference
      (Control.Monad.Trans.Reader.ReaderT
         [GHC.LanguageExtensions.Type.Extension]
         (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc))
      Control.Reference.Representation.MU
      Control.Reference.Representation.MU
      Control.Reference.Representation.MU
      (Language.Haskell.Tools.AST.Ann.Ann
         Language.Haskell.Tools.AST.Representation.Decls.UInstBody
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
      (Language.Haskell.Tools.AST.Ann.Ann
         Language.Haskell.Tools.AST.Representation.Decls.UInstBody
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
      (Language.Haskell.Tools.AST.Ann.Ann
         Language.Haskell.Tools.AST.Representation.Decls.UInstBodyDecl
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
      (Language.Haskell.Tools.AST.Ann.Ann
         Language.Haskell.Tools.AST.Representation.Decls.UInstBodyDecl
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
  {- Unfolding: (\ @ dom ->
                 case Control.Reference.Combinators.$w&
                        @ (Control.Monad.Trans.Reader.ReaderT
                             [GHC.LanguageExtensions.Type.Extension]
                             (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc))
                        @ Control.Reference.Representation.MU
                        @ Control.Reference.Representation.MU
                        @ Control.Reference.Representation.MU
                        @ (Language.Haskell.Tools.AST.Ann.Ann
                             Language.Haskell.Tools.AST.Representation.Decls.UInstBody
                             dom
                             Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                        @ (Language.Haskell.Tools.AST.Ann.Ann
                             Language.Haskell.Tools.AST.Representation.Decls.UInstBody
                             dom
                             Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                        @ (Language.Haskell.Tools.AST.Ann.AnnListG
                             Language.Haskell.Tools.AST.Representation.Decls.UInstBodyDecl
                             dom
                             Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                        @ (Language.Haskell.Tools.AST.Ann.AnnListG
                             Language.Haskell.Tools.AST.Representation.Decls.UInstBodyDecl
                             dom
                             Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                        @ (Language.Haskell.Tools.AST.Ann.Ann
                             Language.Haskell.Tools.AST.Representation.Decls.UInstBodyDecl
                             dom
                             Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                        @ (Language.Haskell.Tools.AST.Ann.Ann
                             Language.Haskell.Tools.AST.Representation.Decls.UInstBodyDecl
                             dom
                             Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                        (TraverseAST.traverseInstBody3 @ dom)
                        (TraverseAST.traverseInstBody2
                           @ dom) of ww { (#,,,,,#) ww1 ww2 ww3 ww4 ww5 ww6 ->
                 Control.Reference.Representation.Reference
                   @ (Control.Monad.Trans.Reader.ReaderT
                        [GHC.LanguageExtensions.Type.Extension]
                        (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc))
                   @ Control.Reference.Representation.MU
                   @ Control.Reference.Representation.MU
                   @ Control.Reference.Representation.MU
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        Language.Haskell.Tools.AST.Representation.Decls.UInstBody
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        Language.Haskell.Tools.AST.Representation.Decls.UInstBody
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        Language.Haskell.Tools.AST.Representation.Decls.UInstBodyDecl
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        Language.Haskell.Tools.AST.Representation.Decls.UInstBodyDecl
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   ww1
                   ww2
                   ww3
                   ww4
                   ww5
                   ww6 }) -}
c294e1db4a1d773c646076f762fdc674
  traverseInstBody2 ::
    Control.Reference.Representation.Reference
      (Control.Monad.Trans.Reader.ReaderT
         [GHC.LanguageExtensions.Type.Extension]
         (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc))
      Control.Reference.Representation.MU
      Control.Reference.Representation.MU
      Control.Reference.Representation.MU
      (Language.Haskell.Tools.AST.Ann.AnnListG
         Language.Haskell.Tools.AST.Representation.Decls.UInstBodyDecl
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
      (Language.Haskell.Tools.AST.Ann.AnnListG
         Language.Haskell.Tools.AST.Representation.Decls.UInstBodyDecl
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
      (Language.Haskell.Tools.AST.Ann.Ann
         Language.Haskell.Tools.AST.Representation.Decls.UInstBodyDecl
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
      (Language.Haskell.Tools.AST.Ann.Ann
         Language.Haskell.Tools.AST.Representation.Decls.UInstBodyDecl
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
  {- Unfolding: (\ @ dom ->
                 case Language.Haskell.Tools.AST.Ann.$wannList
                        @ Language.Haskell.Tools.AST.Representation.Decls.UInstBodyDecl
                        @ dom
                        @ Language.Haskell.Tools.AST.Ann.SrcTemplateStage
                        @ (Control.Monad.Trans.Reader.ReaderT
                             [GHC.LanguageExtensions.Type.Extension]
                             (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc))
                        @ Control.Reference.Representation.MU
                        TraverseAST.$s$fRefMonadswr
                        TraverseAST.$sannList1
                          `cast`
                        (Sym (Control.Instances.Morph.N:Morph[0]
                                  <[]>_N
                                  <Data.Proxy.Proxy>_N)) of ww { (#,,,,,#) ww1 ww2 ww3 ww4 ww5 ww6 ->
                 Control.Reference.Representation.Reference
                   @ (Control.Monad.Trans.Reader.ReaderT
                        [GHC.LanguageExtensions.Type.Extension]
                        (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc))
                   @ Control.Reference.Representation.MU
                   @ Control.Reference.Representation.MU
                   @ Control.Reference.Representation.MU
                   @ (Language.Haskell.Tools.AST.Ann.AnnListG
                        Language.Haskell.Tools.AST.Representation.Decls.UInstBodyDecl
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   @ (Language.Haskell.Tools.AST.Ann.AnnListG
                        Language.Haskell.Tools.AST.Representation.Decls.UInstBodyDecl
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        Language.Haskell.Tools.AST.Representation.Decls.UInstBodyDecl
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        Language.Haskell.Tools.AST.Representation.Decls.UInstBodyDecl
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   ww1
                   ww2
                   ww3
                   ww4
                   ww5
                   ww6 }) -}
75f91bcbedb9b5f89ce0126c4a98060c
  traverseInstBody3 ::
    Control.Reference.Representation.Reference
      (Control.Monad.Trans.Reader.ReaderT
         [GHC.LanguageExtensions.Type.Extension]
         (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc))
      Control.Reference.Representation.MU
      Control.Reference.Representation.MU
      Control.Reference.Representation.MU
      (Language.Haskell.Tools.AST.Ann.Ann
         Language.Haskell.Tools.AST.Representation.Decls.UInstBody
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
      (Language.Haskell.Tools.AST.Ann.Ann
         Language.Haskell.Tools.AST.Representation.Decls.UInstBody
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
      (Language.Haskell.Tools.AST.Ann.AnnListG
         Language.Haskell.Tools.AST.Representation.Decls.UInstBodyDecl
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
      (Language.Haskell.Tools.AST.Ann.AnnListG
         Language.Haskell.Tools.AST.Representation.Decls.UInstBodyDecl
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
  {- Unfolding: (\ @ dom ->
                 case Language.Haskell.Tools.AST.References.$winstBodyDecls
                        @ GHC.Prim.Any
                        @ GHC.Prim.Any
                        @ dom
                        @ Language.Haskell.Tools.AST.Ann.SrcTemplateStage
                        @ (Control.Monad.Trans.Reader.ReaderT
                             [GHC.LanguageExtensions.Type.Extension]
                             (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc))
                        @ Control.Reference.Representation.MU
                        TraverseAST.$s$fRefMonadswr of ww { (#,,,,,#) ww1 ww2 ww3 ww4 ww5 ww6 ->
                 Control.Reference.Representation.Reference
                   @ (Control.Monad.Trans.Reader.ReaderT
                        [GHC.LanguageExtensions.Type.Extension]
                        (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc))
                   @ Control.Reference.Representation.MU
                   @ Control.Reference.Representation.MU
                   @ Control.Reference.Representation.MU
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        Language.Haskell.Tools.AST.Representation.Decls.UInstBody
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        Language.Haskell.Tools.AST.Representation.Decls.UInstBody
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   @ (Language.Haskell.Tools.AST.Ann.AnnListG
                        Language.Haskell.Tools.AST.Representation.Decls.UInstBodyDecl
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   @ (Language.Haskell.Tools.AST.Ann.AnnListG
                        Language.Haskell.Tools.AST.Representation.Decls.UInstBodyDecl
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   ww1
                   ww2
                   ww3
                   ww4
                   ww5
                   ww6 }) -}
5b45d4d0b97743cf419fcde84dc9030e
  traverseInstBodyDecl ::
    ExtMonad.CheckNode
      Language.Haskell.Tools.AST.ElementTypes.InstBodyDecl
  {- Arity: 1,
     Strictness: <S(S(LLS(S)LLLLLLLLLL)L),U(U(U,U,U(U),U,U,U,U,U,U,U,U,U,U),U)>,
     Unfolding: (\ @ dom ($d(%,%) :: ExtMonad.ExtDomain dom) ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Language.Haskell.Tools.AST.Ann.SemanticInfo'
                             dom Language.Haskell.Tools.AST.Ann.SameInfoDefaultCls)
                        @ Language.Haskell.Tools.AST.SemaInfoTypes.NoSemanticInfo
                        (Language.Haskell.Tools.AST.Ann.$p3Domain
                           @ dom
                           (GHC.Classes.$p1(%,%)
                              @ (Language.Haskell.Tools.AST.Ann.Domain dom)
                              @ (Language.Haskell.Tools.AST.SemaInfoClasses.HasNameInfo'
                                   (Language.Haskell.Tools.AST.Ann.SemanticInfo
                                      dom
                                      Language.Haskell.Tools.AST.Representation.Names.UQualifiedName))
                              $d(%,%)))
                          `cast`
                        (Data.Type.Equality.N:~[0]
                             <*>_N <Language.Haskell.Tools.AST.Ann.SemanticInfo'
                                      dom
                                      Language.Haskell.Tools.AST.Ann.SameInfoDefaultCls>_N <Language.Haskell.Tools.AST.SemaInfoTypes.NoSemanticInfo>_N) of cobox0 { DEFAULT ->
                 let {
                   f :: Language.Haskell.Tools.AST.Ann.Ann
                          Language.Haskell.Tools.AST.Representation.Decls.UInstBodyDecl
                          dom
                          Language.Haskell.Tools.AST.Ann.SrcTemplateStage
                        -> Control.Monad.Trans.Reader.ReaderT
                             [GHC.LanguageExtensions.Type.Extension]
                             (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc)
                             (Language.Haskell.Tools.AST.Ann.Ann
                                Language.Haskell.Tools.AST.Representation.Decls.UInstBodyDecl
                                dom
                                Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   = case TraverseAST.traverseInstBodyDecl5
                            @ dom of wild { Control.Reference.Representation.Reference ds1 ds2 ds3 ds4 ds5 ds6 ->
                     ds3 (TraverseAST.traverseValueBind @ dom $d(%,%)) }
                 } in
                 let {
                   f1 :: Language.Haskell.Tools.AST.Ann.Ann
                           Language.Haskell.Tools.AST.Representation.Decls.UInstBodyDecl
                           dom
                           Language.Haskell.Tools.AST.Ann.SrcTemplateStage
                         -> Control.Monad.Trans.Reader.ReaderT
                              [GHC.LanguageExtensions.Type.Extension]
                              (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc)
                              (Language.Haskell.Tools.AST.Ann.Ann
                                 Language.Haskell.Tools.AST.Representation.Decls.UInstBodyDecl
                                 dom
                                 Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   = case TraverseAST.traverseInstBodyDecl4
                            @ dom of wild { Control.Reference.Representation.Reference ds1 ds2 ds3 ds4 ds5 ds6 ->
                     ds3
                       (TraverseAST.traverseInstBodyDecl3 @ dom $d(%,%))
                         `cast`
                       (<Language.Haskell.Tools.AST.ElementTypes.TypeSignature dom>_R
                        ->_R Trans
                                 (<[GHC.LanguageExtensions.Type.Extension]>_R
                                  ->_R Trans
                                           (<ExtMap.ExtMap>_R
                                            ->_R Trans
                                                     (<GhcMonad.Session>_R
                                                      ->_R Sym (GHC.Types.N:IO[0]
                                                                    <(Language.Haskell.Tools.AST.ElementTypes.TypeSignature
                                                                        dom,
                                                                      ExtMap.ExtMap)>_R))
                                                     (Sym (GhcMonad.N:Ghc[0]
                                                               <(Language.Haskell.Tools.AST.ElementTypes.TypeSignature
                                                                   dom,
                                                                 ExtMap.ExtMap)>_R)))
                                           (Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                                     <ExtMap.ExtMap>_N
                                                     <GhcMonad.Ghc>_R
                                                     <Language.Haskell.Tools.AST.ElementTypes.TypeSignature
                                                        dom>_N)))
                                 (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                           <*>_N
                                           <[GHC.LanguageExtensions.Type.Extension]>_R
                                           <Control.Monad.Trans.State.Lazy.StateT
                                              ExtMap.ExtMap GhcMonad.Ghc>_R
                                           <Language.Haskell.Tools.AST.ElementTypes.TypeSignature
                                              dom>_N))) }
                 } in
                 let {
                   f2 :: Language.Haskell.Tools.AST.Ann.Ann
                           Language.Haskell.Tools.AST.Representation.Decls.UInstBodyDecl
                           dom
                           Language.Haskell.Tools.AST.Ann.SrcTemplateStage
                         -> Control.Monad.Trans.Reader.ReaderT
                              [GHC.LanguageExtensions.Type.Extension]
                              (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc)
                              (Language.Haskell.Tools.AST.Ann.Ann
                                 Language.Haskell.Tools.AST.Representation.Decls.UInstBodyDecl
                                 dom
                                 Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   = case TraverseAST.traverseInstBodyDecl2
                            @ dom of wild { Control.Reference.Representation.Reference ds1 ds2 ds3 ds4 ds5 ds6 ->
                     ds3 (TraverseAST.traverseTypeEqn @ dom $d(%,%)) }
                 } in
                 let {
                   g :: Language.Haskell.Tools.AST.Ann.Ann
                          Language.Haskell.Tools.AST.Representation.Decls.UInstBodyDecl
                          dom
                          Language.Haskell.Tools.AST.Ann.SrcTemplateStage
                        -> Control.Monad.Trans.Reader.ReaderT
                             [GHC.LanguageExtensions.Type.Extension]
                             (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc)
                             (Language.Haskell.Tools.AST.Ann.Ann
                                Language.Haskell.Tools.AST.Representation.Decls.UInstBodyDecl
                                dom
                                Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   = case TraverseAST.traverseInstBodyDecl1
                            @ dom of wild { Control.Reference.Representation.Reference ds1 ds2 ds3 ds4 ds5 ds6 ->
                     ds3 (TraverseAST.traverseType @ dom $d(%,%)) }
                 } in
                 \ (x :: Language.Haskell.Tools.AST.Ann.Ann
                           Language.Haskell.Tools.AST.Representation.Decls.UInstBodyDecl
                           dom
                           Language.Haskell.Tools.AST.Ann.SrcTemplateStage) ->
                 let {
                   m1 :: Control.Monad.Trans.Reader.ReaderT
                           [GHC.LanguageExtensions.Type.Extension]
                           (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc)
                           (Language.Haskell.Tools.AST.Ann.Ann
                              Language.Haskell.Tools.AST.Representation.Decls.UInstBodyDecl
                              dom
                              Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   = f x
                 } in
                 (\ (r1 :: [GHC.LanguageExtensions.Type.Extension]) ->
                  let {
                    m2 :: Control.Monad.Trans.State.Lazy.StateT
                            (Data.Map.Base.Map
                               (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                               [SrcLoc.SrcSpan])
                            GhcMonad.Ghc
                            (Language.Haskell.Tools.AST.Ann.Ann
                               Language.Haskell.Tools.AST.Representation.Decls.UInstBodyDecl
                               dom
                               Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                    = m1
                        `cast`
                      (Control.Monad.Trans.Reader.N:ReaderT[0]
                           <*>_N
                           <[GHC.LanguageExtensions.Type.Extension]>_R
                           <Control.Monad.Trans.State.Lazy.StateT
                              ExtMap.ExtMap GhcMonad.Ghc>_R
                           <Language.Haskell.Tools.AST.Ann.Ann
                              Language.Haskell.Tools.AST.Representation.Decls.UInstBodyDecl
                              dom
                              Language.Haskell.Tools.AST.Ann.SrcTemplateStage>_N)
                        r1
                  } in
                  (\ (s1 :: Data.Map.Base.Map
                              (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                              [SrcLoc.SrcSpan]) ->
                   let {
                     m :: GhcMonad.Ghc
                            (Language.Haskell.Tools.AST.Ann.Ann
                               Language.Haskell.Tools.AST.Representation.Decls.UInstBodyDecl
                               dom
                               Language.Haskell.Tools.AST.Ann.SrcTemplateStage,
                             Data.Map.Base.Map
                               (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                               [SrcLoc.SrcSpan])
                     = m2
                         `cast`
                       (Control.Monad.Trans.State.Lazy.N:StateT[0]
                            <Data.Map.Base.Map
                               (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                               [SrcLoc.SrcSpan]>_N
                            <GhcMonad.Ghc>_R
                            <Language.Haskell.Tools.AST.Ann.Ann
                               Language.Haskell.Tools.AST.Representation.Decls.UInstBodyDecl
                               dom
                               Language.Haskell.Tools.AST.Ann.SrcTemplateStage>_N)
                         s1
                   } in
                   (\ (s :: GhcMonad.Session)
                      (s2 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                    case (m `cast`
                          (GhcMonad.N:Ghc[0]
                               <(Language.Haskell.Tools.AST.Ann.Ann
                                   Language.Haskell.Tools.AST.Representation.Decls.UInstBodyDecl
                                   dom
                                   Language.Haskell.Tools.AST.Ann.SrcTemplateStage,
                                 Data.Map.Base.Map
                                   (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                                   [SrcLoc.SrcSpan])>_R)
                            s)
                           `cast`
                         (GHC.Types.N:IO[0]
                              <(Language.Haskell.Tools.AST.Ann.Ann
                                  Language.Haskell.Tools.AST.Representation.Decls.UInstBodyDecl
                                  dom
                                  Language.Haskell.Tools.AST.Ann.SrcTemplateStage,
                                Data.Map.Base.Map
                                  (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                                  [SrcLoc.SrcSpan])>_R)
                           s2 of ds1 { (#,#) ipv ipv1 ->
                    case ((((f1 (case ipv1 of wild { (,) a1 s' -> a1 }))
                              `cast`
                            (Control.Monad.Trans.Reader.N:ReaderT[0]
                                 <*>_N
                                 <[GHC.LanguageExtensions.Type.Extension]>_R
                                 <Control.Monad.Trans.State.Lazy.StateT
                                    ExtMap.ExtMap GhcMonad.Ghc>_R
                                 <Language.Haskell.Tools.AST.Ann.Ann
                                    Language.Haskell.Tools.AST.Representation.Decls.UInstBodyDecl
                                    dom
                                    Language.Haskell.Tools.AST.Ann.SrcTemplateStage>_N)
                              r1)
                             `cast`
                           (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                <Data.Map.Base.Map
                                   (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                                   [SrcLoc.SrcSpan]>_N
                                <GhcMonad.Ghc>_R
                                <Language.Haskell.Tools.AST.Ann.Ann
                                   Language.Haskell.Tools.AST.Representation.Decls.UInstBodyDecl
                                   dom
                                   Language.Haskell.Tools.AST.Ann.SrcTemplateStage>_N)
                             (case ipv1 of wild { (,) a1 s' -> s' }))
                            `cast`
                          (GhcMonad.N:Ghc[0]
                               <(Language.Haskell.Tools.AST.Ann.Ann
                                   Language.Haskell.Tools.AST.Representation.Decls.UInstBodyDecl
                                   dom
                                   Language.Haskell.Tools.AST.Ann.SrcTemplateStage,
                                 Data.Map.Base.Map
                                   (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                                   [SrcLoc.SrcSpan])>_R)
                            s)
                           `cast`
                         (GHC.Types.N:IO[0]
                              <(Language.Haskell.Tools.AST.Ann.Ann
                                  Language.Haskell.Tools.AST.Representation.Decls.UInstBodyDecl
                                  dom
                                  Language.Haskell.Tools.AST.Ann.SrcTemplateStage,
                                Data.Map.Base.Map
                                  (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                                  [SrcLoc.SrcSpan])>_R)
                           ipv of ds2 { (#,#) ipv2 ipv3 ->
                    case ((((f2 (case ipv3 of wild { (,) a1 s' -> a1 }))
                              `cast`
                            (Control.Monad.Trans.Reader.N:ReaderT[0]
                                 <*>_N
                                 <[GHC.LanguageExtensions.Type.Extension]>_R
                                 <Control.Monad.Trans.State.Lazy.StateT
                                    ExtMap.ExtMap GhcMonad.Ghc>_R
                                 <Language.Haskell.Tools.AST.Ann.Ann
                                    Language.Haskell.Tools.AST.Representation.Decls.UInstBodyDecl
                                    dom
                                    Language.Haskell.Tools.AST.Ann.SrcTemplateStage>_N)
                              r1)
                             `cast`
                           (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                <Data.Map.Base.Map
                                   (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                                   [SrcLoc.SrcSpan]>_N
                                <GhcMonad.Ghc>_R
                                <Language.Haskell.Tools.AST.Ann.Ann
                                   Language.Haskell.Tools.AST.Representation.Decls.UInstBodyDecl
                                   dom
                                   Language.Haskell.Tools.AST.Ann.SrcTemplateStage>_N)
                             (case ipv3 of wild { (,) a1 s' -> s' }))
                            `cast`
                          (GhcMonad.N:Ghc[0]
                               <(Language.Haskell.Tools.AST.Ann.Ann
                                   Language.Haskell.Tools.AST.Representation.Decls.UInstBodyDecl
                                   dom
                                   Language.Haskell.Tools.AST.Ann.SrcTemplateStage,
                                 Data.Map.Base.Map
                                   (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                                   [SrcLoc.SrcSpan])>_R)
                            s)
                           `cast`
                         (GHC.Types.N:IO[0]
                              <(Language.Haskell.Tools.AST.Ann.Ann
                                  Language.Haskell.Tools.AST.Representation.Decls.UInstBodyDecl
                                  dom
                                  Language.Haskell.Tools.AST.Ann.SrcTemplateStage,
                                Data.Map.Base.Map
                                  (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                                  [SrcLoc.SrcSpan])>_R)
                           ipv2 of ds3 { (#,#) ipv4 ipv5 ->
                    ((((g (case ipv5 of wild { (,) a1 s' -> a1 }))
                         `cast`
                       (Control.Monad.Trans.Reader.N:ReaderT[0]
                            <*>_N
                            <[GHC.LanguageExtensions.Type.Extension]>_R
                            <Control.Monad.Trans.State.Lazy.StateT
                               ExtMap.ExtMap GhcMonad.Ghc>_R
                            <Language.Haskell.Tools.AST.Ann.Ann
                               Language.Haskell.Tools.AST.Representation.Decls.UInstBodyDecl
                               dom
                               Language.Haskell.Tools.AST.Ann.SrcTemplateStage>_N)
                         r1)
                        `cast`
                      (Control.Monad.Trans.State.Lazy.N:StateT[0]
                           <Data.Map.Base.Map
                              (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                              [SrcLoc.SrcSpan]>_N
                           <GhcMonad.Ghc>_R
                           <Language.Haskell.Tools.AST.Ann.Ann
                              Language.Haskell.Tools.AST.Representation.Decls.UInstBodyDecl
                              dom
                              Language.Haskell.Tools.AST.Ann.SrcTemplateStage>_N)
                        (case ipv5 of wild { (,) a1 s' -> s' }))
                       `cast`
                     (GhcMonad.N:Ghc[0]
                          <(Language.Haskell.Tools.AST.Ann.Ann
                              Language.Haskell.Tools.AST.Representation.Decls.UInstBodyDecl
                              dom
                              Language.Haskell.Tools.AST.Ann.SrcTemplateStage,
                            Data.Map.Base.Map
                              (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                              [SrcLoc.SrcSpan])>_R)
                       s)
                      `cast`
                    (GHC.Types.N:IO[0]
                         <(Language.Haskell.Tools.AST.Ann.Ann
                             Language.Haskell.Tools.AST.Representation.Decls.UInstBodyDecl
                             dom
                             Language.Haskell.Tools.AST.Ann.SrcTemplateStage,
                           Data.Map.Base.Map
                             (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                             [SrcLoc.SrcSpan])>_R)
                      ipv4 } } })
                     `cast`
                   (Trans
                        (<GhcMonad.Session>_R
                         ->_R Sym (GHC.Types.N:IO[0]
                                       <(Language.Haskell.Tools.AST.Ann.Ann
                                           Language.Haskell.Tools.AST.Representation.Decls.UInstBodyDecl
                                           dom
                                           Language.Haskell.Tools.AST.Ann.SrcTemplateStage,
                                         Data.Map.Base.Map
                                           (ExtMap.LogicalRelation
                                              GHC.LanguageExtensions.Type.Extension)
                                           [SrcLoc.SrcSpan])>_R))
                        (Sym (GhcMonad.N:Ghc[0]
                                  <(Language.Haskell.Tools.AST.Ann.Ann
                                      Language.Haskell.Tools.AST.Representation.Decls.UInstBodyDecl
                                      dom
                                      Language.Haskell.Tools.AST.Ann.SrcTemplateStage,
                                    Data.Map.Base.Map
                                      (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                                      [SrcLoc.SrcSpan])>_R))))
                    `cast`
                  (Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                            <Data.Map.Base.Map
                               (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                               [SrcLoc.SrcSpan]>_N
                            <GhcMonad.Ghc>_R
                            <Language.Haskell.Tools.AST.Ann.Ann
                               Language.Haskell.Tools.AST.Representation.Decls.UInstBodyDecl
                               dom
                               Language.Haskell.Tools.AST.Ann.SrcTemplateStage>_N)))
                   `cast`
                 (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                           <*>_N
                           <[GHC.LanguageExtensions.Type.Extension]>_R
                           <Control.Monad.Trans.State.Lazy.StateT
                              ExtMap.ExtMap GhcMonad.Ghc>_R
                           <Language.Haskell.Tools.AST.Ann.Ann
                              Language.Haskell.Tools.AST.Representation.Decls.UInstBodyDecl
                              dom
                              Language.Haskell.Tools.AST.Ann.SrcTemplateStage>_N)) }) -}
a653c56507e21fe135c8009ed672817a
  traverseInstBodyDecl1 ::
    Control.Reference.Representation.Reference
      (Control.Monad.Trans.Reader.ReaderT
         [GHC.LanguageExtensions.Type.Extension]
         (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc))
      Control.Reference.Representation.MU
      Control.Reference.Representation.MU
      Control.Reference.Representation.MU
      (Language.Haskell.Tools.AST.Ann.Ann
         Language.Haskell.Tools.AST.Representation.Decls.UInstBodyDecl
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
      (Language.Haskell.Tools.AST.Ann.Ann
         Language.Haskell.Tools.AST.Representation.Decls.UInstBodyDecl
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
      (Language.Haskell.Tools.AST.Ann.Ann
         Language.Haskell.Tools.AST.Representation.Types.UType
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
      (Language.Haskell.Tools.AST.Ann.Ann
         Language.Haskell.Tools.AST.Representation.Types.UType
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
  {- Unfolding: (\ @ dom ->
                 case Language.Haskell.Tools.AST.References.$wspecializeInstanceType
                        @ dom
                        @ Language.Haskell.Tools.AST.Ann.SrcTemplateStage
                        @ (Control.Monad.Trans.Reader.ReaderT
                             [GHC.LanguageExtensions.Type.Extension]
                             (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc))
                        @ Control.Reference.Representation.MU
                        (TraverseAST.$s$fMonadReaderT
                           @ [GHC.LanguageExtensions.Type.Extension])
                        Data.Proxy.$fMonadPlusProxy
                        TraverseAST.$sannJust1
                          `cast`
                        (Sym (Control.Instances.Morph.N:Morph[0]
                                  <GHC.Base.Maybe>_N
                                  <Data.Proxy.Proxy>_N)) of ww { (#,,,,,#) ww1 ww2 ww3 ww4 ww5 ww6 ->
                 Control.Reference.Representation.Reference
                   @ (Control.Monad.Trans.Reader.ReaderT
                        [GHC.LanguageExtensions.Type.Extension]
                        (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc))
                   @ Control.Reference.Representation.MU
                   @ Control.Reference.Representation.MU
                   @ Control.Reference.Representation.MU
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        Language.Haskell.Tools.AST.Representation.Decls.UInstBodyDecl
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        Language.Haskell.Tools.AST.Representation.Decls.UInstBodyDecl
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        Language.Haskell.Tools.AST.Representation.Types.UType
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        Language.Haskell.Tools.AST.Representation.Types.UType
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   ww1
                   ww2
                   ww3
                   ww4
                   ww5
                   ww6 }) -}
b2872d13732b4c063b326723a46c9d9e
  traverseInstBodyDecl2 ::
    Control.Reference.Representation.Reference
      (Control.Monad.Trans.Reader.ReaderT
         [GHC.LanguageExtensions.Type.Extension]
         (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc))
      Control.Reference.Representation.MU
      Control.Reference.Representation.MU
      Control.Reference.Representation.MU
      (Language.Haskell.Tools.AST.Ann.Ann
         Language.Haskell.Tools.AST.Representation.Decls.UInstBodyDecl
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
      (Language.Haskell.Tools.AST.Ann.Ann
         Language.Haskell.Tools.AST.Representation.Decls.UInstBodyDecl
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
      (Language.Haskell.Tools.AST.Ann.Ann
         Language.Haskell.Tools.AST.Representation.Decls.UTypeEqn
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
      (Language.Haskell.Tools.AST.Ann.Ann
         Language.Haskell.Tools.AST.Representation.Decls.UTypeEqn
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
  {- Unfolding: (\ @ dom ->
                 case Language.Haskell.Tools.AST.References.$winstBodyTypeEqn
                        @ dom
                        @ Language.Haskell.Tools.AST.Ann.SrcTemplateStage
                        @ (Control.Monad.Trans.Reader.ReaderT
                             [GHC.LanguageExtensions.Type.Extension]
                             (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc))
                        @ Control.Reference.Representation.MU
                        (TraverseAST.$s$fMonadReaderT
                           @ [GHC.LanguageExtensions.Type.Extension])
                        Data.Proxy.$fMonadPlusProxy
                        TraverseAST.$sannJust1
                          `cast`
                        (Sym (Control.Instances.Morph.N:Morph[0]
                                  <GHC.Base.Maybe>_N
                                  <Data.Proxy.Proxy>_N)) of ww { (#,,,,,#) ww1 ww2 ww3 ww4 ww5 ww6 ->
                 Control.Reference.Representation.Reference
                   @ (Control.Monad.Trans.Reader.ReaderT
                        [GHC.LanguageExtensions.Type.Extension]
                        (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc))
                   @ Control.Reference.Representation.MU
                   @ Control.Reference.Representation.MU
                   @ Control.Reference.Representation.MU
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        Language.Haskell.Tools.AST.Representation.Decls.UInstBodyDecl
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        Language.Haskell.Tools.AST.Representation.Decls.UInstBodyDecl
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        Language.Haskell.Tools.AST.Representation.Decls.UTypeEqn
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        Language.Haskell.Tools.AST.Representation.Decls.UTypeEqn
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   ww1
                   ww2
                   ww3
                   ww4
                   ww5
                   ww6 }) -}
aa4df663e28428ba24c7957031c2570e
  traverseInstBodyDecl3 ::
    ExtMonad.ExtDomain dom =>
    Language.Haskell.Tools.AST.ElementTypes.TypeSignature dom
    -> [GHC.LanguageExtensions.Type.Extension]
    -> ExtMap.ExtMap
    -> GhcMonad.Session
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          (Language.Haskell.Tools.AST.ElementTypes.TypeSignature dom,
           ExtMap.ExtMap) #)
  {- Arity: 6, HasNoCafRefs,
     Strictness: <S(S(LLS(S)LLLLLLLLLL)L),1*U(1*U(A,A,1*U(1*U),A,A,A,A,A,A,A,A,A,A),A)><L,U><L,A><L,U><L,A><S,U>,
     Unfolding: InlineRule (6, True, False)
                (\ @ dom
                   ($d(%,%) :: ExtMonad.ExtDomain dom)
                   (eta :: Language.Haskell.Tools.AST.ElementTypes.TypeSignature dom)
                   (eta1 :: [GHC.LanguageExtensions.Type.Extension])
                   (eta2 :: ExtMap.ExtMap)
                   (eta3 :: GhcMonad.Session)
                   (eta4 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Language.Haskell.Tools.AST.Ann.SemanticInfo'
                             dom Language.Haskell.Tools.AST.Ann.SameInfoDefaultCls)
                        @ Language.Haskell.Tools.AST.SemaInfoTypes.NoSemanticInfo
                        (Language.Haskell.Tools.AST.Ann.$p3Domain
                           @ dom
                           (GHC.Classes.$p1(%,%)
                              @ (Language.Haskell.Tools.AST.Ann.Domain dom)
                              @ (Language.Haskell.Tools.AST.SemaInfoClasses.HasNameInfo'
                                   (Language.Haskell.Tools.AST.Ann.SemanticInfo
                                      dom
                                      Language.Haskell.Tools.AST.Representation.Names.UQualifiedName))
                              $d(%,%)))
                          `cast`
                        (Data.Type.Equality.N:~[0]
                             <*>_N <Language.Haskell.Tools.AST.Ann.SemanticInfo'
                                      dom
                                      Language.Haskell.Tools.AST.Ann.SameInfoDefaultCls>_N <Language.Haskell.Tools.AST.SemaInfoTypes.NoSemanticInfo>_N) of cobox0 { DEFAULT ->
                 (# eta4, (eta, eta2) #) }) -}
17d20b1cb97d52c16d2d5b6e2caf9ce0
  traverseInstBodyDecl4 ::
    Control.Reference.Representation.Reference
      (Control.Monad.Trans.Reader.ReaderT
         [GHC.LanguageExtensions.Type.Extension]
         (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc))
      Control.Reference.Representation.MU
      Control.Reference.Representation.MU
      Control.Reference.Representation.MU
      (Language.Haskell.Tools.AST.Ann.Ann
         Language.Haskell.Tools.AST.Representation.Decls.UInstBodyDecl
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
      (Language.Haskell.Tools.AST.Ann.Ann
         Language.Haskell.Tools.AST.Representation.Decls.UInstBodyDecl
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
      (Language.Haskell.Tools.AST.Ann.Ann
         Language.Haskell.Tools.AST.Representation.Binds.UTypeSignature
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
      (Language.Haskell.Tools.AST.Ann.Ann
         Language.Haskell.Tools.AST.Representation.Binds.UTypeSignature
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
  {- Unfolding: (\ @ dom ->
                 case Language.Haskell.Tools.AST.References.$winstBodyTypeSig
                        @ dom
                        @ Language.Haskell.Tools.AST.Ann.SrcTemplateStage
                        @ (Control.Monad.Trans.Reader.ReaderT
                             [GHC.LanguageExtensions.Type.Extension]
                             (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc))
                        @ Control.Reference.Representation.MU
                        (TraverseAST.$s$fMonadReaderT
                           @ [GHC.LanguageExtensions.Type.Extension])
                        Data.Proxy.$fMonadPlusProxy
                        TraverseAST.$sannJust1
                          `cast`
                        (Sym (Control.Instances.Morph.N:Morph[0]
                                  <GHC.Base.Maybe>_N
                                  <Data.Proxy.Proxy>_N)) of ww { (#,,,,,#) ww1 ww2 ww3 ww4 ww5 ww6 ->
                 Control.Reference.Representation.Reference
                   @ (Control.Monad.Trans.Reader.ReaderT
                        [GHC.LanguageExtensions.Type.Extension]
                        (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc))
                   @ Control.Reference.Representation.MU
                   @ Control.Reference.Representation.MU
                   @ Control.Reference.Representation.MU
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        Language.Haskell.Tools.AST.Representation.Decls.UInstBodyDecl
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        Language.Haskell.Tools.AST.Representation.Decls.UInstBodyDecl
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        Language.Haskell.Tools.AST.Representation.Binds.UTypeSignature
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        Language.Haskell.Tools.AST.Representation.Binds.UTypeSignature
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   ww1
                   ww2
                   ww3
                   ww4
                   ww5
                   ww6 }) -}
d43c9c541a8b6c1752189f20ef8c2a2f
  traverseInstBodyDecl5 ::
    Control.Reference.Representation.Reference
      (Control.Monad.Trans.Reader.ReaderT
         [GHC.LanguageExtensions.Type.Extension]
         (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc))
      Control.Reference.Representation.MU
      Control.Reference.Representation.MU
      Control.Reference.Representation.MU
      (Language.Haskell.Tools.AST.Ann.Ann
         Language.Haskell.Tools.AST.Representation.Decls.UInstBodyDecl
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
      (Language.Haskell.Tools.AST.Ann.Ann
         Language.Haskell.Tools.AST.Representation.Decls.UInstBodyDecl
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
      (Language.Haskell.Tools.AST.Ann.Ann
         Language.Haskell.Tools.AST.Representation.Binds.UValueBind
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
      (Language.Haskell.Tools.AST.Ann.Ann
         Language.Haskell.Tools.AST.Representation.Binds.UValueBind
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
  {- Unfolding: (\ @ dom ->
                 case Language.Haskell.Tools.AST.References.$winstBodyDeclFunbind
                        @ dom
                        @ Language.Haskell.Tools.AST.Ann.SrcTemplateStage
                        @ (Control.Monad.Trans.Reader.ReaderT
                             [GHC.LanguageExtensions.Type.Extension]
                             (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc))
                        @ Control.Reference.Representation.MU
                        (TraverseAST.$s$fMonadReaderT
                           @ [GHC.LanguageExtensions.Type.Extension])
                        Data.Proxy.$fMonadPlusProxy
                        TraverseAST.$sannJust1
                          `cast`
                        (Sym (Control.Instances.Morph.N:Morph[0]
                                  <GHC.Base.Maybe>_N
                                  <Data.Proxy.Proxy>_N)) of ww { (#,,,,,#) ww1 ww2 ww3 ww4 ww5 ww6 ->
                 Control.Reference.Representation.Reference
                   @ (Control.Monad.Trans.Reader.ReaderT
                        [GHC.LanguageExtensions.Type.Extension]
                        (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc))
                   @ Control.Reference.Representation.MU
                   @ Control.Reference.Representation.MU
                   @ Control.Reference.Representation.MU
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        Language.Haskell.Tools.AST.Representation.Decls.UInstBodyDecl
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        Language.Haskell.Tools.AST.Representation.Decls.UInstBodyDecl
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        Language.Haskell.Tools.AST.Representation.Binds.UValueBind
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        Language.Haskell.Tools.AST.Representation.Binds.UValueBind
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   ww1
                   ww2
                   ww3
                   ww4
                   ww5
                   ww6 }) -}
7474e71488e2ecfa06c3c81c9421fdd8
  traverseListCompBody ::
    ExtMonad.CheckNode
      Language.Haskell.Tools.AST.ElementTypes.ListCompBody
  {- Arity: 1,
     Strictness: <S(S(LLS(S)LLLLLLLLLL)L),U(U(U,U,U(U),U,U,U,U,U,U,U,U,U,U),U)>,
     Unfolding: (\ @ dom ($d(%,%) :: ExtMonad.ExtDomain dom) ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Language.Haskell.Tools.AST.Ann.SemanticInfo'
                             dom Language.Haskell.Tools.AST.Ann.SameInfoDefaultCls)
                        @ Language.Haskell.Tools.AST.SemaInfoTypes.NoSemanticInfo
                        (Language.Haskell.Tools.AST.Ann.$p3Domain
                           @ dom
                           (GHC.Classes.$p1(%,%)
                              @ (Language.Haskell.Tools.AST.Ann.Domain dom)
                              @ (Language.Haskell.Tools.AST.SemaInfoClasses.HasNameInfo'
                                   (Language.Haskell.Tools.AST.Ann.SemanticInfo
                                      dom
                                      Language.Haskell.Tools.AST.Representation.Names.UQualifiedName))
                              $d(%,%)))
                          `cast`
                        (Data.Type.Equality.N:~[0]
                             <*>_N <Language.Haskell.Tools.AST.Ann.SemanticInfo'
                                      dom
                                      Language.Haskell.Tools.AST.Ann.SameInfoDefaultCls>_N <Language.Haskell.Tools.AST.SemaInfoTypes.NoSemanticInfo>_N) of cobox0 { DEFAULT ->
                 case TraverseAST.traverseListCompBody1
                        @ dom of wild { Control.Reference.Representation.Reference ds1 ds2 ds3 ds4 ds5 ds6 ->
                 ds3 (TraverseAST.traverseCompStmt @ dom $d(%,%)) } }) -}
08ad5bb2f8ccf36946e1d8864a7a3021
  traverseListCompBody1 ::
    Control.Reference.Representation.Reference
      (Control.Monad.Trans.Reader.ReaderT
         [GHC.LanguageExtensions.Type.Extension]
         (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc))
      Control.Reference.Representation.MU
      Control.Reference.Representation.MU
      Control.Reference.Representation.MU
      (Language.Haskell.Tools.AST.Ann.Ann
         Language.Haskell.Tools.AST.Representation.Stmts.UListCompBody
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
      (Language.Haskell.Tools.AST.Ann.Ann
         Language.Haskell.Tools.AST.Representation.Stmts.UListCompBody
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
      (Language.Haskell.Tools.AST.Ann.Ann
         Language.Haskell.Tools.AST.Representation.Stmts.UCompStmt
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
      (Language.Haskell.Tools.AST.Ann.Ann
         Language.Haskell.Tools.AST.Representation.Stmts.UCompStmt
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
  {- Unfolding: (\ @ dom ->
                 case Control.Reference.Combinators.$w&
                        @ (Control.Monad.Trans.Reader.ReaderT
                             [GHC.LanguageExtensions.Type.Extension]
                             (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc))
                        @ Control.Reference.Representation.MU
                        @ Control.Reference.Representation.MU
                        @ Control.Reference.Representation.MU
                        @ (Language.Haskell.Tools.AST.Ann.Ann
                             Language.Haskell.Tools.AST.Representation.Stmts.UListCompBody
                             dom
                             Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                        @ (Language.Haskell.Tools.AST.Ann.Ann
                             Language.Haskell.Tools.AST.Representation.Stmts.UListCompBody
                             dom
                             Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                        @ (Language.Haskell.Tools.AST.Ann.AnnListG
                             Language.Haskell.Tools.AST.Representation.Stmts.UCompStmt
                             dom
                             Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                        @ (Language.Haskell.Tools.AST.Ann.AnnListG
                             Language.Haskell.Tools.AST.Representation.Stmts.UCompStmt
                             dom
                             Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                        @ (Language.Haskell.Tools.AST.Ann.Ann
                             Language.Haskell.Tools.AST.Representation.Stmts.UCompStmt
                             dom
                             Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                        @ (Language.Haskell.Tools.AST.Ann.Ann
                             Language.Haskell.Tools.AST.Representation.Stmts.UCompStmt
                             dom
                             Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                        (TraverseAST.traverseListCompBody3 @ dom)
                        (TraverseAST.traverseListCompBody2
                           @ dom) of ww { (#,,,,,#) ww1 ww2 ww3 ww4 ww5 ww6 ->
                 Control.Reference.Representation.Reference
                   @ (Control.Monad.Trans.Reader.ReaderT
                        [GHC.LanguageExtensions.Type.Extension]
                        (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc))
                   @ Control.Reference.Representation.MU
                   @ Control.Reference.Representation.MU
                   @ Control.Reference.Representation.MU
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        Language.Haskell.Tools.AST.Representation.Stmts.UListCompBody
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        Language.Haskell.Tools.AST.Representation.Stmts.UListCompBody
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        Language.Haskell.Tools.AST.Representation.Stmts.UCompStmt
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        Language.Haskell.Tools.AST.Representation.Stmts.UCompStmt
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   ww1
                   ww2
                   ww3
                   ww4
                   ww5
                   ww6 }) -}
0e66179310924bd1bfc50eaa986676c0
  traverseListCompBody2 ::
    Control.Reference.Representation.Reference
      (Control.Monad.Trans.Reader.ReaderT
         [GHC.LanguageExtensions.Type.Extension]
         (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc))
      Control.Reference.Representation.MU
      Control.Reference.Representation.MU
      Control.Reference.Representation.MU
      (Language.Haskell.Tools.AST.Ann.AnnListG
         Language.Haskell.Tools.AST.Representation.Stmts.UCompStmt
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
      (Language.Haskell.Tools.AST.Ann.AnnListG
         Language.Haskell.Tools.AST.Representation.Stmts.UCompStmt
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
      (Language.Haskell.Tools.AST.Ann.Ann
         Language.Haskell.Tools.AST.Representation.Stmts.UCompStmt
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
      (Language.Haskell.Tools.AST.Ann.Ann
         Language.Haskell.Tools.AST.Representation.Stmts.UCompStmt
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
  {- Unfolding: (\ @ dom ->
                 case Language.Haskell.Tools.AST.Ann.$wannList
                        @ Language.Haskell.Tools.AST.Representation.Stmts.UCompStmt
                        @ dom
                        @ Language.Haskell.Tools.AST.Ann.SrcTemplateStage
                        @ (Control.Monad.Trans.Reader.ReaderT
                             [GHC.LanguageExtensions.Type.Extension]
                             (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc))
                        @ Control.Reference.Representation.MU
                        TraverseAST.$s$fRefMonadswr
                        TraverseAST.$sannList1
                          `cast`
                        (Sym (Control.Instances.Morph.N:Morph[0]
                                  <[]>_N
                                  <Data.Proxy.Proxy>_N)) of ww { (#,,,,,#) ww1 ww2 ww3 ww4 ww5 ww6 ->
                 Control.Reference.Representation.Reference
                   @ (Control.Monad.Trans.Reader.ReaderT
                        [GHC.LanguageExtensions.Type.Extension]
                        (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc))
                   @ Control.Reference.Representation.MU
                   @ Control.Reference.Representation.MU
                   @ Control.Reference.Representation.MU
                   @ (Language.Haskell.Tools.AST.Ann.AnnListG
                        Language.Haskell.Tools.AST.Representation.Stmts.UCompStmt
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   @ (Language.Haskell.Tools.AST.Ann.AnnListG
                        Language.Haskell.Tools.AST.Representation.Stmts.UCompStmt
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        Language.Haskell.Tools.AST.Representation.Stmts.UCompStmt
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        Language.Haskell.Tools.AST.Representation.Stmts.UCompStmt
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   ww1
                   ww2
                   ww3
                   ww4
                   ww5
                   ww6 }) -}
bc49e3a7d2a3eb7723dca2a4c562398b
  traverseListCompBody3 ::
    Control.Reference.Representation.Reference
      (Control.Monad.Trans.Reader.ReaderT
         [GHC.LanguageExtensions.Type.Extension]
         (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc))
      Control.Reference.Representation.MU
      Control.Reference.Representation.MU
      Control.Reference.Representation.MU
      (Language.Haskell.Tools.AST.Ann.Ann
         Language.Haskell.Tools.AST.Representation.Stmts.UListCompBody
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
      (Language.Haskell.Tools.AST.Ann.Ann
         Language.Haskell.Tools.AST.Representation.Stmts.UListCompBody
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
      (Language.Haskell.Tools.AST.Ann.AnnListG
         Language.Haskell.Tools.AST.Representation.Stmts.UCompStmt
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
      (Language.Haskell.Tools.AST.Ann.AnnListG
         Language.Haskell.Tools.AST.Representation.Stmts.UCompStmt
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
  {- Unfolding: (\ @ dom ->
                 case Language.Haskell.Tools.AST.References.$wcompStmts
                        @ GHC.Prim.Any
                        @ GHC.Prim.Any
                        @ dom
                        @ Language.Haskell.Tools.AST.Ann.SrcTemplateStage
                        @ (Control.Monad.Trans.Reader.ReaderT
                             [GHC.LanguageExtensions.Type.Extension]
                             (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc))
                        @ Control.Reference.Representation.MU
                        TraverseAST.$s$fRefMonadswr of ww { (#,,,,,#) ww1 ww2 ww3 ww4 ww5 ww6 ->
                 Control.Reference.Representation.Reference
                   @ (Control.Monad.Trans.Reader.ReaderT
                        [GHC.LanguageExtensions.Type.Extension]
                        (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc))
                   @ Control.Reference.Representation.MU
                   @ Control.Reference.Representation.MU
                   @ Control.Reference.Representation.MU
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        Language.Haskell.Tools.AST.Representation.Stmts.UListCompBody
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        Language.Haskell.Tools.AST.Representation.Stmts.UListCompBody
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   @ (Language.Haskell.Tools.AST.Ann.AnnListG
                        Language.Haskell.Tools.AST.Representation.Stmts.UCompStmt
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   @ (Language.Haskell.Tools.AST.Ann.AnnListG
                        Language.Haskell.Tools.AST.Representation.Stmts.UCompStmt
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   ww1
                   ww2
                   ww3
                   ww4
                   ww5
                   ww6 }) -}
d12a502dc87807a0f563542a2245aa83
  traverseLiteral ::
    ExtMonad.CheckNode Language.Haskell.Tools.AST.ElementTypes.Literal
  {- Arity: 6, HasNoCafRefs,
     Strictness: <S(S(LLS(S)LLLLLLLLLL)L),1*U(1*U(A,A,1*U(1*U),A,A,A,A,A,A,A,A,A,A),A)><L,U><L,A><L,U><L,A><S,U>,
     Unfolding: InlineRule (0, True, True)
                TraverseAST.traverseLiteral1
                  `cast`
                (forall (dom :: <*>_N).
                 <ExtMonad.ExtDomain dom>_R
                 ->_R <Language.Haskell.Tools.AST.ElementTypes.Literal dom>_R
                 ->_R Trans
                          (<[GHC.LanguageExtensions.Type.Extension]>_R
                           ->_R Trans
                                    (<ExtMap.ExtMap>_R
                                     ->_R Trans
                                              (<GhcMonad.Session>_R
                                               ->_R Sym (GHC.Types.N:IO[0]
                                                             <(Language.Haskell.Tools.AST.ElementTypes.Literal
                                                                 dom,
                                                               ExtMap.ExtMap)>_R))
                                              (Sym (GhcMonad.N:Ghc[0]
                                                        <(Language.Haskell.Tools.AST.ElementTypes.Literal
                                                            dom,
                                                          ExtMap.ExtMap)>_R)))
                                    (Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                              <ExtMap.ExtMap>_N
                                              <GhcMonad.Ghc>_R
                                              <Language.Haskell.Tools.AST.ElementTypes.Literal
                                                 dom>_N)))
                          (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                    <*>_N
                                    <[GHC.LanguageExtensions.Type.Extension]>_R
                                    <Control.Monad.Trans.State.Lazy.StateT
                                       ExtMap.ExtMap GhcMonad.Ghc>_R
                                    <Language.Haskell.Tools.AST.ElementTypes.Literal dom>_N))) -}
da77889890fbe52e81f6278b7ffbc39c
  traverseLiteral1 ::
    ExtMonad.ExtDomain dom =>
    Language.Haskell.Tools.AST.ElementTypes.Literal dom
    -> [GHC.LanguageExtensions.Type.Extension]
    -> ExtMap.ExtMap
    -> GhcMonad.Session
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          (Language.Haskell.Tools.AST.ElementTypes.Literal dom,
           ExtMap.ExtMap) #)
  {- Arity: 6, HasNoCafRefs,
     Strictness: <S(S(LLS(S)LLLLLLLLLL)L),1*U(1*U(A,A,1*U(1*U),A,A,A,A,A,A,A,A,A,A),A)><L,U><L,A><L,U><L,A><S,U>,
     Unfolding: InlineRule (6, True, False)
                (\ @ dom
                   ($d(%,%) :: ExtMonad.ExtDomain dom)
                   (eta :: Language.Haskell.Tools.AST.ElementTypes.Literal dom)
                   (eta1 :: [GHC.LanguageExtensions.Type.Extension])
                   (eta2 :: ExtMap.ExtMap)
                   (eta3 :: GhcMonad.Session)
                   (eta4 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Language.Haskell.Tools.AST.Ann.SemanticInfo'
                             dom Language.Haskell.Tools.AST.Ann.SameInfoDefaultCls)
                        @ Language.Haskell.Tools.AST.SemaInfoTypes.NoSemanticInfo
                        (Language.Haskell.Tools.AST.Ann.$p3Domain
                           @ dom
                           (GHC.Classes.$p1(%,%)
                              @ (Language.Haskell.Tools.AST.Ann.Domain dom)
                              @ (Language.Haskell.Tools.AST.SemaInfoClasses.HasNameInfo'
                                   (Language.Haskell.Tools.AST.Ann.SemanticInfo
                                      dom
                                      Language.Haskell.Tools.AST.Representation.Names.UQualifiedName))
                              $d(%,%)))
                          `cast`
                        (Data.Type.Equality.N:~[0]
                             <*>_N <Language.Haskell.Tools.AST.Ann.SemanticInfo'
                                      dom
                                      Language.Haskell.Tools.AST.Ann.SameInfoDefaultCls>_N <Language.Haskell.Tools.AST.SemaInfoTypes.NoSemanticInfo>_N) of cobox0 { DEFAULT ->
                 (# eta4, (eta, eta2) #) }) -}
b9d1593232c0f72abf4ee2609a9f58c1
  traverseLocalBind ::
    ExtMonad.CheckNode
      Language.Haskell.Tools.AST.ElementTypes.LocalBind
  {- Arity: 1,
     Strictness: <S(S(LLS(S)LLLLLLLLLL)L),U(U(U,U,U(U),U,U,U,U,U,U,U,U,U,U),U)> -}
6b45e6af5601f3e863f35a557cd29fa6
  traverseLocalBinds ::
    ExtMonad.CheckNode
      Language.Haskell.Tools.AST.ElementTypes.LocalBinds
  {- Arity: 1,
     Strictness: <S(S(LLS(S)LLLLLLLLLL)L),U(U(U,U,U(U),U,U,U,U,U,U,U,U,U,U),U)> -}
d434d73cfc0888dc1844286e9f2a3f20
  traverseMatch ::
    ExtMonad.CheckNode Language.Haskell.Tools.AST.ElementTypes.Match
  {- Arity: 1,
     Strictness: <S(S(LLS(S)LLLLLLLLLL)L),U(U(U,U,U(U),U,U,U,U,U,U,U,U,U,U),U)> -}
b0cd50404df2e68709d5c50296229d56
  traverseMatchLhs ::
    ExtMonad.CheckNode Language.Haskell.Tools.AST.ElementTypes.MatchLhs
  {- Arity: 1,
     Strictness: <S(S(LLS(S)LLLLLLLLLL)L),U(U(U,U,U(U),U,U,U,U,U,U,U,U,U,U),U)>,
     Unfolding: (\ @ dom ($d(%,%) :: ExtMonad.ExtDomain dom) ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Language.Haskell.Tools.AST.Ann.SemanticInfo'
                             dom Language.Haskell.Tools.AST.Ann.SameInfoDefaultCls)
                        @ Language.Haskell.Tools.AST.SemaInfoTypes.NoSemanticInfo
                        (Language.Haskell.Tools.AST.Ann.$p3Domain
                           @ dom
                           (GHC.Classes.$p1(%,%)
                              @ (Language.Haskell.Tools.AST.Ann.Domain dom)
                              @ (Language.Haskell.Tools.AST.SemaInfoClasses.HasNameInfo'
                                   (Language.Haskell.Tools.AST.Ann.SemanticInfo
                                      dom
                                      Language.Haskell.Tools.AST.Representation.Names.UQualifiedName))
                              $d(%,%)))
                          `cast`
                        (Data.Type.Equality.N:~[0]
                             <*>_N <Language.Haskell.Tools.AST.Ann.SemanticInfo'
                                      dom
                                      Language.Haskell.Tools.AST.Ann.SameInfoDefaultCls>_N <Language.Haskell.Tools.AST.SemaInfoTypes.NoSemanticInfo>_N) of cobox0 { DEFAULT ->
                 let {
                   f :: Language.Haskell.Tools.AST.Ann.Ann
                          Language.Haskell.Tools.AST.Representation.Binds.UMatchLhs
                          dom
                          Language.Haskell.Tools.AST.Ann.SrcTemplateStage
                        -> Control.Monad.Trans.Reader.ReaderT
                             [GHC.LanguageExtensions.Type.Extension]
                             (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc)
                             (Language.Haskell.Tools.AST.Ann.Ann
                                Language.Haskell.Tools.AST.Representation.Binds.UMatchLhs
                                dom
                                Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   = case TraverseAST.traverseMatchLhs10
                            @ dom of wild { Control.Reference.Representation.Reference ds1 ds2 ds3 ds4 ds5 ds6 ->
                     ds3
                       (TraverseAST.traverseQuasiQuote1 @ dom $d(%,%))
                         `cast`
                       (<Language.Haskell.Tools.AST.ElementTypes.Name dom>_R
                        ->_R Trans
                                 (<[GHC.LanguageExtensions.Type.Extension]>_R
                                  ->_R Trans
                                           (<ExtMap.ExtMap>_R
                                            ->_R Trans
                                                     (<GhcMonad.Session>_R
                                                      ->_R Sym (GHC.Types.N:IO[0]
                                                                    <(Language.Haskell.Tools.AST.ElementTypes.Name
                                                                        dom,
                                                                      ExtMap.ExtMap)>_R))
                                                     (Sym (GhcMonad.N:Ghc[0]
                                                               <(Language.Haskell.Tools.AST.ElementTypes.Name
                                                                   dom,
                                                                 ExtMap.ExtMap)>_R)))
                                           (Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                                     <ExtMap.ExtMap>_N
                                                     <GhcMonad.Ghc>_R
                                                     <Language.Haskell.Tools.AST.ElementTypes.Name
                                                        dom>_N)))
                                 (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                           <*>_N
                                           <[GHC.LanguageExtensions.Type.Extension]>_R
                                           <Control.Monad.Trans.State.Lazy.StateT
                                              ExtMap.ExtMap GhcMonad.Ghc>_R
                                           <Language.Haskell.Tools.AST.ElementTypes.Name dom>_N))) }
                 } in
                 let {
                   f1 :: Language.Haskell.Tools.AST.Ann.Ann
                           Language.Haskell.Tools.AST.Representation.Binds.UMatchLhs
                           dom
                           Language.Haskell.Tools.AST.Ann.SrcTemplateStage
                         -> Control.Monad.Trans.Reader.ReaderT
                              [GHC.LanguageExtensions.Type.Extension]
                              (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc)
                              (Language.Haskell.Tools.AST.Ann.Ann
                                 Language.Haskell.Tools.AST.Representation.Binds.UMatchLhs
                                 dom
                                 Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   = case TraverseAST.traverseMatchLhs9
                            @ dom of wild { Control.Reference.Representation.Reference ds1 ds2 ds3 ds4 ds5 ds6 ->
                     ds3
                       (TraverseAST.traverseMatchLhs8 @ dom $d(%,%))
                         `cast`
                       (<Language.Haskell.Tools.AST.ElementTypes.Operator dom>_R
                        ->_R Trans
                                 (<[GHC.LanguageExtensions.Type.Extension]>_R
                                  ->_R Trans
                                           (<ExtMap.ExtMap>_R
                                            ->_R Trans
                                                     (<GhcMonad.Session>_R
                                                      ->_R Sym (GHC.Types.N:IO[0]
                                                                    <(Language.Haskell.Tools.AST.ElementTypes.Operator
                                                                        dom,
                                                                      ExtMap.ExtMap)>_R))
                                                     (Sym (GhcMonad.N:Ghc[0]
                                                               <(Language.Haskell.Tools.AST.ElementTypes.Operator
                                                                   dom,
                                                                 ExtMap.ExtMap)>_R)))
                                           (Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                                     <ExtMap.ExtMap>_N
                                                     <GhcMonad.Ghc>_R
                                                     <Language.Haskell.Tools.AST.ElementTypes.Operator
                                                        dom>_N)))
                                 (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                           <*>_N
                                           <[GHC.LanguageExtensions.Type.Extension]>_R
                                           <Control.Monad.Trans.State.Lazy.StateT
                                              ExtMap.ExtMap GhcMonad.Ghc>_R
                                           <Language.Haskell.Tools.AST.ElementTypes.Operator
                                              dom>_N))) }
                 } in
                 let {
                   g :: Language.Haskell.Tools.AST.Ann.Ann
                          Language.Haskell.Tools.AST.Representation.Binds.UMatchLhs
                          dom
                          Language.Haskell.Tools.AST.Ann.SrcTemplateStage
                        -> Control.Monad.Trans.Reader.ReaderT
                             [GHC.LanguageExtensions.Type.Extension]
                             (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc)
                             (Language.Haskell.Tools.AST.Ann.Ann
                                Language.Haskell.Tools.AST.Representation.Binds.UMatchLhs
                                dom
                                Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   = case TraverseAST.traverseMatchLhs1
                            @ dom of wild { Control.Reference.Representation.Reference ds1 ds2 ds3 ds4 ds5 ds6 ->
                     ds3 (TraverseAST.traversePattern @ dom $d(%,%)) }
                 } in
                 \ (x :: Language.Haskell.Tools.AST.Ann.Ann
                           Language.Haskell.Tools.AST.Representation.Binds.UMatchLhs
                           dom
                           Language.Haskell.Tools.AST.Ann.SrcTemplateStage) ->
                 let {
                   m1 :: Control.Monad.Trans.Reader.ReaderT
                           [GHC.LanguageExtensions.Type.Extension]
                           (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc)
                           (Language.Haskell.Tools.AST.Ann.Ann
                              Language.Haskell.Tools.AST.Representation.Binds.UMatchLhs
                              dom
                              Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   = f x
                 } in
                 (\ (r1 :: [GHC.LanguageExtensions.Type.Extension]) ->
                  let {
                    m2 :: Control.Monad.Trans.State.Lazy.StateT
                            (Data.Map.Base.Map
                               (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                               [SrcLoc.SrcSpan])
                            GhcMonad.Ghc
                            (Language.Haskell.Tools.AST.Ann.Ann
                               Language.Haskell.Tools.AST.Representation.Binds.UMatchLhs
                               dom
                               Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                    = m1
                        `cast`
                      (Control.Monad.Trans.Reader.N:ReaderT[0]
                           <*>_N
                           <[GHC.LanguageExtensions.Type.Extension]>_R
                           <Control.Monad.Trans.State.Lazy.StateT
                              ExtMap.ExtMap GhcMonad.Ghc>_R
                           <Language.Haskell.Tools.AST.Ann.Ann
                              Language.Haskell.Tools.AST.Representation.Binds.UMatchLhs
                              dom
                              Language.Haskell.Tools.AST.Ann.SrcTemplateStage>_N)
                        r1
                  } in
                  (\ (s1 :: Data.Map.Base.Map
                              (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                              [SrcLoc.SrcSpan]) ->
                   let {
                     m :: GhcMonad.Ghc
                            (Language.Haskell.Tools.AST.Ann.Ann
                               Language.Haskell.Tools.AST.Representation.Binds.UMatchLhs
                               dom
                               Language.Haskell.Tools.AST.Ann.SrcTemplateStage,
                             Data.Map.Base.Map
                               (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                               [SrcLoc.SrcSpan])
                     = m2
                         `cast`
                       (Control.Monad.Trans.State.Lazy.N:StateT[0]
                            <Data.Map.Base.Map
                               (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                               [SrcLoc.SrcSpan]>_N
                            <GhcMonad.Ghc>_R
                            <Language.Haskell.Tools.AST.Ann.Ann
                               Language.Haskell.Tools.AST.Representation.Binds.UMatchLhs
                               dom
                               Language.Haskell.Tools.AST.Ann.SrcTemplateStage>_N)
                         s1
                   } in
                   (\ (s :: GhcMonad.Session)
                      (s2 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                    case (m `cast`
                          (GhcMonad.N:Ghc[0]
                               <(Language.Haskell.Tools.AST.Ann.Ann
                                   Language.Haskell.Tools.AST.Representation.Binds.UMatchLhs
                                   dom
                                   Language.Haskell.Tools.AST.Ann.SrcTemplateStage,
                                 Data.Map.Base.Map
                                   (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                                   [SrcLoc.SrcSpan])>_R)
                            s)
                           `cast`
                         (GHC.Types.N:IO[0]
                              <(Language.Haskell.Tools.AST.Ann.Ann
                                  Language.Haskell.Tools.AST.Representation.Binds.UMatchLhs
                                  dom
                                  Language.Haskell.Tools.AST.Ann.SrcTemplateStage,
                                Data.Map.Base.Map
                                  (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                                  [SrcLoc.SrcSpan])>_R)
                           s2 of ds1 { (#,#) ipv ipv1 ->
                    case ((((f1 (case ipv1 of wild { (,) a1 s' -> a1 }))
                              `cast`
                            (Control.Monad.Trans.Reader.N:ReaderT[0]
                                 <*>_N
                                 <[GHC.LanguageExtensions.Type.Extension]>_R
                                 <Control.Monad.Trans.State.Lazy.StateT
                                    ExtMap.ExtMap GhcMonad.Ghc>_R
                                 <Language.Haskell.Tools.AST.Ann.Ann
                                    Language.Haskell.Tools.AST.Representation.Binds.UMatchLhs
                                    dom
                                    Language.Haskell.Tools.AST.Ann.SrcTemplateStage>_N)
                              r1)
                             `cast`
                           (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                <Data.Map.Base.Map
                                   (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                                   [SrcLoc.SrcSpan]>_N
                                <GhcMonad.Ghc>_R
                                <Language.Haskell.Tools.AST.Ann.Ann
                                   Language.Haskell.Tools.AST.Representation.Binds.UMatchLhs
                                   dom
                                   Language.Haskell.Tools.AST.Ann.SrcTemplateStage>_N)
                             (case ipv1 of wild { (,) a1 s' -> s' }))
                            `cast`
                          (GhcMonad.N:Ghc[0]
                               <(Language.Haskell.Tools.AST.Ann.Ann
                                   Language.Haskell.Tools.AST.Representation.Binds.UMatchLhs
                                   dom
                                   Language.Haskell.Tools.AST.Ann.SrcTemplateStage,
                                 Data.Map.Base.Map
                                   (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                                   [SrcLoc.SrcSpan])>_R)
                            s)
                           `cast`
                         (GHC.Types.N:IO[0]
                              <(Language.Haskell.Tools.AST.Ann.Ann
                                  Language.Haskell.Tools.AST.Representation.Binds.UMatchLhs
                                  dom
                                  Language.Haskell.Tools.AST.Ann.SrcTemplateStage,
                                Data.Map.Base.Map
                                  (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                                  [SrcLoc.SrcSpan])>_R)
                           ipv of ds2 { (#,#) ipv2 ipv3 ->
                    ((((g (case ipv3 of wild { (,) a1 s' -> a1 }))
                         `cast`
                       (Control.Monad.Trans.Reader.N:ReaderT[0]
                            <*>_N
                            <[GHC.LanguageExtensions.Type.Extension]>_R
                            <Control.Monad.Trans.State.Lazy.StateT
                               ExtMap.ExtMap GhcMonad.Ghc>_R
                            <Language.Haskell.Tools.AST.Ann.Ann
                               Language.Haskell.Tools.AST.Representation.Binds.UMatchLhs
                               dom
                               Language.Haskell.Tools.AST.Ann.SrcTemplateStage>_N)
                         r1)
                        `cast`
                      (Control.Monad.Trans.State.Lazy.N:StateT[0]
                           <Data.Map.Base.Map
                              (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                              [SrcLoc.SrcSpan]>_N
                           <GhcMonad.Ghc>_R
                           <Language.Haskell.Tools.AST.Ann.Ann
                              Language.Haskell.Tools.AST.Representation.Binds.UMatchLhs
                              dom
                              Language.Haskell.Tools.AST.Ann.SrcTemplateStage>_N)
                        (case ipv3 of wild { (,) a1 s' -> s' }))
                       `cast`
                     (GhcMonad.N:Ghc[0]
                          <(Language.Haskell.Tools.AST.Ann.Ann
                              Language.Haskell.Tools.AST.Representation.Binds.UMatchLhs
                              dom
                              Language.Haskell.Tools.AST.Ann.SrcTemplateStage,
                            Data.Map.Base.Map
                              (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                              [SrcLoc.SrcSpan])>_R)
                       s)
                      `cast`
                    (GHC.Types.N:IO[0]
                         <(Language.Haskell.Tools.AST.Ann.Ann
                             Language.Haskell.Tools.AST.Representation.Binds.UMatchLhs
                             dom
                             Language.Haskell.Tools.AST.Ann.SrcTemplateStage,
                           Data.Map.Base.Map
                             (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                             [SrcLoc.SrcSpan])>_R)
                      ipv2 } })
                     `cast`
                   (Trans
                        (<GhcMonad.Session>_R
                         ->_R Sym (GHC.Types.N:IO[0]
                                       <(Language.Haskell.Tools.AST.Ann.Ann
                                           Language.Haskell.Tools.AST.Representation.Binds.UMatchLhs
                                           dom
                                           Language.Haskell.Tools.AST.Ann.SrcTemplateStage,
                                         Data.Map.Base.Map
                                           (ExtMap.LogicalRelation
                                              GHC.LanguageExtensions.Type.Extension)
                                           [SrcLoc.SrcSpan])>_R))
                        (Sym (GhcMonad.N:Ghc[0]
                                  <(Language.Haskell.Tools.AST.Ann.Ann
                                      Language.Haskell.Tools.AST.Representation.Binds.UMatchLhs
                                      dom
                                      Language.Haskell.Tools.AST.Ann.SrcTemplateStage,
                                    Data.Map.Base.Map
                                      (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                                      [SrcLoc.SrcSpan])>_R))))
                    `cast`
                  (Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                            <Data.Map.Base.Map
                               (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                               [SrcLoc.SrcSpan]>_N
                            <GhcMonad.Ghc>_R
                            <Language.Haskell.Tools.AST.Ann.Ann
                               Language.Haskell.Tools.AST.Representation.Binds.UMatchLhs
                               dom
                               Language.Haskell.Tools.AST.Ann.SrcTemplateStage>_N)))
                   `cast`
                 (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                           <*>_N
                           <[GHC.LanguageExtensions.Type.Extension]>_R
                           <Control.Monad.Trans.State.Lazy.StateT
                              ExtMap.ExtMap GhcMonad.Ghc>_R
                           <Language.Haskell.Tools.AST.Ann.Ann
                              Language.Haskell.Tools.AST.Representation.Binds.UMatchLhs
                              dom
                              Language.Haskell.Tools.AST.Ann.SrcTemplateStage>_N)) }) -}
b19671419cff2c11a37833bd46e8bb54
  traverseMatchLhs1 ::
    Control.Reference.Representation.Reference
      (Control.Monad.Trans.Reader.ReaderT
         [GHC.LanguageExtensions.Type.Extension]
         (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc))
      Control.Reference.Representation.MU
      Control.Reference.Representation.MU
      Control.Reference.Representation.MU
      (Language.Haskell.Tools.AST.Ann.Ann
         Language.Haskell.Tools.AST.Representation.Binds.UMatchLhs
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
      (Language.Haskell.Tools.AST.Ann.Ann
         Language.Haskell.Tools.AST.Representation.Binds.UMatchLhs
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
      (Language.Haskell.Tools.AST.Ann.Ann
         Language.Haskell.Tools.AST.Representation.Patterns.UPattern
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
      (Language.Haskell.Tools.AST.Ann.Ann
         Language.Haskell.Tools.AST.Representation.Patterns.UPattern
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
  {- Unfolding: (\ @ dom ->
                 case Control.Reference.Combinators.$w&+&
                        @ (Control.Monad.Trans.Reader.ReaderT
                             [GHC.LanguageExtensions.Type.Extension]
                             (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc))
                        @ Control.Reference.Representation.MU
                        @ Control.Reference.Representation.MU
                        @ Control.Reference.Representation.MU
                        @ (Language.Haskell.Tools.AST.Ann.Ann
                             Language.Haskell.Tools.AST.Representation.Binds.UMatchLhs
                             dom
                             Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                        @ (Language.Haskell.Tools.AST.Ann.Ann
                             Language.Haskell.Tools.AST.Representation.Patterns.UPattern
                             dom
                             Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                        TraverseAST.$s$fRefMonadswr
                        Control.Reference.Predefined.Containers.Tree.$s$fRefMonadswr1
                        Data.Proxy.$fMonadPlusProxy
                        Data.Proxy.$fMonadPlusProxy
                        (TraverseAST.traverseMatchLhs3 @ dom)
                        (TraverseAST.traverseMatchLhs2
                           @ dom) of ww { (#,,,,,#) ww1 ww2 ww3 ww4 ww5 ww6 ->
                 Control.Reference.Representation.Reference
                   @ (Control.Monad.Trans.Reader.ReaderT
                        [GHC.LanguageExtensions.Type.Extension]
                        (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc))
                   @ Control.Reference.Representation.MU
                   @ Control.Reference.Representation.MU
                   @ Control.Reference.Representation.MU
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        Language.Haskell.Tools.AST.Representation.Binds.UMatchLhs
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        Language.Haskell.Tools.AST.Representation.Binds.UMatchLhs
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        Language.Haskell.Tools.AST.Representation.Patterns.UPattern
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        Language.Haskell.Tools.AST.Representation.Patterns.UPattern
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   ww1
                   ww2
                   ww3
                   ww4
                   ww5
                   ww6 }) -}
1359dcb4f89a1ef6e3addd60e509ed65
  traverseMatchLhs10 ::
    Control.Reference.Representation.Reference
      (Control.Monad.Trans.Reader.ReaderT
         [GHC.LanguageExtensions.Type.Extension]
         (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc))
      Control.Reference.Representation.MU
      Control.Reference.Representation.MU
      Control.Reference.Representation.MU
      (Language.Haskell.Tools.AST.Ann.Ann
         Language.Haskell.Tools.AST.Representation.Binds.UMatchLhs
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
      (Language.Haskell.Tools.AST.Ann.Ann
         Language.Haskell.Tools.AST.Representation.Binds.UMatchLhs
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
      (Language.Haskell.Tools.AST.Ann.Ann
         Language.Haskell.Tools.AST.Representation.Names.UName
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
      (Language.Haskell.Tools.AST.Ann.Ann
         Language.Haskell.Tools.AST.Representation.Names.UName
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
  {- Unfolding: (\ @ dom ->
                 case Language.Haskell.Tools.AST.References.$wmatchLhsName
                        @ dom
                        @ Language.Haskell.Tools.AST.Ann.SrcTemplateStage
                        @ (Control.Monad.Trans.Reader.ReaderT
                             [GHC.LanguageExtensions.Type.Extension]
                             (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc))
                        @ Control.Reference.Representation.MU
                        (TraverseAST.$s$fMonadReaderT
                           @ [GHC.LanguageExtensions.Type.Extension])
                        Data.Proxy.$fMonadPlusProxy
                        TraverseAST.$sannJust1
                          `cast`
                        (Sym (Control.Instances.Morph.N:Morph[0]
                                  <GHC.Base.Maybe>_N
                                  <Data.Proxy.Proxy>_N)) of ww { (#,,,,,#) ww1 ww2 ww3 ww4 ww5 ww6 ->
                 Control.Reference.Representation.Reference
                   @ (Control.Monad.Trans.Reader.ReaderT
                        [GHC.LanguageExtensions.Type.Extension]
                        (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc))
                   @ Control.Reference.Representation.MU
                   @ Control.Reference.Representation.MU
                   @ Control.Reference.Representation.MU
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        Language.Haskell.Tools.AST.Representation.Binds.UMatchLhs
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        Language.Haskell.Tools.AST.Representation.Binds.UMatchLhs
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        Language.Haskell.Tools.AST.Representation.Names.UName
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        Language.Haskell.Tools.AST.Representation.Names.UName
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   ww1
                   ww2
                   ww3
                   ww4
                   ww5
                   ww6 }) -}
5fbb73ddcfa87cf88e3245980238fedf
  traverseMatchLhs2 ::
    Control.Reference.Representation.Reference
      (Control.Monad.Trans.Reader.ReaderT
         [GHC.LanguageExtensions.Type.Extension]
         (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc))
      Control.Reference.Representation.MU
      Control.Reference.Representation.MU
      Control.Reference.Representation.MU
      (Language.Haskell.Tools.AST.Ann.Ann
         Language.Haskell.Tools.AST.Representation.Binds.UMatchLhs
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
      (Language.Haskell.Tools.AST.Ann.Ann
         Language.Haskell.Tools.AST.Representation.Binds.UMatchLhs
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
      (Language.Haskell.Tools.AST.Ann.Ann
         Language.Haskell.Tools.AST.Representation.Patterns.UPattern
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
      (Language.Haskell.Tools.AST.Ann.Ann
         Language.Haskell.Tools.AST.Representation.Patterns.UPattern
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
  {- Unfolding: (\ @ dom ->
                 case Language.Haskell.Tools.AST.References.$wmatchLhsRhs
                        @ dom
                        @ Language.Haskell.Tools.AST.Ann.SrcTemplateStage
                        @ (Control.Monad.Trans.Reader.ReaderT
                             [GHC.LanguageExtensions.Type.Extension]
                             (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc))
                        @ Control.Reference.Representation.MU
                        (TraverseAST.$s$fMonadReaderT
                           @ [GHC.LanguageExtensions.Type.Extension])
                        Data.Proxy.$fMonadPlusProxy
                        TraverseAST.$sannJust1
                          `cast`
                        (Sym (Control.Instances.Morph.N:Morph[0]
                                  <GHC.Base.Maybe>_N
                                  <Control.Reference.Representation.MU>_N)) of ww { (#,,,,,#) ww1 ww2 ww3 ww4 ww5 ww6 ->
                 Control.Reference.Representation.Reference
                   @ (Control.Monad.Trans.Reader.ReaderT
                        [GHC.LanguageExtensions.Type.Extension]
                        (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc))
                   @ Control.Reference.Representation.MU
                   @ Control.Reference.Representation.MU
                   @ Control.Reference.Representation.MU
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        Language.Haskell.Tools.AST.Representation.Binds.UMatchLhs
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        Language.Haskell.Tools.AST.Representation.Binds.UMatchLhs
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        Language.Haskell.Tools.AST.Representation.Patterns.UPattern
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        Language.Haskell.Tools.AST.Representation.Patterns.UPattern
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   ww1
                   ww2
                   ww3
                   ww4
                   ww5
                   ww6 }) -}
c1b8482764904902e837492a609883be
  traverseMatchLhs3 ::
    Control.Reference.Representation.Reference
      (Control.Monad.Trans.Reader.ReaderT
         [GHC.LanguageExtensions.Type.Extension]
         (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc))
      Control.Reference.Representation.MU
      Control.Reference.Representation.MU
      Control.Reference.Representation.MU
      (Language.Haskell.Tools.AST.Ann.Ann
         Language.Haskell.Tools.AST.Representation.Binds.UMatchLhs
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
      (Language.Haskell.Tools.AST.Ann.Ann
         Language.Haskell.Tools.AST.Representation.Binds.UMatchLhs
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
      (Language.Haskell.Tools.AST.Ann.Ann
         Language.Haskell.Tools.AST.Representation.Patterns.UPattern
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
      (Language.Haskell.Tools.AST.Ann.Ann
         Language.Haskell.Tools.AST.Representation.Patterns.UPattern
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
  {- Unfolding: (\ @ dom ->
                 case Control.Reference.Combinators.$w&+&
                        @ (Control.Monad.Trans.Reader.ReaderT
                             [GHC.LanguageExtensions.Type.Extension]
                             (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc))
                        @ Control.Reference.Representation.MU
                        @ Control.Reference.Representation.MU
                        @ Control.Reference.Representation.MU
                        @ (Language.Haskell.Tools.AST.Ann.Ann
                             Language.Haskell.Tools.AST.Representation.Binds.UMatchLhs
                             dom
                             Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                        @ (Language.Haskell.Tools.AST.Ann.Ann
                             Language.Haskell.Tools.AST.Representation.Patterns.UPattern
                             dom
                             Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                        TraverseAST.$s$fRefMonadswr
                        Control.Reference.Predefined.Containers.Tree.$s$fRefMonadswr1
                        Data.Proxy.$fMonadPlusProxy
                        Data.Proxy.$fMonadPlusProxy
                        (TraverseAST.traverseMatchLhs5 @ dom)
                        (TraverseAST.traverseMatchLhs4
                           @ dom) of ww { (#,,,,,#) ww1 ww2 ww3 ww4 ww5 ww6 ->
                 Control.Reference.Representation.Reference
                   @ (Control.Monad.Trans.Reader.ReaderT
                        [GHC.LanguageExtensions.Type.Extension]
                        (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc))
                   @ Control.Reference.Representation.MU
                   @ Control.Reference.Representation.MU
                   @ Control.Reference.Representation.MU
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        Language.Haskell.Tools.AST.Representation.Binds.UMatchLhs
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        Language.Haskell.Tools.AST.Representation.Binds.UMatchLhs
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        Language.Haskell.Tools.AST.Representation.Patterns.UPattern
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        Language.Haskell.Tools.AST.Representation.Patterns.UPattern
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   ww1
                   ww2
                   ww3
                   ww4
                   ww5
                   ww6 }) -}
04c71fdfb5ea82f2636fc9a40e9696b6
  traverseMatchLhs4 ::
    Control.Reference.Representation.Reference
      (Control.Monad.Trans.Reader.ReaderT
         [GHC.LanguageExtensions.Type.Extension]
         (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc))
      Control.Reference.Representation.MU
      Control.Reference.Representation.MU
      Control.Reference.Representation.MU
      (Language.Haskell.Tools.AST.Ann.Ann
         Language.Haskell.Tools.AST.Representation.Binds.UMatchLhs
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
      (Language.Haskell.Tools.AST.Ann.Ann
         Language.Haskell.Tools.AST.Representation.Binds.UMatchLhs
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
      (Language.Haskell.Tools.AST.Ann.Ann
         Language.Haskell.Tools.AST.Representation.Patterns.UPattern
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
      (Language.Haskell.Tools.AST.Ann.Ann
         Language.Haskell.Tools.AST.Representation.Patterns.UPattern
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
  {- Unfolding: (\ @ dom ->
                 case Language.Haskell.Tools.AST.References.$wmatchLhsLhs
                        @ dom
                        @ Language.Haskell.Tools.AST.Ann.SrcTemplateStage
                        @ (Control.Monad.Trans.Reader.ReaderT
                             [GHC.LanguageExtensions.Type.Extension]
                             (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc))
                        @ Control.Reference.Representation.MU
                        (TraverseAST.$s$fMonadReaderT
                           @ [GHC.LanguageExtensions.Type.Extension])
                        Data.Proxy.$fMonadPlusProxy
                        TraverseAST.$sannJust1
                          `cast`
                        (Sym (Control.Instances.Morph.N:Morph[0]
                                  <GHC.Base.Maybe>_N
                                  <Control.Reference.Representation.MU>_N)) of ww { (#,,,,,#) ww1 ww2 ww3 ww4 ww5 ww6 ->
                 Control.Reference.Representation.Reference
                   @ (Control.Monad.Trans.Reader.ReaderT
                        [GHC.LanguageExtensions.Type.Extension]
                        (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc))
                   @ Control.Reference.Representation.MU
                   @ Control.Reference.Representation.MU
                   @ Control.Reference.Representation.MU
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        Language.Haskell.Tools.AST.Representation.Binds.UMatchLhs
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        Language.Haskell.Tools.AST.Representation.Binds.UMatchLhs
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        Language.Haskell.Tools.AST.Representation.Patterns.UPattern
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        Language.Haskell.Tools.AST.Representation.Patterns.UPattern
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   ww1
                   ww2
                   ww3
                   ww4
                   ww5
                   ww6 }) -}
d17b6d7d19a9fde35514081a9ba3832c
  traverseMatchLhs5 ::
    Control.Reference.Representation.Reference
      (Control.Monad.Trans.Reader.ReaderT
         [GHC.LanguageExtensions.Type.Extension]
         (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc))
      Control.Reference.Representation.MU
      Control.Reference.Representation.MU
      Control.Reference.Representation.MU
      (Language.Haskell.Tools.AST.Ann.Ann
         Language.Haskell.Tools.AST.Representation.Binds.UMatchLhs
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
      (Language.Haskell.Tools.AST.Ann.Ann
         Language.Haskell.Tools.AST.Representation.Binds.UMatchLhs
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
      (Language.Haskell.Tools.AST.Ann.Ann
         Language.Haskell.Tools.AST.Representation.Patterns.UPattern
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
      (Language.Haskell.Tools.AST.Ann.Ann
         Language.Haskell.Tools.AST.Representation.Patterns.UPattern
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
  {- Unfolding: (\ @ dom ->
                 case Control.Reference.Combinators.$w&
                        @ (Control.Monad.Trans.Reader.ReaderT
                             [GHC.LanguageExtensions.Type.Extension]
                             (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc))
                        @ Control.Reference.Representation.MU
                        @ Control.Reference.Representation.MU
                        @ Control.Reference.Representation.MU
                        @ (Language.Haskell.Tools.AST.Ann.Ann
                             Language.Haskell.Tools.AST.Representation.Binds.UMatchLhs
                             dom
                             Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                        @ (Language.Haskell.Tools.AST.Ann.Ann
                             Language.Haskell.Tools.AST.Representation.Binds.UMatchLhs
                             dom
                             Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                        @ (Language.Haskell.Tools.AST.Ann.AnnListG
                             Language.Haskell.Tools.AST.Representation.Patterns.UPattern
                             dom
                             Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                        @ (Language.Haskell.Tools.AST.Ann.AnnListG
                             Language.Haskell.Tools.AST.Representation.Patterns.UPattern
                             dom
                             Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                        @ (Language.Haskell.Tools.AST.Ann.Ann
                             Language.Haskell.Tools.AST.Representation.Patterns.UPattern
                             dom
                             Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                        @ (Language.Haskell.Tools.AST.Ann.Ann
                             Language.Haskell.Tools.AST.Representation.Patterns.UPattern
                             dom
                             Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                        (TraverseAST.traverseMatchLhs7 @ dom)
                        (TraverseAST.traverseMatchLhs6
                           @ dom) of ww { (#,,,,,#) ww1 ww2 ww3 ww4 ww5 ww6 ->
                 Control.Reference.Representation.Reference
                   @ (Control.Monad.Trans.Reader.ReaderT
                        [GHC.LanguageExtensions.Type.Extension]
                        (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc))
                   @ Control.Reference.Representation.MU
                   @ Control.Reference.Representation.MU
                   @ Control.Reference.Representation.MU
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        Language.Haskell.Tools.AST.Representation.Binds.UMatchLhs
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        Language.Haskell.Tools.AST.Representation.Binds.UMatchLhs
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        Language.Haskell.Tools.AST.Representation.Patterns.UPattern
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        Language.Haskell.Tools.AST.Representation.Patterns.UPattern
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   ww1
                   ww2
                   ww3
                   ww4
                   ww5
                   ww6 }) -}
5b5c0814075c3b9429ba277771990f54
  traverseMatchLhs6 ::
    Control.Reference.Representation.Reference
      (Control.Monad.Trans.Reader.ReaderT
         [GHC.LanguageExtensions.Type.Extension]
         (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc))
      Control.Reference.Representation.MU
      Control.Reference.Representation.MU
      Control.Reference.Representation.MU
      (Language.Haskell.Tools.AST.Ann.AnnListG
         Language.Haskell.Tools.AST.Representation.Patterns.UPattern
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
      (Language.Haskell.Tools.AST.Ann.AnnListG
         Language.Haskell.Tools.AST.Representation.Patterns.UPattern
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
      (Language.Haskell.Tools.AST.Ann.Ann
         Language.Haskell.Tools.AST.Representation.Patterns.UPattern
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
      (Language.Haskell.Tools.AST.Ann.Ann
         Language.Haskell.Tools.AST.Representation.Patterns.UPattern
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
  {- Unfolding: (\ @ dom ->
                 case Language.Haskell.Tools.AST.Ann.$wannList
                        @ Language.Haskell.Tools.AST.Representation.Patterns.UPattern
                        @ dom
                        @ Language.Haskell.Tools.AST.Ann.SrcTemplateStage
                        @ (Control.Monad.Trans.Reader.ReaderT
                             [GHC.LanguageExtensions.Type.Extension]
                             (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc))
                        @ Control.Reference.Representation.MU
                        TraverseAST.$s$fRefMonadswr
                        TraverseAST.$sannList1
                          `cast`
                        (Sym (Control.Instances.Morph.N:Morph[0]
                                  <[]>_N
                                  <Control.Reference.Representation.MU>_N)) of ww { (#,,,,,#) ww1 ww2 ww3 ww4 ww5 ww6 ->
                 Control.Reference.Representation.Reference
                   @ (Control.Monad.Trans.Reader.ReaderT
                        [GHC.LanguageExtensions.Type.Extension]
                        (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc))
                   @ Control.Reference.Representation.MU
                   @ Control.Reference.Representation.MU
                   @ Control.Reference.Representation.MU
                   @ (Language.Haskell.Tools.AST.Ann.AnnListG
                        Language.Haskell.Tools.AST.Representation.Patterns.UPattern
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   @ (Language.Haskell.Tools.AST.Ann.AnnListG
                        Language.Haskell.Tools.AST.Representation.Patterns.UPattern
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        Language.Haskell.Tools.AST.Representation.Patterns.UPattern
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        Language.Haskell.Tools.AST.Representation.Patterns.UPattern
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   ww1
                   ww2
                   ww3
                   ww4
                   ww5
                   ww6 }) -}
476f627a18a0b30560663deaec331bd8
  traverseMatchLhs7 ::
    Control.Reference.Representation.Reference
      (Control.Monad.Trans.Reader.ReaderT
         [GHC.LanguageExtensions.Type.Extension]
         (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc))
      Control.Reference.Representation.MU
      Control.Reference.Representation.MU
      Control.Reference.Representation.MU
      (Language.Haskell.Tools.AST.Ann.Ann
         Language.Haskell.Tools.AST.Representation.Binds.UMatchLhs
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
      (Language.Haskell.Tools.AST.Ann.Ann
         Language.Haskell.Tools.AST.Representation.Binds.UMatchLhs
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
      (Language.Haskell.Tools.AST.Ann.AnnListG
         Language.Haskell.Tools.AST.Representation.Patterns.UPattern
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
      (Language.Haskell.Tools.AST.Ann.AnnListG
         Language.Haskell.Tools.AST.Representation.Patterns.UPattern
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
  {- Unfolding: (\ @ dom ->
                 case Language.Haskell.Tools.AST.References.$wmatchLhsArgs
                        @ dom
                        @ Language.Haskell.Tools.AST.Ann.SrcTemplateStage
                        @ (Control.Monad.Trans.Reader.ReaderT
                             [GHC.LanguageExtensions.Type.Extension]
                             (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc))
                        @ Control.Reference.Representation.MU
                        TraverseAST.$s$fRefMonadswr of ww { (#,,,,,#) ww1 ww2 ww3 ww4 ww5 ww6 ->
                 Control.Reference.Representation.Reference
                   @ (Control.Monad.Trans.Reader.ReaderT
                        [GHC.LanguageExtensions.Type.Extension]
                        (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc))
                   @ Control.Reference.Representation.MU
                   @ Control.Reference.Representation.MU
                   @ Control.Reference.Representation.MU
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        Language.Haskell.Tools.AST.Representation.Binds.UMatchLhs
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        Language.Haskell.Tools.AST.Representation.Binds.UMatchLhs
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   @ (Language.Haskell.Tools.AST.Ann.AnnListG
                        Language.Haskell.Tools.AST.Representation.Patterns.UPattern
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   @ (Language.Haskell.Tools.AST.Ann.AnnListG
                        Language.Haskell.Tools.AST.Representation.Patterns.UPattern
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   ww1
                   ww2
                   ww3
                   ww4
                   ww5
                   ww6 }) -}
f1bf2e7c05586142aa4fc5a6436ced61
  traverseMatchLhs8 ::
    ExtMonad.ExtDomain dom =>
    Language.Haskell.Tools.AST.ElementTypes.Operator dom
    -> [GHC.LanguageExtensions.Type.Extension]
    -> ExtMap.ExtMap
    -> GhcMonad.Session
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          (Language.Haskell.Tools.AST.ElementTypes.Operator dom,
           ExtMap.ExtMap) #)
  {- Arity: 6, HasNoCafRefs,
     Strictness: <S(S(LLS(S)LLLLLLLLLL)L),1*U(1*U(A,A,1*U(1*U),A,A,A,A,A,A,A,A,A,A),A)><L,U><L,A><L,U><L,A><S,U>,
     Unfolding: InlineRule (6, True, False)
                (\ @ dom
                   ($d(%,%) :: ExtMonad.ExtDomain dom)
                   (eta :: Language.Haskell.Tools.AST.ElementTypes.Operator dom)
                   (eta1 :: [GHC.LanguageExtensions.Type.Extension])
                   (eta2 :: ExtMap.ExtMap)
                   (eta3 :: GhcMonad.Session)
                   (eta4 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Language.Haskell.Tools.AST.Ann.SemanticInfo'
                             dom Language.Haskell.Tools.AST.Ann.SameInfoDefaultCls)
                        @ Language.Haskell.Tools.AST.SemaInfoTypes.NoSemanticInfo
                        (Language.Haskell.Tools.AST.Ann.$p3Domain
                           @ dom
                           (GHC.Classes.$p1(%,%)
                              @ (Language.Haskell.Tools.AST.Ann.Domain dom)
                              @ (Language.Haskell.Tools.AST.SemaInfoClasses.HasNameInfo'
                                   (Language.Haskell.Tools.AST.Ann.SemanticInfo
                                      dom
                                      Language.Haskell.Tools.AST.Representation.Names.UQualifiedName))
                              $d(%,%)))
                          `cast`
                        (Data.Type.Equality.N:~[0]
                             <*>_N <Language.Haskell.Tools.AST.Ann.SemanticInfo'
                                      dom
                                      Language.Haskell.Tools.AST.Ann.SameInfoDefaultCls>_N <Language.Haskell.Tools.AST.SemaInfoTypes.NoSemanticInfo>_N) of cobox0 { DEFAULT ->
                 (# eta4, (eta, eta2) #) }) -}
beae0fc0270e7db920ec7b1753815fc9
  traverseMatchLhs9 ::
    Control.Reference.Representation.Reference
      (Control.Monad.Trans.Reader.ReaderT
         [GHC.LanguageExtensions.Type.Extension]
         (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc))
      Control.Reference.Representation.MU
      Control.Reference.Representation.MU
      Control.Reference.Representation.MU
      (Language.Haskell.Tools.AST.Ann.Ann
         Language.Haskell.Tools.AST.Representation.Binds.UMatchLhs
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
      (Language.Haskell.Tools.AST.Ann.Ann
         Language.Haskell.Tools.AST.Representation.Binds.UMatchLhs
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
      (Language.Haskell.Tools.AST.Ann.Ann
         Language.Haskell.Tools.AST.Representation.Names.UOperator
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
      (Language.Haskell.Tools.AST.Ann.Ann
         Language.Haskell.Tools.AST.Representation.Names.UOperator
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
  {- Unfolding: (\ @ dom ->
                 case Language.Haskell.Tools.AST.References.$wmatchLhsOperator
                        @ dom
                        @ Language.Haskell.Tools.AST.Ann.SrcTemplateStage
                        @ (Control.Monad.Trans.Reader.ReaderT
                             [GHC.LanguageExtensions.Type.Extension]
                             (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc))
                        @ Control.Reference.Representation.MU
                        (TraverseAST.$s$fMonadReaderT
                           @ [GHC.LanguageExtensions.Type.Extension])
                        Data.Proxy.$fMonadPlusProxy
                        TraverseAST.$sannJust1
                          `cast`
                        (Sym (Control.Instances.Morph.N:Morph[0]
                                  <GHC.Base.Maybe>_N
                                  <Data.Proxy.Proxy>_N)) of ww { (#,,,,,#) ww1 ww2 ww3 ww4 ww5 ww6 ->
                 Control.Reference.Representation.Reference
                   @ (Control.Monad.Trans.Reader.ReaderT
                        [GHC.LanguageExtensions.Type.Extension]
                        (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc))
                   @ Control.Reference.Representation.MU
                   @ Control.Reference.Representation.MU
                   @ Control.Reference.Representation.MU
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        Language.Haskell.Tools.AST.Representation.Binds.UMatchLhs
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        Language.Haskell.Tools.AST.Representation.Binds.UMatchLhs
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        Language.Haskell.Tools.AST.Representation.Names.UOperator
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        Language.Haskell.Tools.AST.Representation.Names.UOperator
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   ww1
                   ww2
                   ww3
                   ww4
                   ww5
                   ww6 }) -}
27db9dc597711ac3bc8a2ff8af97765a
  traverseModule ::
    ExtMonad.CheckNode
      Language.Haskell.Tools.Refactor.RefactorBase.UnnamedModule
  {- Arity: 1,
     Strictness: <S(S(LLS(S)LLLLLLLLLL)L),U(U(U,U,U(U),U,U,U,U,U,U,U,U,U,U),U)>,
     Unfolding: (\ @ dom ($d(%,%) :: ExtMonad.ExtDomain dom) ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Language.Haskell.Tools.AST.Ann.SemanticInfo'
                             dom Language.Haskell.Tools.AST.Ann.SameInfoDefaultCls)
                        @ Language.Haskell.Tools.AST.SemaInfoTypes.NoSemanticInfo
                        (Language.Haskell.Tools.AST.Ann.$p3Domain
                           @ dom
                           (GHC.Classes.$p1(%,%)
                              @ (Language.Haskell.Tools.AST.Ann.Domain dom)
                              @ (Language.Haskell.Tools.AST.SemaInfoClasses.HasNameInfo'
                                   (Language.Haskell.Tools.AST.Ann.SemanticInfo
                                      dom
                                      Language.Haskell.Tools.AST.Representation.Names.UQualifiedName))
                              $d(%,%)))
                          `cast`
                        (Data.Type.Equality.N:~[0]
                             <*>_N <Language.Haskell.Tools.AST.Ann.SemanticInfo'
                                      dom
                                      Language.Haskell.Tools.AST.Ann.SameInfoDefaultCls>_N <Language.Haskell.Tools.AST.SemaInfoTypes.NoSemanticInfo>_N) of cobox0 { DEFAULT ->
                 case TraverseAST.traverseModule1
                        @ dom of wild { Control.Reference.Representation.Reference ds1 ds2 ds3 ds4 ds5 ds6 ->
                 ds3 (TraverseAST.traverseDecl @ dom $d(%,%)) } }) -}
2329a5f7dedc5d894d70993ed8c808ba
  traverseModule1 ::
    Control.Reference.Representation.Reference
      (Control.Monad.Trans.Reader.ReaderT
         [GHC.LanguageExtensions.Type.Extension]
         (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc))
      Control.Reference.Representation.MU
      Control.Reference.Representation.MU
      Control.Reference.Representation.MU
      (Language.Haskell.Tools.AST.Ann.Ann
         Language.Haskell.Tools.AST.Representation.Modules.UModule
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
      (Language.Haskell.Tools.AST.Ann.Ann
         Language.Haskell.Tools.AST.Representation.Modules.UModule
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
      (Language.Haskell.Tools.AST.Ann.Ann
         Language.Haskell.Tools.AST.Representation.Decls.UDecl
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
      (Language.Haskell.Tools.AST.Ann.Ann
         Language.Haskell.Tools.AST.Representation.Decls.UDecl
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
  {- Unfolding: (\ @ dom ->
                 case Control.Reference.Combinators.$w&
                        @ (Control.Monad.Trans.Reader.ReaderT
                             [GHC.LanguageExtensions.Type.Extension]
                             (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc))
                        @ Control.Reference.Representation.MU
                        @ Control.Reference.Representation.MU
                        @ Control.Reference.Representation.MU
                        @ (Language.Haskell.Tools.AST.Ann.Ann
                             Language.Haskell.Tools.AST.Representation.Modules.UModule
                             dom
                             Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                        @ (Language.Haskell.Tools.AST.Ann.Ann
                             Language.Haskell.Tools.AST.Representation.Modules.UModule
                             dom
                             Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                        @ (Language.Haskell.Tools.AST.Ann.AnnListG
                             Language.Haskell.Tools.AST.Representation.Decls.UDecl
                             dom
                             Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                        @ (Language.Haskell.Tools.AST.Ann.AnnListG
                             Language.Haskell.Tools.AST.Representation.Decls.UDecl
                             dom
                             Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                        @ (Language.Haskell.Tools.AST.Ann.Ann
                             Language.Haskell.Tools.AST.Representation.Decls.UDecl
                             dom
                             Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                        @ (Language.Haskell.Tools.AST.Ann.Ann
                             Language.Haskell.Tools.AST.Representation.Decls.UDecl
                             dom
                             Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                        (TraverseAST.traverseModule2 @ dom)
                        (TraverseAST.traverseBracket2
                           @ dom) of ww { (#,,,,,#) ww1 ww2 ww3 ww4 ww5 ww6 ->
                 Control.Reference.Representation.Reference
                   @ (Control.Monad.Trans.Reader.ReaderT
                        [GHC.LanguageExtensions.Type.Extension]
                        (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc))
                   @ Control.Reference.Representation.MU
                   @ Control.Reference.Representation.MU
                   @ Control.Reference.Representation.MU
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        Language.Haskell.Tools.AST.Representation.Modules.UModule
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        Language.Haskell.Tools.AST.Representation.Modules.UModule
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        Language.Haskell.Tools.AST.Representation.Decls.UDecl
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        Language.Haskell.Tools.AST.Representation.Decls.UDecl
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   ww1
                   ww2
                   ww3
                   ww4
                   ww5
                   ww6 }) -}
2b8f44a0a073c0c83ed23073c6d7efc7
  traverseModule2 ::
    Control.Reference.Representation.Reference
      (Control.Monad.Trans.Reader.ReaderT
         [GHC.LanguageExtensions.Type.Extension]
         (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc))
      Control.Reference.Representation.MU
      Control.Reference.Representation.MU
      Control.Reference.Representation.MU
      (Language.Haskell.Tools.AST.Ann.Ann
         Language.Haskell.Tools.AST.Representation.Modules.UModule
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
      (Language.Haskell.Tools.AST.Ann.Ann
         Language.Haskell.Tools.AST.Representation.Modules.UModule
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
      (Language.Haskell.Tools.AST.Ann.AnnListG
         Language.Haskell.Tools.AST.Representation.Decls.UDecl
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
      (Language.Haskell.Tools.AST.Ann.AnnListG
         Language.Haskell.Tools.AST.Representation.Decls.UDecl
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
  {- Unfolding: (\ @ dom ->
                 case Language.Haskell.Tools.AST.References.$wmodDecl
                        @ dom
                        @ Language.Haskell.Tools.AST.Ann.SrcTemplateStage
                        @ (Control.Monad.Trans.Reader.ReaderT
                             [GHC.LanguageExtensions.Type.Extension]
                             (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc))
                        @ Control.Reference.Representation.MU
                        TraverseAST.$s$fRefMonadswr of ww { (#,,,,,#) ww1 ww2 ww3 ww4 ww5 ww6 ->
                 Control.Reference.Representation.Reference
                   @ (Control.Monad.Trans.Reader.ReaderT
                        [GHC.LanguageExtensions.Type.Extension]
                        (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc))
                   @ Control.Reference.Representation.MU
                   @ Control.Reference.Representation.MU
                   @ Control.Reference.Representation.MU
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        Language.Haskell.Tools.AST.Representation.Modules.UModule
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        Language.Haskell.Tools.AST.Representation.Modules.UModule
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   @ (Language.Haskell.Tools.AST.Ann.AnnListG
                        Language.Haskell.Tools.AST.Representation.Decls.UDecl
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   @ (Language.Haskell.Tools.AST.Ann.AnnListG
                        Language.Haskell.Tools.AST.Representation.Decls.UDecl
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   ww1
                   ww2
                   ww3
                   ww4
                   ww5
                   ww6 }) -}
2f721727e152016f5fac2a886bef4b94
  traverseName ::
    ExtMonad.CheckNode Language.Haskell.Tools.AST.ElementTypes.Name
  {- Arity: 6, HasNoCafRefs,
     Strictness: <S(S(LLS(S)LLLLLLLLLL)L),1*U(1*U(A,A,1*U(1*U),A,A,A,A,A,A,A,A,A,A),A)><L,U><L,A><L,U><L,A><S,U>,
     Unfolding: InlineRule (0, True, True)
                TraverseAST.traverseQuasiQuote1
                  `cast`
                (forall (dom :: <*>_N).
                 <ExtMonad.ExtDomain dom>_R
                 ->_R <Language.Haskell.Tools.AST.ElementTypes.Name dom>_R
                 ->_R Trans
                          (<[GHC.LanguageExtensions.Type.Extension]>_R
                           ->_R Trans
                                    (<ExtMap.ExtMap>_R
                                     ->_R Trans
                                              (<GhcMonad.Session>_R
                                               ->_R Sym (GHC.Types.N:IO[0]
                                                             <(Language.Haskell.Tools.AST.ElementTypes.Name
                                                                 dom,
                                                               ExtMap.ExtMap)>_R))
                                              (Sym (GhcMonad.N:Ghc[0]
                                                        <(Language.Haskell.Tools.AST.ElementTypes.Name
                                                            dom,
                                                          ExtMap.ExtMap)>_R)))
                                    (Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                              <ExtMap.ExtMap>_N
                                              <GhcMonad.Ghc>_R
                                              <Language.Haskell.Tools.AST.ElementTypes.Name
                                                 dom>_N)))
                          (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                    <*>_N
                                    <[GHC.LanguageExtensions.Type.Extension]>_R
                                    <Control.Monad.Trans.State.Lazy.StateT
                                       ExtMap.ExtMap GhcMonad.Ghc>_R
                                    <Language.Haskell.Tools.AST.ElementTypes.Name dom>_N))) -}
cd107b00f30b733c97962dc7ddd2340d
  traverseOperator ::
    ExtMonad.CheckNode Language.Haskell.Tools.AST.ElementTypes.Operator
  {- Arity: 6, HasNoCafRefs,
     Strictness: <S(S(LLS(S)LLLLLLLLLL)L),1*U(1*U(A,A,1*U(1*U),A,A,A,A,A,A,A,A,A,A),A)><L,U><L,A><L,U><L,A><S,U>,
     Unfolding: InlineRule (0, True, True)
                TraverseAST.traverseMatchLhs8
                  `cast`
                (forall (dom :: <*>_N).
                 <ExtMonad.ExtDomain dom>_R
                 ->_R <Language.Haskell.Tools.AST.ElementTypes.Operator dom>_R
                 ->_R Trans
                          (<[GHC.LanguageExtensions.Type.Extension]>_R
                           ->_R Trans
                                    (<ExtMap.ExtMap>_R
                                     ->_R Trans
                                              (<GhcMonad.Session>_R
                                               ->_R Sym (GHC.Types.N:IO[0]
                                                             <(Language.Haskell.Tools.AST.ElementTypes.Operator
                                                                 dom,
                                                               ExtMap.ExtMap)>_R))
                                              (Sym (GhcMonad.N:Ghc[0]
                                                        <(Language.Haskell.Tools.AST.ElementTypes.Operator
                                                            dom,
                                                          ExtMap.ExtMap)>_R)))
                                    (Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                              <ExtMap.ExtMap>_N
                                              <GhcMonad.Ghc>_R
                                              <Language.Haskell.Tools.AST.ElementTypes.Operator
                                                 dom>_N)))
                          (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                    <*>_N
                                    <[GHC.LanguageExtensions.Type.Extension]>_R
                                    <Control.Monad.Trans.State.Lazy.StateT
                                       ExtMap.ExtMap GhcMonad.Ghc>_R
                                    <Language.Haskell.Tools.AST.ElementTypes.Operator dom>_N))) -}
46937b4f52f8514b0e21057a16adaacb
  traversePattern ::
    ExtMonad.CheckNode Language.Haskell.Tools.AST.ElementTypes.Pattern
  {- Arity: 1,
     Strictness: <S(S(LLS(S)LLLLLLLLLL)L),U(U(U,U,U(U),U,U,U,U,U,U,U,U,U,U),U)> -}
7971a31f35faadf487774b7ff09beb79
  traversePatternField ::
    ExtMonad.CheckNode
      Language.Haskell.Tools.AST.ElementTypes.PatternField
  {- Arity: 1,
     Strictness: <S(S(LLS(S)LLLLLLLLLL)L),U(U(U,U,U(U),U,U,U,U,U,U,U,U,U,U),U)>,
     Unfolding: (\ @ dom ($d(%,%) :: ExtMonad.ExtDomain dom) ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Language.Haskell.Tools.AST.Ann.SemanticInfo'
                             dom Language.Haskell.Tools.AST.Ann.SameInfoDefaultCls)
                        @ Language.Haskell.Tools.AST.SemaInfoTypes.NoSemanticInfo
                        (Language.Haskell.Tools.AST.Ann.$p3Domain
                           @ dom
                           (GHC.Classes.$p1(%,%)
                              @ (Language.Haskell.Tools.AST.Ann.Domain dom)
                              @ (Language.Haskell.Tools.AST.SemaInfoClasses.HasNameInfo'
                                   (Language.Haskell.Tools.AST.Ann.SemanticInfo
                                      dom
                                      Language.Haskell.Tools.AST.Representation.Names.UQualifiedName))
                              $d(%,%)))
                          `cast`
                        (Data.Type.Equality.N:~[0]
                             <*>_N <Language.Haskell.Tools.AST.Ann.SemanticInfo'
                                      dom
                                      Language.Haskell.Tools.AST.Ann.SameInfoDefaultCls>_N <Language.Haskell.Tools.AST.SemaInfoTypes.NoSemanticInfo>_N) of cobox0 { DEFAULT ->
                 let {
                   f :: Language.Haskell.Tools.AST.Ann.Ann
                          Language.Haskell.Tools.AST.Representation.Patterns.UPatternField
                          dom
                          Language.Haskell.Tools.AST.Ann.SrcTemplateStage
                        -> Control.Monad.Trans.Reader.ReaderT
                             [GHC.LanguageExtensions.Type.Extension]
                             (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc)
                             (Language.Haskell.Tools.AST.Ann.Ann
                                Language.Haskell.Tools.AST.Representation.Patterns.UPatternField
                                dom
                                Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   = case TraverseAST.traversePatternField2
                            @ dom of wild { Control.Reference.Representation.Reference ds1 ds2 ds3 ds4 ds5 ds6 ->
                     ds3
                       (TraverseAST.traverseQuasiQuote1 @ dom $d(%,%))
                         `cast`
                       (<Language.Haskell.Tools.AST.ElementTypes.Name dom>_R
                        ->_R Trans
                                 (<[GHC.LanguageExtensions.Type.Extension]>_R
                                  ->_R Trans
                                           (<ExtMap.ExtMap>_R
                                            ->_R Trans
                                                     (<GhcMonad.Session>_R
                                                      ->_R Sym (GHC.Types.N:IO[0]
                                                                    <(Language.Haskell.Tools.AST.ElementTypes.Name
                                                                        dom,
                                                                      ExtMap.ExtMap)>_R))
                                                     (Sym (GhcMonad.N:Ghc[0]
                                                               <(Language.Haskell.Tools.AST.ElementTypes.Name
                                                                   dom,
                                                                 ExtMap.ExtMap)>_R)))
                                           (Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                                     <ExtMap.ExtMap>_N
                                                     <GhcMonad.Ghc>_R
                                                     <Language.Haskell.Tools.AST.ElementTypes.Name
                                                        dom>_N)))
                                 (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                           <*>_N
                                           <[GHC.LanguageExtensions.Type.Extension]>_R
                                           <Control.Monad.Trans.State.Lazy.StateT
                                              ExtMap.ExtMap GhcMonad.Ghc>_R
                                           <Language.Haskell.Tools.AST.ElementTypes.Name dom>_N))) }
                 } in
                 let {
                   g :: Language.Haskell.Tools.AST.Ann.Ann
                          Language.Haskell.Tools.AST.Representation.Patterns.UPatternField
                          dom
                          Language.Haskell.Tools.AST.Ann.SrcTemplateStage
                        -> Control.Monad.Trans.Reader.ReaderT
                             [GHC.LanguageExtensions.Type.Extension]
                             (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc)
                             (Language.Haskell.Tools.AST.Ann.Ann
                                Language.Haskell.Tools.AST.Representation.Patterns.UPatternField
                                dom
                                Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   = case TraverseAST.traversePatternField1
                            @ dom of wild { Control.Reference.Representation.Reference ds1 ds2 ds3 ds4 ds5 ds6 ->
                     ds3 (TraverseAST.traversePattern @ dom $d(%,%)) }
                 } in
                 (\ (x :: Language.Haskell.Tools.AST.ElementTypes.PatternField dom)
                    (eta :: [GHC.LanguageExtensions.Type.Extension])
                    (eta1 :: ExtMap.ExtMap) ->
                  let {
                    m :: GhcMonad.Ghc
                           (Language.Haskell.Tools.AST.ElementTypes.PatternField dom,
                            Data.Map.Base.Map
                              (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                              [SrcLoc.SrcSpan])
                    = case x of ww { Language.Haskell.Tools.AST.Ann.Ann ww1 ww2 ->
                      TraverseAST.$wchkPatternField @ dom $d(%,%) ww1 ww2 eta1 }
                  } in
                  (\ (s :: GhcMonad.Session)
                     (s1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                   case (m `cast`
                         (GhcMonad.N:Ghc[0]
                              <(Language.Haskell.Tools.AST.ElementTypes.PatternField dom,
                                Data.Map.Base.Map
                                  (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                                  [SrcLoc.SrcSpan])>_R)
                           s)
                          `cast`
                        (GHC.Types.N:IO[0]
                             <(Language.Haskell.Tools.AST.ElementTypes.PatternField dom,
                               Data.Map.Base.Map
                                 (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                                 [SrcLoc.SrcSpan])>_R)
                          s1 of ds1 { (#,#) ipv ipv1 ->
                   case ((((f (case ipv1 of wild { (,) a1 s' -> a1 }))
                             `cast`
                           (Control.Monad.Trans.Reader.N:ReaderT[0]
                                <*>_N
                                <[GHC.LanguageExtensions.Type.Extension]>_R
                                <Control.Monad.Trans.State.Lazy.StateT
                                   ExtMap.ExtMap GhcMonad.Ghc>_R
                                <Language.Haskell.Tools.AST.Ann.Ann
                                   Language.Haskell.Tools.AST.Representation.Patterns.UPatternField
                                   dom
                                   Language.Haskell.Tools.AST.Ann.SrcTemplateStage>_N)
                             eta)
                            `cast`
                          (Control.Monad.Trans.State.Lazy.N:StateT[0]
                               <Data.Map.Base.Map
                                  (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                                  [SrcLoc.SrcSpan]>_N
                               <GhcMonad.Ghc>_R
                               <Language.Haskell.Tools.AST.Ann.Ann
                                  Language.Haskell.Tools.AST.Representation.Patterns.UPatternField
                                  dom
                                  Language.Haskell.Tools.AST.Ann.SrcTemplateStage>_N)
                            (case ipv1 of wild { (,) a1 s' -> s' }))
                           `cast`
                         (GhcMonad.N:Ghc[0]
                              <(Language.Haskell.Tools.AST.Ann.Ann
                                  Language.Haskell.Tools.AST.Representation.Patterns.UPatternField
                                  dom
                                  Language.Haskell.Tools.AST.Ann.SrcTemplateStage,
                                Data.Map.Base.Map
                                  (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                                  [SrcLoc.SrcSpan])>_R)
                           s)
                          `cast`
                        (GHC.Types.N:IO[0]
                             <(Language.Haskell.Tools.AST.Ann.Ann
                                 Language.Haskell.Tools.AST.Representation.Patterns.UPatternField
                                 dom
                                 Language.Haskell.Tools.AST.Ann.SrcTemplateStage,
                               Data.Map.Base.Map
                                 (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                                 [SrcLoc.SrcSpan])>_R)
                          ipv of ds2 { (#,#) ipv2 ipv3 ->
                   ((((g (case ipv3 of wild { (,) a1 s' -> a1 }))
                        `cast`
                      (Control.Monad.Trans.Reader.N:ReaderT[0]
                           <*>_N
                           <[GHC.LanguageExtensions.Type.Extension]>_R
                           <Control.Monad.Trans.State.Lazy.StateT
                              ExtMap.ExtMap GhcMonad.Ghc>_R
                           <Language.Haskell.Tools.AST.Ann.Ann
                              Language.Haskell.Tools.AST.Representation.Patterns.UPatternField
                              dom
                              Language.Haskell.Tools.AST.Ann.SrcTemplateStage>_N)
                        eta)
                       `cast`
                     (Control.Monad.Trans.State.Lazy.N:StateT[0]
                          <Data.Map.Base.Map
                             (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                             [SrcLoc.SrcSpan]>_N
                          <GhcMonad.Ghc>_R
                          <Language.Haskell.Tools.AST.Ann.Ann
                             Language.Haskell.Tools.AST.Representation.Patterns.UPatternField
                             dom
                             Language.Haskell.Tools.AST.Ann.SrcTemplateStage>_N)
                       (case ipv3 of wild { (,) a1 s' -> s' }))
                      `cast`
                    (GhcMonad.N:Ghc[0]
                         <(Language.Haskell.Tools.AST.Ann.Ann
                             Language.Haskell.Tools.AST.Representation.Patterns.UPatternField
                             dom
                             Language.Haskell.Tools.AST.Ann.SrcTemplateStage,
                           Data.Map.Base.Map
                             (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                             [SrcLoc.SrcSpan])>_R)
                      s)
                     `cast`
                   (GHC.Types.N:IO[0]
                        <(Language.Haskell.Tools.AST.Ann.Ann
                            Language.Haskell.Tools.AST.Representation.Patterns.UPatternField
                            dom
                            Language.Haskell.Tools.AST.Ann.SrcTemplateStage,
                          Data.Map.Base.Map
                            (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                            [SrcLoc.SrcSpan])>_R)
                     ipv2 } })
                    `cast`
                  (Trans
                       (<GhcMonad.Session>_R
                        ->_R Sym (GHC.Types.N:IO[0]
                                      <(Language.Haskell.Tools.AST.Ann.Ann
                                          Language.Haskell.Tools.AST.Representation.Patterns.UPatternField
                                          dom
                                          Language.Haskell.Tools.AST.Ann.SrcTemplateStage,
                                        Data.Map.Base.Map
                                          (ExtMap.LogicalRelation
                                             GHC.LanguageExtensions.Type.Extension)
                                          [SrcLoc.SrcSpan])>_R))
                       (Sym (GhcMonad.N:Ghc[0]
                                 <(Language.Haskell.Tools.AST.Ann.Ann
                                     Language.Haskell.Tools.AST.Representation.Patterns.UPatternField
                                     dom
                                     Language.Haskell.Tools.AST.Ann.SrcTemplateStage,
                                   Data.Map.Base.Map
                                     (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                                     [SrcLoc.SrcSpan])>_R))))
                   `cast`
                 (<Language.Haskell.Tools.AST.ElementTypes.PatternField dom>_R
                  ->_R Trans
                           (<[GHC.LanguageExtensions.Type.Extension]>_R
                            ->_R Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                          <ExtMap.ExtMap>_N
                                          <GhcMonad.Ghc>_R
                                          <Language.Haskell.Tools.AST.Ann.Ann
                                             Language.Haskell.Tools.AST.Representation.Patterns.UPatternField
                                             dom
                                             Language.Haskell.Tools.AST.Ann.SrcTemplateStage>_N))
                           (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                     <*>_N
                                     <[GHC.LanguageExtensions.Type.Extension]>_R
                                     <Control.Monad.Trans.State.Lazy.StateT
                                        ExtMap.ExtMap GhcMonad.Ghc>_R
                                     <Language.Haskell.Tools.AST.Ann.Ann
                                        Language.Haskell.Tools.AST.Representation.Patterns.UPatternField
                                        dom
                                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage>_N))) }) -}
701fb2700cd0d6fc06aea1b1731d1cb4
  traversePatternField1 ::
    Control.Reference.Representation.Reference
      (Control.Monad.Trans.Reader.ReaderT
         [GHC.LanguageExtensions.Type.Extension]
         (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc))
      Control.Reference.Representation.MU
      Control.Reference.Representation.MU
      Control.Reference.Representation.MU
      (Language.Haskell.Tools.AST.Ann.Ann
         Language.Haskell.Tools.AST.Representation.Patterns.UPatternField
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
      (Language.Haskell.Tools.AST.Ann.Ann
         Language.Haskell.Tools.AST.Representation.Patterns.UPatternField
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
      (Language.Haskell.Tools.AST.Ann.Ann
         Language.Haskell.Tools.AST.Representation.Patterns.UPattern
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
      (Language.Haskell.Tools.AST.Ann.Ann
         Language.Haskell.Tools.AST.Representation.Patterns.UPattern
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
  {- Unfolding: (\ @ dom ->
                 case Language.Haskell.Tools.AST.References.$wfieldPattern
                        @ dom
                        @ Language.Haskell.Tools.AST.Ann.SrcTemplateStage
                        @ (Control.Monad.Trans.Reader.ReaderT
                             [GHC.LanguageExtensions.Type.Extension]
                             (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc))
                        @ Control.Reference.Representation.MU
                        (TraverseAST.$s$fMonadReaderT
                           @ [GHC.LanguageExtensions.Type.Extension])
                        Data.Proxy.$fMonadPlusProxy
                        TraverseAST.$sannJust1
                          `cast`
                        (Sym (Control.Instances.Morph.N:Morph[0]
                                  <GHC.Base.Maybe>_N
                                  <Data.Proxy.Proxy>_N)) of ww { (#,,,,,#) ww1 ww2 ww3 ww4 ww5 ww6 ->
                 Control.Reference.Representation.Reference
                   @ (Control.Monad.Trans.Reader.ReaderT
                        [GHC.LanguageExtensions.Type.Extension]
                        (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc))
                   @ Control.Reference.Representation.MU
                   @ Control.Reference.Representation.MU
                   @ Control.Reference.Representation.MU
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        Language.Haskell.Tools.AST.Representation.Patterns.UPatternField
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        Language.Haskell.Tools.AST.Representation.Patterns.UPatternField
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        Language.Haskell.Tools.AST.Representation.Patterns.UPattern
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        Language.Haskell.Tools.AST.Representation.Patterns.UPattern
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   ww1
                   ww2
                   ww3
                   ww4
                   ww5
                   ww6 }) -}
3e82da46c600855024613860d407dd6a
  traversePatternField2 ::
    Control.Reference.Representation.Reference
      (Control.Monad.Trans.Reader.ReaderT
         [GHC.LanguageExtensions.Type.Extension]
         (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc))
      Control.Reference.Representation.MU
      Control.Reference.Representation.MU
      Control.Reference.Representation.MU
      (Language.Haskell.Tools.AST.Ann.Ann
         Language.Haskell.Tools.AST.Representation.Patterns.UPatternField
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
      (Language.Haskell.Tools.AST.Ann.Ann
         Language.Haskell.Tools.AST.Representation.Patterns.UPatternField
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
      (Language.Haskell.Tools.AST.Ann.Ann
         Language.Haskell.Tools.AST.Representation.Names.UName
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
      (Language.Haskell.Tools.AST.Ann.Ann
         Language.Haskell.Tools.AST.Representation.Names.UName
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
  {- Unfolding: (\ @ dom ->
                 case Language.Haskell.Tools.AST.References.$wfieldPatternName
                        @ dom
                        @ Language.Haskell.Tools.AST.Ann.SrcTemplateStage
                        @ (Control.Monad.Trans.Reader.ReaderT
                             [GHC.LanguageExtensions.Type.Extension]
                             (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc))
                        @ Control.Reference.Representation.MU
                        (TraverseAST.$s$fMonadReaderT
                           @ [GHC.LanguageExtensions.Type.Extension])
                        Data.Proxy.$fMonadPlusProxy
                        TraverseAST.$sannJust1
                          `cast`
                        (Sym (Control.Instances.Morph.N:Morph[0]
                                  <GHC.Base.Maybe>_N
                                  <Data.Proxy.Proxy>_N)) of ww { (#,,,,,#) ww1 ww2 ww3 ww4 ww5 ww6 ->
                 Control.Reference.Representation.Reference
                   @ (Control.Monad.Trans.Reader.ReaderT
                        [GHC.LanguageExtensions.Type.Extension]
                        (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc))
                   @ Control.Reference.Representation.MU
                   @ Control.Reference.Representation.MU
                   @ Control.Reference.Representation.MU
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        Language.Haskell.Tools.AST.Representation.Patterns.UPatternField
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        Language.Haskell.Tools.AST.Representation.Patterns.UPatternField
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        Language.Haskell.Tools.AST.Representation.Names.UName
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        Language.Haskell.Tools.AST.Representation.Names.UName
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   ww1
                   ww2
                   ww3
                   ww4
                   ww5
                   ww6 }) -}
6287191c895bc2dd11210a2d2cda3578
  traversePatternSynonym ::
    ExtMonad.CheckNode
      Language.Haskell.Tools.AST.ElementTypes.PatternSynonym
  {- Arity: 1,
     Strictness: <S(SL),U(U(U,U,U(U),U,U,U,U,U,U,U,U,U,U),1*U)> -}
1c9e0e59f7e835a630ea8b6f42394d09
  traverseQuasiQuote ::
    ExtMonad.CheckNode
      Language.Haskell.Tools.AST.ElementTypes.QuasiQuote
  {- Arity: 1,
     Strictness: <S(S(LLS(S)LLLLLLLLLL)L),U(U(A,A,U(U),A,A,A,A,A,A,A,A,A,A),A)>,
     Unfolding: (\ @ dom ($d(%,%) :: ExtMonad.ExtDomain dom) ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Language.Haskell.Tools.AST.Ann.SemanticInfo'
                             dom Language.Haskell.Tools.AST.Ann.SameInfoDefaultCls)
                        @ Language.Haskell.Tools.AST.SemaInfoTypes.NoSemanticInfo
                        (Language.Haskell.Tools.AST.Ann.$p3Domain
                           @ dom
                           (GHC.Classes.$p1(%,%)
                              @ (Language.Haskell.Tools.AST.Ann.Domain dom)
                              @ (Language.Haskell.Tools.AST.SemaInfoClasses.HasNameInfo'
                                   (Language.Haskell.Tools.AST.Ann.SemanticInfo
                                      dom
                                      Language.Haskell.Tools.AST.Representation.Names.UQualifiedName))
                              $d(%,%)))
                          `cast`
                        (Data.Type.Equality.N:~[0]
                             <*>_N <Language.Haskell.Tools.AST.Ann.SemanticInfo'
                                      dom
                                      Language.Haskell.Tools.AST.Ann.SameInfoDefaultCls>_N <Language.Haskell.Tools.AST.SemaInfoTypes.NoSemanticInfo>_N) of cobox0 { DEFAULT ->
                 let {
                   g :: Language.Haskell.Tools.AST.ElementTypes.QuasiQuote dom
                        -> Control.Monad.Trans.Reader.ReaderT
                             [GHC.LanguageExtensions.Type.Extension]
                             (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc)
                             (Language.Haskell.Tools.AST.Ann.Ann
                                Language.Haskell.Tools.AST.Representation.TH.UQuasiQuote
                                dom
                                Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   = case TraverseAST.traverseQuasiQuote2
                            @ dom of wild { Control.Reference.Representation.Reference ds1 ds2 ds3 ds4 ds5 ds6 ->
                     ds3
                       (TraverseAST.traverseQuasiQuote1 @ dom $d(%,%))
                         `cast`
                       (<Language.Haskell.Tools.AST.ElementTypes.Name dom>_R
                        ->_R Trans
                                 (<[GHC.LanguageExtensions.Type.Extension]>_R
                                  ->_R Trans
                                           (<ExtMap.ExtMap>_R
                                            ->_R Trans
                                                     (<GhcMonad.Session>_R
                                                      ->_R Sym (GHC.Types.N:IO[0]
                                                                    <(Language.Haskell.Tools.AST.ElementTypes.Name
                                                                        dom,
                                                                      ExtMap.ExtMap)>_R))
                                                     (Sym (GhcMonad.N:Ghc[0]
                                                               <(Language.Haskell.Tools.AST.ElementTypes.Name
                                                                   dom,
                                                                 ExtMap.ExtMap)>_R)))
                                           (Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                                     <ExtMap.ExtMap>_N
                                                     <GhcMonad.Ghc>_R
                                                     <Language.Haskell.Tools.AST.ElementTypes.Name
                                                        dom>_N)))
                                 (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                           <*>_N
                                           <[GHC.LanguageExtensions.Type.Extension]>_R
                                           <Control.Monad.Trans.State.Lazy.StateT
                                              ExtMap.ExtMap GhcMonad.Ghc>_R
                                           <Language.Haskell.Tools.AST.ElementTypes.Name dom>_N))) }
                 } in
                 (\ (x :: Language.Haskell.Tools.AST.ElementTypes.QuasiQuote dom)
                    (eta :: [GHC.LanguageExtensions.Type.Extension])
                    (eta1 :: ExtMap.ExtMap) ->
                  let {
                    m :: GhcMonad.Ghc
                           (Language.Haskell.Tools.AST.ElementTypes.QuasiQuote dom,
                            Data.Map.Base.Map
                              (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                              [SrcLoc.SrcSpan])
                    = TemplateHaskellChecker.$wchkTemplateHaskellQuasiQuote
                        @ dom
                        $d(%,%)
                        x
                        eta1
                  } in
                  (\ (s :: GhcMonad.Session)
                     (s1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                   case (m `cast`
                         (GhcMonad.N:Ghc[0]
                              <(Language.Haskell.Tools.AST.ElementTypes.QuasiQuote dom,
                                Data.Map.Base.Map
                                  (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                                  [SrcLoc.SrcSpan])>_R)
                           s)
                          `cast`
                        (GHC.Types.N:IO[0]
                             <(Language.Haskell.Tools.AST.ElementTypes.QuasiQuote dom,
                               Data.Map.Base.Map
                                 (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                                 [SrcLoc.SrcSpan])>_R)
                          s1 of ds1 { (#,#) ipv ipv1 ->
                   ((((g (case ipv1 of wild { (,) a1 s' -> a1 }))
                        `cast`
                      (Control.Monad.Trans.Reader.N:ReaderT[0]
                           <*>_N
                           <[GHC.LanguageExtensions.Type.Extension]>_R
                           <Control.Monad.Trans.State.Lazy.StateT
                              ExtMap.ExtMap GhcMonad.Ghc>_R
                           <Language.Haskell.Tools.AST.Ann.Ann
                              Language.Haskell.Tools.AST.Representation.TH.UQuasiQuote
                              dom
                              Language.Haskell.Tools.AST.Ann.SrcTemplateStage>_N)
                        eta)
                       `cast`
                     (Control.Monad.Trans.State.Lazy.N:StateT[0]
                          <Data.Map.Base.Map
                             (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                             [SrcLoc.SrcSpan]>_N
                          <GhcMonad.Ghc>_R
                          <Language.Haskell.Tools.AST.Ann.Ann
                             Language.Haskell.Tools.AST.Representation.TH.UQuasiQuote
                             dom
                             Language.Haskell.Tools.AST.Ann.SrcTemplateStage>_N)
                       (case ipv1 of wild { (,) a1 s' -> s' }))
                      `cast`
                    (GhcMonad.N:Ghc[0]
                         <(Language.Haskell.Tools.AST.Ann.Ann
                             Language.Haskell.Tools.AST.Representation.TH.UQuasiQuote
                             dom
                             Language.Haskell.Tools.AST.Ann.SrcTemplateStage,
                           Data.Map.Base.Map
                             (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                             [SrcLoc.SrcSpan])>_R)
                      s)
                     `cast`
                   (GHC.Types.N:IO[0]
                        <(Language.Haskell.Tools.AST.Ann.Ann
                            Language.Haskell.Tools.AST.Representation.TH.UQuasiQuote
                            dom
                            Language.Haskell.Tools.AST.Ann.SrcTemplateStage,
                          Data.Map.Base.Map
                            (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                            [SrcLoc.SrcSpan])>_R)
                     ipv })
                    `cast`
                  (Trans
                       (<GhcMonad.Session>_R
                        ->_R Sym (GHC.Types.N:IO[0]
                                      <(Language.Haskell.Tools.AST.Ann.Ann
                                          Language.Haskell.Tools.AST.Representation.TH.UQuasiQuote
                                          dom
                                          Language.Haskell.Tools.AST.Ann.SrcTemplateStage,
                                        Data.Map.Base.Map
                                          (ExtMap.LogicalRelation
                                             GHC.LanguageExtensions.Type.Extension)
                                          [SrcLoc.SrcSpan])>_R))
                       (Sym (GhcMonad.N:Ghc[0]
                                 <(Language.Haskell.Tools.AST.Ann.Ann
                                     Language.Haskell.Tools.AST.Representation.TH.UQuasiQuote
                                     dom
                                     Language.Haskell.Tools.AST.Ann.SrcTemplateStage,
                                   Data.Map.Base.Map
                                     (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                                     [SrcLoc.SrcSpan])>_R))))
                   `cast`
                 (<Language.Haskell.Tools.AST.ElementTypes.QuasiQuote dom>_R
                  ->_R Trans
                           (<[GHC.LanguageExtensions.Type.Extension]>_R
                            ->_R Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                          <ExtMap.ExtMap>_N
                                          <GhcMonad.Ghc>_R
                                          <Language.Haskell.Tools.AST.Ann.Ann
                                             Language.Haskell.Tools.AST.Representation.TH.UQuasiQuote
                                             dom
                                             Language.Haskell.Tools.AST.Ann.SrcTemplateStage>_N))
                           (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                     <*>_N
                                     <[GHC.LanguageExtensions.Type.Extension]>_R
                                     <Control.Monad.Trans.State.Lazy.StateT
                                        ExtMap.ExtMap GhcMonad.Ghc>_R
                                     <Language.Haskell.Tools.AST.Ann.Ann
                                        Language.Haskell.Tools.AST.Representation.TH.UQuasiQuote
                                        dom
                                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage>_N))) }) -}
510c414939a951d3d900cbb5a7cff51a
  traverseQuasiQuote1 ::
    ExtMonad.ExtDomain dom =>
    Language.Haskell.Tools.AST.ElementTypes.Name dom
    -> [GHC.LanguageExtensions.Type.Extension]
    -> ExtMap.ExtMap
    -> GhcMonad.Session
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          (Language.Haskell.Tools.AST.ElementTypes.Name dom,
           ExtMap.ExtMap) #)
  {- Arity: 6, HasNoCafRefs,
     Strictness: <S(S(LLS(S)LLLLLLLLLL)L),1*U(1*U(A,A,1*U(1*U),A,A,A,A,A,A,A,A,A,A),A)><L,U><L,A><L,U><L,A><S,U>,
     Unfolding: InlineRule (6, True, False)
                (\ @ dom
                   ($d(%,%) :: ExtMonad.ExtDomain dom)
                   (eta :: Language.Haskell.Tools.AST.ElementTypes.Name dom)
                   (eta1 :: [GHC.LanguageExtensions.Type.Extension])
                   (eta2 :: ExtMap.ExtMap)
                   (eta3 :: GhcMonad.Session)
                   (eta4 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Language.Haskell.Tools.AST.Ann.SemanticInfo'
                             dom Language.Haskell.Tools.AST.Ann.SameInfoDefaultCls)
                        @ Language.Haskell.Tools.AST.SemaInfoTypes.NoSemanticInfo
                        (Language.Haskell.Tools.AST.Ann.$p3Domain
                           @ dom
                           (GHC.Classes.$p1(%,%)
                              @ (Language.Haskell.Tools.AST.Ann.Domain dom)
                              @ (Language.Haskell.Tools.AST.SemaInfoClasses.HasNameInfo'
                                   (Language.Haskell.Tools.AST.Ann.SemanticInfo
                                      dom
                                      Language.Haskell.Tools.AST.Representation.Names.UQualifiedName))
                              $d(%,%)))
                          `cast`
                        (Data.Type.Equality.N:~[0]
                             <*>_N <Language.Haskell.Tools.AST.Ann.SemanticInfo'
                                      dom
                                      Language.Haskell.Tools.AST.Ann.SameInfoDefaultCls>_N <Language.Haskell.Tools.AST.SemaInfoTypes.NoSemanticInfo>_N) of cobox0 { DEFAULT ->
                 (# eta4, (eta, eta2) #) }) -}
61000807628c1b741690d3496b93a32f
  traverseQuasiQuote2 ::
    Control.Reference.Representation.Reference
      (Control.Monad.Trans.Reader.ReaderT
         [GHC.LanguageExtensions.Type.Extension]
         (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc))
      Control.Reference.Representation.MU
      Control.Reference.Representation.MU
      Control.Reference.Representation.MU
      (Language.Haskell.Tools.AST.Ann.Ann
         Language.Haskell.Tools.AST.Representation.TH.UQuasiQuote
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
      (Language.Haskell.Tools.AST.Ann.Ann
         Language.Haskell.Tools.AST.Representation.TH.UQuasiQuote
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
      (Language.Haskell.Tools.AST.Ann.Ann
         Language.Haskell.Tools.AST.Representation.Names.UName
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
      (Language.Haskell.Tools.AST.Ann.Ann
         Language.Haskell.Tools.AST.Representation.Names.UName
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
  {- Unfolding: (\ @ dom ->
                 case Language.Haskell.Tools.AST.References.$wqqExprName
                        @ dom
                        @ Language.Haskell.Tools.AST.Ann.SrcTemplateStage
                        @ (Control.Monad.Trans.Reader.ReaderT
                             [GHC.LanguageExtensions.Type.Extension]
                             (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc))
                        @ Control.Reference.Representation.MU
                        TraverseAST.$s$fRefMonadswr of ww { (#,,,,,#) ww1 ww2 ww3 ww4 ww5 ww6 ->
                 Control.Reference.Representation.Reference
                   @ (Control.Monad.Trans.Reader.ReaderT
                        [GHC.LanguageExtensions.Type.Extension]
                        (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc))
                   @ Control.Reference.Representation.MU
                   @ Control.Reference.Representation.MU
                   @ Control.Reference.Representation.MU
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        Language.Haskell.Tools.AST.Representation.TH.UQuasiQuote
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        Language.Haskell.Tools.AST.Representation.TH.UQuasiQuote
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        Language.Haskell.Tools.AST.Representation.Names.UName
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        Language.Haskell.Tools.AST.Representation.Names.UName
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   ww1
                   ww2
                   ww3
                   ww4
                   ww5
                   ww6 }) -}
5f158601e569bbf69b252a4deb4d2b99
  traverseRhs ::
    ExtMonad.CheckNode Language.Haskell.Tools.AST.ElementTypes.Rhs
  {- Arity: 1,
     Strictness: <S(S(LLS(S)LLLLLLLLLL)L),U(U(U,U,U(U),U,U,U,U,U,U,U,U,U,U),U)> -}
c82891137760fd6e8d5f1f63c9a3191e
  traverseRhsGuard ::
    ExtMonad.CheckNode Language.Haskell.Tools.AST.ElementTypes.RhsGuard
  {- Arity: 1,
     Strictness: <S(S(LLS(S)LLLLLLLLLL)L),U(U(U,U,U(U),U,U,U,U,U,U,U,U,U,U),U)> -}
4e9bbc390ef0b68d5b36d4253e267cfe
  traverseSplice ::
    ExtMonad.CheckNode Language.Haskell.Tools.AST.ElementTypes.Splice
  {- Arity: 1,
     Strictness: <S(S(LLS(S)LLLLLLLLLL)L),U(U(U,U,U(U),U,U,U,U,U,U,U,U,U,U),U)>,
     Unfolding: (\ @ dom ($d(%,%) :: ExtMonad.ExtDomain dom) ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Language.Haskell.Tools.AST.Ann.SemanticInfo'
                             dom Language.Haskell.Tools.AST.Ann.SameInfoDefaultCls)
                        @ Language.Haskell.Tools.AST.SemaInfoTypes.NoSemanticInfo
                        (Language.Haskell.Tools.AST.Ann.$p3Domain
                           @ dom
                           (GHC.Classes.$p1(%,%)
                              @ (Language.Haskell.Tools.AST.Ann.Domain dom)
                              @ (Language.Haskell.Tools.AST.SemaInfoClasses.HasNameInfo'
                                   (Language.Haskell.Tools.AST.Ann.SemanticInfo
                                      dom
                                      Language.Haskell.Tools.AST.Representation.Names.UQualifiedName))
                              $d(%,%)))
                          `cast`
                        (Data.Type.Equality.N:~[0]
                             <*>_N <Language.Haskell.Tools.AST.Ann.SemanticInfo'
                                      dom
                                      Language.Haskell.Tools.AST.Ann.SameInfoDefaultCls>_N <Language.Haskell.Tools.AST.SemaInfoTypes.NoSemanticInfo>_N) of cobox0 { DEFAULT ->
                 let {
                   f :: Language.Haskell.Tools.AST.Ann.Ann
                          Language.Haskell.Tools.AST.Representation.TH.USplice
                          dom
                          Language.Haskell.Tools.AST.Ann.SrcTemplateStage
                        -> Control.Monad.Trans.Reader.ReaderT
                             [GHC.LanguageExtensions.Type.Extension]
                             (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc)
                             (Language.Haskell.Tools.AST.Ann.Ann
                                Language.Haskell.Tools.AST.Representation.TH.USplice
                                dom
                                Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   = case TraverseAST.traverseSplice2
                            @ dom of wild { Control.Reference.Representation.Reference ds1 ds2 ds3 ds4 ds5 ds6 ->
                     ds3
                       (TraverseAST.traverseQuasiQuote1 @ dom $d(%,%))
                         `cast`
                       (<Language.Haskell.Tools.AST.ElementTypes.Name dom>_R
                        ->_R Trans
                                 (<[GHC.LanguageExtensions.Type.Extension]>_R
                                  ->_R Trans
                                           (<ExtMap.ExtMap>_R
                                            ->_R Trans
                                                     (<GhcMonad.Session>_R
                                                      ->_R Sym (GHC.Types.N:IO[0]
                                                                    <(Language.Haskell.Tools.AST.ElementTypes.Name
                                                                        dom,
                                                                      ExtMap.ExtMap)>_R))
                                                     (Sym (GhcMonad.N:Ghc[0]
                                                               <(Language.Haskell.Tools.AST.ElementTypes.Name
                                                                   dom,
                                                                 ExtMap.ExtMap)>_R)))
                                           (Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                                     <ExtMap.ExtMap>_N
                                                     <GhcMonad.Ghc>_R
                                                     <Language.Haskell.Tools.AST.ElementTypes.Name
                                                        dom>_N)))
                                 (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                           <*>_N
                                           <[GHC.LanguageExtensions.Type.Extension]>_R
                                           <Control.Monad.Trans.State.Lazy.StateT
                                              ExtMap.ExtMap GhcMonad.Ghc>_R
                                           <Language.Haskell.Tools.AST.ElementTypes.Name dom>_N))) }
                 } in
                 let {
                   g :: Language.Haskell.Tools.AST.Ann.Ann
                          Language.Haskell.Tools.AST.Representation.TH.USplice
                          dom
                          Language.Haskell.Tools.AST.Ann.SrcTemplateStage
                        -> Control.Monad.Trans.Reader.ReaderT
                             [GHC.LanguageExtensions.Type.Extension]
                             (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc)
                             (Language.Haskell.Tools.AST.Ann.Ann
                                Language.Haskell.Tools.AST.Representation.TH.USplice
                                dom
                                Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   = case TraverseAST.traverseSplice1
                            @ dom of wild { Control.Reference.Representation.Reference ds1 ds2 ds3 ds4 ds5 ds6 ->
                     ds3 (TraverseAST.traverseExpr @ dom $d(%,%)) }
                 } in
                 (\ (x :: Language.Haskell.Tools.AST.ElementTypes.Splice dom)
                    (eta :: [GHC.LanguageExtensions.Type.Extension])
                    (eta1 :: ExtMap.ExtMap) ->
                  let {
                    m :: GhcMonad.Ghc
                           (Language.Haskell.Tools.AST.ElementTypes.Splice dom,
                            Data.Map.Base.Map
                              (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                              [SrcLoc.SrcSpan])
                    = TemplateHaskellChecker.$wchkTemplateHaskellSplice
                        @ dom
                        $d(%,%)
                        x
                        eta1
                  } in
                  (\ (s :: GhcMonad.Session)
                     (s1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                   case (m `cast`
                         (GhcMonad.N:Ghc[0]
                              <(Language.Haskell.Tools.AST.ElementTypes.Splice dom,
                                Data.Map.Base.Map
                                  (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                                  [SrcLoc.SrcSpan])>_R)
                           s)
                          `cast`
                        (GHC.Types.N:IO[0]
                             <(Language.Haskell.Tools.AST.ElementTypes.Splice dom,
                               Data.Map.Base.Map
                                 (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                                 [SrcLoc.SrcSpan])>_R)
                          s1 of ds1 { (#,#) ipv ipv1 ->
                   case ((((f (case ipv1 of wild { (,) a1 s' -> a1 }))
                             `cast`
                           (Control.Monad.Trans.Reader.N:ReaderT[0]
                                <*>_N
                                <[GHC.LanguageExtensions.Type.Extension]>_R
                                <Control.Monad.Trans.State.Lazy.StateT
                                   ExtMap.ExtMap GhcMonad.Ghc>_R
                                <Language.Haskell.Tools.AST.Ann.Ann
                                   Language.Haskell.Tools.AST.Representation.TH.USplice
                                   dom
                                   Language.Haskell.Tools.AST.Ann.SrcTemplateStage>_N)
                             eta)
                            `cast`
                          (Control.Monad.Trans.State.Lazy.N:StateT[0]
                               <Data.Map.Base.Map
                                  (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                                  [SrcLoc.SrcSpan]>_N
                               <GhcMonad.Ghc>_R
                               <Language.Haskell.Tools.AST.Ann.Ann
                                  Language.Haskell.Tools.AST.Representation.TH.USplice
                                  dom
                                  Language.Haskell.Tools.AST.Ann.SrcTemplateStage>_N)
                            (case ipv1 of wild { (,) a1 s' -> s' }))
                           `cast`
                         (GhcMonad.N:Ghc[0]
                              <(Language.Haskell.Tools.AST.Ann.Ann
                                  Language.Haskell.Tools.AST.Representation.TH.USplice
                                  dom
                                  Language.Haskell.Tools.AST.Ann.SrcTemplateStage,
                                Data.Map.Base.Map
                                  (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                                  [SrcLoc.SrcSpan])>_R)
                           s)
                          `cast`
                        (GHC.Types.N:IO[0]
                             <(Language.Haskell.Tools.AST.Ann.Ann
                                 Language.Haskell.Tools.AST.Representation.TH.USplice
                                 dom
                                 Language.Haskell.Tools.AST.Ann.SrcTemplateStage,
                               Data.Map.Base.Map
                                 (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                                 [SrcLoc.SrcSpan])>_R)
                          ipv of ds2 { (#,#) ipv2 ipv3 ->
                   ((((g (case ipv3 of wild { (,) a1 s' -> a1 }))
                        `cast`
                      (Control.Monad.Trans.Reader.N:ReaderT[0]
                           <*>_N
                           <[GHC.LanguageExtensions.Type.Extension]>_R
                           <Control.Monad.Trans.State.Lazy.StateT
                              ExtMap.ExtMap GhcMonad.Ghc>_R
                           <Language.Haskell.Tools.AST.Ann.Ann
                              Language.Haskell.Tools.AST.Representation.TH.USplice
                              dom
                              Language.Haskell.Tools.AST.Ann.SrcTemplateStage>_N)
                        eta)
                       `cast`
                     (Control.Monad.Trans.State.Lazy.N:StateT[0]
                          <Data.Map.Base.Map
                             (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                             [SrcLoc.SrcSpan]>_N
                          <GhcMonad.Ghc>_R
                          <Language.Haskell.Tools.AST.Ann.Ann
                             Language.Haskell.Tools.AST.Representation.TH.USplice
                             dom
                             Language.Haskell.Tools.AST.Ann.SrcTemplateStage>_N)
                       (case ipv3 of wild { (,) a1 s' -> s' }))
                      `cast`
                    (GhcMonad.N:Ghc[0]
                         <(Language.Haskell.Tools.AST.Ann.Ann
                             Language.Haskell.Tools.AST.Representation.TH.USplice
                             dom
                             Language.Haskell.Tools.AST.Ann.SrcTemplateStage,
                           Data.Map.Base.Map
                             (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                             [SrcLoc.SrcSpan])>_R)
                      s)
                     `cast`
                   (GHC.Types.N:IO[0]
                        <(Language.Haskell.Tools.AST.Ann.Ann
                            Language.Haskell.Tools.AST.Representation.TH.USplice
                            dom
                            Language.Haskell.Tools.AST.Ann.SrcTemplateStage,
                          Data.Map.Base.Map
                            (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                            [SrcLoc.SrcSpan])>_R)
                     ipv2 } })
                    `cast`
                  (Trans
                       (<GhcMonad.Session>_R
                        ->_R Sym (GHC.Types.N:IO[0]
                                      <(Language.Haskell.Tools.AST.Ann.Ann
                                          Language.Haskell.Tools.AST.Representation.TH.USplice
                                          dom
                                          Language.Haskell.Tools.AST.Ann.SrcTemplateStage,
                                        Data.Map.Base.Map
                                          (ExtMap.LogicalRelation
                                             GHC.LanguageExtensions.Type.Extension)
                                          [SrcLoc.SrcSpan])>_R))
                       (Sym (GhcMonad.N:Ghc[0]
                                 <(Language.Haskell.Tools.AST.Ann.Ann
                                     Language.Haskell.Tools.AST.Representation.TH.USplice
                                     dom
                                     Language.Haskell.Tools.AST.Ann.SrcTemplateStage,
                                   Data.Map.Base.Map
                                     (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                                     [SrcLoc.SrcSpan])>_R))))
                   `cast`
                 (<Language.Haskell.Tools.AST.ElementTypes.Splice dom>_R
                  ->_R Trans
                           (<[GHC.LanguageExtensions.Type.Extension]>_R
                            ->_R Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                          <ExtMap.ExtMap>_N
                                          <GhcMonad.Ghc>_R
                                          <Language.Haskell.Tools.AST.Ann.Ann
                                             Language.Haskell.Tools.AST.Representation.TH.USplice
                                             dom
                                             Language.Haskell.Tools.AST.Ann.SrcTemplateStage>_N))
                           (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                     <*>_N
                                     <[GHC.LanguageExtensions.Type.Extension]>_R
                                     <Control.Monad.Trans.State.Lazy.StateT
                                        ExtMap.ExtMap GhcMonad.Ghc>_R
                                     <Language.Haskell.Tools.AST.Ann.Ann
                                        Language.Haskell.Tools.AST.Representation.TH.USplice
                                        dom
                                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage>_N))) }) -}
f3902683e9315aedcb405ba9bc6e4688
  traverseSplice1 ::
    Control.Reference.Representation.Reference
      (Control.Monad.Trans.Reader.ReaderT
         [GHC.LanguageExtensions.Type.Extension]
         (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc))
      Control.Reference.Representation.MU
      Control.Reference.Representation.MU
      Control.Reference.Representation.MU
      (Language.Haskell.Tools.AST.Ann.Ann
         Language.Haskell.Tools.AST.Representation.TH.USplice
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
      (Language.Haskell.Tools.AST.Ann.Ann
         Language.Haskell.Tools.AST.Representation.TH.USplice
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
      (Language.Haskell.Tools.AST.Ann.Ann
         Language.Haskell.Tools.AST.Representation.Exprs.UExpr
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
      (Language.Haskell.Tools.AST.Ann.Ann
         Language.Haskell.Tools.AST.Representation.Exprs.UExpr
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
  {- Unfolding: (\ @ dom ->
                 case Language.Haskell.Tools.AST.References.$wspliceExpr
                        @ dom
                        @ Language.Haskell.Tools.AST.Ann.SrcTemplateStage
                        @ (Control.Monad.Trans.Reader.ReaderT
                             [GHC.LanguageExtensions.Type.Extension]
                             (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc))
                        @ Control.Reference.Representation.MU
                        (TraverseAST.$s$fMonadReaderT
                           @ [GHC.LanguageExtensions.Type.Extension])
                        Data.Proxy.$fMonadPlusProxy
                        TraverseAST.$sannJust1
                          `cast`
                        (Sym (Control.Instances.Morph.N:Morph[0]
                                  <GHC.Base.Maybe>_N
                                  <Data.Proxy.Proxy>_N)) of ww { (#,,,,,#) ww1 ww2 ww3 ww4 ww5 ww6 ->
                 Control.Reference.Representation.Reference
                   @ (Control.Monad.Trans.Reader.ReaderT
                        [GHC.LanguageExtensions.Type.Extension]
                        (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc))
                   @ Control.Reference.Representation.MU
                   @ Control.Reference.Representation.MU
                   @ Control.Reference.Representation.MU
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        Language.Haskell.Tools.AST.Representation.TH.USplice
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        Language.Haskell.Tools.AST.Representation.TH.USplice
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        Language.Haskell.Tools.AST.Representation.Exprs.UExpr
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        Language.Haskell.Tools.AST.Representation.Exprs.UExpr
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   ww1
                   ww2
                   ww3
                   ww4
                   ww5
                   ww6 }) -}
27e43a6f442cba370b0bc5932fa42991
  traverseSplice2 ::
    Control.Reference.Representation.Reference
      (Control.Monad.Trans.Reader.ReaderT
         [GHC.LanguageExtensions.Type.Extension]
         (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc))
      Control.Reference.Representation.MU
      Control.Reference.Representation.MU
      Control.Reference.Representation.MU
      (Language.Haskell.Tools.AST.Ann.Ann
         Language.Haskell.Tools.AST.Representation.TH.USplice
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
      (Language.Haskell.Tools.AST.Ann.Ann
         Language.Haskell.Tools.AST.Representation.TH.USplice
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
      (Language.Haskell.Tools.AST.Ann.Ann
         Language.Haskell.Tools.AST.Representation.Names.UName
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
      (Language.Haskell.Tools.AST.Ann.Ann
         Language.Haskell.Tools.AST.Representation.Names.UName
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
  {- Unfolding: (\ @ dom ->
                 case Language.Haskell.Tools.AST.References.$wspliceId
                        @ dom
                        @ Language.Haskell.Tools.AST.Ann.SrcTemplateStage
                        @ (Control.Monad.Trans.Reader.ReaderT
                             [GHC.LanguageExtensions.Type.Extension]
                             (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc))
                        @ Control.Reference.Representation.MU
                        (TraverseAST.$s$fMonadReaderT
                           @ [GHC.LanguageExtensions.Type.Extension])
                        Data.Proxy.$fMonadPlusProxy
                        TraverseAST.$sannJust1
                          `cast`
                        (Sym (Control.Instances.Morph.N:Morph[0]
                                  <GHC.Base.Maybe>_N
                                  <Data.Proxy.Proxy>_N)) of ww { (#,,,,,#) ww1 ww2 ww3 ww4 ww5 ww6 ->
                 Control.Reference.Representation.Reference
                   @ (Control.Monad.Trans.Reader.ReaderT
                        [GHC.LanguageExtensions.Type.Extension]
                        (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc))
                   @ Control.Reference.Representation.MU
                   @ Control.Reference.Representation.MU
                   @ Control.Reference.Representation.MU
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        Language.Haskell.Tools.AST.Representation.TH.USplice
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        Language.Haskell.Tools.AST.Representation.TH.USplice
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        Language.Haskell.Tools.AST.Representation.Names.UName
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        Language.Haskell.Tools.AST.Representation.Names.UName
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   ww1
                   ww2
                   ww3
                   ww4
                   ww5
                   ww6 }) -}
8a26737bca9ccaf8773545e28a0abf0f
  traverseStmt ::
    ExtMonad.CheckUNode uexpr
    -> ExtMonad.CheckNode (TraverseAST.StmtG uexpr)
  {- Arity: 2,
     Strictness: <L,C(U)><S(S(LLS(S)LLLLLLLLLL)L),U(U(U,U,U(U),U,U,U,U,U,U,U,U,U,U),U)> -}
9a83b344f67b996b4096a95fa8a5dfa7
  traverseTupSecElem ::
    ExtMonad.CheckNode
      Language.Haskell.Tools.AST.ElementTypes.TupSecElem
  {- Arity: 1,
     Strictness: <S(S(LLS(S)LLLLLLLLLL)L),U(U(U,U,U(U),U,U,U,U,U,U,U,U,U,U),U)>,
     Unfolding: (\ @ dom ($d(%,%) :: ExtMonad.ExtDomain dom) ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Language.Haskell.Tools.AST.Ann.SemanticInfo'
                             dom Language.Haskell.Tools.AST.Ann.SameInfoDefaultCls)
                        @ Language.Haskell.Tools.AST.SemaInfoTypes.NoSemanticInfo
                        (Language.Haskell.Tools.AST.Ann.$p3Domain
                           @ dom
                           (GHC.Classes.$p1(%,%)
                              @ (Language.Haskell.Tools.AST.Ann.Domain dom)
                              @ (Language.Haskell.Tools.AST.SemaInfoClasses.HasNameInfo'
                                   (Language.Haskell.Tools.AST.Ann.SemanticInfo
                                      dom
                                      Language.Haskell.Tools.AST.Representation.Names.UQualifiedName))
                              $d(%,%)))
                          `cast`
                        (Data.Type.Equality.N:~[0]
                             <*>_N <Language.Haskell.Tools.AST.Ann.SemanticInfo'
                                      dom
                                      Language.Haskell.Tools.AST.Ann.SameInfoDefaultCls>_N <Language.Haskell.Tools.AST.SemaInfoTypes.NoSemanticInfo>_N) of cobox0 { DEFAULT ->
                 case TraverseAST.traverseTupSecElem1
                        @ dom of wild { Control.Reference.Representation.Reference ds1 ds2 ds3 ds4 ds5 ds6 ->
                 ds3 (TraverseAST.traverseExpr @ dom $d(%,%)) } }) -}
cce1f7966ee238dd19242a5e5a5eaae2
  traverseTupSecElem1 ::
    Control.Reference.Representation.Reference
      (Control.Monad.Trans.Reader.ReaderT
         [GHC.LanguageExtensions.Type.Extension]
         (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc))
      Control.Reference.Representation.MU
      Control.Reference.Representation.MU
      Control.Reference.Representation.MU
      (Language.Haskell.Tools.AST.Ann.Ann
         Language.Haskell.Tools.AST.Representation.Exprs.UTupSecElem
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
      (Language.Haskell.Tools.AST.Ann.Ann
         Language.Haskell.Tools.AST.Representation.Exprs.UTupSecElem
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
      (Language.Haskell.Tools.AST.Ann.Ann
         Language.Haskell.Tools.AST.Representation.Exprs.UExpr
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
      (Language.Haskell.Tools.AST.Ann.Ann
         Language.Haskell.Tools.AST.Representation.Exprs.UExpr
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
  {- Unfolding: (\ @ dom ->
                 case Language.Haskell.Tools.AST.References.$wtupSecExpr
                        @ GHC.Prim.Any
                        @ GHC.Prim.Any
                        @ dom
                        @ Language.Haskell.Tools.AST.Ann.SrcTemplateStage
                        @ (Control.Monad.Trans.Reader.ReaderT
                             [GHC.LanguageExtensions.Type.Extension]
                             (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc))
                        @ Control.Reference.Representation.MU
                        (TraverseAST.$s$fMonadReaderT
                           @ [GHC.LanguageExtensions.Type.Extension])
                        Data.Proxy.$fMonadPlusProxy
                        TraverseAST.$sannJust1
                          `cast`
                        (Sym (Control.Instances.Morph.N:Morph[0]
                                  <GHC.Base.Maybe>_N
                                  <Data.Proxy.Proxy>_N)) of ww { (#,,,,,#) ww1 ww2 ww3 ww4 ww5 ww6 ->
                 Control.Reference.Representation.Reference
                   @ (Control.Monad.Trans.Reader.ReaderT
                        [GHC.LanguageExtensions.Type.Extension]
                        (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc))
                   @ Control.Reference.Representation.MU
                   @ Control.Reference.Representation.MU
                   @ Control.Reference.Representation.MU
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        Language.Haskell.Tools.AST.Representation.Exprs.UTupSecElem
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        Language.Haskell.Tools.AST.Representation.Exprs.UTupSecElem
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        Language.Haskell.Tools.AST.Representation.Exprs.UExpr
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        Language.Haskell.Tools.AST.Representation.Exprs.UExpr
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   ww1
                   ww2
                   ww3
                   ww4
                   ww5
                   ww6 }) -}
cc257fd094cc38b7ebd602ebce9f4fb1
  traverseType ::
    ExtMonad.CheckNode Language.Haskell.Tools.AST.ElementTypes.Type
  {- Arity: 1,
     Strictness: <S(S(LLS(S)LLLLLLLLLL)L),U(U(U,U,U(U),U,U,U,U,U,U,U,U,U,U),U)>,
     Unfolding: (\ @ dom ($d(%,%) :: ExtMonad.ExtDomain dom) ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Language.Haskell.Tools.AST.Ann.SemanticInfo'
                             dom Language.Haskell.Tools.AST.Ann.SameInfoDefaultCls)
                        @ Language.Haskell.Tools.AST.SemaInfoTypes.NoSemanticInfo
                        (Language.Haskell.Tools.AST.Ann.$p3Domain
                           @ dom
                           (GHC.Classes.$p1(%,%)
                              @ (Language.Haskell.Tools.AST.Ann.Domain dom)
                              @ (Language.Haskell.Tools.AST.SemaInfoClasses.HasNameInfo'
                                   (Language.Haskell.Tools.AST.Ann.SemanticInfo
                                      dom
                                      Language.Haskell.Tools.AST.Representation.Names.UQualifiedName))
                              $d(%,%)))
                          `cast`
                        (Data.Type.Equality.N:~[0]
                             <*>_N <Language.Haskell.Tools.AST.Ann.SemanticInfo'
                                      dom
                                      Language.Haskell.Tools.AST.Ann.SameInfoDefaultCls>_N <Language.Haskell.Tools.AST.SemaInfoTypes.NoSemanticInfo>_N) of cobox0 { DEFAULT ->
                 let {
                   f :: Language.Haskell.Tools.AST.Ann.Ann
                          Language.Haskell.Tools.AST.Representation.Types.UType
                          dom
                          Language.Haskell.Tools.AST.Ann.SrcTemplateStage
                        -> Control.Monad.Trans.Reader.ReaderT
                             [GHC.LanguageExtensions.Type.Extension]
                             (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc)
                             (Language.Haskell.Tools.AST.Ann.Ann
                                Language.Haskell.Tools.AST.Representation.Types.UType
                                dom
                                Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   = case TraverseAST.traverseType2
                            @ dom of wild { Control.Reference.Representation.Reference ds1 ds2 ds3 ds4 ds5 ds6 ->
                     ds3 (TraverseAST.traverseSplice @ dom $d(%,%)) }
                 } in
                 let {
                   g :: Language.Haskell.Tools.AST.Ann.Ann
                          Language.Haskell.Tools.AST.Representation.Types.UType
                          dom
                          Language.Haskell.Tools.AST.Ann.SrcTemplateStage
                        -> Control.Monad.Trans.Reader.ReaderT
                             [GHC.LanguageExtensions.Type.Extension]
                             (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc)
                             (Language.Haskell.Tools.AST.Ann.Ann
                                Language.Haskell.Tools.AST.Representation.Types.UType
                                dom
                                Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   = case TraverseAST.traverseType1
                            @ dom of wild { Control.Reference.Representation.Reference ds1 ds2 ds3 ds4 ds5 ds6 ->
                     ds3 (TraverseAST.traverseQuasiQuote @ dom $d(%,%)) }
                 } in
                 \ (x :: Language.Haskell.Tools.AST.Ann.Ann
                           Language.Haskell.Tools.AST.Representation.Types.UType
                           dom
                           Language.Haskell.Tools.AST.Ann.SrcTemplateStage) ->
                 let {
                   m1 :: Control.Monad.Trans.Reader.ReaderT
                           [GHC.LanguageExtensions.Type.Extension]
                           (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc)
                           (Language.Haskell.Tools.AST.Ann.Ann
                              Language.Haskell.Tools.AST.Representation.Types.UType
                              dom
                              Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   = f x
                 } in
                 (\ (r1 :: [GHC.LanguageExtensions.Type.Extension]) ->
                  let {
                    m2 :: Control.Monad.Trans.State.Lazy.StateT
                            (Data.Map.Base.Map
                               (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                               [SrcLoc.SrcSpan])
                            GhcMonad.Ghc
                            (Language.Haskell.Tools.AST.Ann.Ann
                               Language.Haskell.Tools.AST.Representation.Types.UType
                               dom
                               Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                    = m1
                        `cast`
                      (Control.Monad.Trans.Reader.N:ReaderT[0]
                           <*>_N
                           <[GHC.LanguageExtensions.Type.Extension]>_R
                           <Control.Monad.Trans.State.Lazy.StateT
                              ExtMap.ExtMap GhcMonad.Ghc>_R
                           <Language.Haskell.Tools.AST.Ann.Ann
                              Language.Haskell.Tools.AST.Representation.Types.UType
                              dom
                              Language.Haskell.Tools.AST.Ann.SrcTemplateStage>_N)
                        r1
                  } in
                  (\ (s1 :: Data.Map.Base.Map
                              (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                              [SrcLoc.SrcSpan]) ->
                   let {
                     m :: GhcMonad.Ghc
                            (Language.Haskell.Tools.AST.Ann.Ann
                               Language.Haskell.Tools.AST.Representation.Types.UType
                               dom
                               Language.Haskell.Tools.AST.Ann.SrcTemplateStage,
                             Data.Map.Base.Map
                               (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                               [SrcLoc.SrcSpan])
                     = m2
                         `cast`
                       (Control.Monad.Trans.State.Lazy.N:StateT[0]
                            <Data.Map.Base.Map
                               (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                               [SrcLoc.SrcSpan]>_N
                            <GhcMonad.Ghc>_R
                            <Language.Haskell.Tools.AST.Ann.Ann
                               Language.Haskell.Tools.AST.Representation.Types.UType
                               dom
                               Language.Haskell.Tools.AST.Ann.SrcTemplateStage>_N)
                         s1
                   } in
                   (\ (s :: GhcMonad.Session)
                      (s2 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                    case (m `cast`
                          (GhcMonad.N:Ghc[0]
                               <(Language.Haskell.Tools.AST.Ann.Ann
                                   Language.Haskell.Tools.AST.Representation.Types.UType
                                   dom
                                   Language.Haskell.Tools.AST.Ann.SrcTemplateStage,
                                 Data.Map.Base.Map
                                   (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                                   [SrcLoc.SrcSpan])>_R)
                            s)
                           `cast`
                         (GHC.Types.N:IO[0]
                              <(Language.Haskell.Tools.AST.Ann.Ann
                                  Language.Haskell.Tools.AST.Representation.Types.UType
                                  dom
                                  Language.Haskell.Tools.AST.Ann.SrcTemplateStage,
                                Data.Map.Base.Map
                                  (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                                  [SrcLoc.SrcSpan])>_R)
                           s2 of ds1 { (#,#) ipv ipv1 ->
                    ((((g (case ipv1 of wild { (,) a1 s' -> a1 }))
                         `cast`
                       (Control.Monad.Trans.Reader.N:ReaderT[0]
                            <*>_N
                            <[GHC.LanguageExtensions.Type.Extension]>_R
                            <Control.Monad.Trans.State.Lazy.StateT
                               ExtMap.ExtMap GhcMonad.Ghc>_R
                            <Language.Haskell.Tools.AST.Ann.Ann
                               Language.Haskell.Tools.AST.Representation.Types.UType
                               dom
                               Language.Haskell.Tools.AST.Ann.SrcTemplateStage>_N)
                         r1)
                        `cast`
                      (Control.Monad.Trans.State.Lazy.N:StateT[0]
                           <Data.Map.Base.Map
                              (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                              [SrcLoc.SrcSpan]>_N
                           <GhcMonad.Ghc>_R
                           <Language.Haskell.Tools.AST.Ann.Ann
                              Language.Haskell.Tools.AST.Representation.Types.UType
                              dom
                              Language.Haskell.Tools.AST.Ann.SrcTemplateStage>_N)
                        (case ipv1 of wild { (,) a1 s' -> s' }))
                       `cast`
                     (GhcMonad.N:Ghc[0]
                          <(Language.Haskell.Tools.AST.Ann.Ann
                              Language.Haskell.Tools.AST.Representation.Types.UType
                              dom
                              Language.Haskell.Tools.AST.Ann.SrcTemplateStage,
                            Data.Map.Base.Map
                              (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                              [SrcLoc.SrcSpan])>_R)
                       s)
                      `cast`
                    (GHC.Types.N:IO[0]
                         <(Language.Haskell.Tools.AST.Ann.Ann
                             Language.Haskell.Tools.AST.Representation.Types.UType
                             dom
                             Language.Haskell.Tools.AST.Ann.SrcTemplateStage,
                           Data.Map.Base.Map
                             (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                             [SrcLoc.SrcSpan])>_R)
                      ipv })
                     `cast`
                   (Trans
                        (<GhcMonad.Session>_R
                         ->_R Sym (GHC.Types.N:IO[0]
                                       <(Language.Haskell.Tools.AST.Ann.Ann
                                           Language.Haskell.Tools.AST.Representation.Types.UType
                                           dom
                                           Language.Haskell.Tools.AST.Ann.SrcTemplateStage,
                                         Data.Map.Base.Map
                                           (ExtMap.LogicalRelation
                                              GHC.LanguageExtensions.Type.Extension)
                                           [SrcLoc.SrcSpan])>_R))
                        (Sym (GhcMonad.N:Ghc[0]
                                  <(Language.Haskell.Tools.AST.Ann.Ann
                                      Language.Haskell.Tools.AST.Representation.Types.UType
                                      dom
                                      Language.Haskell.Tools.AST.Ann.SrcTemplateStage,
                                    Data.Map.Base.Map
                                      (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                                      [SrcLoc.SrcSpan])>_R))))
                    `cast`
                  (Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                            <Data.Map.Base.Map
                               (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                               [SrcLoc.SrcSpan]>_N
                            <GhcMonad.Ghc>_R
                            <Language.Haskell.Tools.AST.Ann.Ann
                               Language.Haskell.Tools.AST.Representation.Types.UType
                               dom
                               Language.Haskell.Tools.AST.Ann.SrcTemplateStage>_N)))
                   `cast`
                 (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                           <*>_N
                           <[GHC.LanguageExtensions.Type.Extension]>_R
                           <Control.Monad.Trans.State.Lazy.StateT
                              ExtMap.ExtMap GhcMonad.Ghc>_R
                           <Language.Haskell.Tools.AST.Ann.Ann
                              Language.Haskell.Tools.AST.Representation.Types.UType
                              dom
                              Language.Haskell.Tools.AST.Ann.SrcTemplateStage>_N)) }) -}
0b0fc3aabc32c49c8301ba51454b3370
  traverseType1 ::
    Control.Reference.Representation.Reference
      (Control.Monad.Trans.Reader.ReaderT
         [GHC.LanguageExtensions.Type.Extension]
         (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc))
      Control.Reference.Representation.MU
      Control.Reference.Representation.MU
      Control.Reference.Representation.MU
      (Language.Haskell.Tools.AST.Ann.Ann
         Language.Haskell.Tools.AST.Representation.Types.UType
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
      (Language.Haskell.Tools.AST.Ann.Ann
         Language.Haskell.Tools.AST.Representation.Types.UType
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
      (Language.Haskell.Tools.AST.Ann.Ann
         Language.Haskell.Tools.AST.Representation.TH.UQuasiQuote
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
      (Language.Haskell.Tools.AST.Ann.Ann
         Language.Haskell.Tools.AST.Representation.TH.UQuasiQuote
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
  {- Unfolding: (\ @ dom ->
                 case Language.Haskell.Tools.AST.References.$wtypeQQ
                        @ dom
                        @ Language.Haskell.Tools.AST.Ann.SrcTemplateStage
                        @ (Control.Monad.Trans.Reader.ReaderT
                             [GHC.LanguageExtensions.Type.Extension]
                             (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc))
                        @ Control.Reference.Representation.MU
                        (TraverseAST.$s$fMonadReaderT
                           @ [GHC.LanguageExtensions.Type.Extension])
                        Data.Proxy.$fMonadPlusProxy
                        TraverseAST.$sannJust1
                          `cast`
                        (Sym (Control.Instances.Morph.N:Morph[0]
                                  <GHC.Base.Maybe>_N
                                  <Data.Proxy.Proxy>_N)) of ww { (#,,,,,#) ww1 ww2 ww3 ww4 ww5 ww6 ->
                 Control.Reference.Representation.Reference
                   @ (Control.Monad.Trans.Reader.ReaderT
                        [GHC.LanguageExtensions.Type.Extension]
                        (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc))
                   @ Control.Reference.Representation.MU
                   @ Control.Reference.Representation.MU
                   @ Control.Reference.Representation.MU
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        Language.Haskell.Tools.AST.Representation.Types.UType
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        Language.Haskell.Tools.AST.Representation.Types.UType
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        Language.Haskell.Tools.AST.Representation.TH.UQuasiQuote
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        Language.Haskell.Tools.AST.Representation.TH.UQuasiQuote
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   ww1
                   ww2
                   ww3
                   ww4
                   ww5
                   ww6 }) -}
f4e9fa399c66d71db04b32524a72dd5b
  traverseType2 ::
    Control.Reference.Representation.Reference
      (Control.Monad.Trans.Reader.ReaderT
         [GHC.LanguageExtensions.Type.Extension]
         (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc))
      Control.Reference.Representation.MU
      Control.Reference.Representation.MU
      Control.Reference.Representation.MU
      (Language.Haskell.Tools.AST.Ann.Ann
         Language.Haskell.Tools.AST.Representation.Types.UType
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
      (Language.Haskell.Tools.AST.Ann.Ann
         Language.Haskell.Tools.AST.Representation.Types.UType
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
      (Language.Haskell.Tools.AST.Ann.Ann
         Language.Haskell.Tools.AST.Representation.TH.USplice
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
      (Language.Haskell.Tools.AST.Ann.Ann
         Language.Haskell.Tools.AST.Representation.TH.USplice
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
  {- Unfolding: (\ @ dom ->
                 case Language.Haskell.Tools.AST.References.$wtsSplice
                        @ dom
                        @ Language.Haskell.Tools.AST.Ann.SrcTemplateStage
                        @ (Control.Monad.Trans.Reader.ReaderT
                             [GHC.LanguageExtensions.Type.Extension]
                             (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc))
                        @ Control.Reference.Representation.MU
                        (TraverseAST.$s$fMonadReaderT
                           @ [GHC.LanguageExtensions.Type.Extension])
                        Data.Proxy.$fMonadPlusProxy
                        TraverseAST.$sannJust1
                          `cast`
                        (Sym (Control.Instances.Morph.N:Morph[0]
                                  <GHC.Base.Maybe>_N
                                  <Data.Proxy.Proxy>_N)) of ww { (#,,,,,#) ww1 ww2 ww3 ww4 ww5 ww6 ->
                 Control.Reference.Representation.Reference
                   @ (Control.Monad.Trans.Reader.ReaderT
                        [GHC.LanguageExtensions.Type.Extension]
                        (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc))
                   @ Control.Reference.Representation.MU
                   @ Control.Reference.Representation.MU
                   @ Control.Reference.Representation.MU
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        Language.Haskell.Tools.AST.Representation.Types.UType
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        Language.Haskell.Tools.AST.Representation.Types.UType
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        Language.Haskell.Tools.AST.Representation.TH.USplice
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        Language.Haskell.Tools.AST.Representation.TH.USplice
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   ww1
                   ww2
                   ww3
                   ww4
                   ww5
                   ww6 }) -}
d076594f0b920e7e2d5b3d218eed7688
  traverseTypeEqn ::
    ExtMonad.CheckNode Language.Haskell.Tools.AST.ElementTypes.TypeEqn
  {- Arity: 1,
     Strictness: <S(S(LLS(S)LLLLLLLLLL)L),U(U(U,U,U(U),U,U,U,U,U,U,U,U,U,U),U)>,
     Unfolding: (\ @ dom ($d(%,%) :: ExtMonad.ExtDomain dom) ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Language.Haskell.Tools.AST.Ann.SemanticInfo'
                             dom Language.Haskell.Tools.AST.Ann.SameInfoDefaultCls)
                        @ Language.Haskell.Tools.AST.SemaInfoTypes.NoSemanticInfo
                        (Language.Haskell.Tools.AST.Ann.$p3Domain
                           @ dom
                           (GHC.Classes.$p1(%,%)
                              @ (Language.Haskell.Tools.AST.Ann.Domain dom)
                              @ (Language.Haskell.Tools.AST.SemaInfoClasses.HasNameInfo'
                                   (Language.Haskell.Tools.AST.Ann.SemanticInfo
                                      dom
                                      Language.Haskell.Tools.AST.Representation.Names.UQualifiedName))
                              $d(%,%)))
                          `cast`
                        (Data.Type.Equality.N:~[0]
                             <*>_N <Language.Haskell.Tools.AST.Ann.SemanticInfo'
                                      dom
                                      Language.Haskell.Tools.AST.Ann.SameInfoDefaultCls>_N <Language.Haskell.Tools.AST.SemaInfoTypes.NoSemanticInfo>_N) of cobox0 { DEFAULT ->
                 case TraverseAST.traverseTypeEqn1
                        @ dom of wild { Control.Reference.Representation.Reference ds1 ds2 ds3 ds4 ds5 ds6 ->
                 ds3 (TraverseAST.traverseType @ dom $d(%,%)) } }) -}
7620a4bfc96046e40873fca9ebdd8490
  traverseTypeEqn1 ::
    Control.Reference.Representation.Reference
      (Control.Monad.Trans.Reader.ReaderT
         [GHC.LanguageExtensions.Type.Extension]
         (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc))
      Control.Reference.Representation.MU
      Control.Reference.Representation.MU
      Control.Reference.Representation.MU
      (Language.Haskell.Tools.AST.Ann.Ann
         Language.Haskell.Tools.AST.Representation.Decls.UTypeEqn
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
      (Language.Haskell.Tools.AST.Ann.Ann
         Language.Haskell.Tools.AST.Representation.Decls.UTypeEqn
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
      (Language.Haskell.Tools.AST.Ann.Ann
         Language.Haskell.Tools.AST.Representation.Types.UType
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
      (Language.Haskell.Tools.AST.Ann.Ann
         Language.Haskell.Tools.AST.Representation.Types.UType
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
  {- Unfolding: (\ @ dom ->
                 case Control.Reference.Combinators.$w&+&
                        @ (Control.Monad.Trans.Reader.ReaderT
                             [GHC.LanguageExtensions.Type.Extension]
                             (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc))
                        @ Control.Reference.Representation.MU
                        @ Control.Reference.Representation.MU
                        @ Control.Reference.Representation.MU
                        @ (Language.Haskell.Tools.AST.Ann.Ann
                             Language.Haskell.Tools.AST.Representation.Decls.UTypeEqn
                             dom
                             Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                        @ (Language.Haskell.Tools.AST.Ann.Ann
                             Language.Haskell.Tools.AST.Representation.Types.UType
                             dom
                             Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                        TraverseAST.$s$fRefMonadswr
                        Control.Reference.Predefined.Containers.Tree.$s$fRefMonadswr1
                        Data.Proxy.$fMonadPlusProxy
                        Data.Proxy.$fMonadPlusProxy
                        (TraverseAST.traverseTypeEqn3 @ dom)
                        (TraverseAST.traverseTypeEqn2
                           @ dom) of ww { (#,,,,,#) ww1 ww2 ww3 ww4 ww5 ww6 ->
                 Control.Reference.Representation.Reference
                   @ (Control.Monad.Trans.Reader.ReaderT
                        [GHC.LanguageExtensions.Type.Extension]
                        (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc))
                   @ Control.Reference.Representation.MU
                   @ Control.Reference.Representation.MU
                   @ Control.Reference.Representation.MU
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        Language.Haskell.Tools.AST.Representation.Decls.UTypeEqn
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        Language.Haskell.Tools.AST.Representation.Decls.UTypeEqn
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        Language.Haskell.Tools.AST.Representation.Types.UType
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        Language.Haskell.Tools.AST.Representation.Types.UType
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   ww1
                   ww2
                   ww3
                   ww4
                   ww5
                   ww6 }) -}
c39d0a6bce8436f7807d37b3cf5af2cf
  traverseTypeEqn2 ::
    Control.Reference.Representation.Reference
      (Control.Monad.Trans.Reader.ReaderT
         [GHC.LanguageExtensions.Type.Extension]
         (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc))
      Control.Reference.Representation.MU
      Control.Reference.Representation.MU
      Control.Reference.Representation.MU
      (Language.Haskell.Tools.AST.Ann.Ann
         Language.Haskell.Tools.AST.Representation.Decls.UTypeEqn
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
      (Language.Haskell.Tools.AST.Ann.Ann
         Language.Haskell.Tools.AST.Representation.Decls.UTypeEqn
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
      (Language.Haskell.Tools.AST.Ann.Ann
         Language.Haskell.Tools.AST.Representation.Types.UType
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
      (Language.Haskell.Tools.AST.Ann.Ann
         Language.Haskell.Tools.AST.Representation.Types.UType
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
  {- Unfolding: (\ @ dom ->
                 case Language.Haskell.Tools.AST.References.$wteRhs
                        @ dom
                        @ Language.Haskell.Tools.AST.Ann.SrcTemplateStage
                        @ (Control.Monad.Trans.Reader.ReaderT
                             [GHC.LanguageExtensions.Type.Extension]
                             (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc))
                        @ Control.Reference.Representation.MU
                        TraverseAST.$s$fRefMonadswr of ww { (#,,,,,#) ww1 ww2 ww3 ww4 ww5 ww6 ->
                 Control.Reference.Representation.Reference
                   @ (Control.Monad.Trans.Reader.ReaderT
                        [GHC.LanguageExtensions.Type.Extension]
                        (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc))
                   @ Control.Reference.Representation.MU
                   @ Control.Reference.Representation.MU
                   @ Control.Reference.Representation.MU
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        Language.Haskell.Tools.AST.Representation.Decls.UTypeEqn
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        Language.Haskell.Tools.AST.Representation.Decls.UTypeEqn
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        Language.Haskell.Tools.AST.Representation.Types.UType
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        Language.Haskell.Tools.AST.Representation.Types.UType
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   ww1
                   ww2
                   ww3
                   ww4
                   ww5
                   ww6 }) -}
fbc27e3812e450529d73b32ebb48661a
  traverseTypeEqn3 ::
    Control.Reference.Representation.Reference
      (Control.Monad.Trans.Reader.ReaderT
         [GHC.LanguageExtensions.Type.Extension]
         (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc))
      Control.Reference.Representation.MU
      Control.Reference.Representation.MU
      Control.Reference.Representation.MU
      (Language.Haskell.Tools.AST.Ann.Ann
         Language.Haskell.Tools.AST.Representation.Decls.UTypeEqn
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
      (Language.Haskell.Tools.AST.Ann.Ann
         Language.Haskell.Tools.AST.Representation.Decls.UTypeEqn
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
      (Language.Haskell.Tools.AST.Ann.Ann
         Language.Haskell.Tools.AST.Representation.Types.UType
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
      (Language.Haskell.Tools.AST.Ann.Ann
         Language.Haskell.Tools.AST.Representation.Types.UType
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
  {- Unfolding: (\ @ dom ->
                 case Language.Haskell.Tools.AST.References.$wteLhs
                        @ dom
                        @ Language.Haskell.Tools.AST.Ann.SrcTemplateStage
                        @ (Control.Monad.Trans.Reader.ReaderT
                             [GHC.LanguageExtensions.Type.Extension]
                             (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc))
                        @ Control.Reference.Representation.MU
                        TraverseAST.$s$fRefMonadswr of ww { (#,,,,,#) ww1 ww2 ww3 ww4 ww5 ww6 ->
                 Control.Reference.Representation.Reference
                   @ (Control.Monad.Trans.Reader.ReaderT
                        [GHC.LanguageExtensions.Type.Extension]
                        (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc))
                   @ Control.Reference.Representation.MU
                   @ Control.Reference.Representation.MU
                   @ Control.Reference.Representation.MU
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        Language.Haskell.Tools.AST.Representation.Decls.UTypeEqn
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        Language.Haskell.Tools.AST.Representation.Decls.UTypeEqn
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        Language.Haskell.Tools.AST.Representation.Types.UType
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        Language.Haskell.Tools.AST.Representation.Types.UType
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   ww1
                   ww2
                   ww3
                   ww4
                   ww5
                   ww6 }) -}
a84e52479ba48ceefd1a3e1b1327fa47
  traverseTypeSignature ::
    ExtMonad.CheckNode
      Language.Haskell.Tools.AST.ElementTypes.TypeSignature
  {- Arity: 6, HasNoCafRefs,
     Strictness: <S(S(LLS(S)LLLLLLLLLL)L),1*U(1*U(A,A,1*U(1*U),A,A,A,A,A,A,A,A,A,A),A)><L,U><L,A><L,U><L,A><S,U>,
     Unfolding: InlineRule (0, True, True)
                TraverseAST.traverseInstBodyDecl3
                  `cast`
                (forall (dom :: <*>_N).
                 <ExtMonad.ExtDomain dom>_R
                 ->_R <Language.Haskell.Tools.AST.ElementTypes.TypeSignature dom>_R
                 ->_R Trans
                          (<[GHC.LanguageExtensions.Type.Extension]>_R
                           ->_R Trans
                                    (<ExtMap.ExtMap>_R
                                     ->_R Trans
                                              (<GhcMonad.Session>_R
                                               ->_R Sym (GHC.Types.N:IO[0]
                                                             <(Language.Haskell.Tools.AST.ElementTypes.TypeSignature
                                                                 dom,
                                                               ExtMap.ExtMap)>_R))
                                              (Sym (GhcMonad.N:Ghc[0]
                                                        <(Language.Haskell.Tools.AST.ElementTypes.TypeSignature
                                                            dom,
                                                          ExtMap.ExtMap)>_R)))
                                    (Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                              <ExtMap.ExtMap>_N
                                              <GhcMonad.Ghc>_R
                                              <Language.Haskell.Tools.AST.ElementTypes.TypeSignature
                                                 dom>_N)))
                          (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                    <*>_N
                                    <[GHC.LanguageExtensions.Type.Extension]>_R
                                    <Control.Monad.Trans.State.Lazy.StateT
                                       ExtMap.ExtMap GhcMonad.Ghc>_R
                                    <Language.Haskell.Tools.AST.ElementTypes.TypeSignature
                                       dom>_N))) -}
d4572205d33af96baf47cc77d0828ae7
  traverseValueBind ::
    ExtMonad.CheckNode
      Language.Haskell.Tools.AST.ElementTypes.ValueBind
  {- Arity: 1,
     Strictness: <S(S(LLS(S)LLLLLLLLLL)L),U(U(U,U,U(U),U,U,U,U,U,U,U,U,U,U),U)> -}
"SPEC/TraverseAST $fApplicativeReaderT @ (StateT ExtMap Ghc) _" [ALWAYS] forall @ r
                                                                                ($dApplicative :: GHC.Base.Applicative
                                                                                                    (Control.Monad.Trans.State.Lazy.StateT
                                                                                                       ExtMap.ExtMap
                                                                                                       GhcMonad.Ghc))
  Control.Monad.Trans.Reader.$fApplicativeReaderT @ (Control.Monad.Trans.State.Lazy.StateT
                                                       ExtMap.ExtMap GhcMonad.Ghc)
                                                  @ r
                                                  $dApplicative
  = TraverseAST.$s$fApplicativeReaderT @ r
"SPEC/TraverseAST $fApplicativeReaderT_$c<*> @ (StateT ExtMap Ghc) _" [ALWAYS] forall @ r
                                                                                      ($dApplicative :: GHC.Base.Applicative
                                                                                                          (Control.Monad.Trans.State.Lazy.StateT
                                                                                                             ExtMap.ExtMap
                                                                                                             GhcMonad.Ghc))
  Control.Monad.Trans.Reader.$fApplicativeReaderT_$c<*> @ (Control.Monad.Trans.State.Lazy.StateT
                                                             ExtMap.ExtMap GhcMonad.Ghc)
                                                        @ r
                                                        $dApplicative
  = TraverseAST.$s$fApplicativeReaderT_$s$fApplicativeReaderT_$c<*>
      @ r
"SPEC/TraverseAST $fApplicativeReaderT_$cp1Applicative @ (StateT
                                                           ExtMap Ghc) _" [ALWAYS] forall @ r
                                                                                                                                                           ($dApplicative :: GHC.Base.Applicative
                                                                                                                                                                               (Control.Monad.Trans.State.Lazy.StateT
                                                                                                                                                                                  ExtMap.ExtMap
                                                                                                                                                                                  GhcMonad.Ghc))
  Control.Monad.Trans.Reader.$fApplicativeReaderT_$cp1Applicative @ (Control.Monad.Trans.State.Lazy.StateT
                                                                       ExtMap.ExtMap GhcMonad.Ghc)
                                                                  @ r
                                                                  $dApplicative
  = TraverseAST.$s$fApplicativeReaderT_$s$fApplicativeReaderT_$cp1Applicative
      @ r
"SPEC/TraverseAST $fApplicativeReaderT_$cpure @ (StateT
                                                  ExtMap Ghc) _" [ALWAYS] forall @ r
                                                                                                                                         ($dApplicative :: GHC.Base.Applicative
                                                                                                                                                             (Control.Monad.Trans.State.Lazy.StateT
                                                                                                                                                                ExtMap.ExtMap
                                                                                                                                                                GhcMonad.Ghc))
  Control.Monad.Trans.Reader.$fApplicativeReaderT_$cpure @ (Control.Monad.Trans.State.Lazy.StateT
                                                              ExtMap.ExtMap GhcMonad.Ghc)
                                                         @ r
                                                         $dApplicative
  = TraverseAST.$s$fApplicativeReaderT_$cpure @ r
"SPEC/TraverseAST $fApplicativeStateT @ Ghc _" [ALWAYS] forall @ s
                                                               ($dMonad :: GHC.Base.Monad
                                                                             GhcMonad.Ghc)
                                                               ($dFunctor :: GHC.Base.Functor
                                                                               GhcMonad.Ghc)
  Control.Monad.Trans.State.Lazy.$fApplicativeStateT @ GhcMonad.Ghc
                                                     @ s
                                                     $dFunctor
                                                     $dMonad
  = TraverseAST.$s$fApplicativeReaderT_$s$fApplicativeStateT @ s
"SPEC/TraverseAST $fApplicativeStateT_$c<*> @ Ghc _" [ALWAYS] forall @ s
                                                                     ($dMonad :: GHC.Base.Monad
                                                                                   GhcMonad.Ghc)
                                                                     ($dFunctor :: GHC.Base.Functor
                                                                                     GhcMonad.Ghc)
  Control.Monad.Trans.State.Lazy.$fApplicativeStateT_$c<*> @ GhcMonad.Ghc
                                                           @ s
                                                           $dFunctor
                                                           $dMonad
  = TraverseAST.$s$fApplicativeReaderT_$s$fApplicativeStateT_$c<*>
      @ s
"SPEC/TraverseAST $fApplicativeStateT_$cp1Applicative @ Ghc _" [ALWAYS] forall @ s
                                                                               ($dMonad :: GHC.Base.Monad
                                                                                             GhcMonad.Ghc)
                                                                               ($dFunctor :: GHC.Base.Functor
                                                                                               GhcMonad.Ghc)
  Control.Monad.Trans.State.Lazy.$fApplicativeStateT_$cp1Applicative @ GhcMonad.Ghc
                                                                     @ s
                                                                     $dFunctor
                                                                     $dMonad
  = TraverseAST.$s$fApplicativeReaderT_$s$fApplicativeStateT_$cp1Applicative
      @ s
"SPEC/TraverseAST $fApplicativeStateT_$cpure @ Ghc _" [ALWAYS] forall @ s
                                                                      ($dMonad :: GHC.Base.Monad
                                                                                    GhcMonad.Ghc)
                                                                      ($dFunctor :: GHC.Base.Functor
                                                                                      GhcMonad.Ghc)
  Control.Monad.Trans.State.Lazy.$fApplicativeStateT_$cpure @ GhcMonad.Ghc
                                                            @ s
                                                            $dFunctor
                                                            $dMonad
  = TraverseAST.$s$fApplicativeReaderT_$s$fApplicativeStateT_$cpure
      @ s
"SPEC/TraverseAST $fFunctorReaderT @ (StateT ExtMap Ghc) _" [ALWAYS] forall @ r
                                                                            ($dFunctor :: GHC.Base.Functor
                                                                                            (Control.Monad.Trans.State.Lazy.StateT
                                                                                               ExtMap.ExtMap
                                                                                               GhcMonad.Ghc))
  Control.Monad.Trans.Reader.$fFunctorReaderT @ (Control.Monad.Trans.State.Lazy.StateT
                                                   ExtMap.ExtMap GhcMonad.Ghc)
                                              @ r
                                              $dFunctor
  = TraverseAST.$s$fApplicativeReaderT_$s$fFunctorReaderT @ r
"SPEC/TraverseAST $fFunctorReaderT_$c<$ @ (StateT ExtMap Ghc) _" [ALWAYS] forall @ r
                                                                                 ($dFunctor :: GHC.Base.Functor
                                                                                                 (Control.Monad.Trans.State.Lazy.StateT
                                                                                                    ExtMap.ExtMap
                                                                                                    GhcMonad.Ghc))
  Control.Monad.Trans.Reader.$fFunctorReaderT_$c<$ @ (Control.Monad.Trans.State.Lazy.StateT
                                                        ExtMap.ExtMap GhcMonad.Ghc)
                                                   @ r
                                                   $dFunctor
  = TraverseAST.$s$fApplicativeReaderT_$s$fFunctorReaderT_$c<$ @ r
"SPEC/TraverseAST $fFunctorReaderT_$cfmap @ (StateT ExtMap Ghc) _" [ALWAYS] forall @ r
                                                                                   ($dFunctor :: GHC.Base.Functor
                                                                                                   (Control.Monad.Trans.State.Lazy.StateT
                                                                                                      ExtMap.ExtMap
                                                                                                      GhcMonad.Ghc))
  Control.Monad.Trans.Reader.$fFunctorReaderT_$cfmap @ (Control.Monad.Trans.State.Lazy.StateT
                                                          ExtMap.ExtMap GhcMonad.Ghc)
                                                     @ r
                                                     $dFunctor
  = TraverseAST.$s$fApplicativeReaderT_$s$fFunctorReaderT_$cfmap @ r
"SPEC/TraverseAST $fFunctorStateT @ Ghc _" [ALWAYS] forall @ s
                                                           ($dFunctor :: GHC.Base.Functor
                                                                           GhcMonad.Ghc)
  Control.Monad.Trans.State.Lazy.$fFunctorStateT @ GhcMonad.Ghc
                                                 @ s
                                                 $dFunctor
  = TraverseAST.$s$fApplicativeReaderT_$s$fFunctorStateT @ s
"SPEC/TraverseAST $fFunctorStateT_$cfmap @ Ghc _" [ALWAYS] forall @ s
                                                                  ($dFunctor :: GHC.Base.Functor
                                                                                  GhcMonad.Ghc)
  Control.Monad.Trans.State.Lazy.$fFunctorStateT_$cfmap @ GhcMonad.Ghc
                                                        @ s
                                                        $dFunctor
  = TraverseAST.$s$fApplicativeReaderT_$s$fFunctorStateT_$cfmap @ s
"SPEC/TraverseAST $fMonadReaderT @ (StateT ExtMap Ghc) _" [ALWAYS] forall @ r
                                                                          ($dMonad :: GHC.Base.Monad
                                                                                        (Control.Monad.Trans.State.Lazy.StateT
                                                                                           ExtMap.ExtMap
                                                                                           GhcMonad.Ghc))
  Control.Monad.Trans.Reader.$fMonadReaderT @ (Control.Monad.Trans.State.Lazy.StateT
                                                 ExtMap.ExtMap GhcMonad.Ghc)
                                            @ r
                                            $dMonad
  = TraverseAST.$s$fMonadReaderT @ r
"SPEC/TraverseAST $fMonadReaderT_$c>> @ (StateT ExtMap Ghc) _" [ALWAYS] forall @ r
                                                                               ($dMonad :: GHC.Base.Monad
                                                                                             (Control.Monad.Trans.State.Lazy.StateT
                                                                                                ExtMap.ExtMap
                                                                                                GhcMonad.Ghc))
  Control.Monad.Trans.Reader.$fMonadReaderT_$c>> @ (Control.Monad.Trans.State.Lazy.StateT
                                                      ExtMap.ExtMap GhcMonad.Ghc)
                                                 @ r
                                                 $dMonad
  = TraverseAST.$s$fMonadReaderT_$s$fMonadReaderT_$c>> @ r
"SPEC/TraverseAST $fMonadReaderT_$c>>= @ (StateT ExtMap Ghc) _" [ALWAYS] forall @ r
                                                                                ($dMonad :: GHC.Base.Monad
                                                                                              (Control.Monad.Trans.State.Lazy.StateT
                                                                                                 ExtMap.ExtMap
                                                                                                 GhcMonad.Ghc))
  Control.Monad.Trans.Reader.$fMonadReaderT_$c>>= @ (Control.Monad.Trans.State.Lazy.StateT
                                                       ExtMap.ExtMap GhcMonad.Ghc)
                                                  @ r
                                                  $dMonad
  = TraverseAST.$s$fMonadReaderT_$s$fMonadReaderT_$c>>= @ r
"SPEC/TraverseAST $fMonadReaderT_$cfail @ (StateT ExtMap Ghc) _" [ALWAYS] forall @ r
                                                                                 ($dMonad :: GHC.Base.Monad
                                                                                               (Control.Monad.Trans.State.Lazy.StateT
                                                                                                  ExtMap.ExtMap
                                                                                                  GhcMonad.Ghc))
  Control.Monad.Trans.Reader.$fMonadReaderT_$cfail @ (Control.Monad.Trans.State.Lazy.StateT
                                                        ExtMap.ExtMap GhcMonad.Ghc)
                                                   @ r
                                                   $dMonad
  = TraverseAST.$s$fMonadReaderT_$s$fMonadReaderT_$cfail @ r
"SPEC/TraverseAST $fMonadReaderT_$cp1Monad @ (StateT ExtMap Ghc) _" [ALWAYS] forall @ r
                                                                                    ($dMonad :: GHC.Base.Monad
                                                                                                  (Control.Monad.Trans.State.Lazy.StateT
                                                                                                     ExtMap.ExtMap
                                                                                                     GhcMonad.Ghc))
  Control.Monad.Trans.Reader.$fMonadReaderT_$cp1Monad @ (Control.Monad.Trans.State.Lazy.StateT
                                                           ExtMap.ExtMap GhcMonad.Ghc)
                                                      @ r
                                                      $dMonad
  = TraverseAST.$s$fMonadReaderT_$s$fMonadReaderT_$cp1Monad @ r
"SPEC/TraverseAST $fRefMonadswr @ (ReaderT
                                    [Extension] (StateT ExtMap Ghc)) @ MU" [ALWAYS] forall ($dMonad1 :: GHC.Base.Monad
                                                                                                                                                     Control.Reference.Representation.MU)
                                                                                                                                      ($dApplicative1 :: GHC.Base.Applicative
                                                                                                                                                           Control.Reference.Representation.MU)
                                                                                                                                      ($dFunctor1 :: GHC.Base.Functor
                                                                                                                                                       Control.Reference.Representation.MU)
                                                                                                                                      ($dMonad :: GHC.Base.Monad
                                                                                                                                                    (Control.Monad.Trans.Reader.ReaderT
                                                                                                                                                       [GHC.LanguageExtensions.Type.Extension]
                                                                                                                                                       (Control.Monad.Trans.State.Lazy.StateT
                                                                                                                                                          ExtMap.ExtMap
                                                                                                                                                          GhcMonad.Ghc)))
                                                                                                                                      ($dApplicative :: GHC.Base.Applicative
                                                                                                                                                          (Control.Monad.Trans.Reader.ReaderT
                                                                                                                                                             [GHC.LanguageExtensions.Type.Extension]
                                                                                                                                                             (Control.Monad.Trans.State.Lazy.StateT
                                                                                                                                                                ExtMap.ExtMap
                                                                                                                                                                GhcMonad.Ghc)))
                                                                                                                                      ($dFunctor :: GHC.Base.Functor
                                                                                                                                                      (Control.Monad.Trans.Reader.ReaderT
                                                                                                                                                         [GHC.LanguageExtensions.Type.Extension]
                                                                                                                                                         (Control.Monad.Trans.State.Lazy.StateT
                                                                                                                                                            ExtMap.ExtMap
                                                                                                                                                            GhcMonad.Ghc)))
  Control.Reference.Representation.$fRefMonadswr @ (Control.Monad.Trans.Reader.ReaderT
                                                      [GHC.LanguageExtensions.Type.Extension]
                                                      (Control.Monad.Trans.State.Lazy.StateT
                                                         ExtMap.ExtMap GhcMonad.Ghc))
                                                 @ Data.Proxy.Proxy
                                                 $dFunctor
                                                 $dApplicative
                                                 $dMonad
                                                 $dFunctor1
                                                 $dApplicative1
                                                 $dMonad1
  = TraverseAST.$s$fRefMonadswr
"SPEC/TraverseAST $fRefMonadswr_$cp4RefMonads @ (ReaderT
                                                  [Extension] (StateT ExtMap Ghc)) @ MU" [ALWAYS] forall ($dMonad1 :: GHC.Base.Monad
                                                                                                                                                                                 Control.Reference.Representation.MU)
                                                                                                                                                                  ($dApplicative1 :: GHC.Base.Applicative
                                                                                                                                                                                       Control.Reference.Representation.MU)
                                                                                                                                                                  ($dFunctor1 :: GHC.Base.Functor
                                                                                                                                                                                   Control.Reference.Representation.MU)
                                                                                                                                                                  ($dMonad :: GHC.Base.Monad
                                                                                                                                                                                (Control.Monad.Trans.Reader.ReaderT
                                                                                                                                                                                   [GHC.LanguageExtensions.Type.Extension]
                                                                                                                                                                                   (Control.Monad.Trans.State.Lazy.StateT
                                                                                                                                                                                      ExtMap.ExtMap
                                                                                                                                                                                      GhcMonad.Ghc)))
                                                                                                                                                                  ($dApplicative :: GHC.Base.Applicative
                                                                                                                                                                                      (Control.Monad.Trans.Reader.ReaderT
                                                                                                                                                                                         [GHC.LanguageExtensions.Type.Extension]
                                                                                                                                                                                         (Control.Monad.Trans.State.Lazy.StateT
                                                                                                                                                                                            ExtMap.ExtMap
                                                                                                                                                                                            GhcMonad.Ghc)))
                                                                                                                                                                  ($dFunctor :: GHC.Base.Functor
                                                                                                                                                                                  (Control.Monad.Trans.Reader.ReaderT
                                                                                                                                                                                     [GHC.LanguageExtensions.Type.Extension]
                                                                                                                                                                                     (Control.Monad.Trans.State.Lazy.StateT
                                                                                                                                                                                        ExtMap.ExtMap
                                                                                                                                                                                        GhcMonad.Ghc)))
  Control.Reference.Representation.$fRefMonadswr_$cp4RefMonads @ (Control.Monad.Trans.Reader.ReaderT
                                                                    [GHC.LanguageExtensions.Type.Extension]
                                                                    (Control.Monad.Trans.State.Lazy.StateT
                                                                       ExtMap.ExtMap GhcMonad.Ghc))
                                                               @ Data.Proxy.Proxy
                                                               $dFunctor
                                                               $dApplicative
                                                               $dMonad
                                                               $dFunctor1
                                                               $dApplicative1
                                                               $dMonad1
  = TraverseAST.$s$fRefMonadswr_$s$fRefMonadswr_$cp4RefMonads
"SPEC/TraverseAST $fRefMonadswr_$cp5RefMonads @ (ReaderT
                                                  [Extension] (StateT ExtMap Ghc)) @ MU" [ALWAYS] forall ($dMonad1 :: GHC.Base.Monad
                                                                                                                                                                                 Control.Reference.Representation.MU)
                                                                                                                                                                  ($dApplicative1 :: GHC.Base.Applicative
                                                                                                                                                                                       Control.Reference.Representation.MU)
                                                                                                                                                                  ($dFunctor1 :: GHC.Base.Functor
                                                                                                                                                                                   Control.Reference.Representation.MU)
                                                                                                                                                                  ($dMonad :: GHC.Base.Monad
                                                                                                                                                                                (Control.Monad.Trans.Reader.ReaderT
                                                                                                                                                                                   [GHC.LanguageExtensions.Type.Extension]
                                                                                                                                                                                   (Control.Monad.Trans.State.Lazy.StateT
                                                                                                                                                                                      ExtMap.ExtMap
                                                                                                                                                                                      GhcMonad.Ghc)))
                                                                                                                                                                  ($dApplicative :: GHC.Base.Applicative
                                                                                                                                                                                      (Control.Monad.Trans.Reader.ReaderT
                                                                                                                                                                                         [GHC.LanguageExtensions.Type.Extension]
                                                                                                                                                                                         (Control.Monad.Trans.State.Lazy.StateT
                                                                                                                                                                                            ExtMap.ExtMap
                                                                                                                                                                                            GhcMonad.Ghc)))
                                                                                                                                                                  ($dFunctor :: GHC.Base.Functor
                                                                                                                                                                                  (Control.Monad.Trans.Reader.ReaderT
                                                                                                                                                                                     [GHC.LanguageExtensions.Type.Extension]
                                                                                                                                                                                     (Control.Monad.Trans.State.Lazy.StateT
                                                                                                                                                                                        ExtMap.ExtMap
                                                                                                                                                                                        GhcMonad.Ghc)))
  Control.Reference.Representation.$fRefMonadswr_$cp5RefMonads @ (Control.Monad.Trans.Reader.ReaderT
                                                                    [GHC.LanguageExtensions.Type.Extension]
                                                                    (Control.Monad.Trans.State.Lazy.StateT
                                                                       ExtMap.ExtMap GhcMonad.Ghc))
                                                               @ Data.Proxy.Proxy
                                                               $dFunctor
                                                               $dApplicative
                                                               $dMonad
                                                               $dFunctor1
                                                               $dApplicative1
                                                               $dMonad1
  = TraverseAST.$s$fRefMonadswr_$s$fRefMonadswr_$cp5RefMonads
"SPEC/TraverseAST $fRefMonadswr_$cp6RefMonads @ (ReaderT
                                                  [Extension] (StateT ExtMap Ghc)) @ MU" [ALWAYS] forall ($dMonad1 :: GHC.Base.Monad
                                                                                                                                                                                 Control.Reference.Representation.MU)
                                                                                                                                                                  ($dApplicative1 :: GHC.Base.Applicative
                                                                                                                                                                                       Control.Reference.Representation.MU)
                                                                                                                                                                  ($dFunctor1 :: GHC.Base.Functor
                                                                                                                                                                                   Control.Reference.Representation.MU)
                                                                                                                                                                  ($dMonad :: GHC.Base.Monad
                                                                                                                                                                                (Control.Monad.Trans.Reader.ReaderT
                                                                                                                                                                                   [GHC.LanguageExtensions.Type.Extension]
                                                                                                                                                                                   (Control.Monad.Trans.State.Lazy.StateT
                                                                                                                                                                                      ExtMap.ExtMap
                                                                                                                                                                                      GhcMonad.Ghc)))
                                                                                                                                                                  ($dApplicative :: GHC.Base.Applicative
                                                                                                                                                                                      (Control.Monad.Trans.Reader.ReaderT
                                                                                                                                                                                         [GHC.LanguageExtensions.Type.Extension]
                                                                                                                                                                                         (Control.Monad.Trans.State.Lazy.StateT
                                                                                                                                                                                            ExtMap.ExtMap
                                                                                                                                                                                            GhcMonad.Ghc)))
                                                                                                                                                                  ($dFunctor :: GHC.Base.Functor
                                                                                                                                                                                  (Control.Monad.Trans.Reader.ReaderT
                                                                                                                                                                                     [GHC.LanguageExtensions.Type.Extension]
                                                                                                                                                                                     (Control.Monad.Trans.State.Lazy.StateT
                                                                                                                                                                                        ExtMap.ExtMap
                                                                                                                                                                                        GhcMonad.Ghc)))
  Control.Reference.Representation.$fRefMonadswr_$cp6RefMonads @ (Control.Monad.Trans.Reader.ReaderT
                                                                    [GHC.LanguageExtensions.Type.Extension]
                                                                    (Control.Monad.Trans.State.Lazy.StateT
                                                                       ExtMap.ExtMap GhcMonad.Ghc))
                                                               @ Data.Proxy.Proxy
                                                               $dFunctor
                                                               $dApplicative
                                                               $dMonad
                                                               $dFunctor1
                                                               $dApplicative1
                                                               $dMonad1
  = TraverseAST.$s$fRefMonadswr_$s$fRefMonadswr_$cp6RefMonads
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

