
==================== FINAL INTERFACE ====================
2017-09-20 19:16:11.786257 UTC

interface ht-extension-organizer-0.1.0.0-y3uypH7gCtA60AaWeuyZL:FlexibleInstancesChecker 8002
  interface hash: 617965b98abc65a01401ac25cfd6840d
  ABI hash: 613725654704abee4fd54b0f4775ba97
  export-list hash: e3e5947061f31e3de9af61a2611cb8cf
  orphan hash: fbc129b65b68a862c3e3b53cc8cd110d
  flag hash: b1d77a0d58a3daa8654092b55b185fa4
  sig of: Nothing
  used TH splices: True
  where
exports:
  FlexibleInstancesChecker.checkedReturn
  FlexibleInstancesChecker.chkFlexibleInstances
  FlexibleInstancesChecker.chkFlexibleInstances'
  FlexibleInstancesChecker.chkInstanceHead
  FlexibleInstancesChecker.chkInstanceRule
  FlexibleInstancesChecker.chkTyVars
  FlexibleInstancesChecker.refact
  FlexibleInstancesChecker.rmTKinded
  FlexibleInstancesChecker.rmTParens
  FlexibleInstancesChecker.rmTypeMisc
module dependencies: ExtMap ExtMonad
package dependencies: array-0.5.1.1@array-0.5.1.1 base-4.9.1.0
                      binary-0.8.3.0@binary-0.8.3.0
                      bytestring-0.10.8.1@bytestring-0.10.8.1
                      containers-0.5.7.1@containers-0.5.7.1
                      deepseq-1.4.2.0@deepseq-1.4.2.0 directory-1.3.0.0@directory-1.3.0.0
                      either-4.4.1.1@either-4.4.1.1-6PiwKYkn4v6B4KO2R2Fu1b
                      filepath-1.4.1.1@filepath-1.4.1.1 ghc-8.0.2
                      ghc-boot-8.0.2@ghc-boot-8.0.2 ghc-boot-th-8.0.2@ghc-boot-th-8.0.2
                      ghc-paths-0.1.0.9@ghc-paths-0.1.0.9-AhaDlGOsRAepox069XzG
                      ghc-prim-0.5.0.0 ghci-8.0.2@ghci-8.0.2
                      hashable-1.2.6.1@hashable-1.2.6.1-2ZLNuHq395GGIHwEHuqZol
                      haskell-tools-ast-0.8.1.0@haskell-tools-ast-0.8.1.0-I9ZMaCkuuwT3FoQkwMjyW6
                      haskell-tools-backend-ghc-0.8.1.0@haskell-tools-backend-ghc-0.8.1.0-DqHnbK8OPi6CBD5cIPITWq
                      haskell-tools-prettyprint-0.8.1.0@haskell-tools-prettyprint-0.8.1.0-F9iWkGq5ppnLH6whHm0DlC
                      haskell-tools-refactor-0.8.1.0@haskell-tools-refactor-0.8.1.0-AF8Q4cA8mAnLNwu5t0Icw8
                      haskell-tools-rewrite-0.8.1.0@haskell-tools-rewrite-0.8.1.0-85A6q9dMQgvKEKG9I8fxVU
                      hoopl-3.10.2.1@hoopl-3.10.2.1 hpc-0.6.0.3@hpc-0.6.0.3
                      instance-control-0.1.1.1@instance-control-0.1.1.1-1defRS82vAAEmZKRhe67aa
                      integer-gmp-1.0.0.1 mtl-2.2.1@mtl-2.2.1-BLKBelFsPB3BoFeSWSOYj6
                      pretty-1.1.3.3@pretty-1.1.3.3 process-1.4.3.0@process-1.4.3.0
                      references-0.3.2.2@references-0.3.2.2-y362bKYomIKNQKMTfOWVo
                      safe-0.3.15@safe-0.3.15-2Yd45VWFfdcKqKyispOifY
                      split-0.2.3.2@split-0.2.3.2-CJl40zTyCIV16Pr60nb7CT
                      syb-0.7@syb-0.7-4OKdCpwGutyB1rNRmoa0ya template-haskell-2.11.1.0
                      text-1.2.2.2@text-1.2.2.2-9UQZjEJZQFSGMffj1Z5g00
                      time-1.6.0.1@time-1.6.0.1 transformers-0.5.2.0@transformers-0.5.2.0
                      uniplate-1.6.12@uniplate-1.6.12-4PyZX21trQJ5lfk0CDvC7U
                      unix-2.7.2.1@unix-2.7.2.1
                      unordered-containers-0.2.8.0@unordered-containers-0.2.8.0-Bp9XgxjuHxcI4tFehVMDGC
orphans: base-4.9.1.0:GHC.Base base-4.9.1.0:GHC.Float
         binary-0.8.3.0@binary-0.8.3.0:Data.Binary.Generic
         bytestring-0.10.8.1@bytestring-0.10.8.1:Data.ByteString.Builder
         ghc-8.0.2:BlockId ghc-8.0.2:DsMonad ghc-8.0.2:LoadIface
         ghc-8.0.2:PPC.Ppr ghc-8.0.2:PprCmm ghc-8.0.2:PprCmmDecl
         ghc-8.0.2:PprCmmExpr ghc-8.0.2:PprCore ghc-8.0.2:SPARC.Ppr
         ghc-8.0.2:TcEnv ghc-8.0.2:TcRnMonad ghc-8.0.2:X86.Ppr
         ghc-boot-8.0.2@ghc-boot-8.0.2:GHC.LanguageExtensions
         ghci-8.0.2@ghci-8.0.2:GHCi.Message
         ghci-8.0.2@ghci-8.0.2:GHCi.TH.Binary
         hashable-1.2.6.1@hashable-1.2.6.1-2ZLNuHq395GGIHwEHuqZol:Data.Hashable.Generic
         haskell-tools-ast-0.8.1.0@haskell-tools-ast-0.8.1.0-I9ZMaCkuuwT3FoQkwMjyW6:Language.Haskell.Tools.AST.Instances.Data
         haskell-tools-ast-0.8.1.0@haskell-tools-ast-0.8.1.0-I9ZMaCkuuwT3FoQkwMjyW6:Language.Haskell.Tools.AST.Instances.Eq
         haskell-tools-ast-0.8.1.0@haskell-tools-ast-0.8.1.0-I9ZMaCkuuwT3FoQkwMjyW6:Language.Haskell.Tools.AST.Instances.Generic
         haskell-tools-ast-0.8.1.0@haskell-tools-ast-0.8.1.0-I9ZMaCkuuwT3FoQkwMjyW6:Language.Haskell.Tools.AST.Instances.SemanticTraversal
         haskell-tools-ast-0.8.1.0@haskell-tools-ast-0.8.1.0-I9ZMaCkuuwT3FoQkwMjyW6:Language.Haskell.Tools.AST.Instances.Show
         haskell-tools-ast-0.8.1.0@haskell-tools-ast-0.8.1.0-I9ZMaCkuuwT3FoQkwMjyW6:Language.Haskell.Tools.AST.Instances.SourceInfoTraversal
         haskell-tools-ast-0.8.1.0@haskell-tools-ast-0.8.1.0-I9ZMaCkuuwT3FoQkwMjyW6:Language.Haskell.Tools.AST.SemaInfoTypes
         haskell-tools-ast-0.8.1.0@haskell-tools-ast-0.8.1.0-I9ZMaCkuuwT3FoQkwMjyW6:Language.Haskell.Tools.AST.Utils.GHCInstances
         haskell-tools-backend-ghc-0.8.1.0@haskell-tools-backend-ghc-0.8.1.0-DqHnbK8OPi6CBD5cIPITWq:Language.Haskell.Tools.AST.FromGHC.Utils
         haskell-tools-prettyprint-0.8.1.0@haskell-tools-prettyprint-0.8.1.0-F9iWkGq5ppnLH6whHm0DlC:Language.Haskell.Tools.Transform.RangeTemplate
         haskell-tools-prettyprint-0.8.1.0@haskell-tools-prettyprint-0.8.1.0-F9iWkGq5ppnLH6whHm0DlC:Language.Haskell.Tools.Transform.SourceTemplate
         haskell-tools-prettyprint-0.8.1.0@haskell-tools-prettyprint-0.8.1.0-F9iWkGq5ppnLH6whHm0DlC:Language.Haskell.Tools.Transform.SourceTemplateHelpers
         haskell-tools-refactor-0.8.1.0@haskell-tools-refactor-0.8.1.0-AF8Q4cA8mAnLNwu5t0Icw8:Language.Haskell.Tools.Refactor.RefactorBase
         ht-extension-organizer-0.1.0.0-y3uypH7gCtA60AaWeuyZL:ExtMonad
         references-0.3.2.2@references-0.3.2.2-y362bKYomIKNQKMTfOWVo:Control.Reference.Predefined.Containers.Tree
         references-0.3.2.2@references-0.3.2.2-y362bKYomIKNQKMTfOWVo:Control.Reference.TH.Records
         syb-0.7@syb-0.7-4OKdCpwGutyB1rNRmoa0ya:Data.Generics.Instances
         text-1.2.2.2@text-1.2.2.2-9UQZjEJZQFSGMffj1Z5g00:Data.Text
         text-1.2.2.2@text-1.2.2.2-9UQZjEJZQFSGMffj1Z5g00:Data.Text.Lazy
         text-1.2.2.2@text-1.2.2.2-9UQZjEJZQFSGMffj1Z5g00:Data.Text.Show
         time-1.6.0.1@time-1.6.0.1:Data.Time.Calendar.Gregorian
         time-1.6.0.1@time-1.6.0.1:Data.Time.Format.Parse
         time-1.6.0.1@time-1.6.0.1:Data.Time.LocalTime.LocalTime
         transformers-0.5.2.0@transformers-0.5.2.0:Control.Monad.Trans.Error
         uniplate-1.6.12@uniplate-1.6.12-4PyZX21trQJ5lfk0CDvC7U:Data.Generics.Uniplate.Data
family instance modules: base-4.9.1.0:Control.Applicative
                         base-4.9.1.0:Data.Complex base-4.9.1.0:Data.Either
                         base-4.9.1.0:Data.Functor.Compose base-4.9.1.0:Data.Functor.Const
                         base-4.9.1.0:Data.Functor.Identity
                         base-4.9.1.0:Data.Functor.Product base-4.9.1.0:Data.Functor.Sum
                         base-4.9.1.0:Data.List.NonEmpty base-4.9.1.0:Data.Monoid
                         base-4.9.1.0:Data.Semigroup base-4.9.1.0:Data.Type.Equality
                         base-4.9.1.0:Data.Version base-4.9.1.0:Data.Void
                         base-4.9.1.0:GHC.Exts base-4.9.1.0:GHC.Generics
                         base-4.9.1.0:GHC.IO.Exception base-4.9.1.0:GHC.TypeLits
                         containers-0.5.7.1@containers-0.5.7.1:Data.IntMap.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.IntSet.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.Map.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.Sequence
                         containers-0.5.7.1@containers-0.5.7.1:Data.Set.Base
                         ghc-8.0.2:PlaceHolder ghc-8.0.2:TrieMap
                         ghc-boot-th-8.0.2@ghc-boot-th-8.0.2:GHC.LanguageExtensions.Type
                         ghci-8.0.2@ghci-8.0.2:GHCi.FFI ghci-8.0.2@ghci-8.0.2:GHCi.Message
                         ghci-8.0.2@ghci-8.0.2:GHCi.ResolvedBCO
                         ghci-8.0.2@ghci-8.0.2:SizedSeq
                         haskell-tools-ast-0.8.1.0@haskell-tools-ast-0.8.1.0-I9ZMaCkuuwT3FoQkwMjyW6:Language.Haskell.Tools.AST.Ann
                         haskell-tools-ast-0.8.1.0@haskell-tools-ast-0.8.1.0-I9ZMaCkuuwT3FoQkwMjyW6:Language.Haskell.Tools.AST.Instances.Generic
                         haskell-tools-prettyprint-0.8.1.0@haskell-tools-prettyprint-0.8.1.0-F9iWkGq5ppnLH6whHm0DlC:Language.Haskell.Tools.Transform.RangeTemplate
                         haskell-tools-prettyprint-0.8.1.0@haskell-tools-prettyprint-0.8.1.0-F9iWkGq5ppnLH6whHm0DlC:Language.Haskell.Tools.Transform.SourceTemplate
                         hoopl-3.10.2.1@hoopl-3.10.2.1:Compiler.Hoopl.Block
                         hoopl-3.10.2.1@hoopl-3.10.2.1:Compiler.Hoopl.Dataflow
                         hoopl-3.10.2.1@hoopl-3.10.2.1:Compiler.Hoopl.Fuel
                         hoopl-3.10.2.1@hoopl-3.10.2.1:Compiler.Hoopl.Label
                         hoopl-3.10.2.1@hoopl-3.10.2.1:Compiler.Hoopl.Unique
                         pretty-1.1.3.3@pretty-1.1.3.3:Text.PrettyPrint.Annotated.HughesPJ
                         pretty-1.1.3.3@pretty-1.1.3.3:Text.PrettyPrint.HughesPJ
                         references-0.3.2.2@references-0.3.2.2-y362bKYomIKNQKMTfOWVo:Control.Reference.Predefined.Containers
                         references-0.3.2.2@references-0.3.2.2-y362bKYomIKNQKMTfOWVo:Control.Reference.Predefined.Containers.Tree
                         references-0.3.2.2@references-0.3.2.2-y362bKYomIKNQKMTfOWVo:Control.Reference.Types
                         template-haskell-2.11.1.0:Language.Haskell.TH.Syntax
                         text-1.2.2.2@text-1.2.2.2-9UQZjEJZQFSGMffj1Z5g00:Data.Text
                         text-1.2.2.2@text-1.2.2.2-9UQZjEJZQFSGMffj1Z5g00:Data.Text.Lazy
                         unordered-containers-0.2.8.0@unordered-containers-0.2.8.0-Bp9XgxjuHxcI4tFehVMDGC:Data.HashMap.Base
                         unordered-containers-0.2.8.0@unordered-containers-0.2.8.0-Bp9XgxjuHxcI4tFehVMDGC:Data.HashSet
import  -/  base-4.9.1.0:Control.Monad a6784c5dab0d75c63dabec5a37843f98
import  -/  base-4.9.1.0:Data.Data da440c60016500822a3d4307ca5dea66
import  -/  base-4.9.1.0:Data.Foldable 3e0b6967a1da89945d0e2d47266337a2
import  -/  base-4.9.1.0:Data.List 07ae2acca6538aa0800bd0a993ac6ac1
import  -/  base-4.9.1.0:Data.OldList 27987919d8da2f92e3f472ca81f730f8
import  -/  base-4.9.1.0:Data.Traversable 556020d7cf3c4a34a774600512918a37
import  -/  base-4.9.1.0:Debug.Trace a9edf3aec504f4423d8ba829ab373a25
import  -/  base-4.9.1.0:GHC.Base c4231c43c07e46080a26bf94094c7aa1
import  -/  base-4.9.1.0:GHC.Err 3bba35a16538d33d424682ce66876cdd
import  -/  base-4.9.1.0:Prelude 22dd289b8469a8fa8dc81cab7b237771
import  -/  containers-0.5.7.1@containers-0.5.7.1:Data.Map.Strict 9d0c0962e53270a0a3fb5cb63723a381
import  -/  ghc-8.0.2:Name 3840150d8ea7eb12e36901129df6e8d4
import  -/  ghc-8.0.2:SrcLoc ae8e460a2b77026f9c6a4d6cdcc5d57e
import  -/  ghc-boot-th-8.0.2@ghc-boot-th-8.0.2:GHC.LanguageExtensions.Type 92441ea50916fa3940e20fae60f255d7
import  -/  ghc-prim-0.5.0.0:GHC.Classes 0bdf3d057a415ec1b84a7b1994efbe47
import  -/  haskell-tools-ast-0.8.1.0@haskell-tools-ast-0.8.1.0-I9ZMaCkuuwT3FoQkwMjyW6:Language.Haskell.Tools.AST 3560a1061fd66e2c7888fe18991ca1cc
import  -/  haskell-tools-ast-0.8.1.0@haskell-tools-ast-0.8.1.0-I9ZMaCkuuwT3FoQkwMjyW6:Language.Haskell.Tools.AST.Ann 07e8f66a2b6d7f18951fb774264c8644
import  -/  haskell-tools-ast-0.8.1.0@haskell-tools-ast-0.8.1.0-I9ZMaCkuuwT3FoQkwMjyW6:Language.Haskell.Tools.AST.References 46cb31a69f53297ab865876852473aa3
import  -/  haskell-tools-ast-0.8.1.0@haskell-tools-ast-0.8.1.0-I9ZMaCkuuwT3FoQkwMjyW6:Language.Haskell.Tools.AST.SemaInfoClasses c2ef5a6a7a968ca08e3bc3c3b14a4a2f
import  -/  haskell-tools-prettyprint-0.8.1.0@haskell-tools-prettyprint-0.8.1.0-F9iWkGq5ppnLH6whHm0DlC:Language.Haskell.Tools.PrettyPrint da7dea6ac299ef1620d7160216fb97b0
import  -/  haskell-tools-refactor-0.8.1.0@haskell-tools-refactor-0.8.1.0-AF8Q4cA8mAnLNwu5t0Icw8:Language.Haskell.Tools.Refactor 84acc8d60e278de91351468f26f90e1c
import  -/  haskell-tools-rewrite-0.8.1.0@haskell-tools-rewrite-0.8.1.0-85A6q9dMQgvKEKG9I8fxVU:Language.Haskell.Tools.AST.ElementTypes df954b524d036aee274d8ad0f571417a
import  -/  haskell-tools-rewrite-0.8.1.0@haskell-tools-rewrite-0.8.1.0-85A6q9dMQgvKEKG9I8fxVU:Language.Haskell.Tools.AST.Gen.Names a053f48b6d3d8ee49ece03c9225926b8
import  -/  haskell-tools-rewrite-0.8.1.0@haskell-tools-rewrite-0.8.1.0-85A6q9dMQgvKEKG9I8fxVU:Language.Haskell.Tools.AST.Match.Decls b84d56450f5735caccd2c24b62b5f303
import  -/  haskell-tools-rewrite-0.8.1.0@haskell-tools-rewrite-0.8.1.0-85A6q9dMQgvKEKG9I8fxVU:Language.Haskell.Tools.AST.Match.Types 85da168b886fc25a3bfd49c2d6ecd710
import  -/  ExtMap ce208fa2f233772cc4b03c60efef446e
  ExtMap 86d8b8e09d7cd6f6e3831751b6397a46
import  -/  ExtMonad af7b60a65d818af19a46d996e27297ca
  exports: 7f69547596e05261c6f5806398624025
  CheckNode d2a8a000f373c241c0362787c4b3f842
  ExtDomain 7fc7ae623015a9d2031eb05f95b73507
  ExtMonad 6ab37cbe93709f9dcdeffcf18c24ce9b
  addOccurence_ 0a70efda5e7142f7b588f7458ea99597
  conditional 179fcfe6ec57edddd9abe173be82121d
import  -/  mtl-2.2.1@mtl-2.2.1-BLKBelFsPB3BoFeSWSOYj6:Control.Monad.Identity 40aa39339177ff1862f1070dc676c5be
import  -/  mtl-2.2.1@mtl-2.2.1-BLKBelFsPB3BoFeSWSOYj6:Control.Monad.State.Class 6d31234b0a911b56412061943d18b89e
import  -/  references-0.3.2.2@references-0.3.2.2-y362bKYomIKNQKMTfOWVo:Control.Reference d89ee82346f6e25c55a8a19dbf84658e
import  -/  references-0.3.2.2@references-0.3.2.2-y362bKYomIKNQKMTfOWVo:Control.Reference.Generators 55d87d4f888409d4aa7f9f14db7ee565
import  -/  references-0.3.2.2@references-0.3.2.2-y362bKYomIKNQKMTfOWVo:Control.Reference.Operators 55e717f4df077a71cb70a96f85f6a393
import  -/  transformers-0.5.2.0@transformers-0.5.2.0:Control.Monad.Trans.Class 45530f1305724ee3931a9be21b40ca7e
import  -/  transformers-0.5.2.0@transformers-0.5.2.0:Control.Monad.Trans.Maybe fb717b7ffb317f01e5849d6be7e862b4
import  -/  transformers-0.5.2.0@transformers-0.5.2.0:Control.Monad.Trans.State.Lazy 371607e50dde46b5f4103b3ab334a497
Module target ht-extension-organizer-0.1.0.0-y3uypH7gCtA60AaWeuyZL:FlexibleInstancesChecker annotated by 1311 of type [Char]
5f990346aaa5b8fdf808b0519af62bd2
  $s$fApplicativeReaderT ::
    GHC.Base.Applicative
      (Control.Monad.Trans.Reader.ReaderT
         r
         (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc))
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ r.
                  @ (Control.Monad.Trans.Reader.ReaderT
                       r
                       (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc))
                  (Control.Monad.Trans.Reader.$fApplicativeReaderT_$cp1Applicative
                     @ (Control.Monad.Trans.State.Lazy.StateT
                          ExtMap.ExtMap GhcMonad.Ghc)
                     @ r
                     FlexibleInstancesChecker.$s$fApplicativeReaderT1)
                  (\ @ a (eta :: a) ->
                   let {
                     m1 :: Control.Monad.Trans.State.Lazy.StateT
                             ExtMap.ExtMap GhcMonad.Ghc a
                     = GHC.Base.$
                         @ 'GHC.Types.PtrRepLifted
                         @ (Data.Map.Base.Map
                              (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                              [SrcLoc.SrcSpan]
                            -> GhcMonad.Ghc
                                 (a,
                                  Data.Map.Base.Map
                                    (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                                    [SrcLoc.SrcSpan]))
                         @ (Control.Monad.Trans.State.Lazy.StateT
                              (Data.Map.Base.Map
                                 (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                                 [SrcLoc.SrcSpan])
                              GhcMonad.Ghc
                              a)
                         (\ (tpl :: Data.Map.Base.Map
                                      (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                                      [SrcLoc.SrcSpan]
                                    -> GhcMonad.Ghc
                                         (a,
                                          Data.Map.Base.Map
                                            (ExtMap.LogicalRelation
                                               GHC.LanguageExtensions.Type.Extension)
                                            [SrcLoc.SrcSpan])) ->
                          tpl)
                           `cast`
                         (<Data.Map.Base.Map
                             (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                             [SrcLoc.SrcSpan]
                           -> GhcMonad.Ghc
                                (a,
                                 Data.Map.Base.Map
                                   (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                                   [SrcLoc.SrcSpan])>_R
                          ->_R Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                        <Data.Map.Base.Map
                                           (ExtMap.LogicalRelation
                                              GHC.LanguageExtensions.Type.Extension)
                                           [SrcLoc.SrcSpan]>_N
                                        <GhcMonad.Ghc>_R
                                        <a>_N))
                         (\ (s1 :: Data.Map.Base.Map
                                     (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                                     [SrcLoc.SrcSpan])
                            (eta1 :: GhcMonad.Session)
                            (eta2 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                          ((GhcMonad.$fApplicativeGhc_$cpure
                              @ (a,
                                 Data.Map.Base.Map
                                   (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                                   [SrcLoc.SrcSpan])
                              (eta, s1))
                             `cast`
                           (GhcMonad.N:Ghc[0]
                                <(a,
                                  Data.Map.Base.Map
                                    (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                                    [SrcLoc.SrcSpan])>_R)
                             eta1)
                            `cast`
                          (GHC.Types.N:IO[0]
                               <(a,
                                 Data.Map.Base.Map
                                   (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                                   [SrcLoc.SrcSpan])>_R)
                            eta2)
                           `cast`
                         (<Data.Map.Base.Map
                             (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                             [SrcLoc.SrcSpan]>_R
                          ->_R Trans
                                   (<GhcMonad.Session>_R
                                    ->_R Sym (GHC.Types.N:IO[0]
                                                  <(a,
                                                    Data.Map.Base.Map
                                                      (ExtMap.LogicalRelation
                                                         GHC.LanguageExtensions.Type.Extension)
                                                      [SrcLoc.SrcSpan])>_R))
                                   (Sym (GhcMonad.N:Ghc[0]
                                             <(a,
                                               Data.Map.Base.Map
                                                 (ExtMap.LogicalRelation
                                                    GHC.LanguageExtensions.Type.Extension)
                                                 [SrcLoc.SrcSpan])>_R)))
                   } in
                   (\ (eta1 :: r) ->
                    GHC.Base.const
                      @ (Control.Monad.Trans.State.Lazy.StateT
                           ExtMap.ExtMap GhcMonad.Ghc a)
                      @ r
                      m1
                      eta1)
                     `cast`
                   (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                             <*>_N
                             <r>_R
                             <Control.Monad.Trans.State.Lazy.StateT
                                ExtMap.ExtMap GhcMonad.Ghc>_R
                             <a>_N)))
                  (Control.Monad.Trans.Reader.$fApplicativeReaderT_$c<*>
                     @ (Control.Monad.Trans.State.Lazy.StateT
                          ExtMap.ExtMap GhcMonad.Ghc)
                     @ r
                     FlexibleInstancesChecker.$s$fApplicativeReaderT1)
                  (Control.Monad.Trans.Reader.$fApplicativeReaderT_$c*>
                     @ (Control.Monad.Trans.State.Lazy.StateT
                          ExtMap.ExtMap GhcMonad.Ghc)
                     @ r
                     FlexibleInstancesChecker.$s$fApplicativeReaderT1)
                  (Control.Monad.Trans.Reader.$fApplicativeReaderT_$c<*
                     @ (Control.Monad.Trans.State.Lazy.StateT
                          ExtMap.ExtMap GhcMonad.Ghc)
                     @ r
                     FlexibleInstancesChecker.$s$fApplicativeReaderT1) -}
44d2377589b4c54e9497ee1fe027636f
  $s$fApplicativeReaderT1 ::
    GHC.Base.Applicative
      (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc)
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                (FlexibleInstancesChecker.$s$fApplicativeReaderT_$s$fApplicativeStateT
                   @ (Data.Map.Base.Map
                        (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                        [SrcLoc.SrcSpan])) -}
7afc7b0f81dfd36f053d611c33bc0549
  $s$fApplicativeReaderT_$s$fApplicativeStateT ::
    GHC.Base.Applicative
      (Control.Monad.Trans.State.Lazy.StateT s GhcMonad.Ghc)
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ s.
                  @ (Control.Monad.Trans.State.Lazy.StateT s GhcMonad.Ghc)
                  (FlexibleInstancesChecker.$s$fApplicativeReaderT_$s$fApplicativeStateT_$cp1Applicative
                     @ s)
                  (FlexibleInstancesChecker.$s$fApplicativeReaderT_$s$fApplicativeStateT_$cpure
                     @ s)
                  (FlexibleInstancesChecker.$s$fApplicativeReaderT_$s$fApplicativeStateT_$c<*>
                     @ s)
                  (Control.Monad.Trans.State.Lazy.$fApplicativeStateT_$c*>
                     @ GhcMonad.Ghc
                     @ s
                     GhcMonad.$fFunctorGhc
                     GhcMonad.$fMonadGhc)
                  (Control.Monad.Trans.State.Lazy.$fApplicativeStateT_$c<*
                     @ GhcMonad.Ghc
                     @ s
                     GhcMonad.$fFunctorGhc
                     GhcMonad.$fMonadGhc) -}
67ce4450af293b47f7d6db9f7a27d34b
  $s$fApplicativeReaderT_$s$fApplicativeStateT_$c<*> ::
    Control.Monad.Trans.State.Lazy.StateT s GhcMonad.Ghc (a -> b)
    -> Control.Monad.Trans.State.Lazy.StateT s GhcMonad.Ghc a
    -> Control.Monad.Trans.State.Lazy.StateT s GhcMonad.Ghc b
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*C1(U)><L,C(C1(C1(U(U,U(1*U,1*U)))))><L,U>,
     Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ @ s
                   @ a
                   @ b
                   (ds1 :: Control.Monad.Trans.State.Lazy.StateT
                             s GhcMonad.Ghc (a -> b))
                   (ds2 :: Control.Monad.Trans.State.Lazy.StateT s GhcMonad.Ghc a) ->
                 GHC.Base.$
                   @ 'GHC.Types.PtrRepLifted
                   @ (s -> GhcMonad.Ghc (b, s))
                   @ (Control.Monad.Trans.State.Lazy.StateT s GhcMonad.Ghc b)
                   (\ (tpl :: s -> GhcMonad.Ghc (b, s)) -> tpl)
                     `cast`
                   (<s -> GhcMonad.Ghc (b, s)>_R
                    ->_R Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                  <s>_N <GhcMonad.Ghc>_R <b>_N))
                   (\ (s1 :: s) ->
                    GhcMonad.$fMonadGhc_$c>>=
                      @ (a -> b, s)
                      @ (b, s)
                      (ds1
                         `cast`
                       (Control.Monad.Trans.State.Lazy.N:StateT[0]
                            <s>_N <GhcMonad.Ghc>_R <a -> b>_N)
                         s1)
                      (\ (ds3 :: (a -> b, s)) ->
                       GhcMonad.$fMonadGhc_$c>>=
                         @ (a, s)
                         @ (b, s)
                         (ds2
                            `cast`
                          (Control.Monad.Trans.State.Lazy.N:StateT[0]
                               <s>_N <GhcMonad.Ghc>_R <a>_N)
                            (case ds3 of wild { (,) f s' -> s' }))
                         (\ (ds4 :: (a, s)) ->
                          GhcMonad.$fApplicativeGhc_$cpure
                            @ (b, s)
                            (case ds3 of wild { (,) f s' ->
                             f (case ds4 of wild1 { (,) x s'' -> x }) },
                             case ds4 of wild { (,) x s'' -> s'' }))))) -}
9530c6e0f3c716fca69e29820d8e8fe9
  $s$fApplicativeReaderT_$s$fApplicativeStateT_$cp1Applicative ::
    GHC.Base.Functor
      (Control.Monad.Trans.State.Lazy.StateT s GhcMonad.Ghc)
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                FlexibleInstancesChecker.$s$fApplicativeReaderT_$s$fFunctorStateT -}
3f921ba1d8bb8b96e5dde218f1b7efd9
  $s$fApplicativeReaderT_$s$fApplicativeStateT_$cpure ::
    a -> Control.Monad.Trans.State.Lazy.StateT s GhcMonad.Ghc a
  {- Arity: 4, HasNoCafRefs, Strictness: <L,U><L,U><L,A><S,U>,
     Inline: INLINE (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ @ s @ a (a1 :: a) ->
                 GHC.Base.$
                   @ 'GHC.Types.PtrRepLifted
                   @ (s -> GhcMonad.Ghc (a, s))
                   @ (Control.Monad.Trans.State.Lazy.StateT s GhcMonad.Ghc a)
                   (\ (tpl :: s -> GhcMonad.Ghc (a, s)) -> tpl)
                     `cast`
                   (<s -> GhcMonad.Ghc (a, s)>_R
                    ->_R Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                  <s>_N <GhcMonad.Ghc>_R <a>_N))
                   (\ (s1 :: s)
                      (eta :: GhcMonad.Session)
                      (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                    ((GhcMonad.$fApplicativeGhc_$cpure @ (a, s) (a1, s1))
                       `cast`
                     (GhcMonad.N:Ghc[0] <(a, s)>_R)
                       eta)
                      `cast`
                    (GHC.Types.N:IO[0] <(a, s)>_R)
                      eta1)
                     `cast`
                   (<s>_R
                    ->_R Trans
                             (<GhcMonad.Session>_R ->_R Sym (GHC.Types.N:IO[0] <(a, s)>_R))
                             (Sym (GhcMonad.N:Ghc[0] <(a, s)>_R)))) -}
3edbef84c706993026fcc47150b468f7
  $s$fApplicativeReaderT_$s$fFunctorStateT ::
    GHC.Base.Functor
      (Control.Monad.Trans.State.Lazy.StateT s GhcMonad.Ghc)
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ s.
                  @ (Control.Monad.Trans.State.Lazy.StateT s GhcMonad.Ghc)
                  (FlexibleInstancesChecker.$s$fApplicativeReaderT_$s$fFunctorStateT_$cfmap
                     @ s)
                  (Control.Monad.Trans.State.Lazy.$fFunctorStateT_$c<$
                     @ GhcMonad.Ghc
                     @ s
                     GhcMonad.$fFunctorGhc) -}
3820035451653cbd48866032cceacb92
  $s$fApplicativeReaderT_$s$fFunctorStateT_$cfmap ::
    (a -> b)
    -> Control.Monad.Trans.State.Lazy.StateT s GhcMonad.Ghc a
    -> Control.Monad.Trans.State.Lazy.StateT s GhcMonad.Ghc b
  {- Arity: 3, HasNoCafRefs, Strictness: <L,C(U)><L,1*C1(U)><L,U>,
     Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ @ s
                   @ a
                   @ b
                   (f :: a -> b)
                   (m1 :: Control.Monad.Trans.State.Lazy.StateT s GhcMonad.Ghc a) ->
                 GHC.Base.$
                   @ 'GHC.Types.PtrRepLifted
                   @ (s -> GhcMonad.Ghc (b, s))
                   @ (Control.Monad.Trans.State.Lazy.StateT s GhcMonad.Ghc b)
                   (\ (tpl :: s -> GhcMonad.Ghc (b, s)) -> tpl)
                     `cast`
                   (<s -> GhcMonad.Ghc (b, s)>_R
                    ->_R Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                  <s>_N <GhcMonad.Ghc>_R <b>_N))
                   (\ (s1 :: s) ->
                    GHC.Base.$
                      @ 'GHC.Types.PtrRepLifted
                      @ (GhcMonad.Ghc (a, s))
                      @ (GhcMonad.Ghc (b, s))
                      (GhcMonad.$fFunctorGhc_$cfmap
                         @ (a, s)
                         @ (b, s)
                         (\ (ds1 :: (a, s)) ->
                          (f (case ds1 of wild { (,) a1 s' -> a1 }),
                           case ds1 of wild { (,) a1 s' -> s' })))
                      (Control.Monad.Trans.State.Lazy.runStateT
                         @ s
                         @ GhcMonad.Ghc
                         @ a
                         m1
                         s1))) -}
4ca59e1114015a80996d93f9e949a395
  $s$fMonadReaderT ::
    GHC.Base.Monad
      (Control.Monad.Trans.Reader.ReaderT
         r
         (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc))
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ r.
                  @ (Control.Monad.Trans.Reader.ReaderT
                       r
                       (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc))
                  (Control.Monad.Trans.Reader.$fMonadReaderT_$cp1Monad
                     @ (Control.Monad.Trans.State.Lazy.StateT
                          ExtMap.ExtMap GhcMonad.Ghc)
                     @ r
                     FlexibleInstancesChecker.$s$fMonadReaderT1)
                  (FlexibleInstancesChecker.$s$fMonadReaderT_$s$fMonadReaderT_$c>>=
                     @ r)
                  (FlexibleInstancesChecker.$s$fMonadReaderT_$s$fMonadReaderT_$c>>
                     @ r)
                  (FlexibleInstancesChecker.$s$fMonadReaderT_$s$fMonadReaderT_$creturn
                     @ r)
                  (Control.Monad.Trans.Reader.$fMonadReaderT_$cfail
                     @ (Control.Monad.Trans.State.Lazy.StateT
                          ExtMap.ExtMap GhcMonad.Ghc)
                     @ r
                     FlexibleInstancesChecker.$s$fMonadReaderT1) -}
03d908f40556a501cbc786a1e440adcc
  $s$fMonadReaderT1 ::
    GHC.Base.Monad
      (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc)
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                (FlexibleInstancesChecker.$s$fMonadReaderT_$s$fMonadStateT
                   @ (Data.Map.Base.Map
                        (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                        [SrcLoc.SrcSpan])) -}
671511d6ef517a95e4d336163e29f9a6
  $s$fMonadReaderT_$s$fMonadReaderT_$c>> ::
    Control.Monad.Trans.Reader.ReaderT
      r
      (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc)
      a
    -> Control.Monad.Trans.Reader.ReaderT
         r
         (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc)
         b
    -> Control.Monad.Trans.Reader.ReaderT
         r
         (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc)
         b
  {- Arity: 3, HasNoCafRefs, Strictness: <L,1*C1(U)><L,1*C1(U)><L,U>,
     Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ @ r
                   @ a
                   @ b
                   (m1 :: Control.Monad.Trans.Reader.ReaderT
                            r
                            (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc)
                            a)
                   (k :: Control.Monad.Trans.Reader.ReaderT
                           r
                           (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc)
                           b) ->
                 GHC.Base.$
                   @ 'GHC.Types.PtrRepLifted
                   @ (r
                      -> Control.Monad.Trans.State.Lazy.StateT
                           ExtMap.ExtMap GhcMonad.Ghc b)
                   @ (Control.Monad.Trans.Reader.ReaderT
                        r
                        (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc)
                        b)
                   (\ (tpl :: r
                              -> Control.Monad.Trans.State.Lazy.StateT
                                   ExtMap.ExtMap GhcMonad.Ghc b) ->
                    tpl)
                     `cast`
                   (<r
                     -> Control.Monad.Trans.State.Lazy.StateT
                          ExtMap.ExtMap GhcMonad.Ghc b>_R
                    ->_R Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                  <*>_N
                                  <r>_R
                                  <Control.Monad.Trans.State.Lazy.StateT
                                     ExtMap.ExtMap GhcMonad.Ghc>_R
                                  <b>_N))
                   (\ (r1 :: r) ->
                    let {
                      m2 :: Control.Monad.Trans.State.Lazy.StateT
                              (Data.Map.Base.Map
                                 (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                                 [SrcLoc.SrcSpan])
                              GhcMonad.Ghc
                              a
                      = Control.Monad.Trans.Reader.runReaderT
                          @ r
                          @ *
                          @ (Control.Monad.Trans.State.Lazy.StateT
                               ExtMap.ExtMap GhcMonad.Ghc)
                          @ a
                          m1
                          r1
                    } in
                    GHC.Base.$
                      @ 'GHC.Types.PtrRepLifted
                      @ (Data.Map.Base.Map
                           (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                           [SrcLoc.SrcSpan]
                         -> GhcMonad.Ghc
                              (b,
                               Data.Map.Base.Map
                                 (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                                 [SrcLoc.SrcSpan]))
                      @ (Control.Monad.Trans.State.Lazy.StateT
                           (Data.Map.Base.Map
                              (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                              [SrcLoc.SrcSpan])
                           GhcMonad.Ghc
                           b)
                      (\ (tpl :: Data.Map.Base.Map
                                   (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                                   [SrcLoc.SrcSpan]
                                 -> GhcMonad.Ghc
                                      (b,
                                       Data.Map.Base.Map
                                         (ExtMap.LogicalRelation
                                            GHC.LanguageExtensions.Type.Extension)
                                         [SrcLoc.SrcSpan])) ->
                       tpl)
                        `cast`
                      (<Data.Map.Base.Map
                          (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                          [SrcLoc.SrcSpan]
                        -> GhcMonad.Ghc
                             (b,
                              Data.Map.Base.Map
                                (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                                [SrcLoc.SrcSpan])>_R
                       ->_R Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                     <Data.Map.Base.Map
                                        (ExtMap.LogicalRelation
                                           GHC.LanguageExtensions.Type.Extension)
                                        [SrcLoc.SrcSpan]>_N
                                     <GhcMonad.Ghc>_R
                                     <b>_N))
                      (\ (s1 :: Data.Map.Base.Map
                                  (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                                  [SrcLoc.SrcSpan]) ->
                       GhcMonad.$fMonadGhc_$c>>=
                         @ (a,
                            Data.Map.Base.Map
                              (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                              [SrcLoc.SrcSpan])
                         @ (b,
                            Data.Map.Base.Map
                              (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                              [SrcLoc.SrcSpan])
                         (Control.Monad.Trans.State.Lazy.runStateT
                            @ (Data.Map.Base.Map
                                 (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                                 [SrcLoc.SrcSpan])
                            @ GhcMonad.Ghc
                            @ a
                            m2
                            s1)
                         (\ (ds1 :: (a,
                                     Data.Map.Base.Map
                                       (ExtMap.LogicalRelation
                                          GHC.LanguageExtensions.Type.Extension)
                                       [SrcLoc.SrcSpan])) ->
                          Control.Monad.Trans.State.Lazy.runStateT
                            @ (Data.Map.Base.Map
                                 (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                                 [SrcLoc.SrcSpan])
                            @ GhcMonad.Ghc
                            @ b
                            (Control.Monad.Trans.Reader.runReaderT
                               @ r
                               @ *
                               @ (Control.Monad.Trans.State.Lazy.StateT
                                    ExtMap.ExtMap GhcMonad.Ghc)
                               @ b
                               k
                               r1)
                            (case ds1 of wild { (,) a1 s' -> s' }))))) -}
5582524256c6d05d97161e950077afa9
  $s$fMonadReaderT_$s$fMonadReaderT_$c>>= ::
    Control.Monad.Trans.Reader.ReaderT
      r
      (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc)
      a
    -> (a
        -> Control.Monad.Trans.Reader.ReaderT
             r
             (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc)
             b)
    -> Control.Monad.Trans.Reader.ReaderT
         r
         (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc)
         b
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*C1(U)><L,C(C1(C1(C1(C1(U)))))><L,U>,
     Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ @ r
                   @ a
                   @ b
                   (m1 :: Control.Monad.Trans.Reader.ReaderT
                            r
                            (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc)
                            a)
                   (k :: a
                         -> Control.Monad.Trans.Reader.ReaderT
                              r
                              (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc)
                              b) ->
                 GHC.Base.$
                   @ 'GHC.Types.PtrRepLifted
                   @ (r
                      -> Control.Monad.Trans.State.Lazy.StateT
                           ExtMap.ExtMap GhcMonad.Ghc b)
                   @ (Control.Monad.Trans.Reader.ReaderT
                        r
                        (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc)
                        b)
                   (\ (tpl :: r
                              -> Control.Monad.Trans.State.Lazy.StateT
                                   ExtMap.ExtMap GhcMonad.Ghc b) ->
                    tpl)
                     `cast`
                   (<r
                     -> Control.Monad.Trans.State.Lazy.StateT
                          ExtMap.ExtMap GhcMonad.Ghc b>_R
                    ->_R Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                  <*>_N
                                  <r>_R
                                  <Control.Monad.Trans.State.Lazy.StateT
                                     ExtMap.ExtMap GhcMonad.Ghc>_R
                                  <b>_N))
                   (\ (r1 :: r) ->
                    let {
                      m2 :: Control.Monad.Trans.State.Lazy.StateT
                              (Data.Map.Base.Map
                                 (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                                 [SrcLoc.SrcSpan])
                              GhcMonad.Ghc
                              a
                      = Control.Monad.Trans.Reader.runReaderT
                          @ r
                          @ *
                          @ (Control.Monad.Trans.State.Lazy.StateT
                               ExtMap.ExtMap GhcMonad.Ghc)
                          @ a
                          m1
                          r1
                    } in
                    GHC.Base.$
                      @ 'GHC.Types.PtrRepLifted
                      @ (Data.Map.Base.Map
                           (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                           [SrcLoc.SrcSpan]
                         -> GhcMonad.Ghc
                              (b,
                               Data.Map.Base.Map
                                 (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                                 [SrcLoc.SrcSpan]))
                      @ (Control.Monad.Trans.State.Lazy.StateT
                           (Data.Map.Base.Map
                              (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                              [SrcLoc.SrcSpan])
                           GhcMonad.Ghc
                           b)
                      (\ (tpl :: Data.Map.Base.Map
                                   (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                                   [SrcLoc.SrcSpan]
                                 -> GhcMonad.Ghc
                                      (b,
                                       Data.Map.Base.Map
                                         (ExtMap.LogicalRelation
                                            GHC.LanguageExtensions.Type.Extension)
                                         [SrcLoc.SrcSpan])) ->
                       tpl)
                        `cast`
                      (<Data.Map.Base.Map
                          (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                          [SrcLoc.SrcSpan]
                        -> GhcMonad.Ghc
                             (b,
                              Data.Map.Base.Map
                                (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                                [SrcLoc.SrcSpan])>_R
                       ->_R Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                     <Data.Map.Base.Map
                                        (ExtMap.LogicalRelation
                                           GHC.LanguageExtensions.Type.Extension)
                                        [SrcLoc.SrcSpan]>_N
                                     <GhcMonad.Ghc>_R
                                     <b>_N))
                      (\ (s1 :: Data.Map.Base.Map
                                  (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                                  [SrcLoc.SrcSpan]) ->
                       GhcMonad.$fMonadGhc_$c>>=
                         @ (a,
                            Data.Map.Base.Map
                              (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                              [SrcLoc.SrcSpan])
                         @ (b,
                            Data.Map.Base.Map
                              (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                              [SrcLoc.SrcSpan])
                         (Control.Monad.Trans.State.Lazy.runStateT
                            @ (Data.Map.Base.Map
                                 (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                                 [SrcLoc.SrcSpan])
                            @ GhcMonad.Ghc
                            @ a
                            m2
                            s1)
                         (\ (ds1 :: (a,
                                     Data.Map.Base.Map
                                       (ExtMap.LogicalRelation
                                          GHC.LanguageExtensions.Type.Extension)
                                       [SrcLoc.SrcSpan])) ->
                          Control.Monad.Trans.State.Lazy.runStateT
                            @ (Data.Map.Base.Map
                                 (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                                 [SrcLoc.SrcSpan])
                            @ GhcMonad.Ghc
                            @ b
                            (Control.Monad.Trans.Reader.runReaderT
                               @ r
                               @ *
                               @ (Control.Monad.Trans.State.Lazy.StateT
                                    ExtMap.ExtMap GhcMonad.Ghc)
                               @ b
                               (k (case ds1 of wild { (,) a1 s' -> a1 }))
                               r1)
                            (case ds1 of wild { (,) a1 s' -> s' }))))) -}
a5068ffa048435b69e9a60659e1fa8d4
  $s$fMonadReaderT_$s$fMonadReaderT_$creturn ::
    a
    -> Control.Monad.Trans.Reader.ReaderT
         r
         (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc)
         a
  {- Arity: 5, HasNoCafRefs, Strictness: <L,U><L,A><L,U><L,A><S,U>,
     Unfolding: InlineRule (1, True, False)
                (\ @ r @ a (eta :: a) ->
                 let {
                   m1 :: Control.Monad.Trans.State.Lazy.StateT
                           ExtMap.ExtMap GhcMonad.Ghc a
                   = GHC.Base.$
                       @ 'GHC.Types.PtrRepLifted
                       @ (Data.Map.Base.Map
                            (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                            [SrcLoc.SrcSpan]
                          -> GhcMonad.Ghc
                               (a,
                                Data.Map.Base.Map
                                  (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                                  [SrcLoc.SrcSpan]))
                       @ (Control.Monad.Trans.State.Lazy.StateT
                            (Data.Map.Base.Map
                               (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                               [SrcLoc.SrcSpan])
                            GhcMonad.Ghc
                            a)
                       (\ (tpl :: Data.Map.Base.Map
                                    (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                                    [SrcLoc.SrcSpan]
                                  -> GhcMonad.Ghc
                                       (a,
                                        Data.Map.Base.Map
                                          (ExtMap.LogicalRelation
                                             GHC.LanguageExtensions.Type.Extension)
                                          [SrcLoc.SrcSpan])) ->
                        tpl)
                         `cast`
                       (<Data.Map.Base.Map
                           (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                           [SrcLoc.SrcSpan]
                         -> GhcMonad.Ghc
                              (a,
                               Data.Map.Base.Map
                                 (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                                 [SrcLoc.SrcSpan])>_R
                        ->_R Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                      <Data.Map.Base.Map
                                         (ExtMap.LogicalRelation
                                            GHC.LanguageExtensions.Type.Extension)
                                         [SrcLoc.SrcSpan]>_N
                                      <GhcMonad.Ghc>_R
                                      <a>_N))
                       (\ (s1 :: Data.Map.Base.Map
                                   (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                                   [SrcLoc.SrcSpan])
                          (eta1 :: GhcMonad.Session)
                          (eta2 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                        ((GhcMonad.$fApplicativeGhc_$cpure
                            @ (a,
                               Data.Map.Base.Map
                                 (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                                 [SrcLoc.SrcSpan])
                            (eta, s1))
                           `cast`
                         (GhcMonad.N:Ghc[0]
                              <(a,
                                Data.Map.Base.Map
                                  (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                                  [SrcLoc.SrcSpan])>_R)
                           eta1)
                          `cast`
                        (GHC.Types.N:IO[0]
                             <(a,
                               Data.Map.Base.Map
                                 (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                                 [SrcLoc.SrcSpan])>_R)
                          eta2)
                         `cast`
                       (<Data.Map.Base.Map
                           (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                           [SrcLoc.SrcSpan]>_R
                        ->_R Trans
                                 (<GhcMonad.Session>_R
                                  ->_R Sym (GHC.Types.N:IO[0]
                                                <(a,
                                                  Data.Map.Base.Map
                                                    (ExtMap.LogicalRelation
                                                       GHC.LanguageExtensions.Type.Extension)
                                                    [SrcLoc.SrcSpan])>_R))
                                 (Sym (GhcMonad.N:Ghc[0]
                                           <(a,
                                             Data.Map.Base.Map
                                               (ExtMap.LogicalRelation
                                                  GHC.LanguageExtensions.Type.Extension)
                                               [SrcLoc.SrcSpan])>_R)))
                 } in
                 (\ (eta1 :: r) -> m1)
                   `cast`
                 (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                           <*>_N
                           <r>_R
                           <Control.Monad.Trans.State.Lazy.StateT
                              ExtMap.ExtMap GhcMonad.Ghc>_R
                           <a>_N))) -}
5bf130b436f31d57739f7e4985c1a5ff
  $s$fMonadReaderT_$s$fMonadStateT ::
    GHC.Base.Monad
      (Control.Monad.Trans.State.Lazy.StateT s GhcMonad.Ghc)
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ s.
                  @ (Control.Monad.Trans.State.Lazy.StateT s GhcMonad.Ghc)
                  (FlexibleInstancesChecker.$s$fMonadReaderT_$s$fMonadStateT_$cp1Monad
                     @ s)
                  (FlexibleInstancesChecker.$s$fMonadReaderT_$s$fMonadStateT_$c>>=
                     @ s)
                  (FlexibleInstancesChecker.$s$fMonadReaderT_$s$fMonadStateT_$c>>
                     @ s)
                  (Control.Monad.Trans.State.Lazy.$fMonadStateT_$creturn
                     @ GhcMonad.Ghc
                     @ s
                     GhcMonad.$fMonadGhc)
                  (FlexibleInstancesChecker.$s$fMonadReaderT_$s$fMonadStateT_$cfail
                     @ s) -}
c242d08e8212568c7237acf7a33a00d3
  $s$fMonadReaderT_$s$fMonadStateT_$c>> ::
    Control.Monad.Trans.State.Lazy.StateT s GhcMonad.Ghc a
    -> Control.Monad.Trans.State.Lazy.StateT s GhcMonad.Ghc b
    -> Control.Monad.Trans.State.Lazy.StateT s GhcMonad.Ghc b
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*C1(U)><L,C(C1(C1(U)))><L,U>,
     Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ @ s
                   @ a
                   @ b
                   (m1 :: Control.Monad.Trans.State.Lazy.StateT s GhcMonad.Ghc a)
                   (k :: Control.Monad.Trans.State.Lazy.StateT s GhcMonad.Ghc b) ->
                 GHC.Base.$
                   @ 'GHC.Types.PtrRepLifted
                   @ (s -> GhcMonad.Ghc (b, s))
                   @ (Control.Monad.Trans.State.Lazy.StateT s GhcMonad.Ghc b)
                   (\ (tpl :: s -> GhcMonad.Ghc (b, s)) -> tpl)
                     `cast`
                   (<s -> GhcMonad.Ghc (b, s)>_R
                    ->_R Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                  <s>_N <GhcMonad.Ghc>_R <b>_N))
                   (\ (s1 :: s) ->
                    GhcMonad.$fMonadGhc_$c>>=
                      @ (a, s)
                      @ (b, s)
                      (Control.Monad.Trans.State.Lazy.runStateT
                         @ s
                         @ GhcMonad.Ghc
                         @ a
                         m1
                         s1)
                      (\ (ds1 :: (a, s)) ->
                       Control.Monad.Trans.State.Lazy.runStateT
                         @ s
                         @ GhcMonad.Ghc
                         @ b
                         k
                         (case ds1 of wild { (,) a1 s' -> s' })))) -}
4557e45de5c5c857cd4913e09678aa5a
  $s$fMonadReaderT_$s$fMonadStateT_$c>>= ::
    Control.Monad.Trans.State.Lazy.StateT s GhcMonad.Ghc a
    -> (a -> Control.Monad.Trans.State.Lazy.StateT s GhcMonad.Ghc b)
    -> Control.Monad.Trans.State.Lazy.StateT s GhcMonad.Ghc b
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*C1(U)><L,C(C1(C1(C1(U))))><L,U>,
     Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ @ s
                   @ a
                   @ b
                   (m1 :: Control.Monad.Trans.State.Lazy.StateT s GhcMonad.Ghc a)
                   (k :: a
                         -> Control.Monad.Trans.State.Lazy.StateT s GhcMonad.Ghc b) ->
                 GHC.Base.$
                   @ 'GHC.Types.PtrRepLifted
                   @ (s -> GhcMonad.Ghc (b, s))
                   @ (Control.Monad.Trans.State.Lazy.StateT s GhcMonad.Ghc b)
                   (\ (tpl :: s -> GhcMonad.Ghc (b, s)) -> tpl)
                     `cast`
                   (<s -> GhcMonad.Ghc (b, s)>_R
                    ->_R Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                  <s>_N <GhcMonad.Ghc>_R <b>_N))
                   (\ (s1 :: s) ->
                    GhcMonad.$fMonadGhc_$c>>=
                      @ (a, s)
                      @ (b, s)
                      (Control.Monad.Trans.State.Lazy.runStateT
                         @ s
                         @ GhcMonad.Ghc
                         @ a
                         m1
                         s1)
                      (\ (ds1 :: (a, s)) ->
                       Control.Monad.Trans.State.Lazy.runStateT
                         @ s
                         @ GhcMonad.Ghc
                         @ b
                         (k (case ds1 of wild { (,) a1 s' -> a1 }))
                         (case ds1 of wild { (,) a1 s' -> s' })))) -}
1bfd919e908d8ab63abc5df2fd4b0667
  $s$fMonadReaderT_$s$fMonadStateT_$cfail ::
    GHC.Base.String
    -> Control.Monad.Trans.State.Lazy.StateT s GhcMonad.Ghc a
  {- Arity: 2, Strictness: <B,U><B,A>x, Inline: INLINE (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ @ s @ a (str :: GHC.Base.String) ->
                 GHC.Base.$
                   @ 'GHC.Types.PtrRepLifted
                   @ (s -> GhcMonad.Ghc (a, s))
                   @ (Control.Monad.Trans.State.Lazy.StateT s GhcMonad.Ghc a)
                   (\ (tpl :: s -> GhcMonad.Ghc (a, s)) -> tpl)
                     `cast`
                   (<s -> GhcMonad.Ghc (a, s)>_R
                    ->_R Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                  <s>_N <GhcMonad.Ghc>_R <a>_N))
                   (\ (ds1 :: s) -> GhcMonad.$fMonadGhc_$s$dmfail @ (a, s) str)) -}
0c0a2841fb6ce3ba891852d436d14381
  $s$fMonadReaderT_$s$fMonadStateT_$cp1Monad ::
    GHC.Base.Applicative
      (Control.Monad.Trans.State.Lazy.StateT s GhcMonad.Ghc)
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                FlexibleInstancesChecker.$s$fApplicativeReaderT_$s$fApplicativeStateT -}
c2b48d1e91da3508f7a8958481958cb4
  $sunless1 ::
    [GHC.LanguageExtensions.Type.Extension]
    -> Data.Map.Base.Map
         (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
         [SrcLoc.SrcSpan]
    -> GhcMonad.Session
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          ((),
           Data.Map.Base.Map
             (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
             [SrcLoc.SrcSpan]) #)
  {- Arity: 4, HasNoCafRefs, Strictness: <L,A><L,U><L,A><S,U>,
     Unfolding: InlineRule (4, True, False)
                (\ (eta1 :: [GHC.LanguageExtensions.Type.Extension])
                   (eta :: Data.Map.Base.Map
                             (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                             [SrcLoc.SrcSpan])
                   (eta2 :: GhcMonad.Session)
                   (eta3 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 (# eta3, (GHC.Tuple.(), eta) #)) -}
7f29119031737c0fd4ac28874df43896
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   FlexibleInstancesChecker.$trModule2
                   FlexibleInstancesChecker.$trModule1) -}
00330417efe269fedccef99351607074
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "FlexibleInstancesChecker"#) -}
b50c94df97946e935056c6b1c1164d30
  $trModule2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   "ht-extension-organizer-0.1.0.0-y3uypH7gCtA60AaWeuyZL"#) -}
3fe7ca67b970b1a1859463a620b3610f
  $wchkFlexibleInstances' ::
    ExtMonad.ExtDomain dom =>
    Language.Haskell.Tools.AST.Ann.NodeInfo
      (Language.Haskell.Tools.AST.Ann.SemanticInfo
         dom Language.Haskell.Tools.AST.Representation.Decls.UDecl)
      (Language.Haskell.Tools.AST.Ann.SpanInfo
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
    -> Language.Haskell.Tools.AST.Representation.Decls.UDecl
         dom Language.Haskell.Tools.AST.Ann.SrcTemplateStage
    -> ExtMonad.ExtMonad
         (Language.Haskell.Tools.AST.ElementTypes.Decl dom)
  {- Arity: 3,
     Strictness: <S(S(LLS(S)LLLLLLLLLL)L),U(U(U,U,U(U),U,U,U,U,U,U,U,U,U,U),U)><L,U><S,U>,
     Inline: [0],
     Unfolding: (\ @ dom
                   (w :: ExtMonad.ExtDomain dom)
                   (ww :: Language.Haskell.Tools.AST.Ann.NodeInfo
                            (Language.Haskell.Tools.AST.Ann.SemanticInfo
                               dom Language.Haskell.Tools.AST.Representation.Decls.UDecl)
                            (Language.Haskell.Tools.AST.Ann.SpanInfo
                               Language.Haskell.Tools.AST.Ann.SrcTemplateStage))
                   (ww4 :: Language.Haskell.Tools.AST.Representation.Decls.UDecl
                             dom Language.Haskell.Tools.AST.Ann.SrcTemplateStage) ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Language.Haskell.Tools.AST.Ann.SemanticInfo'
                             dom Language.Haskell.Tools.AST.Ann.SameInfoDefaultCls)
                        @ Language.Haskell.Tools.AST.SemaInfoTypes.NoSemanticInfo
                        (Language.Haskell.Tools.AST.Ann.$p3Domain
                           @ dom
                           (GHC.Classes.$p1(%,%)
                              @ (Language.Haskell.Tools.AST.Ann.Domain dom)
                              @ (Language.Haskell.Tools.AST.SemaInfoClasses.HasNameInfo'
                                   (Language.Haskell.Tools.AST.Ann.SemanticInfo
                                      dom
                                      Language.Haskell.Tools.AST.Representation.Names.UQualifiedName))
                              w))
                          `cast`
                        (Data.Type.Equality.N:~[0]
                             <*>_N <Language.Haskell.Tools.AST.Ann.SemanticInfo'
                                      dom
                                      Language.Haskell.Tools.AST.Ann.SameInfoDefaultCls>_N <Language.Haskell.Tools.AST.SemaInfoTypes.NoSemanticInfo>_N) of cobox0 { DEFAULT ->
                 let {
                   wild :: Language.Haskell.Tools.AST.ElementTypes.Decl dom
                   = Language.Haskell.Tools.AST.Ann.Ann
                       @ Language.Haskell.Tools.AST.Representation.Decls.UDecl
                       @ dom
                       @ Language.Haskell.Tools.AST.Ann.SrcTemplateStage
                       ww
                       ww4
                 } in
                 case ww4 of wild1 {
                   DEFAULT
                   -> (\ (eta1 :: [GHC.LanguageExtensions.Type.Extension])
                         (eta :: Data.Map.Base.Map
                                   (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                                   [SrcLoc.SrcSpan])
                         (eta2 :: GhcMonad.Session)
                         (eta3 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                       (# eta3, (wild, eta) #))
                        `cast`
                      (Trans
                           (<[GHC.LanguageExtensions.Type.Extension]>_R
                            ->_R Trans
                                     (<Data.Map.Base.Map
                                         (ExtMap.LogicalRelation
                                            GHC.LanguageExtensions.Type.Extension)
                                         [SrcLoc.SrcSpan]>_R
                                      ->_R Trans
                                               (<GhcMonad.Session>_R
                                                ->_R Sym (GHC.Types.N:IO[0]
                                                              <(Language.Haskell.Tools.AST.ElementTypes.Decl
                                                                  dom,
                                                                Data.Map.Base.Map
                                                                  (ExtMap.LogicalRelation
                                                                     GHC.LanguageExtensions.Type.Extension)
                                                                  [SrcLoc.SrcSpan])>_R))
                                               (Sym (GhcMonad.N:Ghc[0]
                                                         <(Language.Haskell.Tools.AST.ElementTypes.Decl
                                                             dom,
                                                           Data.Map.Base.Map
                                                             (ExtMap.LogicalRelation
                                                                GHC.LanguageExtensions.Type.Extension)
                                                             [SrcLoc.SrcSpan])>_R)))
                                     (Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                               <Data.Map.Base.Map
                                                  (ExtMap.LogicalRelation
                                                     GHC.LanguageExtensions.Type.Extension)
                                                  [SrcLoc.SrcSpan]>_N
                                               <GhcMonad.Ghc>_R
                                               <Language.Haskell.Tools.AST.ElementTypes.Decl
                                                  dom>_N)))
                           (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                     <*>_N
                                     <[GHC.LanguageExtensions.Type.Extension]>_R
                                     <Control.Monad.Trans.State.Lazy.StateT
                                        ExtMap.ExtMap GhcMonad.Ghc>_R
                                     <Language.Haskell.Tools.AST.ElementTypes.Decl dom>_N)))
                   Language.Haskell.Tools.AST.Representation.Decls.UInstDecl ds2 instRule body
                   -> FlexibleInstancesChecker.checkedReturn
                        @ dom
                        @ (Language.Haskell.Tools.AST.ElementTypes.Decl dom)
                        w
                        instRule
                        wild
                   Language.Haskell.Tools.AST.Representation.Decls.UDerivDecl ds2 instRule
                   -> FlexibleInstancesChecker.checkedReturn
                        @ dom
                        @ (Language.Haskell.Tools.AST.ElementTypes.Decl dom)
                        w
                        instRule
                        wild } }) -}
3fd712840ecd215dfeae17490409b584
  $wchkInstanceRule ::
    ExtMonad.ExtDomain dom =>
    Language.Haskell.Tools.AST.Ann.NodeInfo
      (Language.Haskell.Tools.AST.Ann.SemanticInfo
         dom Language.Haskell.Tools.AST.Representation.Decls.UInstanceRule)
      (Language.Haskell.Tools.AST.Ann.SpanInfo
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
    -> Language.Haskell.Tools.AST.Ann.AnnMaybeG
         (Language.Haskell.Tools.AST.Ann.AnnListG
            Language.Haskell.Tools.AST.Representation.Types.UTyVar)
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage
    -> Language.Haskell.Tools.AST.Ann.AnnMaybeG
         Language.Haskell.Tools.AST.Representation.Types.UContext
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage
    -> Language.Haskell.Tools.AST.Ann.Ann
         Language.Haskell.Tools.AST.Representation.Decls.UInstanceHead
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage
    -> ExtMonad.ExtMonad
         (Language.Haskell.Tools.AST.ElementTypes.InstanceRule dom)
  {- Arity: 5,
     Strictness: <S(S(LLS(S)LLLLLLLLLL)L),U(U(U,U,U(U),U,U,U,U,U,U,U,U,U,U),U)><L,U><L,U><L,U><L,U>,
     Inline: [0],
     Unfolding: (\ @ dom
                   (w :: ExtMonad.ExtDomain dom)
                   (ww :: Language.Haskell.Tools.AST.Ann.NodeInfo
                            (Language.Haskell.Tools.AST.Ann.SemanticInfo
                               dom Language.Haskell.Tools.AST.Representation.Decls.UInstanceRule)
                            (Language.Haskell.Tools.AST.Ann.SpanInfo
                               Language.Haskell.Tools.AST.Ann.SrcTemplateStage))
                   (ww4 :: Language.Haskell.Tools.AST.Ann.AnnMaybeG
                             (Language.Haskell.Tools.AST.Ann.AnnListG
                                Language.Haskell.Tools.AST.Representation.Types.UTyVar)
                             dom
                             Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   (ww5 :: Language.Haskell.Tools.AST.Ann.AnnMaybeG
                             Language.Haskell.Tools.AST.Representation.Types.UContext
                             dom
                             Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   (ww6 :: Language.Haskell.Tools.AST.Ann.Ann
                             Language.Haskell.Tools.AST.Representation.Decls.UInstanceHead
                             dom
                             Language.Haskell.Tools.AST.Ann.SrcTemplateStage) ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Language.Haskell.Tools.AST.Ann.SemanticInfo'
                             dom Language.Haskell.Tools.AST.Ann.SameInfoDefaultCls)
                        @ Language.Haskell.Tools.AST.SemaInfoTypes.NoSemanticInfo
                        (Language.Haskell.Tools.AST.Ann.$p3Domain
                           @ dom
                           (GHC.Classes.$p1(%,%)
                              @ (Language.Haskell.Tools.AST.Ann.Domain dom)
                              @ (Language.Haskell.Tools.AST.SemaInfoClasses.HasNameInfo'
                                   (Language.Haskell.Tools.AST.Ann.SemanticInfo
                                      dom
                                      Language.Haskell.Tools.AST.Representation.Names.UQualifiedName))
                              w))
                          `cast`
                        (Data.Type.Equality.N:~[0]
                             <*>_N <Language.Haskell.Tools.AST.Ann.SemanticInfo'
                                      dom
                                      Language.Haskell.Tools.AST.Ann.SameInfoDefaultCls>_N <Language.Haskell.Tools.AST.SemaInfoTypes.NoSemanticInfo>_N) of cobox0 { DEFAULT ->
                 let {
                   m1 :: Control.Monad.Trans.Reader.ReaderT
                           [GHC.LanguageExtensions.Type.Extension]
                           (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc)
                           (Language.Haskell.Tools.AST.ElementTypes.InstanceHead dom)
                   = FlexibleInstancesChecker.chkInstanceHead @ dom w ww6
                 } in
                 let {
                   ds1 :: Language.Haskell.Tools.AST.Representation.Decls.UInstanceRule
                            dom Language.Haskell.Tools.AST.Ann.SrcTemplateStage
                   = Language.Haskell.Tools.AST.Representation.Decls.UInstanceRule
                       @ dom
                       @ Language.Haskell.Tools.AST.Ann.SrcTemplateStage
                       ww4
                       ww5
                       ww6
                 } in
                 let {
                   wild :: Language.Haskell.Tools.AST.ElementTypes.InstanceRule dom
                   = Language.Haskell.Tools.AST.Ann.Ann
                       @ Language.Haskell.Tools.AST.Representation.Decls.UInstanceRule
                       @ dom
                       @ Language.Haskell.Tools.AST.Ann.SrcTemplateStage
                       ww
                       ds1
                 } in
                 (\ (r1 :: [GHC.LanguageExtensions.Type.Extension]) ->
                  let {
                    m2 :: Control.Monad.Trans.State.Lazy.StateT
                            (Data.Map.Base.Map
                               (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                               [SrcLoc.SrcSpan])
                            GhcMonad.Ghc
                            (Language.Haskell.Tools.AST.ElementTypes.InstanceHead dom)
                    = m1
                        `cast`
                      (Control.Monad.Trans.Reader.N:ReaderT[0]
                           <*>_N
                           <[GHC.LanguageExtensions.Type.Extension]>_R
                           <Control.Monad.Trans.State.Lazy.StateT
                              ExtMap.ExtMap GhcMonad.Ghc>_R
                           <Language.Haskell.Tools.AST.ElementTypes.InstanceHead dom>_N)
                        r1
                  } in
                  (\ (s1 :: Data.Map.Base.Map
                              (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                              [SrcLoc.SrcSpan]) ->
                   let {
                     m :: GhcMonad.Ghc
                            (Language.Haskell.Tools.AST.ElementTypes.InstanceHead dom,
                             Data.Map.Base.Map
                               (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                               [SrcLoc.SrcSpan])
                     = m2
                         `cast`
                       (Control.Monad.Trans.State.Lazy.N:StateT[0]
                            <Data.Map.Base.Map
                               (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                               [SrcLoc.SrcSpan]>_N
                            <GhcMonad.Ghc>_R
                            <Language.Haskell.Tools.AST.ElementTypes.InstanceHead dom>_N)
                         s1
                   } in
                   (\ (s :: GhcMonad.Session)
                      (s2 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                    case (m `cast`
                          (GhcMonad.N:Ghc[0]
                               <(Language.Haskell.Tools.AST.ElementTypes.InstanceHead dom,
                                 Data.Map.Base.Map
                                   (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                                   [SrcLoc.SrcSpan])>_R)
                            s)
                           `cast`
                         (GHC.Types.N:IO[0]
                              <(Language.Haskell.Tools.AST.ElementTypes.InstanceHead dom,
                                Data.Map.Base.Map
                                  (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                                  [SrcLoc.SrcSpan])>_R)
                           s2 of ds2 { (#,#) ipv ipv1 ->
                    (# ipv, (wild, case ipv1 of wild1 { (,) a1 s' -> s' }) #) })
                     `cast`
                   (Trans
                        (<GhcMonad.Session>_R
                         ->_R Sym (GHC.Types.N:IO[0]
                                       <(Language.Haskell.Tools.AST.ElementTypes.InstanceRule dom,
                                         Data.Map.Base.Map
                                           (ExtMap.LogicalRelation
                                              GHC.LanguageExtensions.Type.Extension)
                                           [SrcLoc.SrcSpan])>_R))
                        (Sym (GhcMonad.N:Ghc[0]
                                  <(Language.Haskell.Tools.AST.ElementTypes.InstanceRule dom,
                                    Data.Map.Base.Map
                                      (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                                      [SrcLoc.SrcSpan])>_R))))
                    `cast`
                  (Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                            <Data.Map.Base.Map
                               (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                               [SrcLoc.SrcSpan]>_N
                            <GhcMonad.Ghc>_R
                            <Language.Haskell.Tools.AST.ElementTypes.InstanceRule dom>_N)))
                   `cast`
                 (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                           <*>_N
                           <[GHC.LanguageExtensions.Type.Extension]>_R
                           <Control.Monad.Trans.State.Lazy.StateT
                              ExtMap.ExtMap GhcMonad.Ghc>_R
                           <Language.Haskell.Tools.AST.ElementTypes.InstanceRule
                              dom>_N)) }) -}
93cd00cd680f24b6dda83dffd6c071f9
  $wrmTKinded ::
    Language.Haskell.Tools.AST.Ann.NodeInfo
      (Language.Haskell.Tools.AST.Ann.SemanticInfo
         dom Language.Haskell.Tools.AST.Representation.Types.UType)
      (Language.Haskell.Tools.AST.Ann.SpanInfo
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
    -> Language.Haskell.Tools.AST.Representation.Types.UType
         dom Language.Haskell.Tools.AST.Ann.SrcTemplateStage
    -> ExtMap.ExtMap
    -> GhcMonad.Ghc
         (Language.Haskell.Tools.AST.ElementTypes.Type dom, ExtMap.ExtMap)
  {- Arity: 3, Strictness: <L,U(U,U(U,U,U,U))><S,U><L,U>,
     Inline: [0],
     Unfolding: (\ @ dom
                   (ww :: Language.Haskell.Tools.AST.Ann.NodeInfo
                            (Language.Haskell.Tools.AST.Ann.SemanticInfo
                               dom Language.Haskell.Tools.AST.Representation.Types.UType)
                            (Language.Haskell.Tools.AST.Ann.SpanInfo
                               Language.Haskell.Tools.AST.Ann.SrcTemplateStage))
                   (ww4 :: Language.Haskell.Tools.AST.Representation.Types.UType
                             dom Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   (w :: ExtMap.ExtMap) ->
                 case ww4 of wild1 {
                   DEFAULT
                   -> let {
                        wild :: Language.Haskell.Tools.AST.ElementTypes.Type dom
                        = Language.Haskell.Tools.AST.Ann.Ann
                            @ Language.Haskell.Tools.AST.Representation.Types.UType
                            @ dom
                            @ Language.Haskell.Tools.AST.Ann.SrcTemplateStage
                            ww
                            wild1
                      } in
                      let {
                        lvl37 :: (Language.Haskell.Tools.AST.ElementTypes.Type dom,
                                  Data.Map.Base.Map
                                    (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                                    [SrcLoc.SrcSpan])
                        = (wild, w)
                      } in
                      (\ (eta :: GhcMonad.Session)
                         (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                       (# eta1, lvl37 #))
                        `cast`
                      (Trans
                           (<GhcMonad.Session>_R
                            ->_R Sym (GHC.Types.N:IO[0]
                                          <(Language.Haskell.Tools.AST.ElementTypes.Type dom,
                                            Data.Map.Base.Map
                                              (ExtMap.LogicalRelation
                                                 GHC.LanguageExtensions.Type.Extension)
                                              [SrcLoc.SrcSpan])>_R))
                           (Sym (GhcMonad.N:Ghc[0]
                                     <(Language.Haskell.Tools.AST.ElementTypes.Type dom,
                                       Data.Map.Base.Map
                                         (ExtMap.LogicalRelation
                                            GHC.LanguageExtensions.Type.Extension)
                                         [SrcLoc.SrcSpan])>_R)))
                   Language.Haskell.Tools.AST.Representation.Types.UTyKinded t k
                   -> let {
                        a1 :: Data.Map.Base.Map
                                (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                                [SrcLoc.SrcSpan]
                        = Data.Map.Strict.insertWithKey
                            @ (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                            @ [SrcLoc.SrcSpan]
                            ExtMonad.$s$fOrdLogicalRelation
                            (ExtMonad.addOccurence_1
                               @ (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension))
                            FlexibleInstancesChecker.rmTKinded2
                            (GHC.Types.:
                               @ SrcLoc.SrcSpan
                               (case ww of wild2 { Language.Haskell.Tools.AST.Ann.NodeInfo ds1 ds2 ->
                                case ds2
                                       `cast`
                                     (Language.Haskell.Tools.Transform.SourceTemplate.D:R:SpanInfoSrcTemplateStage0[0]) of wild { Language.Haskell.Tools.Transform.SourceTemplate.SourceTemplateNode ds4 ds5 ds3 ds6 ->
                                ds4 } })
                               (GHC.Types.[] @ SrcLoc.SrcSpan))
                            w
                      } in
                      let {
                        lvl37 :: (Language.Haskell.Tools.AST.ElementTypes.Type dom,
                                  Data.Map.Base.Map
                                    (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                                    [SrcLoc.SrcSpan])
                        = (t, a1)
                      } in
                      (\ (s :: GhcMonad.Session)
                         (s1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                       (# s1, lvl37 #))
                        `cast`
                      (Trans
                           (<GhcMonad.Session>_R
                            ->_R Sym (GHC.Types.N:IO[0]
                                          <(Language.Haskell.Tools.AST.ElementTypes.Type dom,
                                            Data.Map.Base.Map
                                              (ExtMap.LogicalRelation
                                                 GHC.LanguageExtensions.Type.Extension)
                                              [SrcLoc.SrcSpan])>_R))
                           (Sym (GhcMonad.N:Ghc[0]
                                     <(Language.Haskell.Tools.AST.ElementTypes.Type dom,
                                       Data.Map.Base.Map
                                         (ExtMap.LogicalRelation
                                            GHC.LanguageExtensions.Type.Extension)
                                         [SrcLoc.SrcSpan])>_R))) }) -}
b140f04beee90f00d6bff20c4c74a25e
  $wrmTypeMisc ::
    Language.Haskell.Tools.AST.Ann.NodeInfo
      (Language.Haskell.Tools.AST.Ann.SemanticInfo
         dom Language.Haskell.Tools.AST.Representation.Types.UType)
      (Language.Haskell.Tools.AST.Ann.SpanInfo
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
    -> Language.Haskell.Tools.AST.Representation.Types.UType
         dom Language.Haskell.Tools.AST.Ann.SrcTemplateStage
    -> ExtMap.ExtMap
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          (Language.Haskell.Tools.AST.ElementTypes.Type dom,
           ExtMap.ExtMap) #)
  {- Arity: 4, Strictness: <L,U(U,U(U,U,U,U))><S,U><L,U><S,U>,
     Inline: [0],
     Unfolding: (\ @ dom
                   (ww :: Language.Haskell.Tools.AST.Ann.NodeInfo
                            (Language.Haskell.Tools.AST.Ann.SemanticInfo
                               dom Language.Haskell.Tools.AST.Representation.Types.UType)
                            (Language.Haskell.Tools.AST.Ann.SpanInfo
                               Language.Haskell.Tools.AST.Ann.SrcTemplateStage))
                   (ww4 :: Language.Haskell.Tools.AST.Representation.Types.UType
                             dom Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   (w :: ExtMap.ExtMap)
                   (w1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case ww4 of wild1 {
                   DEFAULT
                   -> (# w1,
                         (Language.Haskell.Tools.AST.Ann.Ann
                            @ Language.Haskell.Tools.AST.Representation.Types.UType
                            @ dom
                            @ Language.Haskell.Tools.AST.Ann.SrcTemplateStage
                            ww
                            wild1,
                          w) #)
                   Language.Haskell.Tools.AST.Representation.Types.UTyParen t
                   -> case t of ww5 { Language.Haskell.Tools.AST.Ann.Ann ww6 ww7 ->
                      case ww7 of wild2 {
                        DEFAULT -> (# w1, (ww5, w) #)
                        Language.Haskell.Tools.AST.Representation.Types.UTyKinded t1 k
                        -> (# w1,
                              (t1,
                               Data.Map.Strict.insertWithKey
                                 @ (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                                 @ [SrcLoc.SrcSpan]
                                 ExtMonad.$s$fOrdLogicalRelation
                                 (ExtMonad.addOccurence_1
                                    @ (ExtMap.LogicalRelation
                                         GHC.LanguageExtensions.Type.Extension))
                                 FlexibleInstancesChecker.rmTKinded2
                                 (GHC.Types.:
                                    @ SrcLoc.SrcSpan
                                    (case ww6 of wild3 { Language.Haskell.Tools.AST.Ann.NodeInfo ds1 ds2 ->
                                     case ds2
                                            `cast`
                                          (Language.Haskell.Tools.Transform.SourceTemplate.D:R:SpanInfoSrcTemplateStage0[0]) of wild { Language.Haskell.Tools.Transform.SourceTemplate.SourceTemplateNode ds4 ds5 ds3 ds6 ->
                                     ds4 } })
                                    (GHC.Types.[] @ SrcLoc.SrcSpan))
                                 w) #) } }
                   Language.Haskell.Tools.AST.Representation.Types.UTyKinded t k
                   -> (# w1,
                         (t,
                          Data.Map.Strict.insertWithKey
                            @ (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                            @ [SrcLoc.SrcSpan]
                            ExtMonad.$s$fOrdLogicalRelation
                            (ExtMonad.addOccurence_1
                               @ (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension))
                            FlexibleInstancesChecker.rmTKinded2
                            (GHC.Types.:
                               @ SrcLoc.SrcSpan
                               (case ww of wild2 { Language.Haskell.Tools.AST.Ann.NodeInfo ds1 ds2 ->
                                case ds2
                                       `cast`
                                     (Language.Haskell.Tools.Transform.SourceTemplate.D:R:SpanInfoSrcTemplateStage0[0]) of wild { Language.Haskell.Tools.Transform.SourceTemplate.SourceTemplateNode ds4 ds5 ds3 ds6 ->
                                ds4 } })
                               (GHC.Types.[] @ SrcLoc.SrcSpan))
                            w) #) }) -}
3cc5cab0d1eead5643287b66d881bdb8
  checkedReturn ::
    ExtMonad.ExtDomain dom =>
    Language.Haskell.Tools.AST.ElementTypes.InstanceRule dom
    -> a -> ExtMonad.ExtMonad a
  {- Arity: 3,
     Strictness: <S(S(LLS(S)LLLLLLLLLL)L),U(U(U,U,U(U),U,U,U,U,U,U,U,U,U,U),U)><L,1*U(U,U(U,U,U))><L,U>,
     Unfolding: (\ @ dom
                   @ a
                   ($d(%,%) :: ExtMonad.ExtDomain dom)
                   (eta :: Language.Haskell.Tools.AST.ElementTypes.InstanceRule dom)
                   (eta1 :: a) ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Language.Haskell.Tools.AST.Ann.SemanticInfo'
                             dom Language.Haskell.Tools.AST.Ann.SameInfoDefaultCls)
                        @ Language.Haskell.Tools.AST.SemaInfoTypes.NoSemanticInfo
                        (Language.Haskell.Tools.AST.Ann.$p3Domain
                           @ dom
                           (GHC.Classes.$p1(%,%)
                              @ (Language.Haskell.Tools.AST.Ann.Domain dom)
                              @ (Language.Haskell.Tools.AST.SemaInfoClasses.HasNameInfo'
                                   (Language.Haskell.Tools.AST.Ann.SemanticInfo
                                      dom
                                      Language.Haskell.Tools.AST.Representation.Names.UQualifiedName))
                              $d(%,%)))
                          `cast`
                        (Data.Type.Equality.N:~[0]
                             <*>_N <Language.Haskell.Tools.AST.Ann.SemanticInfo'
                                      dom
                                      Language.Haskell.Tools.AST.Ann.SameInfoDefaultCls>_N <Language.Haskell.Tools.AST.SemaInfoTypes.NoSemanticInfo>_N) of cobox0 { DEFAULT ->
                 let {
                   m1 :: Control.Monad.Trans.Reader.ReaderT
                           [GHC.LanguageExtensions.Type.Extension]
                           (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc)
                           (Language.Haskell.Tools.AST.ElementTypes.InstanceRule dom)
                   = case eta of ww { Language.Haskell.Tools.AST.Ann.Ann ww4 ww5 ->
                     case ww5 of ww6 { Language.Haskell.Tools.AST.Representation.Decls.UInstanceRule ww7 ww8 ww9 ->
                     FlexibleInstancesChecker.$wchkInstanceRule
                       @ dom
                       $d(%,%)
                       ww4
                       ww7
                       ww8
                       ww9 } }
                 } in
                 (\ (r1 :: [GHC.LanguageExtensions.Type.Extension]) ->
                  let {
                    m2 :: Control.Monad.Trans.State.Lazy.StateT
                            (Data.Map.Base.Map
                               (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                               [SrcLoc.SrcSpan])
                            GhcMonad.Ghc
                            (Language.Haskell.Tools.AST.ElementTypes.InstanceRule dom)
                    = m1
                        `cast`
                      (Control.Monad.Trans.Reader.N:ReaderT[0]
                           <*>_N
                           <[GHC.LanguageExtensions.Type.Extension]>_R
                           <Control.Monad.Trans.State.Lazy.StateT
                              ExtMap.ExtMap GhcMonad.Ghc>_R
                           <Language.Haskell.Tools.AST.ElementTypes.InstanceRule dom>_N)
                        r1
                  } in
                  (\ (s1 :: Data.Map.Base.Map
                              (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                              [SrcLoc.SrcSpan]) ->
                   let {
                     m :: GhcMonad.Ghc
                            (Language.Haskell.Tools.AST.ElementTypes.InstanceRule dom,
                             Data.Map.Base.Map
                               (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                               [SrcLoc.SrcSpan])
                     = m2
                         `cast`
                       (Control.Monad.Trans.State.Lazy.N:StateT[0]
                            <Data.Map.Base.Map
                               (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                               [SrcLoc.SrcSpan]>_N
                            <GhcMonad.Ghc>_R
                            <Language.Haskell.Tools.AST.ElementTypes.InstanceRule dom>_N)
                         s1
                   } in
                   (\ (s :: GhcMonad.Session)
                      (s2 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                    case (m `cast`
                          (GhcMonad.N:Ghc[0]
                               <(Language.Haskell.Tools.AST.ElementTypes.InstanceRule dom,
                                 Data.Map.Base.Map
                                   (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                                   [SrcLoc.SrcSpan])>_R)
                            s)
                           `cast`
                         (GHC.Types.N:IO[0]
                              <(Language.Haskell.Tools.AST.ElementTypes.InstanceRule dom,
                                Data.Map.Base.Map
                                  (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                                  [SrcLoc.SrcSpan])>_R)
                           s2 of ds1 { (#,#) ipv ipv1 ->
                    (# ipv, (eta1, case ipv1 of wild { (,) a1 s' -> s' }) #) })
                     `cast`
                   (Trans
                        (<GhcMonad.Session>_R
                         ->_R Sym (GHC.Types.N:IO[0]
                                       <(a,
                                         Data.Map.Base.Map
                                           (ExtMap.LogicalRelation
                                              GHC.LanguageExtensions.Type.Extension)
                                           [SrcLoc.SrcSpan])>_R))
                        (Sym (GhcMonad.N:Ghc[0]
                                  <(a,
                                    Data.Map.Base.Map
                                      (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                                      [SrcLoc.SrcSpan])>_R))))
                    `cast`
                  (Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                            <Data.Map.Base.Map
                               (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                               [SrcLoc.SrcSpan]>_N
                            <GhcMonad.Ghc>_R
                            <a>_N)))
                   `cast`
                 (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                           <*>_N
                           <[GHC.LanguageExtensions.Type.Extension]>_R
                           <Control.Monad.Trans.State.Lazy.StateT
                              ExtMap.ExtMap GhcMonad.Ghc>_R
                           <a>_N)) }) -}
47a0a59ad7f63fe78f39f3c4ef8608df
  chkFlexibleInstances ::
    ExtMonad.CheckNode Language.Haskell.Tools.AST.ElementTypes.Decl
  {- Arity: 2,
     Strictness: <S(S(LLS(S)LLLLLLLLLL)L),U(U(U,U,U(U),U,U,U,U,U,U,U,U,U,U),U)><L,U>,
     Unfolding: (\ @ dom
                   ($d(%,%) :: ExtMonad.ExtDomain dom)
                   (eta :: Language.Haskell.Tools.AST.ElementTypes.Decl dom) ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Language.Haskell.Tools.AST.Ann.SemanticInfo'
                             dom Language.Haskell.Tools.AST.Ann.SameInfoDefaultCls)
                        @ Language.Haskell.Tools.AST.SemaInfoTypes.NoSemanticInfo
                        (Language.Haskell.Tools.AST.Ann.$p3Domain
                           @ dom
                           (GHC.Classes.$p1(%,%)
                              @ (Language.Haskell.Tools.AST.Ann.Domain dom)
                              @ (Language.Haskell.Tools.AST.SemaInfoClasses.HasNameInfo'
                                   (Language.Haskell.Tools.AST.Ann.SemanticInfo
                                      dom
                                      Language.Haskell.Tools.AST.Representation.Names.UQualifiedName))
                              $d(%,%)))
                          `cast`
                        (Data.Type.Equality.N:~[0]
                             <*>_N <Language.Haskell.Tools.AST.Ann.SemanticInfo'
                                      dom
                                      Language.Haskell.Tools.AST.Ann.SameInfoDefaultCls>_N <Language.Haskell.Tools.AST.SemaInfoTypes.NoSemanticInfo>_N) of cobox0 { DEFAULT ->
                 ExtMonad.conditionalAny
                   @ (Language.Haskell.Tools.AST.ElementTypes.Decl dom)
                   (FlexibleInstancesChecker.chkFlexibleInstances' @ dom $d(%,%))
                   FlexibleInstancesChecker.chkFlexibleInstances1
                   eta }) -}
044b3dce26d8f0682f7fbec2c2d499b4
  chkFlexibleInstances' ::
    ExtMonad.CheckNode Language.Haskell.Tools.AST.ElementTypes.Decl
  {- Arity: 2,
     Strictness: <S(S(LLS(S)LLLLLLLLLL)L),U(U(U,U,U(U),U,U,U,U,U,U,U,U,U,U),U)><S(LS),1*U(U,U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ @ dom
                   (w :: ExtMonad.ExtDomain dom)
                   (w1 :: Language.Haskell.Tools.AST.ElementTypes.Decl dom) ->
                 case w1 of ww { Language.Haskell.Tools.AST.Ann.Ann ww4 ww5 ->
                 FlexibleInstancesChecker.$wchkFlexibleInstances'
                   @ dom
                   w
                   ww4
                   ww5 }) -}
231bc5e85197332021e71b0c88067b05
  chkFlexibleInstances1 :: [GHC.LanguageExtensions.Type.Extension]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ GHC.LanguageExtensions.Type.Extension
                   GHC.LanguageExtensions.Type.FlexibleInstances
                   (GHC.Types.[] @ GHC.LanguageExtensions.Type.Extension)) -}
6a087afaa2153c646a7931361c5a1ba1
  chkInstanceHead ::
    ExtMonad.CheckNode
      Language.Haskell.Tools.AST.ElementTypes.InstanceHead
  {- Arity: 1,
     Strictness: <S(SL),U(U(U,U,U(U),U,U,U,U,U,U,U,U,U,U),U)> -}
bb0ff2fe4d12a5632003a3668c674a18
  chkInstanceRule ::
    ExtMonad.CheckNode
      Language.Haskell.Tools.AST.ElementTypes.InstanceRule
  {- Arity: 2,
     Strictness: <S(S(LLS(S)LLLLLLLLLL)L),U(U(U,U,U(U),U,U,U,U,U,U,U,U,U,U),U)><S(LS),1*U(U,U(U,U,U))>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ @ dom
                   (w :: ExtMonad.ExtDomain dom)
                   (w1 :: Language.Haskell.Tools.AST.ElementTypes.InstanceRule dom) ->
                 case w1 of ww { Language.Haskell.Tools.AST.Ann.Ann ww4 ww5 ->
                 case ww5 of ww6 { Language.Haskell.Tools.AST.Representation.Decls.UInstanceRule ww7 ww8 ww9 ->
                 FlexibleInstancesChecker.$wchkInstanceRule
                   @ dom
                   w
                   ww4
                   ww7
                   ww8
                   ww9 } }) -}
c6fb671179d91635042602078945f4df
  chkTyVars ::
    ExtMonad.CheckNode Language.Haskell.Tools.AST.ElementTypes.Type
  {- Arity: 3,
     Strictness: <S(S(LLS(S)LLLLLLLLLL)L),U(1*U(A,A,1*U(1*U),A,A,A,A,A,A,A,A,A,A),1*U)><L,U(U(U,U(U,U,U,U)),U)><L,U>,
     Unfolding: InlineRule (0, True, True)
                FlexibleInstancesChecker.chkTyVars1
                  `cast`
                (forall (dom :: <*>_N).
                 <ExtMonad.ExtDomain dom>_R
                 ->_R <Language.Haskell.Tools.AST.ElementTypes.Type dom>_R
                 ->_R Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                               <*>_N
                               <[GHC.LanguageExtensions.Type.Extension]>_R
                               <Control.Monad.Trans.State.Lazy.StateT
                                  ExtMap.ExtMap GhcMonad.Ghc>_R
                               <Language.Haskell.Tools.AST.ElementTypes.Type dom>_N)) -}
b2cdcb52a289b451cf694c0bac1b6d5e
  chkTyVars1 ::
    ExtMonad.ExtDomain dom =>
    Language.Haskell.Tools.AST.ElementTypes.Type dom
    -> [GHC.LanguageExtensions.Type.Extension]
    -> Control.Monad.Trans.State.Lazy.StateT
         ExtMap.ExtMap
         GhcMonad.Ghc
         (Language.Haskell.Tools.AST.ElementTypes.Type dom)
  {- Arity: 3,
     Strictness: <S(S(LLS(S)LLLLLLLLLL)L),U(1*U(A,A,1*U(1*U),A,A,A,A,A,A,A,A,A,A),1*U)><L,U(U(U,U(U,U,U,U)),U)><L,U> -}
01bd163d6c9b74d557d0046986e66ba4
  refact ::
    (Data.Data.Data (node dom stage), Data.Data.Data (inner dom stage),
     GHC.Base.Monad m) =>
    (inner dom stage -> m (inner dom stage))
    -> node dom stage -> m (node dom stage)
  {- Arity: 3,
     Strictness: <L,U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)><L,U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)><L,U(U,U,U,U,U)>,
     Unfolding: (\ @ (node :: * -> * -> *)
                   @ dom
                   @ stage
                   @ (inner :: * -> * -> *)
                   @ (m :: * -> *)
                   ($dData :: Data.Data.Data (node dom stage))
                   ($dData1 :: Data.Data.Data (inner dom stage))
                   ($dMonad :: GHC.Base.Monad m) ->
                 let {
                   $dApplicative :: GHC.Base.Applicative m
                   = GHC.Base.$p1Monad @ m $dMonad
                 } in
                 let {
                   lvl37 :: Control.Reference.Representation.Reference
                              m
                              Control.Reference.Representation.MU
                              Control.Reference.Representation.MU
                              Control.Reference.Representation.MU
                              (node dom stage)
                              (node dom stage)
                              (inner dom stage)
                              (inner dom stage)
                   = case Control.Reference.Generators.$wbiplateRef
                            @ (node dom stage)
                            @ (inner dom stage)
                            (Data.Generics.Uniplate.Data.$fBiplateab
                               @ (node dom stage)
                               @ (inner dom stage)
                               $dData
                               $dData1
                               (Data.Generics.Uniplate.Data.$fUniplatea
                                  @ (inner dom stage)
                                  $dData1))
                            @ m
                            @ Control.Reference.Representation.MU
                            (Control.Reference.Representation.$fRefMonadswr
                               @ m
                               @ Data.Proxy.Proxy
                               (GHC.Base.$p1Applicative @ m $dApplicative)
                               $dApplicative
                               $dMonad
                               Data.Proxy.$fFunctorProxy
                               Data.Proxy.$fApplicativeProxy
                               Data.Proxy.$fMonadProxy)
                            FlexibleInstancesChecker.refact1
                              `cast`
                            (Sym (Control.Instances.Morph.N:Morph[0]
                                      <[]>_N
                                      <Data.Proxy.Proxy>_N)) of ww { (#,,,,,#) ww4 ww5 ww6 ww7 ww8 ww9 ->
                     Control.Reference.Representation.Reference
                       @ m
                       @ Control.Reference.Representation.MU
                       @ Control.Reference.Representation.MU
                       @ Control.Reference.Representation.MU
                       @ (node dom stage)
                       @ (node dom stage)
                       @ (inner dom stage)
                       @ (inner dom stage)
                       ww4
                       ww5
                       ww6
                       ww7
                       ww8
                       ww9 }
                 } in
                 \ (op :: inner dom stage -> m (inner dom stage)) ->
                 Control.Reference.Operators.!~
                   @ m
                   @ (node dom stage)
                   @ (node dom stage)
                   @ (inner dom stage)
                   @ (inner dom stage)
                   lvl37
                   op) -}
73e2e75f57e01c93e39681e8de15af0a
  refact1 :: [a] -> Data.Proxy.Proxy a
  {- Arity: 1, HasNoCafRefs, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ @ a (eta :: [a]) -> Data.Proxy.Proxy @ * @ a) -}
8d188d3d1f6e5fdf0a4394ab28ff312d
  rmTKinded ::
    Language.Haskell.Tools.AST.ElementTypes.Type dom
    -> ExtMonad.ExtMonad
         (Language.Haskell.Tools.AST.ElementTypes.Type dom)
  {- Arity: 3, Strictness: <S(LS),1*U(U(U,U(U,U,U,U)),U)><L,A><L,U>,
     Unfolding: InlineRule (0, True, True)
                FlexibleInstancesChecker.rmTKinded1
                  `cast`
                (forall (dom :: <GHC.Types.*>_N).
                 <Language.Haskell.Tools.AST.ElementTypes.Type dom>_R
                 ->_R Trans
                          (<[GHC.LanguageExtensions.Type.Extension]>_R
                           ->_R Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                         <ExtMap.ExtMap>_N
                                         <GhcMonad.Ghc>_R
                                         <Language.Haskell.Tools.AST.ElementTypes.Type dom>_N))
                          (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                    <*>_N
                                    <[GHC.LanguageExtensions.Type.Extension]>_R
                                    <Control.Monad.Trans.State.Lazy.StateT
                                       ExtMap.ExtMap GhcMonad.Ghc>_R
                                    <Language.Haskell.Tools.AST.ElementTypes.Type dom>_N))) -}
b6c73de9a6f7faf56dfff7e0c0fb2d50
  rmTKinded1 ::
    Language.Haskell.Tools.AST.ElementTypes.Type dom
    -> [GHC.LanguageExtensions.Type.Extension]
    -> ExtMap.ExtMap
    -> GhcMonad.Ghc
         (Language.Haskell.Tools.AST.ElementTypes.Type dom, ExtMap.ExtMap)
  {- Arity: 3, Strictness: <S(LS),1*U(U(U,U(U,U,U,U)),U)><L,A><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ @ dom
                   (w :: Language.Haskell.Tools.AST.ElementTypes.Type dom)
                   (w1 :: [GHC.LanguageExtensions.Type.Extension])
                   (w2 :: ExtMap.ExtMap) ->
                 case w of ww { Language.Haskell.Tools.AST.Ann.Ann ww4 ww5 ->
                 FlexibleInstancesChecker.$wrmTKinded @ dom ww4 ww5 w2 }) -}
5698880521c12ecc24ddbe4c64242342
  rmTKinded2 ::
    ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension
  {- HasNoCafRefs,
     Unfolding: (ExtMap.LVar
                   @ GHC.LanguageExtensions.Type.Extension
                   GHC.LanguageExtensions.Type.KindSignatures) -}
ed51e3314eb350b9b27781506f18be4c
  rmTParens ::
    Language.Haskell.Tools.AST.ElementTypes.Type dom
    -> ExtMonad.ExtMonad
         (Language.Haskell.Tools.AST.ElementTypes.Type dom)
  {- Arity: 5, HasNoCafRefs,
     Strictness: <S(LS),1*U(U,U)><L,A><L,U><L,A><S,U>,
     Unfolding: InlineRule (0, True, True)
                FlexibleInstancesChecker.rmTParens1
                  `cast`
                (forall (dom :: <GHC.Types.*>_N).
                 <Language.Haskell.Tools.AST.ElementTypes.Type dom>_R
                 ->_R Trans
                          (<[GHC.LanguageExtensions.Type.Extension]>_R
                           ->_R Trans
                                    (<ExtMap.ExtMap>_R
                                     ->_R Trans
                                              (<GhcMonad.Session>_R
                                               ->_R Sym (GHC.Types.N:IO[0]
                                                             <(Language.Haskell.Tools.AST.ElementTypes.Type
                                                                 dom,
                                                               ExtMap.ExtMap)>_R))
                                              (Sym (GhcMonad.N:Ghc[0]
                                                        <(Language.Haskell.Tools.AST.ElementTypes.Type
                                                            dom,
                                                          ExtMap.ExtMap)>_R)))
                                    (Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                              <ExtMap.ExtMap>_N
                                              <GhcMonad.Ghc>_R
                                              <Language.Haskell.Tools.AST.ElementTypes.Type
                                                 dom>_N)))
                          (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                    <*>_N
                                    <[GHC.LanguageExtensions.Type.Extension]>_R
                                    <Control.Monad.Trans.State.Lazy.StateT
                                       ExtMap.ExtMap GhcMonad.Ghc>_R
                                    <Language.Haskell.Tools.AST.ElementTypes.Type dom>_N))) -}
5817e005f4c64d86578b421a490e3c89
  rmTParens1 ::
    Language.Haskell.Tools.AST.ElementTypes.Type dom
    -> [GHC.LanguageExtensions.Type.Extension]
    -> ExtMap.ExtMap
    -> GhcMonad.Session
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          (Language.Haskell.Tools.AST.ElementTypes.Type dom,
           ExtMap.ExtMap) #)
  {- Arity: 5, HasNoCafRefs,
     Strictness: <S(LS),1*U(U,U)><L,A><L,U><L,A><S,U>,
     Unfolding: InlineRule (5, True, False)
                (\ @ dom
                   (ds1 :: Language.Haskell.Tools.AST.ElementTypes.Type dom)
                   (eta :: [GHC.LanguageExtensions.Type.Extension])
                   (eta1 :: ExtMap.ExtMap)
                   (eta2 :: GhcMonad.Session)
                   (eta3 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case ds1 of wild { Language.Haskell.Tools.AST.Ann.Ann ds2 ds3 ->
                 case ds3 of wild1 {
                   DEFAULT -> (# eta3, (wild, eta1) #)
                   Language.Haskell.Tools.AST.Representation.Types.UTyParen t
                   -> (# eta3, (t, eta1) #) } }) -}
6a02977e76ad9dc71d420ca9568dad13
  rmTypeMisc ::
    Language.Haskell.Tools.AST.ElementTypes.Type dom
    -> ExtMonad.ExtMonad
         (Language.Haskell.Tools.AST.ElementTypes.Type dom)
  {- Arity: 5,
     Strictness: <S(LS),1*U(U(U,U(U,U,U,U)),U)><L,A><L,U><L,A><S,U>,
     Unfolding: InlineRule (0, True, True)
                FlexibleInstancesChecker.rmTypeMisc1
                  `cast`
                (forall (dom :: <GHC.Types.*>_N).
                 <Language.Haskell.Tools.AST.ElementTypes.Type dom>_R
                 ->_R Trans
                          (<[GHC.LanguageExtensions.Type.Extension]>_R
                           ->_R Trans
                                    (<ExtMap.ExtMap>_R
                                     ->_R Trans
                                              (<GhcMonad.Session>_R
                                               ->_R Sym (GHC.Types.N:IO[0]
                                                             <(Language.Haskell.Tools.AST.ElementTypes.Type
                                                                 dom,
                                                               ExtMap.ExtMap)>_R))
                                              (Sym (GhcMonad.N:Ghc[0]
                                                        <(Language.Haskell.Tools.AST.ElementTypes.Type
                                                            dom,
                                                          ExtMap.ExtMap)>_R)))
                                    (Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                              <ExtMap.ExtMap>_N
                                              <GhcMonad.Ghc>_R
                                              <Language.Haskell.Tools.AST.ElementTypes.Type
                                                 dom>_N)))
                          (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                    <*>_N
                                    <[GHC.LanguageExtensions.Type.Extension]>_R
                                    <Control.Monad.Trans.State.Lazy.StateT
                                       ExtMap.ExtMap GhcMonad.Ghc>_R
                                    <Language.Haskell.Tools.AST.ElementTypes.Type dom>_N))) -}
5c143d7c9ad008757dd66595562b2f27
  rmTypeMisc1 ::
    Language.Haskell.Tools.AST.ElementTypes.Type dom
    -> [GHC.LanguageExtensions.Type.Extension]
    -> ExtMap.ExtMap
    -> GhcMonad.Session
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          (Language.Haskell.Tools.AST.ElementTypes.Type dom,
           ExtMap.ExtMap) #)
  {- Arity: 5,
     Strictness: <S(LS),1*U(U(U,U(U,U,U,U)),U)><L,A><L,U><L,A><S,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (5, True, False)
                (\ @ dom
                   (w :: Language.Haskell.Tools.AST.ElementTypes.Type dom)
                   (w1 :: [GHC.LanguageExtensions.Type.Extension])
                   (w2 :: ExtMap.ExtMap)
                   (w3 :: GhcMonad.Session)
                   (w4 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case w of ww { Language.Haskell.Tools.AST.Ann.Ann ww4 ww5 ->
                 FlexibleInstancesChecker.$wrmTypeMisc @ dom ww4 ww5 w2 w4 }) -}
"SPEC/FlexibleInstancesChecker $fApplicativeReaderT @ (StateT
                                                        ExtMap Ghc) _" [ALWAYS] forall @ r
                                                                                                                                                     ($dApplicative :: GHC.Base.Applicative
                                                                                                                                                                         (Control.Monad.Trans.State.Lazy.StateT
                                                                                                                                                                            ExtMap.ExtMap
                                                                                                                                                                            GhcMonad.Ghc))
  Control.Monad.Trans.Reader.$fApplicativeReaderT @ (Control.Monad.Trans.State.Lazy.StateT
                                                       ExtMap.ExtMap GhcMonad.Ghc)
                                                  @ r
                                                  $dApplicative
  = FlexibleInstancesChecker.$s$fApplicativeReaderT @ r
"SPEC/FlexibleInstancesChecker $fApplicativeStateT @ Ghc _" [ALWAYS] forall @ s
                                                                            ($dMonad :: GHC.Base.Monad
                                                                                          GhcMonad.Ghc)
                                                                            ($dFunctor :: GHC.Base.Functor
                                                                                            GhcMonad.Ghc)
  Control.Monad.Trans.State.Lazy.$fApplicativeStateT @ GhcMonad.Ghc
                                                     @ s
                                                     $dFunctor
                                                     $dMonad
  = FlexibleInstancesChecker.$s$fApplicativeReaderT_$s$fApplicativeStateT
      @ s
"SPEC/FlexibleInstancesChecker $fApplicativeStateT_$c<*> @ Ghc _" [ALWAYS] forall @ s
                                                                                  ($dMonad :: GHC.Base.Monad
                                                                                                GhcMonad.Ghc)
                                                                                  ($dFunctor :: GHC.Base.Functor
                                                                                                  GhcMonad.Ghc)
  Control.Monad.Trans.State.Lazy.$fApplicativeStateT_$c<*> @ GhcMonad.Ghc
                                                           @ s
                                                           $dFunctor
                                                           $dMonad
  = FlexibleInstancesChecker.$s$fApplicativeReaderT_$s$fApplicativeStateT_$c<*>
      @ s
"SPEC/FlexibleInstancesChecker $fApplicativeStateT_$cp1Applicative @ Ghc _" [ALWAYS] forall @ s
                                                                                            ($dMonad :: GHC.Base.Monad
                                                                                                          GhcMonad.Ghc)
                                                                                            ($dFunctor :: GHC.Base.Functor
                                                                                                            GhcMonad.Ghc)
  Control.Monad.Trans.State.Lazy.$fApplicativeStateT_$cp1Applicative @ GhcMonad.Ghc
                                                                     @ s
                                                                     $dFunctor
                                                                     $dMonad
  = FlexibleInstancesChecker.$s$fApplicativeReaderT_$s$fApplicativeStateT_$cp1Applicative
      @ s
"SPEC/FlexibleInstancesChecker $fApplicativeStateT_$cpure @ Ghc _" [ALWAYS] forall @ s
                                                                                   ($dMonad :: GHC.Base.Monad
                                                                                                 GhcMonad.Ghc)
                                                                                   ($dFunctor :: GHC.Base.Functor
                                                                                                   GhcMonad.Ghc)
  Control.Monad.Trans.State.Lazy.$fApplicativeStateT_$cpure @ GhcMonad.Ghc
                                                            @ s
                                                            $dFunctor
                                                            $dMonad
  = FlexibleInstancesChecker.$s$fApplicativeReaderT_$s$fApplicativeStateT_$cpure
      @ s
"SPEC/FlexibleInstancesChecker $fFunctorStateT @ Ghc _" [ALWAYS] forall @ s
                                                                        ($dFunctor :: GHC.Base.Functor
                                                                                        GhcMonad.Ghc)
  Control.Monad.Trans.State.Lazy.$fFunctorStateT @ GhcMonad.Ghc
                                                 @ s
                                                 $dFunctor
  = FlexibleInstancesChecker.$s$fApplicativeReaderT_$s$fFunctorStateT
      @ s
"SPEC/FlexibleInstancesChecker $fFunctorStateT_$cfmap @ Ghc _" [ALWAYS] forall @ s
                                                                               ($dFunctor :: GHC.Base.Functor
                                                                                               GhcMonad.Ghc)
  Control.Monad.Trans.State.Lazy.$fFunctorStateT_$cfmap @ GhcMonad.Ghc
                                                        @ s
                                                        $dFunctor
  = FlexibleInstancesChecker.$s$fApplicativeReaderT_$s$fFunctorStateT_$cfmap
      @ s
"SPEC/FlexibleInstancesChecker $fMonadReaderT @ (StateT
                                                  ExtMap Ghc) _" [ALWAYS] forall @ r
                                                                                                                                         ($dMonad :: GHC.Base.Monad
                                                                                                                                                       (Control.Monad.Trans.State.Lazy.StateT
                                                                                                                                                          ExtMap.ExtMap
                                                                                                                                                          GhcMonad.Ghc))
  Control.Monad.Trans.Reader.$fMonadReaderT @ (Control.Monad.Trans.State.Lazy.StateT
                                                 ExtMap.ExtMap GhcMonad.Ghc)
                                            @ r
                                            $dMonad
  = FlexibleInstancesChecker.$s$fMonadReaderT @ r
"SPEC/FlexibleInstancesChecker $fMonadReaderT_$c>> @ (StateT
                                                       ExtMap Ghc) _" [ALWAYS] forall @ r
                                                                                                                                                   ($dMonad :: GHC.Base.Monad
                                                                                                                                                                 (Control.Monad.Trans.State.Lazy.StateT
                                                                                                                                                                    ExtMap.ExtMap
                                                                                                                                                                    GhcMonad.Ghc))
  Control.Monad.Trans.Reader.$fMonadReaderT_$c>> @ (Control.Monad.Trans.State.Lazy.StateT
                                                      ExtMap.ExtMap GhcMonad.Ghc)
                                                 @ r
                                                 $dMonad
  = FlexibleInstancesChecker.$s$fMonadReaderT_$s$fMonadReaderT_$c>>
      @ r
"SPEC/FlexibleInstancesChecker $fMonadReaderT_$c>>= @ (StateT
                                                        ExtMap Ghc) _" [ALWAYS] forall @ r
                                                                                                                                                     ($dMonad :: GHC.Base.Monad
                                                                                                                                                                   (Control.Monad.Trans.State.Lazy.StateT
                                                                                                                                                                      ExtMap.ExtMap
                                                                                                                                                                      GhcMonad.Ghc))
  Control.Monad.Trans.Reader.$fMonadReaderT_$c>>= @ (Control.Monad.Trans.State.Lazy.StateT
                                                       ExtMap.ExtMap GhcMonad.Ghc)
                                                  @ r
                                                  $dMonad
  = FlexibleInstancesChecker.$s$fMonadReaderT_$s$fMonadReaderT_$c>>=
      @ r
"SPEC/FlexibleInstancesChecker $fMonadReaderT_$creturn @ (StateT
                                                           ExtMap Ghc) _" [ALWAYS] forall @ r
                                                                                                                                                           ($dMonad :: GHC.Base.Monad
                                                                                                                                                                         (Control.Monad.Trans.State.Lazy.StateT
                                                                                                                                                                            ExtMap.ExtMap
                                                                                                                                                                            GhcMonad.Ghc))
  Control.Monad.Trans.Reader.$fMonadReaderT_$creturn @ (Control.Monad.Trans.State.Lazy.StateT
                                                          ExtMap.ExtMap GhcMonad.Ghc)
                                                     @ r
                                                     $dMonad
  = FlexibleInstancesChecker.$s$fMonadReaderT_$s$fMonadReaderT_$creturn
      @ r
"SPEC/FlexibleInstancesChecker $fMonadStateT @ Ghc _" [ALWAYS] forall @ s
                                                                      ($dMonad :: GHC.Base.Monad
                                                                                    GhcMonad.Ghc)
  Control.Monad.Trans.State.Lazy.$fMonadStateT @ GhcMonad.Ghc
                                               @ s
                                               $dMonad
  = FlexibleInstancesChecker.$s$fMonadReaderT_$s$fMonadStateT @ s
"SPEC/FlexibleInstancesChecker $fMonadStateT_$c>> @ Ghc _" [ALWAYS] forall @ s
                                                                           ($dMonad :: GHC.Base.Monad
                                                                                         GhcMonad.Ghc)
  Control.Monad.Trans.State.Lazy.$fMonadStateT_$c>> @ GhcMonad.Ghc
                                                    @ s
                                                    $dMonad
  = FlexibleInstancesChecker.$s$fMonadReaderT_$s$fMonadStateT_$c>>
      @ s
"SPEC/FlexibleInstancesChecker $fMonadStateT_$c>>= @ Ghc _" [ALWAYS] forall @ s
                                                                            ($dMonad :: GHC.Base.Monad
                                                                                          GhcMonad.Ghc)
  Control.Monad.Trans.State.Lazy.$fMonadStateT_$c>>= @ GhcMonad.Ghc
                                                     @ s
                                                     $dMonad
  = FlexibleInstancesChecker.$s$fMonadReaderT_$s$fMonadStateT_$c>>=
      @ s
"SPEC/FlexibleInstancesChecker $fMonadStateT_$cfail @ Ghc _" [ALWAYS] forall @ s
                                                                             ($dMonad :: GHC.Base.Monad
                                                                                           GhcMonad.Ghc)
  Control.Monad.Trans.State.Lazy.$fMonadStateT_$cfail @ GhcMonad.Ghc
                                                      @ s
                                                      $dMonad
  = FlexibleInstancesChecker.$s$fMonadReaderT_$s$fMonadStateT_$cfail
      @ s
"SPEC/FlexibleInstancesChecker $fMonadStateT_$cp1Monad @ Ghc _" [ALWAYS] forall @ s
                                                                                ($dMonad :: GHC.Base.Monad
                                                                                              GhcMonad.Ghc)
  Control.Monad.Trans.State.Lazy.$fMonadStateT_$cp1Monad @ GhcMonad.Ghc
                                                         @ s
                                                         $dMonad
  = FlexibleInstancesChecker.$s$fMonadReaderT_$s$fMonadStateT_$cp1Monad
      @ s
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

