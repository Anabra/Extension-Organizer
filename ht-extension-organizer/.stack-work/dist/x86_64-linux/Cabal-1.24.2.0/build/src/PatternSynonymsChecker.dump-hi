
==================== FINAL INTERFACE ====================
2017-09-19 15:19:15.048362 UTC

interface ht-extension-organizer-0.1.0.0-y3uypH7gCtA60AaWeuyZL:PatternSynonymsChecker 8002
  interface hash: 72ef9928dcd6b5364560b1daf5dbc25c
  ABI hash: 4d00c81a2e1cb0839b4614ab76e37ee6
  export-list hash: cc58466d11f708e17113e46f0997b812
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: 91cd76246f60d900fce8e309e594df82
  sig of: Nothing
  used TH splices: False
  where
exports:
  PatternSynonymsChecker.chkPatternSynonyms
  PatternSynonymsChecker.chkPatternSynonyms'
module dependencies: ExtMap ExtMonad
package dependencies: array-0.5.1.1@array-0.5.1.1 base-4.9.1.0
                      binary-0.8.3.0@binary-0.8.3.0
                      bytestring-0.10.8.1@bytestring-0.10.8.1
                      containers-0.5.7.1@containers-0.5.7.1
                      deepseq-1.4.2.0@deepseq-1.4.2.0 directory-1.3.0.0@directory-1.3.0.0
                      either-4.4.1.1@either-4.4.1.1-6PiwKYkn4v6B4KO2R2Fu1b
                      filepath-1.4.1.1@filepath-1.4.1.1 ghc-8.0.2
                      ghc-boot-8.0.2@ghc-boot-8.0.2 ghc-boot-th-8.0.2@ghc-boot-th-8.0.2
                      ghc-paths-0.1.0.9@ghc-paths-0.1.0.9-AhaDlGOsRAepox069XzG
                      ghc-prim-0.5.0.0 ghci-8.0.2@ghci-8.0.2
                      hashable-1.2.6.1@hashable-1.2.6.1-2ZLNuHq395GGIHwEHuqZol
                      haskell-tools-ast-0.8.1.0@haskell-tools-ast-0.8.1.0-I9ZMaCkuuwT3FoQkwMjyW6
                      haskell-tools-backend-ghc-0.8.1.0@haskell-tools-backend-ghc-0.8.1.0-DqHnbK8OPi6CBD5cIPITWq
                      haskell-tools-prettyprint-0.8.1.0@haskell-tools-prettyprint-0.8.1.0-F9iWkGq5ppnLH6whHm0DlC
                      haskell-tools-refactor-0.8.1.0@haskell-tools-refactor-0.8.1.0-AF8Q4cA8mAnLNwu5t0Icw8
                      haskell-tools-rewrite-0.8.1.0@haskell-tools-rewrite-0.8.1.0-85A6q9dMQgvKEKG9I8fxVU
                      hoopl-3.10.2.1@hoopl-3.10.2.1 hpc-0.6.0.3@hpc-0.6.0.3
                      instance-control-0.1.1.1@instance-control-0.1.1.1-1defRS82vAAEmZKRhe67aa
                      integer-gmp-1.0.0.1 mtl-2.2.1@mtl-2.2.1-BLKBelFsPB3BoFeSWSOYj6
                      pretty-1.1.3.3@pretty-1.1.3.3 process-1.4.3.0@process-1.4.3.0
                      references-0.3.2.2@references-0.3.2.2-y362bKYomIKNQKMTfOWVo
                      safe-0.3.15@safe-0.3.15-2Yd45VWFfdcKqKyispOifY
                      split-0.2.3.2@split-0.2.3.2-CJl40zTyCIV16Pr60nb7CT
                      syb-0.7@syb-0.7-4OKdCpwGutyB1rNRmoa0ya template-haskell-2.11.1.0
                      text-1.2.2.2@text-1.2.2.2-9UQZjEJZQFSGMffj1Z5g00
                      time-1.6.0.1@time-1.6.0.1 transformers-0.5.2.0@transformers-0.5.2.0
                      uniplate-1.6.12@uniplate-1.6.12-4PyZX21trQJ5lfk0CDvC7U
                      unix-2.7.2.1@unix-2.7.2.1
                      unordered-containers-0.2.8.0@unordered-containers-0.2.8.0-Bp9XgxjuHxcI4tFehVMDGC
orphans: base-4.9.1.0:GHC.Base base-4.9.1.0:GHC.Float
         binary-0.8.3.0@binary-0.8.3.0:Data.Binary.Generic
         bytestring-0.10.8.1@bytestring-0.10.8.1:Data.ByteString.Builder
         ghc-8.0.2:BlockId ghc-8.0.2:DsMonad ghc-8.0.2:LoadIface
         ghc-8.0.2:PPC.Ppr ghc-8.0.2:PprCmm ghc-8.0.2:PprCmmDecl
         ghc-8.0.2:PprCmmExpr ghc-8.0.2:PprCore ghc-8.0.2:SPARC.Ppr
         ghc-8.0.2:TcEnv ghc-8.0.2:TcRnMonad ghc-8.0.2:X86.Ppr
         ghc-boot-8.0.2@ghc-boot-8.0.2:GHC.LanguageExtensions
         ghci-8.0.2@ghci-8.0.2:GHCi.Message
         ghci-8.0.2@ghci-8.0.2:GHCi.TH.Binary
         hashable-1.2.6.1@hashable-1.2.6.1-2ZLNuHq395GGIHwEHuqZol:Data.Hashable.Generic
         haskell-tools-ast-0.8.1.0@haskell-tools-ast-0.8.1.0-I9ZMaCkuuwT3FoQkwMjyW6:Language.Haskell.Tools.AST.Instances.Data
         haskell-tools-ast-0.8.1.0@haskell-tools-ast-0.8.1.0-I9ZMaCkuuwT3FoQkwMjyW6:Language.Haskell.Tools.AST.Instances.Eq
         haskell-tools-ast-0.8.1.0@haskell-tools-ast-0.8.1.0-I9ZMaCkuuwT3FoQkwMjyW6:Language.Haskell.Tools.AST.Instances.Generic
         haskell-tools-ast-0.8.1.0@haskell-tools-ast-0.8.1.0-I9ZMaCkuuwT3FoQkwMjyW6:Language.Haskell.Tools.AST.Instances.SemanticTraversal
         haskell-tools-ast-0.8.1.0@haskell-tools-ast-0.8.1.0-I9ZMaCkuuwT3FoQkwMjyW6:Language.Haskell.Tools.AST.Instances.Show
         haskell-tools-ast-0.8.1.0@haskell-tools-ast-0.8.1.0-I9ZMaCkuuwT3FoQkwMjyW6:Language.Haskell.Tools.AST.Instances.SourceInfoTraversal
         haskell-tools-ast-0.8.1.0@haskell-tools-ast-0.8.1.0-I9ZMaCkuuwT3FoQkwMjyW6:Language.Haskell.Tools.AST.SemaInfoTypes
         haskell-tools-ast-0.8.1.0@haskell-tools-ast-0.8.1.0-I9ZMaCkuuwT3FoQkwMjyW6:Language.Haskell.Tools.AST.Utils.GHCInstances
         haskell-tools-backend-ghc-0.8.1.0@haskell-tools-backend-ghc-0.8.1.0-DqHnbK8OPi6CBD5cIPITWq:Language.Haskell.Tools.AST.FromGHC.Utils
         haskell-tools-prettyprint-0.8.1.0@haskell-tools-prettyprint-0.8.1.0-F9iWkGq5ppnLH6whHm0DlC:Language.Haskell.Tools.Transform.RangeTemplate
         haskell-tools-prettyprint-0.8.1.0@haskell-tools-prettyprint-0.8.1.0-F9iWkGq5ppnLH6whHm0DlC:Language.Haskell.Tools.Transform.SourceTemplate
         haskell-tools-prettyprint-0.8.1.0@haskell-tools-prettyprint-0.8.1.0-F9iWkGq5ppnLH6whHm0DlC:Language.Haskell.Tools.Transform.SourceTemplateHelpers
         haskell-tools-refactor-0.8.1.0@haskell-tools-refactor-0.8.1.0-AF8Q4cA8mAnLNwu5t0Icw8:Language.Haskell.Tools.Refactor.RefactorBase
         ht-extension-organizer-0.1.0.0-y3uypH7gCtA60AaWeuyZL:ExtMonad
         references-0.3.2.2@references-0.3.2.2-y362bKYomIKNQKMTfOWVo:Control.Reference.Predefined.Containers.Tree
         references-0.3.2.2@references-0.3.2.2-y362bKYomIKNQKMTfOWVo:Control.Reference.TH.Records
         syb-0.7@syb-0.7-4OKdCpwGutyB1rNRmoa0ya:Data.Generics.Instances
         text-1.2.2.2@text-1.2.2.2-9UQZjEJZQFSGMffj1Z5g00:Data.Text
         text-1.2.2.2@text-1.2.2.2-9UQZjEJZQFSGMffj1Z5g00:Data.Text.Lazy
         text-1.2.2.2@text-1.2.2.2-9UQZjEJZQFSGMffj1Z5g00:Data.Text.Show
         time-1.6.0.1@time-1.6.0.1:Data.Time.Calendar.Gregorian
         time-1.6.0.1@time-1.6.0.1:Data.Time.Format.Parse
         time-1.6.0.1@time-1.6.0.1:Data.Time.LocalTime.LocalTime
         transformers-0.5.2.0@transformers-0.5.2.0:Control.Monad.Trans.Error
         uniplate-1.6.12@uniplate-1.6.12-4PyZX21trQJ5lfk0CDvC7U:Data.Generics.Uniplate.Data
family instance modules: base-4.9.1.0:Control.Applicative
                         base-4.9.1.0:Data.Complex base-4.9.1.0:Data.Either
                         base-4.9.1.0:Data.Functor.Compose base-4.9.1.0:Data.Functor.Const
                         base-4.9.1.0:Data.Functor.Identity
                         base-4.9.1.0:Data.Functor.Product base-4.9.1.0:Data.Functor.Sum
                         base-4.9.1.0:Data.List.NonEmpty base-4.9.1.0:Data.Monoid
                         base-4.9.1.0:Data.Semigroup base-4.9.1.0:Data.Type.Equality
                         base-4.9.1.0:Data.Version base-4.9.1.0:Data.Void
                         base-4.9.1.0:GHC.Exts base-4.9.1.0:GHC.Generics
                         base-4.9.1.0:GHC.IO.Exception base-4.9.1.0:GHC.TypeLits
                         containers-0.5.7.1@containers-0.5.7.1:Data.IntMap.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.IntSet.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.Map.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.Sequence
                         containers-0.5.7.1@containers-0.5.7.1:Data.Set.Base
                         ghc-8.0.2:PlaceHolder ghc-8.0.2:TrieMap
                         ghc-boot-th-8.0.2@ghc-boot-th-8.0.2:GHC.LanguageExtensions.Type
                         ghci-8.0.2@ghci-8.0.2:GHCi.FFI ghci-8.0.2@ghci-8.0.2:GHCi.Message
                         ghci-8.0.2@ghci-8.0.2:GHCi.ResolvedBCO
                         ghci-8.0.2@ghci-8.0.2:SizedSeq
                         haskell-tools-ast-0.8.1.0@haskell-tools-ast-0.8.1.0-I9ZMaCkuuwT3FoQkwMjyW6:Language.Haskell.Tools.AST.Ann
                         haskell-tools-ast-0.8.1.0@haskell-tools-ast-0.8.1.0-I9ZMaCkuuwT3FoQkwMjyW6:Language.Haskell.Tools.AST.Instances.Generic
                         haskell-tools-prettyprint-0.8.1.0@haskell-tools-prettyprint-0.8.1.0-F9iWkGq5ppnLH6whHm0DlC:Language.Haskell.Tools.Transform.RangeTemplate
                         haskell-tools-prettyprint-0.8.1.0@haskell-tools-prettyprint-0.8.1.0-F9iWkGq5ppnLH6whHm0DlC:Language.Haskell.Tools.Transform.SourceTemplate
                         hoopl-3.10.2.1@hoopl-3.10.2.1:Compiler.Hoopl.Block
                         hoopl-3.10.2.1@hoopl-3.10.2.1:Compiler.Hoopl.Dataflow
                         hoopl-3.10.2.1@hoopl-3.10.2.1:Compiler.Hoopl.Fuel
                         hoopl-3.10.2.1@hoopl-3.10.2.1:Compiler.Hoopl.Label
                         hoopl-3.10.2.1@hoopl-3.10.2.1:Compiler.Hoopl.Unique
                         pretty-1.1.3.3@pretty-1.1.3.3:Text.PrettyPrint.Annotated.HughesPJ
                         pretty-1.1.3.3@pretty-1.1.3.3:Text.PrettyPrint.HughesPJ
                         references-0.3.2.2@references-0.3.2.2-y362bKYomIKNQKMTfOWVo:Control.Reference.Predefined.Containers
                         references-0.3.2.2@references-0.3.2.2-y362bKYomIKNQKMTfOWVo:Control.Reference.Predefined.Containers.Tree
                         references-0.3.2.2@references-0.3.2.2-y362bKYomIKNQKMTfOWVo:Control.Reference.Types
                         template-haskell-2.11.1.0:Language.Haskell.TH.Syntax
                         text-1.2.2.2@text-1.2.2.2-9UQZjEJZQFSGMffj1Z5g00:Data.Text
                         text-1.2.2.2@text-1.2.2.2-9UQZjEJZQFSGMffj1Z5g00:Data.Text.Lazy
                         unordered-containers-0.2.8.0@unordered-containers-0.2.8.0-Bp9XgxjuHxcI4tFehVMDGC:Data.HashMap.Base
                         unordered-containers-0.2.8.0@unordered-containers-0.2.8.0-Bp9XgxjuHxcI4tFehVMDGC:Data.HashSet
import  -/  base-4.9.1.0:Prelude 22dd289b8469a8fa8dc81cab7b237771
import  -/  ghc-boot-th-8.0.2@ghc-boot-th-8.0.2:GHC.LanguageExtensions.Type 92441ea50916fa3940e20fae60f255d7
import  -/  haskell-tools-refactor-0.8.1.0@haskell-tools-refactor-0.8.1.0-AF8Q4cA8mAnLNwu5t0Icw8:Language.Haskell.Tools.Refactor 84acc8d60e278de91351468f26f90e1c
import  -/  haskell-tools-rewrite-0.8.1.0@haskell-tools-rewrite-0.8.1.0-85A6q9dMQgvKEKG9I8fxVU:Language.Haskell.Tools.AST.ElementTypes df954b524d036aee274d8ad0f571417a
import  -/  ExtMonad 059f5fd988c212e6bf2913400d89e5c4
  exports: e114cdeb7f705ff3639c044bf88c57d7
  CheckNode d2a8a000f373c241c0362787c4b3f842
  addOccurence c9603992ac2a28741343ebc5c8fe7b56
  conditional 170d45fd139eef252718316404a1e1aa
f83749f3290a8de1ffdea8955814a162
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   PatternSynonymsChecker.$trModule2
                   PatternSynonymsChecker.$trModule1) -}
552a4afb09a5eaf3f5b16afcb43c7311
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "PatternSynonymsChecker"#) -}
45930fbb4267046160b1b280b2af8baa
  $trModule2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   "ht-extension-organizer-0.1.0.0-y3uypH7gCtA60AaWeuyZL"#) -}
1343ebc6aefcf9b992b2448460a15b0d
  $wchkPatternSynonyms' ::
    ExtMonad.ExtDomain dom =>
    Language.Haskell.Tools.AST.ElementTypes.PatternSynonym dom
    -> ExtMap.ExtMap
    -> GhcMonad.Ghc
         (Language.Haskell.Tools.AST.ElementTypes.PatternSynonym dom,
          ExtMap.ExtMap)
  {- Arity: 3,
     Strictness: <S(S(LLS(S)LLLLLLLLLL)L),1*U(1*U(A,A,1*U(1*U),A,A,A,A,A,A,A,A,A,A),A)><L,U(U(U,U(U,U,U,U)),U)><L,1*U>,
     Inline: [0],
     Unfolding: (\ @ dom
                   (w :: ExtMonad.ExtDomain dom)
                   (w1 :: Language.Haskell.Tools.AST.ElementTypes.PatternSynonym dom)
                   (w2 :: ExtMap.ExtMap) ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Language.Haskell.Tools.AST.Ann.SemanticInfo'
                             dom Language.Haskell.Tools.AST.Ann.SameInfoDefaultCls)
                        @ Language.Haskell.Tools.AST.SemaInfoTypes.NoSemanticInfo
                        (Language.Haskell.Tools.AST.Ann.$p3Domain
                           @ dom
                           (GHC.Classes.$p1(%,%)
                              @ (Language.Haskell.Tools.AST.Ann.Domain dom)
                              @ (Language.Haskell.Tools.AST.SemaInfoClasses.HasNameInfo'
                                   (Language.Haskell.Tools.AST.Ann.SemanticInfo
                                      dom
                                      Language.Haskell.Tools.AST.Representation.Names.UQualifiedName))
                              w))
                          `cast`
                        (Data.Type.Equality.N:~[0]
                             <*>_N <Language.Haskell.Tools.AST.Ann.SemanticInfo'
                                      dom
                                      Language.Haskell.Tools.AST.Ann.SameInfoDefaultCls>_N <Language.Haskell.Tools.AST.SemaInfoTypes.NoSemanticInfo>_N) of cobox0 { DEFAULT ->
                 let {
                   a1 :: Data.Map.Base.Map
                           (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                           [SrcLoc.SrcSpan]
                   = Data.Map.Strict.insertWithKey
                       @ (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                       @ [SrcLoc.SrcSpan]
                       ExtMonad.$s$fOrdLogicalRelation
                       (ExtMonad.addOccurence_1
                          @ (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension))
                       PatternSynonymsChecker.chkPatternSynonyms_key
                       (GHC.Types.:
                          @ SrcLoc.SrcSpan
                          (case w1 of wild { Language.Haskell.Tools.AST.Ann.Ann a ds ->
                           case a of wild1 { Language.Haskell.Tools.AST.Ann.NodeInfo ds1 ds2 ->
                           case ds2
                                  `cast`
                                (Language.Haskell.Tools.Transform.SourceTemplate.D:R:SpanInfoSrcTemplateStage0[0]) of wild2 { Language.Haskell.Tools.Transform.SourceTemplate.SourceTemplateNode ds4 ds5 ds3 ds6 ->
                           ds4 } } })
                          (GHC.Types.[] @ SrcLoc.SrcSpan))
                       w2
                 } in
                 let {
                   lvl12 :: (Language.Haskell.Tools.AST.ElementTypes.PatternSynonym
                               dom,
                             Data.Map.Base.Map
                               (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                               [SrcLoc.SrcSpan])
                   = (w1, a1)
                 } in
                 (\ (s :: GhcMonad.Session)
                    (s1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                  (# s1, lvl12 #))
                   `cast`
                 (Trans
                      (<GhcMonad.Session>_R
                       ->_R Sym (GHC.Types.N:IO[0]
                                     <(Language.Haskell.Tools.AST.ElementTypes.PatternSynonym dom,
                                       Data.Map.Base.Map
                                         (ExtMap.LogicalRelation
                                            GHC.LanguageExtensions.Type.Extension)
                                         [SrcLoc.SrcSpan])>_R))
                      (Sym (GhcMonad.N:Ghc[0]
                                <(Language.Haskell.Tools.AST.ElementTypes.PatternSynonym dom,
                                  Data.Map.Base.Map
                                    (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                                    [SrcLoc.SrcSpan])>_R))) }) -}
5c6a04e5fe98212584351c5e521f1628
  chkPatternSynonyms ::
    ExtMonad.CheckNode
      Language.Haskell.Tools.AST.ElementTypes.PatternSynonym
  {- Arity: 3,
     Strictness: <S(S(LLS(S)LLLLLLLLLL)L),U(U(A,A,U(U),A,A,A,A,A,A,A,A,A,A),A)><L,U(U(U,U(U,U,U,U)),U)><L,U>,
     Unfolding: InlineRule (0, True, True)
                PatternSynonymsChecker.chkPatternSynonyms1
                  `cast`
                (forall (dom :: <*>_N).
                 <ExtMonad.ExtDomain dom>_R
                 ->_R <Language.Haskell.Tools.AST.ElementTypes.PatternSynonym dom>_R
                 ->_R Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                               <*>_N
                               <[GHC.LanguageExtensions.Type.Extension]>_R
                               <Control.Monad.Trans.State.Lazy.StateT
                                  ExtMap.ExtMap GhcMonad.Ghc>_R
                               <Language.Haskell.Tools.AST.ElementTypes.PatternSynonym dom>_N)) -}
418e9aea1892a7c5134bc8018e9a4794
  chkPatternSynonyms' ::
    ExtMonad.CheckNode
      Language.Haskell.Tools.AST.ElementTypes.PatternSynonym
  {- Arity: 4,
     Strictness: <S(S(LLS(S)LLLLLLLLLL)L),1*U(1*U(A,A,1*U(1*U),A,A,A,A,A,A,A,A,A,A),A)><L,U(U(U,U(U,U,U,U)),U)><L,A><L,1*U>,
     Unfolding: InlineRule (0, True, True)
                PatternSynonymsChecker.chkPatternSynonyms'1
                  `cast`
                (forall (dom :: <*>_N).
                 <ExtMonad.ExtDomain dom>_R
                 ->_R <Language.Haskell.Tools.AST.ElementTypes.PatternSynonym dom>_R
                 ->_R Trans
                          (<[GHC.LanguageExtensions.Type.Extension]>_R
                           ->_R Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                         <ExtMap.ExtMap>_N
                                         <GhcMonad.Ghc>_R
                                         <Language.Haskell.Tools.AST.ElementTypes.PatternSynonym
                                            dom>_N))
                          (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                    <*>_N
                                    <[GHC.LanguageExtensions.Type.Extension]>_R
                                    <Control.Monad.Trans.State.Lazy.StateT
                                       ExtMap.ExtMap GhcMonad.Ghc>_R
                                    <Language.Haskell.Tools.AST.ElementTypes.PatternSynonym
                                       dom>_N))) -}
5d891e1e906683aebd45b3ae32888daa
  chkPatternSynonyms'1 ::
    ExtMonad.ExtDomain dom =>
    Language.Haskell.Tools.AST.ElementTypes.PatternSynonym dom
    -> [GHC.LanguageExtensions.Type.Extension]
    -> ExtMap.ExtMap
    -> GhcMonad.Ghc
         (Language.Haskell.Tools.AST.ElementTypes.PatternSynonym dom,
          ExtMap.ExtMap)
  {- Arity: 4,
     Strictness: <S(S(LLS(S)LLLLLLLLLL)L),1*U(1*U(A,A,1*U(1*U),A,A,A,A,A,A,A,A,A,A),A)><L,U(U(U,U(U,U,U,U)),U)><L,A><L,1*U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (4, True, True)
                (\ @ dom
                   (w :: ExtMonad.ExtDomain dom)
                   (w1 :: Language.Haskell.Tools.AST.ElementTypes.PatternSynonym dom)
                   (w2 :: [GHC.LanguageExtensions.Type.Extension])
                   (w3 :: ExtMap.ExtMap) ->
                 PatternSynonymsChecker.$wchkPatternSynonyms' @ dom w w1 w3) -}
613dfaf3f0a1dc4cba3c6d2496ec1db5
  chkPatternSynonyms1 ::
    ExtMonad.ExtDomain dom =>
    Language.Haskell.Tools.AST.ElementTypes.PatternSynonym dom
    -> [GHC.LanguageExtensions.Type.Extension]
    -> Control.Monad.Trans.State.Lazy.StateT
         ExtMap.ExtMap
         GhcMonad.Ghc
         (Language.Haskell.Tools.AST.ElementTypes.PatternSynonym dom)
  {- Arity: 3,
     Strictness: <S(S(LLS(S)LLLLLLLLLL)L),U(U(A,A,U(U),A,A,A,A,A,A,A,A,A,A),A)><L,U(U(U,U(U,U,U,U)),U)><L,U>,
     Unfolding: (\ @ dom
                   ($d(%,%) :: ExtMonad.ExtDomain dom)
                   (eta :: Language.Haskell.Tools.AST.ElementTypes.PatternSynonym dom)
                   (eta1 :: [GHC.LanguageExtensions.Type.Extension]) ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Language.Haskell.Tools.AST.Ann.SemanticInfo'
                             dom Language.Haskell.Tools.AST.Ann.SameInfoDefaultCls)
                        @ Language.Haskell.Tools.AST.SemaInfoTypes.NoSemanticInfo
                        (Language.Haskell.Tools.AST.Ann.$p3Domain
                           @ dom
                           (GHC.Classes.$p1(%,%)
                              @ (Language.Haskell.Tools.AST.Ann.Domain dom)
                              @ (Language.Haskell.Tools.AST.SemaInfoClasses.HasNameInfo'
                                   (Language.Haskell.Tools.AST.Ann.SemanticInfo
                                      dom
                                      Language.Haskell.Tools.AST.Representation.Names.UQualifiedName))
                              $d(%,%)))
                          `cast`
                        (Data.Type.Equality.N:~[0]
                             <*>_N <Language.Haskell.Tools.AST.Ann.SemanticInfo'
                                      dom
                                      Language.Haskell.Tools.AST.Ann.SameInfoDefaultCls>_N <Language.Haskell.Tools.AST.SemaInfoTypes.NoSemanticInfo>_N) of cobox0 { DEFAULT ->
                 let {
                   eta2 :: SrcLoc.SrcSpan
                   = case eta of wild { Language.Haskell.Tools.AST.Ann.Ann a ds ->
                     case a of wild1 { Language.Haskell.Tools.AST.Ann.NodeInfo ds1 ds2 ->
                     case ds2
                            `cast`
                          (Language.Haskell.Tools.Transform.SourceTemplate.D:R:SpanInfoSrcTemplateStage0[0]) of wild2 { Language.Haskell.Tools.Transform.SourceTemplate.SourceTemplateNode ds4 ds5 ds3 ds6 ->
                     ds4 } } }
                 } in
                 let {
                   eta3 :: [SrcLoc.SrcSpan]
                   = GHC.Types.: @ SrcLoc.SrcSpan eta2 (GHC.Types.[] @ SrcLoc.SrcSpan)
                 } in
                 let {
                   lvl12 :: GHC.Types.Bool
                   = GHC.List.elem
                       @ GHC.LanguageExtensions.Type.Extension
                       GHC.LanguageExtensions.Type.$fEqExtension
                       GHC.LanguageExtensions.Type.PatternSynonyms
                       eta1
                 } in
                 (\ (eta4 :: Data.Map.Base.Map
                               (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                               [SrcLoc.SrcSpan])
                    (eta5 :: GhcMonad.Session)
                    (eta6 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                  case lvl12 of vx {
                    GHC.Types.False -> (# eta6, (eta, eta4) #)
                    GHC.Types.True
                    -> (# eta6,
                          (eta,
                           Data.Map.Strict.insertWithKey
                             @ (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                             @ [SrcLoc.SrcSpan]
                             ExtMonad.$s$fOrdLogicalRelation
                             (ExtMonad.addOccurence_1
                                @ (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension))
                             PatternSynonymsChecker.chkPatternSynonyms_key
                             eta3
                             eta4) #) })
                   `cast`
                 (Trans
                      (<Data.Map.Base.Map
                          (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                          [SrcLoc.SrcSpan]>_R
                       ->_R Trans
                                (<GhcMonad.Session>_R
                                 ->_R Sym (GHC.Types.N:IO[0]
                                               <(Language.Haskell.Tools.AST.ElementTypes.PatternSynonym
                                                   dom,
                                                 Data.Map.Base.Map
                                                   (ExtMap.LogicalRelation
                                                      GHC.LanguageExtensions.Type.Extension)
                                                   [SrcLoc.SrcSpan])>_R))
                                (Sym (GhcMonad.N:Ghc[0]
                                          <(Language.Haskell.Tools.AST.ElementTypes.PatternSynonym
                                              dom,
                                            Data.Map.Base.Map
                                              (ExtMap.LogicalRelation
                                                 GHC.LanguageExtensions.Type.Extension)
                                              [SrcLoc.SrcSpan])>_R)))
                      (Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                <Data.Map.Base.Map
                                   (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                                   [SrcLoc.SrcSpan]>_N
                                <GhcMonad.Ghc>_R
                                <Language.Haskell.Tools.AST.ElementTypes.PatternSynonym
                                   dom>_N))) }) -}
f85893eaa4d66cacecfa5b0bee908774
  chkPatternSynonyms_key ::
    ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension
  {- HasNoCafRefs,
     Unfolding: (ExtMap.LVar
                   @ GHC.LanguageExtensions.Type.Extension
                   GHC.LanguageExtensions.Type.PatternSynonyms) -}
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

