
==================== FINAL INTERFACE ====================
2017-09-20 19:16:08.690842 UTC

interface ht-extension-organizer-0.1.0.0-y3uypH7gCtA60AaWeuyZL:ExtMonad [orphan module] 8002
  interface hash: 2e09e0da3ee2617e18ee1fc0788e0e8f
  ABI hash: af7b60a65d818af19a46d996e27297ca
  export-list hash: 7f69547596e05261c6f5806398624025
  orphan hash: 60a64deffb6d970f503832a968fa85f4
  flag hash: 05b17016aa09336e3f4e69856bdb1734
  sig of: Nothing
  used TH splices: True
  where
exports:
  Control.Monad.<$!>
  Control.Monad.<=<
  Control.Monad.>=>
  Control.Monad.filterM
  Control.Monad.foldM
  Control.Monad.foldM_
  Control.Monad.forever
  Control.Monad.guard
  Control.Monad.mapAndUnzipM
  Control.Monad.mfilter
  Control.Monad.replicateM
  Control.Monad.replicateM_
  Control.Monad.unless
  Control.Monad.zipWithM
  Control.Monad.zipWithM_
  Data.Foldable.forM_
  Data.Foldable.mapM_
  Data.Foldable.msum
  Data.Foldable.sequence_
  Data.Function.fix
  Data.Functor.void
  Data.Traversable.forM
  GHC.Base.=<<
  GHC.Base.ap
  GHC.Base.join
  GHC.Base.liftM
  GHC.Base.liftM2
  GHC.Base.liftM3
  GHC.Base.liftM4
  GHC.Base.liftM5
  GHC.Base.when
  ExtMonad.addOccurence
  ExtMonad.addOccurence'
  ExtMonad.addOccurence_
  ExtMonad.conditional
  ExtMonad.conditionalAny
  ExtMonad.isTurnedOn
  ExtMonad.runExtMonadGHC
  ExtMonad.runExtMonadIO
  Control.Monad.Reader.Class.asks
  Control.Monad.State.Class.gets
  Control.Monad.State.Class.modify
  Control.Monad.State.Class.modify'
  Control.Monad.Trans.Reader.mapReader
  Control.Monad.Trans.Reader.mapReaderT
  Control.Monad.Trans.Reader.runReader
  Control.Monad.Trans.Reader.withReader
  Control.Monad.Trans.Reader.withReaderT
  Control.Monad.Trans.State.Lazy.evalState
  Control.Monad.Trans.State.Lazy.evalStateT
  Control.Monad.Trans.State.Lazy.execState
  Control.Monad.Trans.State.Lazy.execStateT
  Control.Monad.Trans.State.Lazy.mapState
  Control.Monad.Trans.State.Lazy.mapStateT
  Control.Monad.Trans.State.Lazy.runState
  Control.Monad.Trans.State.Lazy.withState
  Control.Monad.Trans.State.Lazy.withStateT
  Control.Monad.Fix.MonadFix{Control.Monad.Fix.mfix}
  Control.Monad.IO.Class.MonadIO{Control.Monad.IO.Class.liftIO}
  Data.Traversable.Traversable|{Data.Traversable.mapM Data.Traversable.sequence}
  GHC.Base.Functor{GHC.Base.fmap}
  GHC.Base.Monad{GHC.Base.>> GHC.Base.>>= GHC.Base.fail GHC.Base.return}
  GHC.Base.MonadPlus{GHC.Base.mplus GHC.Base.mzero}
  GHC.LanguageExtensions.Type.Extension{GHC.LanguageExtensions.Type.AllowAmbiguousTypes GHC.LanguageExtensions.Type.AlternativeLayoutRule GHC.LanguageExtensions.Type.AlternativeLayoutRuleTransitional GHC.LanguageExtensions.Type.ApplicativeDo GHC.LanguageExtensions.Type.Arrows GHC.LanguageExtensions.Type.AutoDeriveTypeable GHC.LanguageExtensions.Type.BangPatterns GHC.LanguageExtensions.Type.BinaryLiterals GHC.LanguageExtensions.Type.CApiFFI GHC.LanguageExtensions.Type.ConstrainedClassMethods GHC.LanguageExtensions.Type.ConstraintKinds GHC.LanguageExtensions.Type.Cpp GHC.LanguageExtensions.Type.DataKinds GHC.LanguageExtensions.Type.DatatypeContexts GHC.LanguageExtensions.Type.DefaultSignatures GHC.LanguageExtensions.Type.DeriveAnyClass GHC.LanguageExtensions.Type.DeriveDataTypeable GHC.LanguageExtensions.Type.DeriveFoldable GHC.LanguageExtensions.Type.DeriveFunctor GHC.LanguageExtensions.Type.DeriveGeneric GHC.LanguageExtensions.Type.DeriveLift GHC.LanguageExtensions.Type.DeriveTraversable GHC.LanguageExtensions.Type.DisambiguateRecordFields GHC.LanguageExtensions.Type.DoAndIfThenElse GHC.LanguageExtensions.Type.DuplicateRecordFields GHC.LanguageExtensions.Type.EmptyCase GHC.LanguageExtensions.Type.EmptyDataDecls GHC.LanguageExtensions.Type.ExistentialQuantification GHC.LanguageExtensions.Type.ExplicitForAll GHC.LanguageExtensions.Type.ExplicitNamespaces GHC.LanguageExtensions.Type.ExtendedDefaultRules GHC.LanguageExtensions.Type.FlexibleContexts GHC.LanguageExtensions.Type.FlexibleInstances GHC.LanguageExtensions.Type.ForeignFunctionInterface GHC.LanguageExtensions.Type.FunctionalDependencies GHC.LanguageExtensions.Type.GADTSyntax GHC.LanguageExtensions.Type.GADTs GHC.LanguageExtensions.Type.GHCForeignImportPrim GHC.LanguageExtensions.Type.GeneralizedNewtypeDeriving GHC.LanguageExtensions.Type.ImplicitParams GHC.LanguageExtensions.Type.ImplicitPrelude GHC.LanguageExtensions.Type.ImpredicativeTypes GHC.LanguageExtensions.Type.IncoherentInstances GHC.LanguageExtensions.Type.InstanceSigs GHC.LanguageExtensions.Type.InterruptibleFFI GHC.LanguageExtensions.Type.JavaScriptFFI GHC.LanguageExtensions.Type.KindSignatures GHC.LanguageExtensions.Type.LambdaCase GHC.LanguageExtensions.Type.LiberalTypeSynonyms GHC.LanguageExtensions.Type.MagicHash GHC.LanguageExtensions.Type.MonadComprehensions GHC.LanguageExtensions.Type.MonadFailDesugaring GHC.LanguageExtensions.Type.MonoLocalBinds GHC.LanguageExtensions.Type.MonoPatBinds GHC.LanguageExtensions.Type.MonomorphismRestriction GHC.LanguageExtensions.Type.MultiParamTypeClasses GHC.LanguageExtensions.Type.MultiWayIf GHC.LanguageExtensions.Type.NPlusKPatterns GHC.LanguageExtensions.Type.NamedWildCards GHC.LanguageExtensions.Type.NegativeLiterals GHC.LanguageExtensions.Type.NondecreasingIndentation GHC.LanguageExtensions.Type.NullaryTypeClasses GHC.LanguageExtensions.Type.NumDecimals GHC.LanguageExtensions.Type.OverlappingInstances GHC.LanguageExtensions.Type.OverloadedLabels GHC.LanguageExtensions.Type.OverloadedLists GHC.LanguageExtensions.Type.OverloadedStrings GHC.LanguageExtensions.Type.PackageImports GHC.LanguageExtensions.Type.ParallelArrays GHC.LanguageExtensions.Type.ParallelListComp GHC.LanguageExtensions.Type.PartialTypeSignatures GHC.LanguageExtensions.Type.PatternGuards GHC.LanguageExtensions.Type.PatternSynonyms GHC.LanguageExtensions.Type.PolyKinds GHC.LanguageExtensions.Type.PostfixOperators GHC.LanguageExtensions.Type.QuasiQuotes GHC.LanguageExtensions.Type.RankNTypes GHC.LanguageExtensions.Type.RebindableSyntax GHC.LanguageExtensions.Type.RecordPuns GHC.LanguageExtensions.Type.RecordWildCards GHC.LanguageExtensions.Type.RecursiveDo GHC.LanguageExtensions.Type.RelaxedLayout GHC.LanguageExtensions.Type.RelaxedPolyRec GHC.LanguageExtensions.Type.RoleAnnotations GHC.LanguageExtensions.Type.ScopedTypeVariables GHC.LanguageExtensions.Type.StandaloneDeriving GHC.LanguageExtensions.Type.StaticPointers GHC.LanguageExtensions.Type.Strict GHC.LanguageExtensions.Type.StrictData GHC.LanguageExtensions.Type.TemplateHaskell GHC.LanguageExtensions.Type.TemplateHaskellQuotes GHC.LanguageExtensions.Type.TraditionalRecordSyntax GHC.LanguageExtensions.Type.TransformListComp GHC.LanguageExtensions.Type.TupleSections GHC.LanguageExtensions.Type.TypeApplications GHC.LanguageExtensions.Type.TypeFamilies GHC.LanguageExtensions.Type.TypeFamilyDependencies GHC.LanguageExtensions.Type.TypeInType GHC.LanguageExtensions.Type.TypeOperators GHC.LanguageExtensions.Type.TypeSynonymInstances GHC.LanguageExtensions.Type.UnboxedTuples GHC.LanguageExtensions.Type.UndecidableInstances GHC.LanguageExtensions.Type.UndecidableSuperClasses GHC.LanguageExtensions.Type.UnicodeSyntax GHC.LanguageExtensions.Type.UnliftedFFITypes GHC.LanguageExtensions.Type.ViewPatterns}
  ExtMap.ExtMap
  ExtMap.LogicalRelation{ExtMap.:&&: ExtMap.:||: ExtMap.LVar ExtMap.Not}
  ExtMonad.CheckNode
  ExtMonad.CheckUNode
  ExtMonad.ExtDomain
  ExtMonad.ExtMonad
  Control.Monad.Reader.Class.MonadReader{Control.Monad.Reader.Class.ask Control.Monad.Reader.Class.local Control.Monad.Reader.Class.reader}
  Control.Monad.State.Class.MonadState{Control.Monad.State.Class.get Control.Monad.State.Class.put Control.Monad.State.Class.state}
  Control.Monad.Trans.Class.MonadTrans{Control.Monad.Trans.Class.lift}
  Control.Monad.Trans.Reader.Reader
  Control.Monad.Trans.Reader.ReaderT{Control.Monad.Trans.Reader.ReaderT runReaderT}
  Control.Monad.Trans.State.Lazy.State
  Control.Monad.Trans.State.Lazy.StateT{Control.Monad.Trans.State.Lazy.StateT runStateT}
module dependencies: ExtMap
package dependencies: array-0.5.1.1@array-0.5.1.1 base-4.9.1.0
                      binary-0.8.3.0@binary-0.8.3.0
                      bytestring-0.10.8.1@bytestring-0.10.8.1
                      containers-0.5.7.1@containers-0.5.7.1
                      deepseq-1.4.2.0@deepseq-1.4.2.0 directory-1.3.0.0@directory-1.3.0.0
                      either-4.4.1.1@either-4.4.1.1-6PiwKYkn4v6B4KO2R2Fu1b
                      filepath-1.4.1.1@filepath-1.4.1.1 ghc-8.0.2
                      ghc-boot-8.0.2@ghc-boot-8.0.2 ghc-boot-th-8.0.2@ghc-boot-th-8.0.2
                      ghc-paths-0.1.0.9@ghc-paths-0.1.0.9-AhaDlGOsRAepox069XzG
                      ghc-prim-0.5.0.0 ghci-8.0.2@ghci-8.0.2
                      hashable-1.2.6.1@hashable-1.2.6.1-2ZLNuHq395GGIHwEHuqZol
                      haskell-tools-ast-0.8.1.0@haskell-tools-ast-0.8.1.0-I9ZMaCkuuwT3FoQkwMjyW6
                      haskell-tools-backend-ghc-0.8.1.0@haskell-tools-backend-ghc-0.8.1.0-DqHnbK8OPi6CBD5cIPITWq
                      haskell-tools-prettyprint-0.8.1.0@haskell-tools-prettyprint-0.8.1.0-F9iWkGq5ppnLH6whHm0DlC
                      haskell-tools-refactor-0.8.1.0@haskell-tools-refactor-0.8.1.0-AF8Q4cA8mAnLNwu5t0Icw8
                      haskell-tools-rewrite-0.8.1.0@haskell-tools-rewrite-0.8.1.0-85A6q9dMQgvKEKG9I8fxVU
                      hoopl-3.10.2.1@hoopl-3.10.2.1 hpc-0.6.0.3@hpc-0.6.0.3
                      instance-control-0.1.1.1@instance-control-0.1.1.1-1defRS82vAAEmZKRhe67aa
                      integer-gmp-1.0.0.1 mtl-2.2.1@mtl-2.2.1-BLKBelFsPB3BoFeSWSOYj6
                      pretty-1.1.3.3@pretty-1.1.3.3 process-1.4.3.0@process-1.4.3.0
                      references-0.3.2.2@references-0.3.2.2-y362bKYomIKNQKMTfOWVo
                      safe-0.3.15@safe-0.3.15-2Yd45VWFfdcKqKyispOifY
                      split-0.2.3.2@split-0.2.3.2-CJl40zTyCIV16Pr60nb7CT
                      syb-0.7@syb-0.7-4OKdCpwGutyB1rNRmoa0ya template-haskell-2.11.1.0
                      text-1.2.2.2@text-1.2.2.2-9UQZjEJZQFSGMffj1Z5g00
                      time-1.6.0.1@time-1.6.0.1 transformers-0.5.2.0@transformers-0.5.2.0
                      uniplate-1.6.12@uniplate-1.6.12-4PyZX21trQJ5lfk0CDvC7U
                      unix-2.7.2.1@unix-2.7.2.1
                      unordered-containers-0.2.8.0@unordered-containers-0.2.8.0-Bp9XgxjuHxcI4tFehVMDGC
orphans: base-4.9.1.0:GHC.Base base-4.9.1.0:GHC.Float
         binary-0.8.3.0@binary-0.8.3.0:Data.Binary.Generic
         bytestring-0.10.8.1@bytestring-0.10.8.1:Data.ByteString.Builder
         ghc-8.0.2:BlockId ghc-8.0.2:DsMonad ghc-8.0.2:LoadIface
         ghc-8.0.2:PPC.Ppr ghc-8.0.2:PprCmm ghc-8.0.2:PprCmmDecl
         ghc-8.0.2:PprCmmExpr ghc-8.0.2:PprCore ghc-8.0.2:SPARC.Ppr
         ghc-8.0.2:TcEnv ghc-8.0.2:TcRnMonad ghc-8.0.2:X86.Ppr
         ghc-boot-8.0.2@ghc-boot-8.0.2:GHC.LanguageExtensions
         ghci-8.0.2@ghci-8.0.2:GHCi.Message
         ghci-8.0.2@ghci-8.0.2:GHCi.TH.Binary
         hashable-1.2.6.1@hashable-1.2.6.1-2ZLNuHq395GGIHwEHuqZol:Data.Hashable.Generic
         haskell-tools-ast-0.8.1.0@haskell-tools-ast-0.8.1.0-I9ZMaCkuuwT3FoQkwMjyW6:Language.Haskell.Tools.AST.Instances.Data
         haskell-tools-ast-0.8.1.0@haskell-tools-ast-0.8.1.0-I9ZMaCkuuwT3FoQkwMjyW6:Language.Haskell.Tools.AST.Instances.Eq
         haskell-tools-ast-0.8.1.0@haskell-tools-ast-0.8.1.0-I9ZMaCkuuwT3FoQkwMjyW6:Language.Haskell.Tools.AST.Instances.Generic
         haskell-tools-ast-0.8.1.0@haskell-tools-ast-0.8.1.0-I9ZMaCkuuwT3FoQkwMjyW6:Language.Haskell.Tools.AST.Instances.SemanticTraversal
         haskell-tools-ast-0.8.1.0@haskell-tools-ast-0.8.1.0-I9ZMaCkuuwT3FoQkwMjyW6:Language.Haskell.Tools.AST.Instances.Show
         haskell-tools-ast-0.8.1.0@haskell-tools-ast-0.8.1.0-I9ZMaCkuuwT3FoQkwMjyW6:Language.Haskell.Tools.AST.Instances.SourceInfoTraversal
         haskell-tools-ast-0.8.1.0@haskell-tools-ast-0.8.1.0-I9ZMaCkuuwT3FoQkwMjyW6:Language.Haskell.Tools.AST.SemaInfoTypes
         haskell-tools-ast-0.8.1.0@haskell-tools-ast-0.8.1.0-I9ZMaCkuuwT3FoQkwMjyW6:Language.Haskell.Tools.AST.Utils.GHCInstances
         haskell-tools-backend-ghc-0.8.1.0@haskell-tools-backend-ghc-0.8.1.0-DqHnbK8OPi6CBD5cIPITWq:Language.Haskell.Tools.AST.FromGHC.Utils
         haskell-tools-prettyprint-0.8.1.0@haskell-tools-prettyprint-0.8.1.0-F9iWkGq5ppnLH6whHm0DlC:Language.Haskell.Tools.Transform.RangeTemplate
         haskell-tools-prettyprint-0.8.1.0@haskell-tools-prettyprint-0.8.1.0-F9iWkGq5ppnLH6whHm0DlC:Language.Haskell.Tools.Transform.SourceTemplate
         haskell-tools-prettyprint-0.8.1.0@haskell-tools-prettyprint-0.8.1.0-F9iWkGq5ppnLH6whHm0DlC:Language.Haskell.Tools.Transform.SourceTemplateHelpers
         haskell-tools-refactor-0.8.1.0@haskell-tools-refactor-0.8.1.0-AF8Q4cA8mAnLNwu5t0Icw8:Language.Haskell.Tools.Refactor.RefactorBase
         references-0.3.2.2@references-0.3.2.2-y362bKYomIKNQKMTfOWVo:Control.Reference.Predefined.Containers.Tree
         references-0.3.2.2@references-0.3.2.2-y362bKYomIKNQKMTfOWVo:Control.Reference.TH.Records
         syb-0.7@syb-0.7-4OKdCpwGutyB1rNRmoa0ya:Data.Generics.Instances
         text-1.2.2.2@text-1.2.2.2-9UQZjEJZQFSGMffj1Z5g00:Data.Text
         text-1.2.2.2@text-1.2.2.2-9UQZjEJZQFSGMffj1Z5g00:Data.Text.Lazy
         text-1.2.2.2@text-1.2.2.2-9UQZjEJZQFSGMffj1Z5g00:Data.Text.Show
         time-1.6.0.1@time-1.6.0.1:Data.Time.Calendar.Gregorian
         time-1.6.0.1@time-1.6.0.1:Data.Time.Format.Parse
         time-1.6.0.1@time-1.6.0.1:Data.Time.LocalTime.LocalTime
         transformers-0.5.2.0@transformers-0.5.2.0:Control.Monad.Trans.Error
         uniplate-1.6.12@uniplate-1.6.12-4PyZX21trQJ5lfk0CDvC7U:Data.Generics.Uniplate.Data
family instance modules: base-4.9.1.0:Control.Applicative
                         base-4.9.1.0:Data.Complex base-4.9.1.0:Data.Either
                         base-4.9.1.0:Data.Functor.Compose base-4.9.1.0:Data.Functor.Const
                         base-4.9.1.0:Data.Functor.Identity
                         base-4.9.1.0:Data.Functor.Product base-4.9.1.0:Data.Functor.Sum
                         base-4.9.1.0:Data.List.NonEmpty base-4.9.1.0:Data.Monoid
                         base-4.9.1.0:Data.Semigroup base-4.9.1.0:Data.Type.Equality
                         base-4.9.1.0:Data.Version base-4.9.1.0:Data.Void
                         base-4.9.1.0:GHC.Exts base-4.9.1.0:GHC.Generics
                         base-4.9.1.0:GHC.IO.Exception base-4.9.1.0:GHC.TypeLits
                         containers-0.5.7.1@containers-0.5.7.1:Data.IntMap.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.IntSet.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.Map.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.Sequence
                         containers-0.5.7.1@containers-0.5.7.1:Data.Set.Base
                         ghc-8.0.2:PlaceHolder ghc-8.0.2:TrieMap
                         ghc-boot-th-8.0.2@ghc-boot-th-8.0.2:GHC.LanguageExtensions.Type
                         ghci-8.0.2@ghci-8.0.2:GHCi.FFI ghci-8.0.2@ghci-8.0.2:GHCi.Message
                         ghci-8.0.2@ghci-8.0.2:GHCi.ResolvedBCO
                         ghci-8.0.2@ghci-8.0.2:SizedSeq
                         haskell-tools-ast-0.8.1.0@haskell-tools-ast-0.8.1.0-I9ZMaCkuuwT3FoQkwMjyW6:Language.Haskell.Tools.AST.Ann
                         haskell-tools-ast-0.8.1.0@haskell-tools-ast-0.8.1.0-I9ZMaCkuuwT3FoQkwMjyW6:Language.Haskell.Tools.AST.Instances.Generic
                         haskell-tools-prettyprint-0.8.1.0@haskell-tools-prettyprint-0.8.1.0-F9iWkGq5ppnLH6whHm0DlC:Language.Haskell.Tools.Transform.RangeTemplate
                         haskell-tools-prettyprint-0.8.1.0@haskell-tools-prettyprint-0.8.1.0-F9iWkGq5ppnLH6whHm0DlC:Language.Haskell.Tools.Transform.SourceTemplate
                         hoopl-3.10.2.1@hoopl-3.10.2.1:Compiler.Hoopl.Block
                         hoopl-3.10.2.1@hoopl-3.10.2.1:Compiler.Hoopl.Dataflow
                         hoopl-3.10.2.1@hoopl-3.10.2.1:Compiler.Hoopl.Fuel
                         hoopl-3.10.2.1@hoopl-3.10.2.1:Compiler.Hoopl.Label
                         hoopl-3.10.2.1@hoopl-3.10.2.1:Compiler.Hoopl.Unique
                         pretty-1.1.3.3@pretty-1.1.3.3:Text.PrettyPrint.Annotated.HughesPJ
                         pretty-1.1.3.3@pretty-1.1.3.3:Text.PrettyPrint.HughesPJ
                         references-0.3.2.2@references-0.3.2.2-y362bKYomIKNQKMTfOWVo:Control.Reference.Predefined.Containers
                         references-0.3.2.2@references-0.3.2.2-y362bKYomIKNQKMTfOWVo:Control.Reference.Predefined.Containers.Tree
                         references-0.3.2.2@references-0.3.2.2-y362bKYomIKNQKMTfOWVo:Control.Reference.Types
                         template-haskell-2.11.1.0:Language.Haskell.TH.Syntax
                         text-1.2.2.2@text-1.2.2.2-9UQZjEJZQFSGMffj1Z5g00:Data.Text
                         text-1.2.2.2@text-1.2.2.2-9UQZjEJZQFSGMffj1Z5g00:Data.Text.Lazy
                         unordered-containers-0.2.8.0@unordered-containers-0.2.8.0-Bp9XgxjuHxcI4tFehVMDGC:Data.HashMap.Base
                         unordered-containers-0.2.8.0@unordered-containers-0.2.8.0-Bp9XgxjuHxcI4tFehVMDGC:Data.HashSet
import  -/  base-4.9.1.0:Data.Foldable 3e0b6967a1da89945d0e2d47266337a2
import  -/  base-4.9.1.0:Data.Functor 5ab1dc703df5b482e77efb697833ca3c
import  -/  base-4.9.1.0:Data.Traversable 556020d7cf3c4a34a774600512918a37
import  -/  base-4.9.1.0:Data.Tuple 7dc4bbb45d2e69c991ffac438beeca11
import  -/  base-4.9.1.0:Debug.Trace a9edf3aec504f4423d8ba829ab373a25
import  -/  base-4.9.1.0:GHC.Base c4231c43c07e46080a26bf94094c7aa1
import  -/  base-4.9.1.0:GHC.Read b6821365d2d5fa2155c9e910160e7f57
import  -/  base-4.9.1.0:Prelude 22dd289b8469a8fa8dc81cab7b237771
import  -/  containers-0.5.7.1@containers-0.5.7.1:Data.Map.Base d432f6875983131473086af8cb290590
import  -/  containers-0.5.7.1@containers-0.5.7.1:Data.Map.Strict 9d0c0962e53270a0a3fb5cb63723a381
import  -/  containers-0.5.7.1@containers-0.5.7.1:Data.Set 3ed2324fd1e757464a8ac2b636a64e5a
import  -/  ghc-8.0.2:GHC 2331686350095b94008a49ce7901eaa2
import  -/  ghc-8.0.2:GhcMonad fe90acc3f77ca6bdb0686328a3d31d0f
import  -/  ghc-8.0.2:SrcLoc ae8e460a2b77026f9c6a4d6cdcc5d57e
import  -/  ghc-boot-th-8.0.2@ghc-boot-th-8.0.2:GHC.LanguageExtensions.Type 92441ea50916fa3940e20fae60f255d7
import  -/  ghc-paths-0.1.0.9@ghc-paths-0.1.0.9-AhaDlGOsRAepox069XzG:GHC.Paths ac6199ac2bb4710a40d06f6d09a37983
import  -/  ghc-prim-0.5.0.0:GHC.Classes 0bdf3d057a415ec1b84a7b1994efbe47
import  -/  ghc-prim-0.5.0.0:GHC.Types 89f8de4f08018c9177c98d979eae0e45
import  -/  haskell-tools-ast-0.8.1.0@haskell-tools-ast-0.8.1.0-I9ZMaCkuuwT3FoQkwMjyW6:Language.Haskell.Tools.AST.Ann 07e8f66a2b6d7f18951fb774264c8644
import  -/  haskell-tools-ast-0.8.1.0@haskell-tools-ast-0.8.1.0-I9ZMaCkuuwT3FoQkwMjyW6:Language.Haskell.Tools.AST.SemaInfoClasses c2ef5a6a7a968ca08e3bc3c3b14a4a2f
import  -/  haskell-tools-refactor-0.8.1.0@haskell-tools-refactor-0.8.1.0-AF8Q4cA8mAnLNwu5t0Icw8:Language.Haskell.Tools.Refactor 84acc8d60e278de91351468f26f90e1c
import  -/  ExtMap ce208fa2f233772cc4b03c60efef446e
  exports: 386834db6d638da70834f5e21bd3eb3b
  :&&: 4a12e4fbb68353aea1ce40a572e2a5f4
  :||: b024d415aaaed601318f0e8fa0ffaa04
  ExtMap 86d8b8e09d7cd6f6e3831751b6397a46
  LVar c2b251913343abac99e887c1b70f0c95
  LogicalRelation 244102f8a6d7434a090b758121b05523
  Not a790822a2ae7d0c293b41158b7bc0e52
import  -/  mtl-2.2.1@mtl-2.2.1-BLKBelFsPB3BoFeSWSOYj6:Control.Monad.Reader 0a25f5000d6974b16ed96a739eacaeb6
import  -/  mtl-2.2.1@mtl-2.2.1-BLKBelFsPB3BoFeSWSOYj6:Control.Monad.Reader.Class 9573b8d2ba4bcf8261d19527e0170c4d
import  -/  mtl-2.2.1@mtl-2.2.1-BLKBelFsPB3BoFeSWSOYj6:Control.Monad.State 749dca8ca0e6625b32091d445bd92b01
import  -/  mtl-2.2.1@mtl-2.2.1-BLKBelFsPB3BoFeSWSOYj6:Control.Monad.State.Class 6d31234b0a911b56412061943d18b89e
import  -/  transformers-0.5.2.0@transformers-0.5.2.0:Control.Monad.Trans.Reader 1b607a084a390ae0e50e8f8dcbf2541a
import  -/  transformers-0.5.2.0@transformers-0.5.2.0:Control.Monad.Trans.State.Lazy 371607e50dde46b5f4103b3ab334a497
Module target ht-extension-organizer-0.1.0.0-y3uypH7gCtA60AaWeuyZL:ExtMonad annotated by 1689 of type [Char]
Module target ht-extension-organizer-0.1.0.0-y3uypH7gCtA60AaWeuyZL:ExtMonad annotated by 1059 of type [Char]
c148c4a58d421ac7822251b1daa081e6
  $fOrdExtension ::
    GHC.Classes.Ord GHC.LanguageExtensions.Type.Extension
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GHC.LanguageExtensions.Type.Extension
                  GHC.LanguageExtensions.Type.$fEqExtension
                  ExtMonad.$fOrdExtension_$ccompare
                  ExtMonad.$fOrdExtension_$c<
                  ExtMonad.$fOrdExtension_$c<=
                  ExtMonad.$fOrdExtension_$c>
                  ExtMonad.$fOrdExtension_$c>=
                  ExtMonad.$fOrdExtension_$cmax
                  ExtMonad.$fOrdExtension_$cmin -}
3d93182058595e8f8c86021598cfcf6e
  $fOrdExtension_$c< ::
    GHC.LanguageExtensions.Type.Extension
    -> GHC.LanguageExtensions.Type.Extension -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (a :: GHC.LanguageExtensions.Type.Extension)
                   (b :: GHC.LanguageExtensions.Type.Extension) ->
                 case a of x1 { DEFAULT ->
                 case b of x2 { DEFAULT ->
                 GHC.Prim.tagToEnum#
                   @ GHC.Types.Bool
                   (GHC.Prim.<#
                      (GHC.Prim.dataToTag# @ GHC.LanguageExtensions.Type.Extension x1)
                      (GHC.Prim.dataToTag#
                         @ GHC.LanguageExtensions.Type.Extension
                         x2)) } }) -}
88d8a3b4fd1d32c36a11c5e4def60b32
  $fOrdExtension_$c<= ::
    GHC.LanguageExtensions.Type.Extension
    -> GHC.LanguageExtensions.Type.Extension -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (a :: GHC.LanguageExtensions.Type.Extension)
                   (b :: GHC.LanguageExtensions.Type.Extension) ->
                 case a of x1 { DEFAULT ->
                 case b of x2 { DEFAULT ->
                 GHC.Prim.tagToEnum#
                   @ GHC.Types.Bool
                   (GHC.Prim.<=#
                      (GHC.Prim.dataToTag# @ GHC.LanguageExtensions.Type.Extension x1)
                      (GHC.Prim.dataToTag#
                         @ GHC.LanguageExtensions.Type.Extension
                         x2)) } }) -}
2f428df9a95c8dd76d0b7b6558493f58
  $fOrdExtension_$c> ::
    GHC.LanguageExtensions.Type.Extension
    -> GHC.LanguageExtensions.Type.Extension -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (a :: GHC.LanguageExtensions.Type.Extension)
                   (b :: GHC.LanguageExtensions.Type.Extension) ->
                 case a of x1 { DEFAULT ->
                 case b of x2 { DEFAULT ->
                 GHC.Prim.tagToEnum#
                   @ GHC.Types.Bool
                   (GHC.Prim.>#
                      (GHC.Prim.dataToTag# @ GHC.LanguageExtensions.Type.Extension x1)
                      (GHC.Prim.dataToTag#
                         @ GHC.LanguageExtensions.Type.Extension
                         x2)) } }) -}
011ee64bf6ae077ec6edac3f34184db4
  $fOrdExtension_$c>= ::
    GHC.LanguageExtensions.Type.Extension
    -> GHC.LanguageExtensions.Type.Extension -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (a :: GHC.LanguageExtensions.Type.Extension)
                   (b :: GHC.LanguageExtensions.Type.Extension) ->
                 case a of x1 { DEFAULT ->
                 case b of x2 { DEFAULT ->
                 GHC.Prim.tagToEnum#
                   @ GHC.Types.Bool
                   (GHC.Prim.>=#
                      (GHC.Prim.dataToTag# @ GHC.LanguageExtensions.Type.Extension x1)
                      (GHC.Prim.dataToTag#
                         @ GHC.LanguageExtensions.Type.Extension
                         x2)) } }) -}
8b31b29a6c6677f56f61d2b7c10965f5
  $fOrdExtension_$ccompare ::
    GHC.LanguageExtensions.Type.Extension
    -> GHC.LanguageExtensions.Type.Extension -> GHC.Types.Ordering
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (a :: GHC.LanguageExtensions.Type.Extension)
                   (b :: GHC.LanguageExtensions.Type.Extension) ->
                 case a of x1 { DEFAULT ->
                 case b of x2 { DEFAULT ->
                 let {
                   b# :: GHC.Prim.Int#
                   = GHC.Prim.dataToTag# @ GHC.LanguageExtensions.Type.Extension x2
                 } in
                 let {
                   a# :: GHC.Prim.Int#
                   = GHC.Prim.dataToTag# @ GHC.LanguageExtensions.Type.Extension x1
                 } in
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.<# a# b#) of wild {
                   GHC.Types.False
                   -> case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.==# a# b#) of wild1 {
                        GHC.Types.False -> GHC.Types.GT GHC.Types.True -> GHC.Types.EQ }
                   GHC.Types.True -> GHC.Types.LT } } }) -}
66395f29eb08fff04aa919b0a49301df
  $fOrdExtension_$cmax ::
    GHC.LanguageExtensions.Type.Extension
    -> GHC.LanguageExtensions.Type.Extension
    -> GHC.LanguageExtensions.Type.Extension
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: GHC.LanguageExtensions.Type.Extension)
                   (y :: GHC.LanguageExtensions.Type.Extension) ->
                 case x of x1 { DEFAULT ->
                 case y of x2 { DEFAULT ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.<=#
                           (GHC.Prim.dataToTag# @ GHC.LanguageExtensions.Type.Extension x1)
                           (GHC.Prim.dataToTag#
                              @ GHC.LanguageExtensions.Type.Extension
                              x2)) of wild {
                   GHC.Types.False -> x1 GHC.Types.True -> x2 } } }) -}
175e8ceb26fcda76893119431ccd2cdc
  $fOrdExtension_$cmin ::
    GHC.LanguageExtensions.Type.Extension
    -> GHC.LanguageExtensions.Type.Extension
    -> GHC.LanguageExtensions.Type.Extension
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: GHC.LanguageExtensions.Type.Extension)
                   (y :: GHC.LanguageExtensions.Type.Extension) ->
                 case x of x1 { DEFAULT ->
                 case y of x2 { DEFAULT ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.<=#
                           (GHC.Prim.dataToTag# @ GHC.LanguageExtensions.Type.Extension x1)
                           (GHC.Prim.dataToTag#
                              @ GHC.LanguageExtensions.Type.Extension
                              x2)) of wild {
                   GHC.Types.False -> x2 GHC.Types.True -> x1 } } }) -}
f31867cdb07f4d74957c038d46d2e942
  $fReadExtension ::
    GHC.Read.Read GHC.LanguageExtensions.Type.Extension
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GHC.LanguageExtensions.Type.Extension
                  ExtMonad.$fReadExtension_$creadsPrec
                  ExtMonad.$fReadExtension_$creadList
                  ExtMonad.$fReadExtension_$creadPrec
                  ExtMonad.$fReadExtension_$creadListPrec -}
1b182b478f627b2c15ca304278cd37d4
  $fReadExtension1 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       ([GHC.LanguageExtensions.Type.Extension]
        -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (eta :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta1 :: [GHC.LanguageExtensions.Type.Extension]
                            -> Text.ParserCombinators.ReadP.P b) ->
                 GHC.Read.list1
                   @ GHC.LanguageExtensions.Type.Extension
                   ExtMonad.$fReadExtension2
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                             <GHC.LanguageExtensions.Type.Extension>_R))
                   eta
                   @ b
                   eta1) -}
e0c87b88da97e3a3608ae89d2ad29919
  $fReadExtension10 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec
        GHC.LanguageExtensions.Type.Extension)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec
                        GHC.LanguageExtensions.Type.Extension)
                   ExtMonad.$fReadExtension407
                   ExtMonad.$fReadExtension11) -}
19d7be2e5998095320522cc4aae36fcb
  $fReadExtension100 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec
        GHC.LanguageExtensions.Type.Extension)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec
                        GHC.LanguageExtensions.Type.Extension)
                   ExtMonad.$fReadExtension137
                   ExtMonad.$fReadExtension101) -}
28cb60388b243c56222085cb7b2144b3
  $fReadExtension101 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec
        GHC.LanguageExtensions.Type.Extension)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec
                        GHC.LanguageExtensions.Type.Extension)
                   ExtMonad.$fReadExtension134
                   ExtMonad.$fReadExtension102) -}
581c2d14ff568e48be6ee6b32dbeb3a3
  $fReadExtension102 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec
        GHC.LanguageExtensions.Type.Extension)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec
                        GHC.LanguageExtensions.Type.Extension)
                   ExtMonad.$fReadExtension131
                   ExtMonad.$fReadExtension103) -}
d4006aa8880b37780de9053738b9aa77
  $fReadExtension103 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec
        GHC.LanguageExtensions.Type.Extension)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec
                        GHC.LanguageExtensions.Type.Extension)
                   ExtMonad.$fReadExtension128
                   ExtMonad.$fReadExtension104) -}
9b9d2de90963dd8fbf409cdab8fce79a
  $fReadExtension104 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec
        GHC.LanguageExtensions.Type.Extension)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec
                        GHC.LanguageExtensions.Type.Extension)
                   ExtMonad.$fReadExtension125
                   ExtMonad.$fReadExtension105) -}
477bf5982eb9accaa7601d35bc93a7eb
  $fReadExtension105 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec
        GHC.LanguageExtensions.Type.Extension)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec
                        GHC.LanguageExtensions.Type.Extension)
                   ExtMonad.$fReadExtension122
                   ExtMonad.$fReadExtension106) -}
202e8f601958e460015b2f2a5a5c279a
  $fReadExtension106 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec
        GHC.LanguageExtensions.Type.Extension)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec
                        GHC.LanguageExtensions.Type.Extension)
                   ExtMonad.$fReadExtension119
                   ExtMonad.$fReadExtension107) -}
ec0ab31b42482cababd18ea76b630250
  $fReadExtension107 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec
        GHC.LanguageExtensions.Type.Extension)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec
                        GHC.LanguageExtensions.Type.Extension)
                   ExtMonad.$fReadExtension116
                   ExtMonad.$fReadExtension108) -}
cd7dd63ddb48b3b73ba7d6420c1af662
  $fReadExtension108 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec
        GHC.LanguageExtensions.Type.Extension)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec
                        GHC.LanguageExtensions.Type.Extension)
                   ExtMonad.$fReadExtension113
                   ExtMonad.$fReadExtension109) -}
1934fbd7443e42ac00ab7424dd4fd81c
  $fReadExtension109 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec
        GHC.LanguageExtensions.Type.Extension)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec
                        GHC.LanguageExtensions.Type.Extension)
                   ExtMonad.$fReadExtension110
                   (GHC.Types.[]
                      @ (GHC.Base.String,
                         Text.ParserCombinators.ReadPrec.ReadPrec
                           GHC.LanguageExtensions.Type.Extension))) -}
f09cb50dbbfd4a5e224a821226643623
  $fReadExtension11 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec
        GHC.LanguageExtensions.Type.Extension)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec
                        GHC.LanguageExtensions.Type.Extension)
                   ExtMonad.$fReadExtension404
                   ExtMonad.$fReadExtension12) -}
80217bb8de92015dde79d449f7cf7b96
  $fReadExtension110 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec
       GHC.LanguageExtensions.Type.Extension)
  {- Strictness: m,
     Unfolding: ((ExtMonad.$fReadExtension112,
                  ExtMonad.$fReadExtension111
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                      <GHC.LanguageExtensions.Type.Extension>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                 <GHC.LanguageExtensions.Type.Extension>_R))))) -}
f83c57a3d4312af7be0984987303e036
  $fReadExtension111 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (GHC.LanguageExtensions.Type.Extension
        -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (ds :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta :: GHC.LanguageExtensions.Type.Extension
                           -> Text.ParserCombinators.ReadP.P b) ->
                 eta GHC.LanguageExtensions.Type.MonadFailDesugaring) -}
ffac16ad31f0c3e02b346f18d875f006
  $fReadExtension112 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   "MonadFailDesugaring"#) -}
402c49d786f36aa9d4c62a4b39703924
  $fReadExtension113 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec
       GHC.LanguageExtensions.Type.Extension)
  {- Strictness: m,
     Unfolding: ((ExtMonad.$fReadExtension115,
                  ExtMonad.$fReadExtension114
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                      <GHC.LanguageExtensions.Type.Extension>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                 <GHC.LanguageExtensions.Type.Extension>_R))))) -}
f59cbb298c4c528638e65a3d996228bd
  $fReadExtension114 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (GHC.LanguageExtensions.Type.Extension
        -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (ds :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta :: GHC.LanguageExtensions.Type.Extension
                           -> Text.ParserCombinators.ReadP.P b) ->
                 eta GHC.LanguageExtensions.Type.StrictData) -}
db66dacb1859de74b2d34407ca5c76cf
  $fReadExtension115 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "StrictData"#) -}
ed0a14e6ba10fcac1d1051494e78f174
  $fReadExtension116 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec
       GHC.LanguageExtensions.Type.Extension)
  {- Strictness: m,
     Unfolding: ((ExtMonad.$fReadExtension118,
                  ExtMonad.$fReadExtension117
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                      <GHC.LanguageExtensions.Type.Extension>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                 <GHC.LanguageExtensions.Type.Extension>_R))))) -}
e3249b0c51b7494f014b00ec1222ce14
  $fReadExtension117 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (GHC.LanguageExtensions.Type.Extension
        -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (ds :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta :: GHC.LanguageExtensions.Type.Extension
                           -> Text.ParserCombinators.ReadP.P b) ->
                 eta GHC.LanguageExtensions.Type.Strict) -}
3ed8a048178f0570f8f8f84e3b11d6d7
  $fReadExtension118 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Strict"#) -}
e8d7a3ff4113bf70683a439d3acaaa4a
  $fReadExtension119 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec
       GHC.LanguageExtensions.Type.Extension)
  {- Strictness: m,
     Unfolding: ((ExtMonad.$fReadExtension121,
                  ExtMonad.$fReadExtension120
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                      <GHC.LanguageExtensions.Type.Extension>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                 <GHC.LanguageExtensions.Type.Extension>_R))))) -}
8b122d5790ff0b1d77d22722cbfefcef
  $fReadExtension12 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec
        GHC.LanguageExtensions.Type.Extension)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec
                        GHC.LanguageExtensions.Type.Extension)
                   ExtMonad.$fReadExtension401
                   ExtMonad.$fReadExtension13) -}
12a0741534c865396d823cedd71c4157
  $fReadExtension120 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (GHC.LanguageExtensions.Type.Extension
        -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (ds :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta :: GHC.LanguageExtensions.Type.Extension
                           -> Text.ParserCombinators.ReadP.P b) ->
                 eta GHC.LanguageExtensions.Type.TypeApplications) -}
806479bba32a22398badc5e3148e6381
  $fReadExtension121 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "TypeApplications"#) -}
1953abff96d22a200c2ad992c4b226c2
  $fReadExtension122 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec
       GHC.LanguageExtensions.Type.Extension)
  {- Strictness: m,
     Unfolding: ((ExtMonad.$fReadExtension124,
                  ExtMonad.$fReadExtension123
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                      <GHC.LanguageExtensions.Type.Extension>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                 <GHC.LanguageExtensions.Type.Extension>_R))))) -}
c40706ecd365d19fa6c1095ef6dba8f7
  $fReadExtension123 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (GHC.LanguageExtensions.Type.Extension
        -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (ds :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta :: GHC.LanguageExtensions.Type.Extension
                           -> Text.ParserCombinators.ReadP.P b) ->
                 eta GHC.LanguageExtensions.Type.StaticPointers) -}
d1223d1682c0af8fa173501ae92e29a7
  $fReadExtension124 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "StaticPointers"#) -}
8421957a74d0c21470ff85f29c1d3e72
  $fReadExtension125 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec
       GHC.LanguageExtensions.Type.Extension)
  {- Strictness: m,
     Unfolding: ((ExtMonad.$fReadExtension127,
                  ExtMonad.$fReadExtension126
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                      <GHC.LanguageExtensions.Type.Extension>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                 <GHC.LanguageExtensions.Type.Extension>_R))))) -}
c8f2151d87e8a5180c7f2729cb9c44f1
  $fReadExtension126 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (GHC.LanguageExtensions.Type.Extension
        -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (ds :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta :: GHC.LanguageExtensions.Type.Extension
                           -> Text.ParserCombinators.ReadP.P b) ->
                 eta GHC.LanguageExtensions.Type.NamedWildCards) -}
a280b87ac0ec0b6a7b52439e341d8fcf
  $fReadExtension127 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "NamedWildCards"#) -}
2ba432287bf6305529352c8846de85a4
  $fReadExtension128 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec
       GHC.LanguageExtensions.Type.Extension)
  {- Strictness: m,
     Unfolding: ((ExtMonad.$fReadExtension130,
                  ExtMonad.$fReadExtension129
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                      <GHC.LanguageExtensions.Type.Extension>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                 <GHC.LanguageExtensions.Type.Extension>_R))))) -}
95f865a9769684522a8a987661f1fb63
  $fReadExtension129 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (GHC.LanguageExtensions.Type.Extension
        -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (ds :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta :: GHC.LanguageExtensions.Type.Extension
                           -> Text.ParserCombinators.ReadP.P b) ->
                 eta GHC.LanguageExtensions.Type.PartialTypeSignatures) -}
3df624e2dabff041ee9fd9d4fcbb8956
  $fReadExtension13 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec
        GHC.LanguageExtensions.Type.Extension)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec
                        GHC.LanguageExtensions.Type.Extension)
                   ExtMonad.$fReadExtension398
                   ExtMonad.$fReadExtension14) -}
f43d420fa2514db356886829a2907324
  $fReadExtension130 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   "PartialTypeSignatures"#) -}
2c655ecd1e0d979ba82b77bcb78a9f4b
  $fReadExtension131 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec
       GHC.LanguageExtensions.Type.Extension)
  {- Strictness: m,
     Unfolding: ((ExtMonad.$fReadExtension133,
                  ExtMonad.$fReadExtension132
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                      <GHC.LanguageExtensions.Type.Extension>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                 <GHC.LanguageExtensions.Type.Extension>_R))))) -}
6f9c5cd4bcdf113802e490b133b9d4fd
  $fReadExtension132 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (GHC.LanguageExtensions.Type.Extension
        -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (ds :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta :: GHC.LanguageExtensions.Type.Extension
                           -> Text.ParserCombinators.ReadP.P b) ->
                 eta GHC.LanguageExtensions.Type.PatternSynonyms) -}
bfdf76a27ca482b0d04e7881d469bb03
  $fReadExtension133 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "PatternSynonyms"#) -}
8b0c44cc92026850263b9409a2a2fe61
  $fReadExtension134 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec
       GHC.LanguageExtensions.Type.Extension)
  {- Strictness: m,
     Unfolding: ((ExtMonad.$fReadExtension136,
                  ExtMonad.$fReadExtension135
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                      <GHC.LanguageExtensions.Type.Extension>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                 <GHC.LanguageExtensions.Type.Extension>_R))))) -}
bb5ddea188e76fe2fb60e0d78a97689a
  $fReadExtension135 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (GHC.LanguageExtensions.Type.Extension
        -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (ds :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta :: GHC.LanguageExtensions.Type.Extension
                           -> Text.ParserCombinators.ReadP.P b) ->
                 eta GHC.LanguageExtensions.Type.EmptyCase) -}
af799ef24a62c4640becbc1531b437a5
  $fReadExtension136 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "EmptyCase"#) -}
6fcdcf8be75096467e2f7259432ef1b9
  $fReadExtension137 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec
       GHC.LanguageExtensions.Type.Extension)
  {- Strictness: m,
     Unfolding: ((ExtMonad.$fReadExtension139,
                  ExtMonad.$fReadExtension138
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                      <GHC.LanguageExtensions.Type.Extension>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                 <GHC.LanguageExtensions.Type.Extension>_R))))) -}
5ace5cbc557bc6c166202e5e9a1e3fd6
  $fReadExtension138 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (GHC.LanguageExtensions.Type.Extension
        -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (ds :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta :: GHC.LanguageExtensions.Type.Extension
                           -> Text.ParserCombinators.ReadP.P b) ->
                 eta GHC.LanguageExtensions.Type.OverloadedLabels) -}
318227575f8d03224229e0d6fb31f723
  $fReadExtension139 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "OverloadedLabels"#) -}
66c1ed743ff7b428bfb49048d9d95aef
  $fReadExtension14 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec
        GHC.LanguageExtensions.Type.Extension)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec
                        GHC.LanguageExtensions.Type.Extension)
                   ExtMonad.$fReadExtension395
                   ExtMonad.$fReadExtension15) -}
cd9ba79e502970fa169c6a90ce2ea33d
  $fReadExtension140 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec
       GHC.LanguageExtensions.Type.Extension)
  {- Strictness: m,
     Unfolding: ((ExtMonad.$fReadExtension142,
                  ExtMonad.$fReadExtension141
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                      <GHC.LanguageExtensions.Type.Extension>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                 <GHC.LanguageExtensions.Type.Extension>_R))))) -}
d358cb8fea81bf1a22fadcc1e5eae104
  $fReadExtension141 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (GHC.LanguageExtensions.Type.Extension
        -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (ds :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta :: GHC.LanguageExtensions.Type.Extension
                           -> Text.ParserCombinators.ReadP.P b) ->
                 eta GHC.LanguageExtensions.Type.DuplicateRecordFields) -}
f3a5e2269ee0841a64ce2307311420e6
  $fReadExtension142 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   "DuplicateRecordFields"#) -}
a10f81fe5e1524a051de6aea0769c2df
  $fReadExtension143 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec
       GHC.LanguageExtensions.Type.Extension)
  {- Strictness: m,
     Unfolding: ((ExtMonad.$fReadExtension145,
                  ExtMonad.$fReadExtension144
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                      <GHC.LanguageExtensions.Type.Extension>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                 <GHC.LanguageExtensions.Type.Extension>_R))))) -}
23a400ec8c20cba9da04a94dd088ec8c
  $fReadExtension144 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (GHC.LanguageExtensions.Type.Extension
        -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (ds :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta :: GHC.LanguageExtensions.Type.Extension
                           -> Text.ParserCombinators.ReadP.P b) ->
                 eta GHC.LanguageExtensions.Type.NegativeLiterals) -}
f87ba063714c850310dbc6c76a08fa1b
  $fReadExtension145 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "NegativeLiterals"#) -}
b2e44d3c3e032aa7e095c0500485f2c0
  $fReadExtension146 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec
       GHC.LanguageExtensions.Type.Extension)
  {- Strictness: m,
     Unfolding: ((ExtMonad.$fReadExtension148,
                  ExtMonad.$fReadExtension147
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                      <GHC.LanguageExtensions.Type.Extension>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                 <GHC.LanguageExtensions.Type.Extension>_R))))) -}
a7e7c6b3c2bbfb2fec15ca53b6d8988c
  $fReadExtension147 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (GHC.LanguageExtensions.Type.Extension
        -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (ds :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta :: GHC.LanguageExtensions.Type.Extension
                           -> Text.ParserCombinators.ReadP.P b) ->
                 eta GHC.LanguageExtensions.Type.BinaryLiterals) -}
02071ac2feecb7c6b68da91f23ce5738
  $fReadExtension148 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "BinaryLiterals"#) -}
4beb752aae50e1b139af1fb795b262a0
  $fReadExtension149 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec
       GHC.LanguageExtensions.Type.Extension)
  {- Strictness: m,
     Unfolding: ((ExtMonad.$fReadExtension151,
                  ExtMonad.$fReadExtension150
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                      <GHC.LanguageExtensions.Type.Extension>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                 <GHC.LanguageExtensions.Type.Extension>_R))))) -}
35120bb4bcbeb90290125577817a10d4
  $fReadExtension15 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec
        GHC.LanguageExtensions.Type.Extension)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec
                        GHC.LanguageExtensions.Type.Extension)
                   ExtMonad.$fReadExtension392
                   ExtMonad.$fReadExtension16) -}
1a7ab097643482cca98e70ccdbfcc1d9
  $fReadExtension150 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (GHC.LanguageExtensions.Type.Extension
        -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (ds :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta :: GHC.LanguageExtensions.Type.Extension
                           -> Text.ParserCombinators.ReadP.P b) ->
                 eta GHC.LanguageExtensions.Type.MultiWayIf) -}
be084534c2a7a5b9b8e33e27e37647a8
  $fReadExtension151 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "MultiWayIf"#) -}
47c7384d0b0f5a3e8774df4686356b66
  $fReadExtension152 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec
       GHC.LanguageExtensions.Type.Extension)
  {- Strictness: m,
     Unfolding: ((ExtMonad.$fReadExtension154,
                  ExtMonad.$fReadExtension153
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                      <GHC.LanguageExtensions.Type.Extension>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                 <GHC.LanguageExtensions.Type.Extension>_R))))) -}
ff621a3b57ff57dfdaf4b965c7ce6d3b
  $fReadExtension153 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (GHC.LanguageExtensions.Type.Extension
        -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (ds :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta :: GHC.LanguageExtensions.Type.Extension
                           -> Text.ParserCombinators.ReadP.P b) ->
                 eta GHC.LanguageExtensions.Type.LambdaCase) -}
ff623db4541c9848e5ac2ea6b853ca1b
  $fReadExtension154 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "LambdaCase"#) -}
76d77fdf77bf5aa939a9281140703d21
  $fReadExtension155 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec
       GHC.LanguageExtensions.Type.Extension)
  {- Strictness: m,
     Unfolding: ((ExtMonad.$fReadExtension157,
                  ExtMonad.$fReadExtension156
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                      <GHC.LanguageExtensions.Type.Extension>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                 <GHC.LanguageExtensions.Type.Extension>_R))))) -}
fb52701a1bd33d3e9f84b3a4a8c14359
  $fReadExtension156 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (GHC.LanguageExtensions.Type.Extension
        -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (ds :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta :: GHC.LanguageExtensions.Type.Extension
                           -> Text.ParserCombinators.ReadP.P b) ->
                 eta GHC.LanguageExtensions.Type.TraditionalRecordSyntax) -}
53a9651f111e4dcfb2d7df1bbac6acef
  $fReadExtension157 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   "TraditionalRecordSyntax"#) -}
c8f379d5229d18c4fed6d8e9e88e8fe2
  $fReadExtension158 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec
       GHC.LanguageExtensions.Type.Extension)
  {- Strictness: m,
     Unfolding: ((ExtMonad.$fReadExtension160,
                  ExtMonad.$fReadExtension159
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                      <GHC.LanguageExtensions.Type.Extension>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                 <GHC.LanguageExtensions.Type.Extension>_R))))) -}
a70d5355a0dd26865f6533e9f24104c0
  $fReadExtension159 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (GHC.LanguageExtensions.Type.Extension
        -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (ds :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta :: GHC.LanguageExtensions.Type.Extension
                           -> Text.ParserCombinators.ReadP.P b) ->
                 eta GHC.LanguageExtensions.Type.RelaxedLayout) -}
2197f52f97422ed39a3000c2fd0c5cfc
  $fReadExtension16 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec
        GHC.LanguageExtensions.Type.Extension)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec
                        GHC.LanguageExtensions.Type.Extension)
                   ExtMonad.$fReadExtension389
                   ExtMonad.$fReadExtension17) -}
4f2381933b0e1e1f1aea35b36ba4d823
  $fReadExtension160 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "RelaxedLayout"#) -}
200a2780651147806e1e903ea8b23e37
  $fReadExtension161 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec
       GHC.LanguageExtensions.Type.Extension)
  {- Strictness: m,
     Unfolding: ((ExtMonad.$fReadExtension163,
                  ExtMonad.$fReadExtension162
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                      <GHC.LanguageExtensions.Type.Extension>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                 <GHC.LanguageExtensions.Type.Extension>_R))))) -}
6c3b852a246c735d8885411375bafa29
  $fReadExtension162 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (GHC.LanguageExtensions.Type.Extension
        -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (ds :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta :: GHC.LanguageExtensions.Type.Extension
                           -> Text.ParserCombinators.ReadP.P b) ->
                 eta GHC.LanguageExtensions.Type.NondecreasingIndentation) -}
235f5d1e765346c00453c3668c5c3df1
  $fReadExtension163 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   "NondecreasingIndentation"#) -}
6906c6a79f5bbec3b172ab992c48a23b
  $fReadExtension164 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec
       GHC.LanguageExtensions.Type.Extension)
  {- Strictness: m,
     Unfolding: ((ExtMonad.$fReadExtension166,
                  ExtMonad.$fReadExtension165
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                      <GHC.LanguageExtensions.Type.Extension>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                 <GHC.LanguageExtensions.Type.Extension>_R))))) -}
52b006386ffc12417a5bfd93316ab18c
  $fReadExtension165 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (GHC.LanguageExtensions.Type.Extension
        -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (ds :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta :: GHC.LanguageExtensions.Type.Extension
                           -> Text.ParserCombinators.ReadP.P b) ->
                 eta GHC.LanguageExtensions.Type.DatatypeContexts) -}
3840668cf90e3404e1cd2d79b27a1321
  $fReadExtension166 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "DatatypeContexts"#) -}
9b6215059ed949bdcf3a721f9416d6b5
  $fReadExtension167 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec
       GHC.LanguageExtensions.Type.Extension)
  {- Strictness: m,
     Unfolding: ((ExtMonad.$fReadExtension169,
                  ExtMonad.$fReadExtension168
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                      <GHC.LanguageExtensions.Type.Extension>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                 <GHC.LanguageExtensions.Type.Extension>_R))))) -}
843fd049dd70798994f1159ca254c096
  $fReadExtension168 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (GHC.LanguageExtensions.Type.Extension
        -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (ds :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta :: GHC.LanguageExtensions.Type.Extension
                           -> Text.ParserCombinators.ReadP.P b) ->
                 eta
                   GHC.LanguageExtensions.Type.AlternativeLayoutRuleTransitional) -}
433c2e2a458d281831e5cc1966edae27
  $fReadExtension169 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   "AlternativeLayoutRuleTransitional"#) -}
1e3a563619646715624ce571a3fc802f
  $fReadExtension17 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec
        GHC.LanguageExtensions.Type.Extension)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec
                        GHC.LanguageExtensions.Type.Extension)
                   ExtMonad.$fReadExtension386
                   ExtMonad.$fReadExtension18) -}
8bdf96a2a74fcf9d17292d28725fb224
  $fReadExtension170 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec
       GHC.LanguageExtensions.Type.Extension)
  {- Strictness: m,
     Unfolding: ((ExtMonad.$fReadExtension172,
                  ExtMonad.$fReadExtension171
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                      <GHC.LanguageExtensions.Type.Extension>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                 <GHC.LanguageExtensions.Type.Extension>_R))))) -}
ab4030c657a5ab631e816b2bf19ecc1d
  $fReadExtension171 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (GHC.LanguageExtensions.Type.Extension
        -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (ds :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta :: GHC.LanguageExtensions.Type.Extension
                           -> Text.ParserCombinators.ReadP.P b) ->
                 eta GHC.LanguageExtensions.Type.AlternativeLayoutRule) -}
2b6a2910c7ea591e11856bff846481f3
  $fReadExtension172 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   "AlternativeLayoutRule"#) -}
b5b3a50c4b22ff6b0026aed929a35d6d
  $fReadExtension173 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec
       GHC.LanguageExtensions.Type.Extension)
  {- Strictness: m,
     Unfolding: ((ExtMonad.$fReadExtension175,
                  ExtMonad.$fReadExtension174
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                      <GHC.LanguageExtensions.Type.Extension>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                 <GHC.LanguageExtensions.Type.Extension>_R))))) -}
30d7fc19b89137e7a344125eaeb0187b
  $fReadExtension174 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (GHC.LanguageExtensions.Type.Extension
        -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (ds :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta :: GHC.LanguageExtensions.Type.Extension
                           -> Text.ParserCombinators.ReadP.P b) ->
                 eta GHC.LanguageExtensions.Type.ExplicitForAll) -}
ada02c8c4c6ce6e8c4699be620552747
  $fReadExtension175 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "ExplicitForAll"#) -}
24811830feca1b9924fa325c12522373
  $fReadExtension176 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec
       GHC.LanguageExtensions.Type.Extension)
  {- Strictness: m,
     Unfolding: ((ExtMonad.$fReadExtension178,
                  ExtMonad.$fReadExtension177
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                      <GHC.LanguageExtensions.Type.Extension>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                 <GHC.LanguageExtensions.Type.Extension>_R))))) -}
43c09c699d9dfe8a1715a5d9be415c76
  $fReadExtension177 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (GHC.LanguageExtensions.Type.Extension
        -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (ds :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta :: GHC.LanguageExtensions.Type.Extension
                           -> Text.ParserCombinators.ReadP.P b) ->
                 eta GHC.LanguageExtensions.Type.PackageImports) -}
7cdb61c6179dde926a3e12c8ba09f883
  $fReadExtension178 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "PackageImports"#) -}
44f33942a5d33cd64ceef88972719bbc
  $fReadExtension179 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec
       GHC.LanguageExtensions.Type.Extension)
  {- Strictness: m,
     Unfolding: ((ExtMonad.$fReadExtension181,
                  ExtMonad.$fReadExtension180
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                      <GHC.LanguageExtensions.Type.Extension>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                 <GHC.LanguageExtensions.Type.Extension>_R))))) -}
40525fa2450813659d850b2fecd4ed50
  $fReadExtension18 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec
        GHC.LanguageExtensions.Type.Extension)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec
                        GHC.LanguageExtensions.Type.Extension)
                   ExtMonad.$fReadExtension383
                   ExtMonad.$fReadExtension19) -}
637f2131ff2a7ba4ca15e7739dd0b288
  $fReadExtension180 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (GHC.LanguageExtensions.Type.Extension
        -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (ds :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta :: GHC.LanguageExtensions.Type.Extension
                           -> Text.ParserCombinators.ReadP.P b) ->
                 eta GHC.LanguageExtensions.Type.ExplicitNamespaces) -}
6035724095ec350d2747272b5f33d593
  $fReadExtension181 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "ExplicitNamespaces"#) -}
15127a55d90a8687417738e15f56b894
  $fReadExtension182 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec
       GHC.LanguageExtensions.Type.Extension)
  {- Strictness: m,
     Unfolding: ((ExtMonad.$fReadExtension184,
                  ExtMonad.$fReadExtension183
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                      <GHC.LanguageExtensions.Type.Extension>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                 <GHC.LanguageExtensions.Type.Extension>_R))))) -}
07a6c87a8b8a15b5b4af26dd940a795b
  $fReadExtension183 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (GHC.LanguageExtensions.Type.Extension
        -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (ds :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta :: GHC.LanguageExtensions.Type.Extension
                           -> Text.ParserCombinators.ReadP.P b) ->
                 eta GHC.LanguageExtensions.Type.TypeOperators) -}
af953b719e38e496d4d595f21bcd0750
  $fReadExtension184 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "TypeOperators"#) -}
cdd6f402aa04d525be12b5e404933785
  $fReadExtension185 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec
       GHC.LanguageExtensions.Type.Extension)
  {- Strictness: m,
     Unfolding: ((ExtMonad.$fReadExtension187,
                  ExtMonad.$fReadExtension186
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                      <GHC.LanguageExtensions.Type.Extension>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                 <GHC.LanguageExtensions.Type.Extension>_R))))) -}
cda5fb53d0f4bdadbf93f33040ba5929
  $fReadExtension186 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (GHC.LanguageExtensions.Type.Extension
        -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (ds :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta :: GHC.LanguageExtensions.Type.Extension
                           -> Text.ParserCombinators.ReadP.P b) ->
                 eta GHC.LanguageExtensions.Type.ImpredicativeTypes) -}
23a05f4ee1c4b7a22b2402cc0c2ebcf3
  $fReadExtension187 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "ImpredicativeTypes"#) -}
fe12067e8ea9c8e87d79939dd95f545b
  $fReadExtension188 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec
       GHC.LanguageExtensions.Type.Extension)
  {- Strictness: m,
     Unfolding: ((ExtMonad.$fReadExtension190,
                  ExtMonad.$fReadExtension189
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                      <GHC.LanguageExtensions.Type.Extension>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                 <GHC.LanguageExtensions.Type.Extension>_R))))) -}
91c0869b259cdf1e9e05fe3126cea4a8
  $fReadExtension189 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (GHC.LanguageExtensions.Type.Extension
        -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (ds :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta :: GHC.LanguageExtensions.Type.Extension
                           -> Text.ParserCombinators.ReadP.P b) ->
                 eta GHC.LanguageExtensions.Type.RankNTypes) -}
42b6f8512d2e0b476bbc0c7c62e9dba2
  $fReadExtension19 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec
        GHC.LanguageExtensions.Type.Extension)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec
                        GHC.LanguageExtensions.Type.Extension)
                   ExtMonad.$fReadExtension380
                   ExtMonad.$fReadExtension20) -}
c84a0e9c6d03c0fe3617aa7fd679f4c4
  $fReadExtension190 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "RankNTypes"#) -}
54590002a7db6d6b726e4f6decef8ec8
  $fReadExtension191 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec
       GHC.LanguageExtensions.Type.Extension)
  {- Strictness: m,
     Unfolding: ((ExtMonad.$fReadExtension193,
                  ExtMonad.$fReadExtension192
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                      <GHC.LanguageExtensions.Type.Extension>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                 <GHC.LanguageExtensions.Type.Extension>_R))))) -}
845fb08377a8a4a2363c9ec93d034421
  $fReadExtension192 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (GHC.LanguageExtensions.Type.Extension
        -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (ds :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta :: GHC.LanguageExtensions.Type.Extension
                           -> Text.ParserCombinators.ReadP.P b) ->
                 eta GHC.LanguageExtensions.Type.LiberalTypeSynonyms) -}
e9151efd2e27061e2c831bae9d8b62e0
  $fReadExtension193 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   "LiberalTypeSynonyms"#) -}
23cf71137a0c3d2562e19611a3b925a5
  $fReadExtension194 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec
       GHC.LanguageExtensions.Type.Extension)
  {- Strictness: m,
     Unfolding: ((ExtMonad.$fReadExtension196,
                  ExtMonad.$fReadExtension195
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                      <GHC.LanguageExtensions.Type.Extension>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                 <GHC.LanguageExtensions.Type.Extension>_R))))) -}
64db4c3cc4f24aacb3079b673a243839
  $fReadExtension195 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (GHC.LanguageExtensions.Type.Extension
        -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (ds :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta :: GHC.LanguageExtensions.Type.Extension
                           -> Text.ParserCombinators.ReadP.P b) ->
                 eta GHC.LanguageExtensions.Type.PatternGuards) -}
71eaf722f676898f928f2c6e7d82fe96
  $fReadExtension196 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "PatternGuards"#) -}
437fe6fad7c4b66649867beb00398bde
  $fReadExtension197 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec
       GHC.LanguageExtensions.Type.Extension)
  {- Strictness: m,
     Unfolding: ((ExtMonad.$fReadExtension199,
                  ExtMonad.$fReadExtension198
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                      <GHC.LanguageExtensions.Type.Extension>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                 <GHC.LanguageExtensions.Type.Extension>_R))))) -}
10c7056c854791fa3d98cf199750e1a0
  $fReadExtension198 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (GHC.LanguageExtensions.Type.Extension
        -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (ds :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta :: GHC.LanguageExtensions.Type.Extension
                           -> Text.ParserCombinators.ReadP.P b) ->
                 eta GHC.LanguageExtensions.Type.TupleSections) -}
c0db63fc9640aa934884d264697147e3
  $fReadExtension199 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "TupleSections"#) -}
6aad8d5349173832cc0284aadd932ba9
  $fReadExtension2 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> Text.ParserCombinators.ReadP.ReadP
         GHC.LanguageExtensions.Type.Extension
  {- Arity: 1,
     Unfolding: (GHC.Read.parens1
                   @ GHC.LanguageExtensions.Type.Extension
                   ExtMonad.$fReadExtension3
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                             <GHC.LanguageExtensions.Type.Extension>_R))) -}
8e8c5e7d23166d927f29f9649467dfe1
  $fReadExtension20 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec
        GHC.LanguageExtensions.Type.Extension)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec
                        GHC.LanguageExtensions.Type.Extension)
                   ExtMonad.$fReadExtension377
                   ExtMonad.$fReadExtension21) -}
074723500c65c247aeeb45cf5d37be1b
  $fReadExtension200 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec
       GHC.LanguageExtensions.Type.Extension)
  {- Strictness: m,
     Unfolding: ((ExtMonad.$fReadExtension202,
                  ExtMonad.$fReadExtension201
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                      <GHC.LanguageExtensions.Type.Extension>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                 <GHC.LanguageExtensions.Type.Extension>_R))))) -}
4f801a839b7214210c56a528c0f9f13a
  $fReadExtension201 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (GHC.LanguageExtensions.Type.Extension
        -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (ds :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta :: GHC.LanguageExtensions.Type.Extension
                           -> Text.ParserCombinators.ReadP.P b) ->
                 eta GHC.LanguageExtensions.Type.PostfixOperators) -}
f18a6a988cd292c2a573484cda31ea19
  $fReadExtension202 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "PostfixOperators"#) -}
cd3e4dcfe5777986206ab2fa039d7ced
  $fReadExtension203 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec
       GHC.LanguageExtensions.Type.Extension)
  {- Strictness: m,
     Unfolding: ((ExtMonad.$fReadExtension205,
                  ExtMonad.$fReadExtension204
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                      <GHC.LanguageExtensions.Type.Extension>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                 <GHC.LanguageExtensions.Type.Extension>_R))))) -}
600642ccf5052d4b385d24533984511c
  $fReadExtension204 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (GHC.LanguageExtensions.Type.Extension
        -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (ds :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta :: GHC.LanguageExtensions.Type.Extension
                           -> Text.ParserCombinators.ReadP.P b) ->
                 eta GHC.LanguageExtensions.Type.RecursiveDo) -}
ec6c531d969451340c349ef7b2027402
  $fReadExtension205 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "RecursiveDo"#) -}
0c0358c0391d001a614c6ec4bf45619e
  $fReadExtension206 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec
       GHC.LanguageExtensions.Type.Extension)
  {- Strictness: m,
     Unfolding: ((ExtMonad.$fReadExtension208,
                  ExtMonad.$fReadExtension207
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                      <GHC.LanguageExtensions.Type.Extension>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                 <GHC.LanguageExtensions.Type.Extension>_R))))) -}
935edf9c2549503633a0ce23e3f8a23c
  $fReadExtension207 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (GHC.LanguageExtensions.Type.Extension
        -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (ds :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta :: GHC.LanguageExtensions.Type.Extension
                           -> Text.ParserCombinators.ReadP.P b) ->
                 eta GHC.LanguageExtensions.Type.GeneralizedNewtypeDeriving) -}
0c26f56436b194279cf3675515d1abb4
  $fReadExtension208 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   "GeneralizedNewtypeDeriving"#) -}
324453724936a0d11fc59b8d841fea97
  $fReadExtension209 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec
       GHC.LanguageExtensions.Type.Extension)
  {- Strictness: m,
     Unfolding: ((ExtMonad.$fReadExtension211,
                  ExtMonad.$fReadExtension210
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                      <GHC.LanguageExtensions.Type.Extension>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                 <GHC.LanguageExtensions.Type.Extension>_R))))) -}
666975cf1c70d5cbad67374a146d6622
  $fReadExtension21 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec
        GHC.LanguageExtensions.Type.Extension)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec
                        GHC.LanguageExtensions.Type.Extension)
                   ExtMonad.$fReadExtension374
                   ExtMonad.$fReadExtension22) -}
af767e5340e95a2853ac0f3a59ea2123
  $fReadExtension210 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (GHC.LanguageExtensions.Type.Extension
        -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (ds :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta :: GHC.LanguageExtensions.Type.Extension
                           -> Text.ParserCombinators.ReadP.P b) ->
                 eta GHC.LanguageExtensions.Type.MonadComprehensions) -}
69b61b377160e01975f83046243f74b2
  $fReadExtension211 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   "MonadComprehensions"#) -}
a5971f67dcc820e803e77b0597d5afcc
  $fReadExtension212 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec
       GHC.LanguageExtensions.Type.Extension)
  {- Strictness: m,
     Unfolding: ((ExtMonad.$fReadExtension214,
                  ExtMonad.$fReadExtension213
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                      <GHC.LanguageExtensions.Type.Extension>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                 <GHC.LanguageExtensions.Type.Extension>_R))))) -}
6045e8ef82a953dceb8476ec084ab5d5
  $fReadExtension213 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (GHC.LanguageExtensions.Type.Extension
        -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (ds :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta :: GHC.LanguageExtensions.Type.Extension
                           -> Text.ParserCombinators.ReadP.P b) ->
                 eta GHC.LanguageExtensions.Type.TransformListComp) -}
3e5d19822a1a16f661d200ef656c3f94
  $fReadExtension214 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "TransformListComp"#) -}
66527e0635d922b4f712e8fa6e434510
  $fReadExtension215 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec
       GHC.LanguageExtensions.Type.Extension)
  {- Strictness: m,
     Unfolding: ((ExtMonad.$fReadExtension217,
                  ExtMonad.$fReadExtension216
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                      <GHC.LanguageExtensions.Type.Extension>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                 <GHC.LanguageExtensions.Type.Extension>_R))))) -}
666ceb331c7ead219c4a0dfecdce1646
  $fReadExtension216 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (GHC.LanguageExtensions.Type.Extension
        -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (ds :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta :: GHC.LanguageExtensions.Type.Extension
                           -> Text.ParserCombinators.ReadP.P b) ->
                 eta GHC.LanguageExtensions.Type.ParallelListComp) -}
dc17eb774e9d74d35747b056729e3b48
  $fReadExtension217 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "ParallelListComp"#) -}
69e050a30b95a95678dff4f04a8aaa72
  $fReadExtension218 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec
       GHC.LanguageExtensions.Type.Extension)
  {- Strictness: m,
     Unfolding: ((ExtMonad.$fReadExtension220,
                  ExtMonad.$fReadExtension219
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                      <GHC.LanguageExtensions.Type.Extension>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                 <GHC.LanguageExtensions.Type.Extension>_R))))) -}
9e5ce0cd389bd579493dd8b06319ade1
  $fReadExtension219 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (GHC.LanguageExtensions.Type.Extension
        -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (ds :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta :: GHC.LanguageExtensions.Type.Extension
                           -> Text.ParserCombinators.ReadP.P b) ->
                 eta GHC.LanguageExtensions.Type.RoleAnnotations) -}
85b4ff37758cc435cd0a58a6b5021dcc
  $fReadExtension22 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec
        GHC.LanguageExtensions.Type.Extension)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec
                        GHC.LanguageExtensions.Type.Extension)
                   ExtMonad.$fReadExtension371
                   ExtMonad.$fReadExtension23) -}
4a8b3923d7aea4a25e83fff3298d74a7
  $fReadExtension220 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "RoleAnnotations"#) -}
334c55f9bd2ea7d42849f7fcbc065822
  $fReadExtension221 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec
       GHC.LanguageExtensions.Type.Extension)
  {- Strictness: m,
     Unfolding: ((ExtMonad.$fReadExtension223,
                  ExtMonad.$fReadExtension222
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                      <GHC.LanguageExtensions.Type.Extension>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                 <GHC.LanguageExtensions.Type.Extension>_R))))) -}
bc8ff7ec0478152e51b1108036cb6932
  $fReadExtension222 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (GHC.LanguageExtensions.Type.Extension
        -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (ds :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta :: GHC.LanguageExtensions.Type.Extension
                           -> Text.ParserCombinators.ReadP.P b) ->
                 eta GHC.LanguageExtensions.Type.KindSignatures) -}
e6c024ec80ab31e04adde8a1faf000b2
  $fReadExtension223 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "KindSignatures"#) -}
3841b2d12501ee802f05a24d55619112
  $fReadExtension224 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec
       GHC.LanguageExtensions.Type.Extension)
  {- Strictness: m,
     Unfolding: ((ExtMonad.$fReadExtension226,
                  ExtMonad.$fReadExtension225
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                      <GHC.LanguageExtensions.Type.Extension>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                 <GHC.LanguageExtensions.Type.Extension>_R))))) -}
cc16c73ea2dc57129d37413347cbc12c
  $fReadExtension225 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (GHC.LanguageExtensions.Type.Extension
        -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (ds :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta :: GHC.LanguageExtensions.Type.Extension
                           -> Text.ParserCombinators.ReadP.P b) ->
                 eta GHC.LanguageExtensions.Type.EmptyDataDecls) -}
f12275759e71bb9af85bc6403b12d575
  $fReadExtension226 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "EmptyDataDecls"#) -}
dd360e96b51eb7f62ac8bbdc98f4d0e3
  $fReadExtension227 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec
       GHC.LanguageExtensions.Type.Extension)
  {- Strictness: m,
     Unfolding: ((ExtMonad.$fReadExtension229,
                  ExtMonad.$fReadExtension228
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                      <GHC.LanguageExtensions.Type.Extension>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                 <GHC.LanguageExtensions.Type.Extension>_R))))) -}
178fe942683c94d91904464e297a2f9d
  $fReadExtension228 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (GHC.LanguageExtensions.Type.Extension
        -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (ds :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta :: GHC.LanguageExtensions.Type.Extension
                           -> Text.ParserCombinators.ReadP.P b) ->
                 eta GHC.LanguageExtensions.Type.MagicHash) -}
aa74b48644908ee63a231d54316e61e7
  $fReadExtension229 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "MagicHash"#) -}
d5b7ec8123188c3293df9ad1d2c70c32
  $fReadExtension23 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec
        GHC.LanguageExtensions.Type.Extension)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec
                        GHC.LanguageExtensions.Type.Extension)
                   ExtMonad.$fReadExtension368
                   ExtMonad.$fReadExtension24) -}
fae90084e37d91e209aa3d41d4bb4482
  $fReadExtension230 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec
       GHC.LanguageExtensions.Type.Extension)
  {- Strictness: m,
     Unfolding: ((ExtMonad.$fReadExtension232,
                  ExtMonad.$fReadExtension231
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                      <GHC.LanguageExtensions.Type.Extension>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                 <GHC.LanguageExtensions.Type.Extension>_R))))) -}
235353468fb527b39f005f4e78d5ebcc
  $fReadExtension231 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (GHC.LanguageExtensions.Type.Extension
        -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (ds :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta :: GHC.LanguageExtensions.Type.Extension
                           -> Text.ParserCombinators.ReadP.P b) ->
                 eta GHC.LanguageExtensions.Type.ExistentialQuantification) -}
42d7be9bd44454ea79e9e081bbce68e3
  $fReadExtension232 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   "ExistentialQuantification"#) -}
557efc9b7f829c6936639e0f6042001f
  $fReadExtension233 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec
       GHC.LanguageExtensions.Type.Extension)
  {- Strictness: m,
     Unfolding: ((ExtMonad.$fReadExtension235,
                  ExtMonad.$fReadExtension234
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                      <GHC.LanguageExtensions.Type.Extension>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                 <GHC.LanguageExtensions.Type.Extension>_R))))) -}
49ad9999bbd17727407d82d980a210bd
  $fReadExtension234 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (GHC.LanguageExtensions.Type.Extension
        -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (ds :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta :: GHC.LanguageExtensions.Type.Extension
                           -> Text.ParserCombinators.ReadP.P b) ->
                 eta GHC.LanguageExtensions.Type.UnicodeSyntax) -}
c68e1fa1f05113ca9810c0bc10672478
  $fReadExtension235 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "UnicodeSyntax"#) -}
77352c5263010fcc8c48420d4cfb59aa
  $fReadExtension236 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec
       GHC.LanguageExtensions.Type.Extension)
  {- Strictness: m,
     Unfolding: ((ExtMonad.$fReadExtension238,
                  ExtMonad.$fReadExtension237
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                      <GHC.LanguageExtensions.Type.Extension>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                 <GHC.LanguageExtensions.Type.Extension>_R))))) -}
5daa74eb7f6b28f36a33031833865941
  $fReadExtension237 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (GHC.LanguageExtensions.Type.Extension
        -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (ds :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta :: GHC.LanguageExtensions.Type.Extension
                           -> Text.ParserCombinators.ReadP.P b) ->
                 eta GHC.LanguageExtensions.Type.FunctionalDependencies) -}
51427981ca074f065832fc3f641f9387
  $fReadExtension238 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   "FunctionalDependencies"#) -}
ddc4b8a58378f6b904e30723989d171a
  $fReadExtension239 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec
       GHC.LanguageExtensions.Type.Extension)
  {- Strictness: m,
     Unfolding: ((ExtMonad.$fReadExtension241,
                  ExtMonad.$fReadExtension240
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                      <GHC.LanguageExtensions.Type.Extension>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                 <GHC.LanguageExtensions.Type.Extension>_R))))) -}
30fa65ab4472c729355a749380c99a14
  $fReadExtension24 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec
        GHC.LanguageExtensions.Type.Extension)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec
                        GHC.LanguageExtensions.Type.Extension)
                   ExtMonad.$fReadExtension365
                   ExtMonad.$fReadExtension25) -}
c8e1eeaa74efe2b6d9cc58361d55efcf
  $fReadExtension240 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (GHC.LanguageExtensions.Type.Extension
        -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (ds :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta :: GHC.LanguageExtensions.Type.Extension
                           -> Text.ParserCombinators.ReadP.P b) ->
                 eta GHC.LanguageExtensions.Type.NullaryTypeClasses) -}
36fc280a8f228cda52c8dc402dc489c4
  $fReadExtension241 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "NullaryTypeClasses"#) -}
112c214f97606eb903ebbbcb5740b270
  $fReadExtension242 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec
       GHC.LanguageExtensions.Type.Extension)
  {- Strictness: m,
     Unfolding: ((ExtMonad.$fReadExtension244,
                  ExtMonad.$fReadExtension243
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                      <GHC.LanguageExtensions.Type.Extension>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                 <GHC.LanguageExtensions.Type.Extension>_R))))) -}
a85eecab30e2ad0bd8e99ced3eebc986
  $fReadExtension243 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (GHC.LanguageExtensions.Type.Extension
        -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (ds :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta :: GHC.LanguageExtensions.Type.Extension
                           -> Text.ParserCombinators.ReadP.P b) ->
                 eta GHC.LanguageExtensions.Type.MultiParamTypeClasses) -}
4670d1db48a3882bc57030c1ddda0a41
  $fReadExtension244 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   "MultiParamTypeClasses"#) -}
9684d1d17726a0e72a5fbaf229cf343c
  $fReadExtension245 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec
       GHC.LanguageExtensions.Type.Extension)
  {- Strictness: m,
     Unfolding: ((ExtMonad.$fReadExtension247,
                  ExtMonad.$fReadExtension246
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                      <GHC.LanguageExtensions.Type.Extension>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                 <GHC.LanguageExtensions.Type.Extension>_R))))) -}
9c88f4fd74c4a0ec52c1d08d8c96d337
  $fReadExtension246 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (GHC.LanguageExtensions.Type.Extension
        -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (ds :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta :: GHC.LanguageExtensions.Type.Extension
                           -> Text.ParserCombinators.ReadP.P b) ->
                 eta GHC.LanguageExtensions.Type.ConstrainedClassMethods) -}
731111614134e2856ea064eaf97169d6
  $fReadExtension247 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   "ConstrainedClassMethods"#) -}
843136a8cffca1349d0513f47815fc26
  $fReadExtension248 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec
       GHC.LanguageExtensions.Type.Extension)
  {- Strictness: m,
     Unfolding: ((ExtMonad.$fReadExtension250,
                  ExtMonad.$fReadExtension249
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                      <GHC.LanguageExtensions.Type.Extension>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                 <GHC.LanguageExtensions.Type.Extension>_R))))) -}
f4b513ca29867980c5747b48b39f2878
  $fReadExtension249 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (GHC.LanguageExtensions.Type.Extension
        -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (ds :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta :: GHC.LanguageExtensions.Type.Extension
                           -> Text.ParserCombinators.ReadP.P b) ->
                 eta GHC.LanguageExtensions.Type.FlexibleInstances) -}
604b07d68ed2e68fa06dd759b9f3010b
  $fReadExtension25 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec
        GHC.LanguageExtensions.Type.Extension)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec
                        GHC.LanguageExtensions.Type.Extension)
                   ExtMonad.$fReadExtension362
                   ExtMonad.$fReadExtension26) -}
ffd92c7a54a8aedac29059de92d2f469
  $fReadExtension250 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "FlexibleInstances"#) -}
4ef96e960226357cee92651a50af9824
  $fReadExtension251 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec
       GHC.LanguageExtensions.Type.Extension)
  {- Strictness: m,
     Unfolding: ((ExtMonad.$fReadExtension253,
                  ExtMonad.$fReadExtension252
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                      <GHC.LanguageExtensions.Type.Extension>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                 <GHC.LanguageExtensions.Type.Extension>_R))))) -}
04876de6b0c4ef60a1a67ef39e3a6295
  $fReadExtension252 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (GHC.LanguageExtensions.Type.Extension
        -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (ds :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta :: GHC.LanguageExtensions.Type.Extension
                           -> Text.ParserCombinators.ReadP.P b) ->
                 eta GHC.LanguageExtensions.Type.FlexibleContexts) -}
9ef0e1aaf7c61ceadd7288ea8fe02ac9
  $fReadExtension253 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "FlexibleContexts"#) -}
a8b62a6154b18e31e01c8cab8500f94b
  $fReadExtension254 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec
       GHC.LanguageExtensions.Type.Extension)
  {- Strictness: m,
     Unfolding: ((ExtMonad.$fReadExtension256,
                  ExtMonad.$fReadExtension255
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                      <GHC.LanguageExtensions.Type.Extension>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                 <GHC.LanguageExtensions.Type.Extension>_R))))) -}
72eadc25d3c4f1a93ef0474cf20c703b
  $fReadExtension255 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (GHC.LanguageExtensions.Type.Extension
        -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (ds :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta :: GHC.LanguageExtensions.Type.Extension
                           -> Text.ParserCombinators.ReadP.P b) ->
                 eta GHC.LanguageExtensions.Type.TypeSynonymInstances) -}
bfb8a9ab889d3dd5ea33520f2c2ab3b7
  $fReadExtension256 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   "TypeSynonymInstances"#) -}
316700a67e874fba0339459cc34b9809
  $fReadExtension257 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec
       GHC.LanguageExtensions.Type.Extension)
  {- Strictness: m,
     Unfolding: ((ExtMonad.$fReadExtension259,
                  ExtMonad.$fReadExtension258
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                      <GHC.LanguageExtensions.Type.Extension>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                 <GHC.LanguageExtensions.Type.Extension>_R))))) -}
8295f050d2e6737236178ec5a845db87
  $fReadExtension258 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (GHC.LanguageExtensions.Type.Extension
        -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (ds :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta :: GHC.LanguageExtensions.Type.Extension
                           -> Text.ParserCombinators.ReadP.P b) ->
                 eta GHC.LanguageExtensions.Type.DeriveLift) -}
e3fbace1af0833b2750ea5407ecd85f9
  $fReadExtension259 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "DeriveLift"#) -}
7e34f83186868fe13d09d1be1e33e4c7
  $fReadExtension26 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec
        GHC.LanguageExtensions.Type.Extension)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec
                        GHC.LanguageExtensions.Type.Extension)
                   ExtMonad.$fReadExtension359
                   ExtMonad.$fReadExtension27) -}
4e6d6c53d3bbde89e1a73b35d2b5c4b3
  $fReadExtension260 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec
       GHC.LanguageExtensions.Type.Extension)
  {- Strictness: m,
     Unfolding: ((ExtMonad.$fReadExtension262,
                  ExtMonad.$fReadExtension261
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                      <GHC.LanguageExtensions.Type.Extension>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                 <GHC.LanguageExtensions.Type.Extension>_R))))) -}
e307ad149fca9731e6e9a25ca1e014a8
  $fReadExtension261 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (GHC.LanguageExtensions.Type.Extension
        -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (ds :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta :: GHC.LanguageExtensions.Type.Extension
                           -> Text.ParserCombinators.ReadP.P b) ->
                 eta GHC.LanguageExtensions.Type.DeriveAnyClass) -}
0752e23d1074c7755981d5fb6ac7ef1a
  $fReadExtension262 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "DeriveAnyClass"#) -}
3918ed3072d6d9da6d7d6edbfdc53ac5
  $fReadExtension263 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec
       GHC.LanguageExtensions.Type.Extension)
  {- Strictness: m,
     Unfolding: ((ExtMonad.$fReadExtension265,
                  ExtMonad.$fReadExtension264
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                      <GHC.LanguageExtensions.Type.Extension>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                 <GHC.LanguageExtensions.Type.Extension>_R))))) -}
628f29943d973c7f672da2182549cefd
  $fReadExtension264 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (GHC.LanguageExtensions.Type.Extension
        -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (ds :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta :: GHC.LanguageExtensions.Type.Extension
                           -> Text.ParserCombinators.ReadP.P b) ->
                 eta GHC.LanguageExtensions.Type.DefaultSignatures) -}
ac2e78cb1ba413d2d7efb48cb18294b1
  $fReadExtension265 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "DefaultSignatures"#) -}
dd50306d84d4da8b0b15e92509d5be62
  $fReadExtension266 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec
       GHC.LanguageExtensions.Type.Extension)
  {- Strictness: m,
     Unfolding: ((ExtMonad.$fReadExtension268,
                  ExtMonad.$fReadExtension267
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                      <GHC.LanguageExtensions.Type.Extension>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                 <GHC.LanguageExtensions.Type.Extension>_R))))) -}
03b1361afdd7fd6c6a586db6bc703331
  $fReadExtension267 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (GHC.LanguageExtensions.Type.Extension
        -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (ds :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta :: GHC.LanguageExtensions.Type.Extension
                           -> Text.ParserCombinators.ReadP.P b) ->
                 eta GHC.LanguageExtensions.Type.DeriveGeneric) -}
1958896844c2e01ce827e14e97565744
  $fReadExtension268 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "DeriveGeneric"#) -}
6b857850a347bb76a793d51c1cfee759
  $fReadExtension269 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec
       GHC.LanguageExtensions.Type.Extension)
  {- Strictness: m,
     Unfolding: ((ExtMonad.$fReadExtension271,
                  ExtMonad.$fReadExtension270
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                      <GHC.LanguageExtensions.Type.Extension>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                 <GHC.LanguageExtensions.Type.Extension>_R))))) -}
0a931bfd145fe18d0a876afbb81c0310
  $fReadExtension27 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec
        GHC.LanguageExtensions.Type.Extension)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec
                        GHC.LanguageExtensions.Type.Extension)
                   ExtMonad.$fReadExtension356
                   ExtMonad.$fReadExtension28) -}
4675206c72c350628a04cd620eee182e
  $fReadExtension270 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (GHC.LanguageExtensions.Type.Extension
        -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (ds :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta :: GHC.LanguageExtensions.Type.Extension
                           -> Text.ParserCombinators.ReadP.P b) ->
                 eta GHC.LanguageExtensions.Type.DeriveFoldable) -}
a0870e4629f4c3b85af992e92fb90db4
  $fReadExtension271 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "DeriveFoldable"#) -}
3f74d82c4e9ba3e475f17e86e56be730
  $fReadExtension272 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec
       GHC.LanguageExtensions.Type.Extension)
  {- Strictness: m,
     Unfolding: ((ExtMonad.$fReadExtension274,
                  ExtMonad.$fReadExtension273
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                      <GHC.LanguageExtensions.Type.Extension>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                 <GHC.LanguageExtensions.Type.Extension>_R))))) -}
a01af3ee1bd81a1bf1b9e9804916c9fa
  $fReadExtension273 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (GHC.LanguageExtensions.Type.Extension
        -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (ds :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta :: GHC.LanguageExtensions.Type.Extension
                           -> Text.ParserCombinators.ReadP.P b) ->
                 eta GHC.LanguageExtensions.Type.DeriveTraversable) -}
46687d68b1c699003b60be2a4ca9b789
  $fReadExtension274 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "DeriveTraversable"#) -}
14be634390c7c54cba63a285a8f4403f
  $fReadExtension275 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec
       GHC.LanguageExtensions.Type.Extension)
  {- Strictness: m,
     Unfolding: ((ExtMonad.$fReadExtension277,
                  ExtMonad.$fReadExtension276
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                      <GHC.LanguageExtensions.Type.Extension>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                 <GHC.LanguageExtensions.Type.Extension>_R))))) -}
e6e90c8ff311c649b3986b33b57ad637
  $fReadExtension276 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (GHC.LanguageExtensions.Type.Extension
        -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (ds :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta :: GHC.LanguageExtensions.Type.Extension
                           -> Text.ParserCombinators.ReadP.P b) ->
                 eta GHC.LanguageExtensions.Type.DeriveFunctor) -}
5f20a6298c14f2e13c2b5e5d1e77eeed
  $fReadExtension277 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "DeriveFunctor"#) -}
ad4c8cf93b3e2722b620a46707f5070c
  $fReadExtension278 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec
       GHC.LanguageExtensions.Type.Extension)
  {- Strictness: m,
     Unfolding: ((ExtMonad.$fReadExtension280,
                  ExtMonad.$fReadExtension279
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                      <GHC.LanguageExtensions.Type.Extension>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                 <GHC.LanguageExtensions.Type.Extension>_R))))) -}
c29628d24165f17945002ee62ce3db76
  $fReadExtension279 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (GHC.LanguageExtensions.Type.Extension
        -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (ds :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta :: GHC.LanguageExtensions.Type.Extension
                           -> Text.ParserCombinators.ReadP.P b) ->
                 eta GHC.LanguageExtensions.Type.AutoDeriveTypeable) -}
0dbb09f5ba000cee7351fdc42b75f2c4
  $fReadExtension28 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec
        GHC.LanguageExtensions.Type.Extension)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec
                        GHC.LanguageExtensions.Type.Extension)
                   ExtMonad.$fReadExtension353
                   ExtMonad.$fReadExtension29) -}
33bdc24763f7e38dc953e2c034f64e21
  $fReadExtension280 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "AutoDeriveTypeable"#) -}
0bc45df4969fb98bd41dc9fcde2a4fe5
  $fReadExtension281 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec
       GHC.LanguageExtensions.Type.Extension)
  {- Strictness: m,
     Unfolding: ((ExtMonad.$fReadExtension283,
                  ExtMonad.$fReadExtension282
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                      <GHC.LanguageExtensions.Type.Extension>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                 <GHC.LanguageExtensions.Type.Extension>_R))))) -}
f9c225a773cecdb821041fc0017aff11
  $fReadExtension282 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (GHC.LanguageExtensions.Type.Extension
        -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (ds :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta :: GHC.LanguageExtensions.Type.Extension
                           -> Text.ParserCombinators.ReadP.P b) ->
                 eta GHC.LanguageExtensions.Type.DeriveDataTypeable) -}
57607aa012a342de3d4c8ed5cd7bea04
  $fReadExtension283 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "DeriveDataTypeable"#) -}
998fd711dbec415022bda3a1ee092d32
  $fReadExtension284 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec
       GHC.LanguageExtensions.Type.Extension)
  {- Strictness: m,
     Unfolding: ((ExtMonad.$fReadExtension286,
                  ExtMonad.$fReadExtension285
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                      <GHC.LanguageExtensions.Type.Extension>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                 <GHC.LanguageExtensions.Type.Extension>_R))))) -}
5952fbe63f05ba8cbac80839ed734220
  $fReadExtension285 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (GHC.LanguageExtensions.Type.Extension
        -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (ds :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta :: GHC.LanguageExtensions.Type.Extension
                           -> Text.ParserCombinators.ReadP.P b) ->
                 eta GHC.LanguageExtensions.Type.StandaloneDeriving) -}
240aee67e8a82bf29d7832a7a4ed74f9
  $fReadExtension286 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "StandaloneDeriving"#) -}
fc775023bf9edd8d6f76e0733c75b31d
  $fReadExtension287 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec
       GHC.LanguageExtensions.Type.Extension)
  {- Strictness: m,
     Unfolding: ((ExtMonad.$fReadExtension289,
                  ExtMonad.$fReadExtension288
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                      <GHC.LanguageExtensions.Type.Extension>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                 <GHC.LanguageExtensions.Type.Extension>_R))))) -}
58dc3cb08294800a5f6efea72fa6f5a1
  $fReadExtension288 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (GHC.LanguageExtensions.Type.Extension
        -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (ds :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta :: GHC.LanguageExtensions.Type.Extension
                           -> Text.ParserCombinators.ReadP.P b) ->
                 eta GHC.LanguageExtensions.Type.ApplicativeDo) -}
e848dc2b5c982aaa3a58d9c42f264fdf
  $fReadExtension289 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "ApplicativeDo"#) -}
896f05a5d4a1b38c3b0eba5254e97674
  $fReadExtension29 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec
        GHC.LanguageExtensions.Type.Extension)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec
                        GHC.LanguageExtensions.Type.Extension)
                   ExtMonad.$fReadExtension350
                   ExtMonad.$fReadExtension30) -}
6fa3947cdc7e9054ea9a80b7b6308dd4
  $fReadExtension290 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec
       GHC.LanguageExtensions.Type.Extension)
  {- Strictness: m,
     Unfolding: ((ExtMonad.$fReadExtension292,
                  ExtMonad.$fReadExtension291
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                      <GHC.LanguageExtensions.Type.Extension>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                 <GHC.LanguageExtensions.Type.Extension>_R))))) -}
3f824e03a778eda2a55191223e96067d
  $fReadExtension291 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (GHC.LanguageExtensions.Type.Extension
        -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (ds :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta :: GHC.LanguageExtensions.Type.Extension
                           -> Text.ParserCombinators.ReadP.P b) ->
                 eta GHC.LanguageExtensions.Type.InstanceSigs) -}
77dc01caa55c1a9048be6da78b79bb68
  $fReadExtension292 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "InstanceSigs"#) -}
572159ede38487075027d6fb2ad3cc80
  $fReadExtension293 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec
       GHC.LanguageExtensions.Type.Extension)
  {- Strictness: m,
     Unfolding: ((ExtMonad.$fReadExtension295,
                  ExtMonad.$fReadExtension294
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                      <GHC.LanguageExtensions.Type.Extension>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                 <GHC.LanguageExtensions.Type.Extension>_R))))) -}
8b4b641bdc67f505ae439e26be7a5ccf
  $fReadExtension294 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (GHC.LanguageExtensions.Type.Extension
        -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (ds :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta :: GHC.LanguageExtensions.Type.Extension
                           -> Text.ParserCombinators.ReadP.P b) ->
                 eta GHC.LanguageExtensions.Type.DataKinds) -}
d5e8b929f927233c1d772c0706436321
  $fReadExtension295 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "DataKinds"#) -}
db81fa7c5fad8591e925f6cd386c9f02
  $fReadExtension296 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec
       GHC.LanguageExtensions.Type.Extension)
  {- Strictness: m,
     Unfolding: ((ExtMonad.$fReadExtension298,
                  ExtMonad.$fReadExtension297
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                      <GHC.LanguageExtensions.Type.Extension>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                 <GHC.LanguageExtensions.Type.Extension>_R))))) -}
c7f2e140ce2797898f5cda9f564a8ab0
  $fReadExtension297 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (GHC.LanguageExtensions.Type.Extension
        -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (ds :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta :: GHC.LanguageExtensions.Type.Extension
                           -> Text.ParserCombinators.ReadP.P b) ->
                 eta GHC.LanguageExtensions.Type.PolyKinds) -}
a2d272281351a1c8e0e663caee80cb86
  $fReadExtension298 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "PolyKinds"#) -}
75f1ce4676ea112c8ad5ad067a0ce7ba
  $fReadExtension299 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec
       GHC.LanguageExtensions.Type.Extension)
  {- Strictness: m,
     Unfolding: ((ExtMonad.$fReadExtension301,
                  ExtMonad.$fReadExtension300
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                      <GHC.LanguageExtensions.Type.Extension>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                 <GHC.LanguageExtensions.Type.Extension>_R))))) -}
84261142a7bdb51613f7838c42fe1a7d
  $fReadExtension3 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> Text.ParserCombinators.ReadP.ReadP
         GHC.LanguageExtensions.Type.Extension
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (eta :: Text.ParserCombinators.ReadPrec.Prec) ->
                 GHC.Read.choose2
                   @ GHC.LanguageExtensions.Type.Extension
                   ExtMonad.$fReadExtension4
                   eta) -}
a663b57d0af06dbda20bf25b6cf0e5f0
  $fReadExtension30 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec
        GHC.LanguageExtensions.Type.Extension)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec
                        GHC.LanguageExtensions.Type.Extension)
                   ExtMonad.$fReadExtension347
                   ExtMonad.$fReadExtension31) -}
fab4950d7254cc86ff8fec7c6efbfef7
  $fReadExtension300 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (GHC.LanguageExtensions.Type.Extension
        -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (ds :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta :: GHC.LanguageExtensions.Type.Extension
                           -> Text.ParserCombinators.ReadP.P b) ->
                 eta GHC.LanguageExtensions.Type.ConstraintKinds) -}
e3bffa9814e080bed0422875edac1e3f
  $fReadExtension301 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "ConstraintKinds"#) -}
c37372c1b2b3027eb440f9690c37b75f
  $fReadExtension302 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec
       GHC.LanguageExtensions.Type.Extension)
  {- Strictness: m,
     Unfolding: ((ExtMonad.$fReadExtension304,
                  ExtMonad.$fReadExtension303
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                      <GHC.LanguageExtensions.Type.Extension>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                 <GHC.LanguageExtensions.Type.Extension>_R))))) -}
528a2ca8bb777e4d8eb6b0ae706f5dcf
  $fReadExtension303 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (GHC.LanguageExtensions.Type.Extension
        -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (ds :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta :: GHC.LanguageExtensions.Type.Extension
                           -> Text.ParserCombinators.ReadP.P b) ->
                 eta GHC.LanguageExtensions.Type.RebindableSyntax) -}
81aa73edd6d680bad664c9074881cb5c
  $fReadExtension304 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "RebindableSyntax"#) -}
f0313130047724928db9f19f0dee7ea0
  $fReadExtension305 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec
       GHC.LanguageExtensions.Type.Extension)
  {- Strictness: m,
     Unfolding: ((ExtMonad.$fReadExtension307,
                  ExtMonad.$fReadExtension306
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                      <GHC.LanguageExtensions.Type.Extension>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                 <GHC.LanguageExtensions.Type.Extension>_R))))) -}
a81ba6be6d1214d6fe48e454ccdc0791
  $fReadExtension306 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (GHC.LanguageExtensions.Type.Extension
        -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (ds :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta :: GHC.LanguageExtensions.Type.Extension
                           -> Text.ParserCombinators.ReadP.P b) ->
                 eta GHC.LanguageExtensions.Type.DoAndIfThenElse) -}
045fee2df95a218c53c6cada8a092cd9
  $fReadExtension307 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "DoAndIfThenElse"#) -}
d775dfa821f1531212bfdc2e68744d09
  $fReadExtension308 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec
       GHC.LanguageExtensions.Type.Extension)
  {- Strictness: m,
     Unfolding: ((ExtMonad.$fReadExtension310,
                  ExtMonad.$fReadExtension309
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                      <GHC.LanguageExtensions.Type.Extension>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                 <GHC.LanguageExtensions.Type.Extension>_R))))) -}
f472304ab5fa01ff504cd49a40b6737b
  $fReadExtension309 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (GHC.LanguageExtensions.Type.Extension
        -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (ds :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta :: GHC.LanguageExtensions.Type.Extension
                           -> Text.ParserCombinators.ReadP.P b) ->
                 eta GHC.LanguageExtensions.Type.NPlusKPatterns) -}
7dab15f7fb1e7c701c4184f7b62fbce5
  $fReadExtension31 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec
        GHC.LanguageExtensions.Type.Extension)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec
                        GHC.LanguageExtensions.Type.Extension)
                   ExtMonad.$fReadExtension344
                   ExtMonad.$fReadExtension32) -}
13b2b461064d2bce6ddd0ee129b843fd
  $fReadExtension310 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "NPlusKPatterns"#) -}
b069b678fd79e05667d5fbcf5f11d861
  $fReadExtension311 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec
       GHC.LanguageExtensions.Type.Extension)
  {- Strictness: m,
     Unfolding: ((ExtMonad.$fReadExtension313,
                  ExtMonad.$fReadExtension312
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                      <GHC.LanguageExtensions.Type.Extension>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                 <GHC.LanguageExtensions.Type.Extension>_R))))) -}
b7918063a0acadbe965788ae11673097
  $fReadExtension312 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (GHC.LanguageExtensions.Type.Extension
        -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (ds :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta :: GHC.LanguageExtensions.Type.Extension
                           -> Text.ParserCombinators.ReadP.P b) ->
                 eta GHC.LanguageExtensions.Type.GADTSyntax) -}
8cfc8b8281975acf7ccd0fe5e7eed905
  $fReadExtension313 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "GADTSyntax"#) -}
6cb15b7f1d1bb6bcbc56241ca0996476
  $fReadExtension314 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec
       GHC.LanguageExtensions.Type.Extension)
  {- Strictness: m,
     Unfolding: ((ExtMonad.$fReadExtension316,
                  ExtMonad.$fReadExtension315
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                      <GHC.LanguageExtensions.Type.Extension>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                 <GHC.LanguageExtensions.Type.Extension>_R))))) -}
27833c72d9fb9db9ecbaefe1155af5ef
  $fReadExtension315 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (GHC.LanguageExtensions.Type.Extension
        -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (ds :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta :: GHC.LanguageExtensions.Type.Extension
                           -> Text.ParserCombinators.ReadP.P b) ->
                 eta GHC.LanguageExtensions.Type.GADTs) -}
9239a994600be601839d1e6e5a0c9f64
  $fReadExtension316 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "GADTs"#) -}
22bf94ccbb06cb8b6cfbc80e16998ba0
  $fReadExtension317 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec
       GHC.LanguageExtensions.Type.Extension)
  {- Strictness: m,
     Unfolding: ((ExtMonad.$fReadExtension319,
                  ExtMonad.$fReadExtension318
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                      <GHC.LanguageExtensions.Type.Extension>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                 <GHC.LanguageExtensions.Type.Extension>_R))))) -}
78659cc62413c341757cd1f9c856e145
  $fReadExtension318 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (GHC.LanguageExtensions.Type.Extension
        -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (ds :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta :: GHC.LanguageExtensions.Type.Extension
                           -> Text.ParserCombinators.ReadP.P b) ->
                 eta GHC.LanguageExtensions.Type.ViewPatterns) -}
fa83e3f0260d60ae061bf9038146965a
  $fReadExtension319 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "ViewPatterns"#) -}
65fc1330c859d9abc3c4713524a0e4a1
  $fReadExtension32 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec
        GHC.LanguageExtensions.Type.Extension)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec
                        GHC.LanguageExtensions.Type.Extension)
                   ExtMonad.$fReadExtension341
                   ExtMonad.$fReadExtension33) -}
98067765c168612cc164dc3e10309485
  $fReadExtension320 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec
       GHC.LanguageExtensions.Type.Extension)
  {- Strictness: m,
     Unfolding: ((ExtMonad.$fReadExtension322,
                  ExtMonad.$fReadExtension321
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                      <GHC.LanguageExtensions.Type.Extension>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                 <GHC.LanguageExtensions.Type.Extension>_R))))) -}
e90bfa53fe05c769bcacb7156178b297
  $fReadExtension321 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (GHC.LanguageExtensions.Type.Extension
        -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (ds :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta :: GHC.LanguageExtensions.Type.Extension
                           -> Text.ParserCombinators.ReadP.P b) ->
                 eta GHC.LanguageExtensions.Type.RecordPuns) -}
032af9318f33ba44007591ebc9ade318
  $fReadExtension322 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "RecordPuns"#) -}
65857407ea7d8431c3ccff746e7ad80c
  $fReadExtension323 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec
       GHC.LanguageExtensions.Type.Extension)
  {- Strictness: m,
     Unfolding: ((ExtMonad.$fReadExtension325,
                  ExtMonad.$fReadExtension324
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                      <GHC.LanguageExtensions.Type.Extension>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                 <GHC.LanguageExtensions.Type.Extension>_R))))) -}
3517dad4a981664b0bce6d5ed3386e2f
  $fReadExtension324 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (GHC.LanguageExtensions.Type.Extension
        -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (ds :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta :: GHC.LanguageExtensions.Type.Extension
                           -> Text.ParserCombinators.ReadP.P b) ->
                 eta GHC.LanguageExtensions.Type.RecordWildCards) -}
b66890b0061d0efabfbfbb8a95ef610b
  $fReadExtension325 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "RecordWildCards"#) -}
d4f97a123b0e007eb5dc0e52785135e3
  $fReadExtension326 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec
       GHC.LanguageExtensions.Type.Extension)
  {- Strictness: m,
     Unfolding: ((ExtMonad.$fReadExtension328,
                  ExtMonad.$fReadExtension327
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                      <GHC.LanguageExtensions.Type.Extension>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                 <GHC.LanguageExtensions.Type.Extension>_R))))) -}
e9c0dba5fddcd618b8661047547eb926
  $fReadExtension327 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (GHC.LanguageExtensions.Type.Extension
        -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (ds :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta :: GHC.LanguageExtensions.Type.Extension
                           -> Text.ParserCombinators.ReadP.P b) ->
                 eta GHC.LanguageExtensions.Type.DisambiguateRecordFields) -}
6154308353fe9085c9f33b8e39d13954
  $fReadExtension328 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   "DisambiguateRecordFields"#) -}
c0e9ccd43528430f12e5c178bfb42d5b
  $fReadExtension329 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec
       GHC.LanguageExtensions.Type.Extension)
  {- Strictness: m,
     Unfolding: ((ExtMonad.$fReadExtension331,
                  ExtMonad.$fReadExtension330
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                      <GHC.LanguageExtensions.Type.Extension>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                 <GHC.LanguageExtensions.Type.Extension>_R))))) -}
2bc746848b1093aa005f214431ed788d
  $fReadExtension33 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec
        GHC.LanguageExtensions.Type.Extension)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec
                        GHC.LanguageExtensions.Type.Extension)
                   ExtMonad.$fReadExtension338
                   ExtMonad.$fReadExtension34) -}
8dc7112d70ba957ecb1d2a3b6fa73818
  $fReadExtension330 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (GHC.LanguageExtensions.Type.Extension
        -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (ds :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta :: GHC.LanguageExtensions.Type.Extension
                           -> Text.ParserCombinators.ReadP.P b) ->
                 eta GHC.LanguageExtensions.Type.NumDecimals) -}
b5ce2f1fd9fb3e8b4ea13813620b2ef0
  $fReadExtension331 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "NumDecimals"#) -}
08684d03cecb5488dfedfce71dea19f2
  $fReadExtension332 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec
       GHC.LanguageExtensions.Type.Extension)
  {- Strictness: m,
     Unfolding: ((ExtMonad.$fReadExtension334,
                  ExtMonad.$fReadExtension333
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                      <GHC.LanguageExtensions.Type.Extension>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                 <GHC.LanguageExtensions.Type.Extension>_R))))) -}
b0fb6c77f2bc800886cd599a759a07c4
  $fReadExtension333 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (GHC.LanguageExtensions.Type.Extension
        -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (ds :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta :: GHC.LanguageExtensions.Type.Extension
                           -> Text.ParserCombinators.ReadP.P b) ->
                 eta GHC.LanguageExtensions.Type.OverloadedLists) -}
730f33c0bb87efe2eeca3597f62f91f9
  $fReadExtension334 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "OverloadedLists"#) -}
6a96bcf3f4628256b9ccc379679ab22d
  $fReadExtension335 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec
       GHC.LanguageExtensions.Type.Extension)
  {- Strictness: m,
     Unfolding: ((ExtMonad.$fReadExtension337,
                  ExtMonad.$fReadExtension336
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                      <GHC.LanguageExtensions.Type.Extension>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                 <GHC.LanguageExtensions.Type.Extension>_R))))) -}
4035a17daec6d892e936dcfd3504c566
  $fReadExtension336 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (GHC.LanguageExtensions.Type.Extension
        -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (ds :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta :: GHC.LanguageExtensions.Type.Extension
                           -> Text.ParserCombinators.ReadP.P b) ->
                 eta GHC.LanguageExtensions.Type.OverloadedStrings) -}
29c486e1fe8b228238a5734420af12a1
  $fReadExtension337 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "OverloadedStrings"#) -}
242f0dc726d35d883f09f4eedabe3802
  $fReadExtension338 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec
       GHC.LanguageExtensions.Type.Extension)
  {- Strictness: m,
     Unfolding: ((ExtMonad.$fReadExtension340,
                  ExtMonad.$fReadExtension339
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                      <GHC.LanguageExtensions.Type.Extension>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                 <GHC.LanguageExtensions.Type.Extension>_R))))) -}
4a9dbf0fe1f8b17f359fa838d0c376f6
  $fReadExtension339 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (GHC.LanguageExtensions.Type.Extension
        -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (ds :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta :: GHC.LanguageExtensions.Type.Extension
                           -> Text.ParserCombinators.ReadP.P b) ->
                 eta GHC.LanguageExtensions.Type.TypeInType) -}
36deb8164d9d8311a75e242af62da8e2
  $fReadExtension34 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec
        GHC.LanguageExtensions.Type.Extension)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec
                        GHC.LanguageExtensions.Type.Extension)
                   ExtMonad.$fReadExtension335
                   ExtMonad.$fReadExtension35) -}
5751df4cfe94dbe15e2df032dc5a036d
  $fReadExtension340 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "TypeInType"#) -}
5aabd3341519207ac3c66c76ac7183e0
  $fReadExtension341 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec
       GHC.LanguageExtensions.Type.Extension)
  {- Strictness: m,
     Unfolding: ((ExtMonad.$fReadExtension343,
                  ExtMonad.$fReadExtension342
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                      <GHC.LanguageExtensions.Type.Extension>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                 <GHC.LanguageExtensions.Type.Extension>_R))))) -}
72fbc0dc567ec7b2f3c5409390844934
  $fReadExtension342 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (GHC.LanguageExtensions.Type.Extension
        -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (ds :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta :: GHC.LanguageExtensions.Type.Extension
                           -> Text.ParserCombinators.ReadP.P b) ->
                 eta GHC.LanguageExtensions.Type.TypeFamilyDependencies) -}
d2e0ec4b0f3bc086f1fc8215305c2127
  $fReadExtension343 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   "TypeFamilyDependencies"#) -}
8b60ab6a88156ae5af5dd9d129f19274
  $fReadExtension344 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec
       GHC.LanguageExtensions.Type.Extension)
  {- Strictness: m,
     Unfolding: ((ExtMonad.$fReadExtension346,
                  ExtMonad.$fReadExtension345
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                      <GHC.LanguageExtensions.Type.Extension>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                 <GHC.LanguageExtensions.Type.Extension>_R))))) -}
0ea58ba92881126d1f8bb49a5a67d61f
  $fReadExtension345 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (GHC.LanguageExtensions.Type.Extension
        -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (ds :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta :: GHC.LanguageExtensions.Type.Extension
                           -> Text.ParserCombinators.ReadP.P b) ->
                 eta GHC.LanguageExtensions.Type.TypeFamilies) -}
2ef3d5bdd7960f4ef4f8a0d3cada55c1
  $fReadExtension346 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "TypeFamilies"#) -}
0bcfa12aa910a9886ba239f8c0586636
  $fReadExtension347 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec
       GHC.LanguageExtensions.Type.Extension)
  {- Strictness: m,
     Unfolding: ((ExtMonad.$fReadExtension349,
                  ExtMonad.$fReadExtension348
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                      <GHC.LanguageExtensions.Type.Extension>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                 <GHC.LanguageExtensions.Type.Extension>_R))))) -}
ea366961d6f7b296df647db91b5b52a9
  $fReadExtension348 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (GHC.LanguageExtensions.Type.Extension
        -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (ds :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta :: GHC.LanguageExtensions.Type.Extension
                           -> Text.ParserCombinators.ReadP.P b) ->
                 eta GHC.LanguageExtensions.Type.BangPatterns) -}
1eae3d28a5a09cbb189a62197f0c61dd
  $fReadExtension349 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "BangPatterns"#) -}
52bb006786313bb942225d42843f776f
  $fReadExtension35 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec
        GHC.LanguageExtensions.Type.Extension)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec
                        GHC.LanguageExtensions.Type.Extension)
                   ExtMonad.$fReadExtension332
                   ExtMonad.$fReadExtension36) -}
9a8ad3cb6c4ad524f960bf86cc48208e
  $fReadExtension350 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec
       GHC.LanguageExtensions.Type.Extension)
  {- Strictness: m,
     Unfolding: ((ExtMonad.$fReadExtension352,
                  ExtMonad.$fReadExtension351
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                      <GHC.LanguageExtensions.Type.Extension>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                 <GHC.LanguageExtensions.Type.Extension>_R))))) -}
6723e250e2e7bc9ebe48a62bfc61b1a7
  $fReadExtension351 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (GHC.LanguageExtensions.Type.Extension
        -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (ds :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta :: GHC.LanguageExtensions.Type.Extension
                           -> Text.ParserCombinators.ReadP.P b) ->
                 eta GHC.LanguageExtensions.Type.UnboxedTuples) -}
86e8ef246f9b9307df807a491743c605
  $fReadExtension352 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "UnboxedTuples"#) -}
1b76860ad4cbfd246449114164102855
  $fReadExtension353 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec
       GHC.LanguageExtensions.Type.Extension)
  {- Strictness: m,
     Unfolding: ((ExtMonad.$fReadExtension355,
                  ExtMonad.$fReadExtension354
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                      <GHC.LanguageExtensions.Type.Extension>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                 <GHC.LanguageExtensions.Type.Extension>_R))))) -}
89719ad4ca47489409f07080cef8e50a
  $fReadExtension354 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (GHC.LanguageExtensions.Type.Extension
        -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (ds :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta :: GHC.LanguageExtensions.Type.Extension
                           -> Text.ParserCombinators.ReadP.P b) ->
                 eta GHC.LanguageExtensions.Type.AllowAmbiguousTypes) -}
36e6243327722c03b4cc968fb08f9051
  $fReadExtension355 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   "AllowAmbiguousTypes"#) -}
20c6a59341f36a724ca31916cbe87807
  $fReadExtension356 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec
       GHC.LanguageExtensions.Type.Extension)
  {- Strictness: m,
     Unfolding: ((ExtMonad.$fReadExtension358,
                  ExtMonad.$fReadExtension357
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                      <GHC.LanguageExtensions.Type.Extension>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                 <GHC.LanguageExtensions.Type.Extension>_R))))) -}
29978ae75a89c2a590aca5b26852113e
  $fReadExtension357 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (GHC.LanguageExtensions.Type.Extension
        -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (ds :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta :: GHC.LanguageExtensions.Type.Extension
                           -> Text.ParserCombinators.ReadP.P b) ->
                 eta GHC.LanguageExtensions.Type.ScopedTypeVariables) -}
3d751a5f858dc37195799b1a3b05fd4c
  $fReadExtension358 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   "ScopedTypeVariables"#) -}
faf3d60f7d698c6de7bdaa77284126dc
  $fReadExtension359 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec
       GHC.LanguageExtensions.Type.Extension)
  {- Strictness: m,
     Unfolding: ((ExtMonad.$fReadExtension361,
                  ExtMonad.$fReadExtension360
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                      <GHC.LanguageExtensions.Type.Extension>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                 <GHC.LanguageExtensions.Type.Extension>_R))))) -}
c31eb8635dc345d429bfee17178ed6a5
  $fReadExtension36 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec
        GHC.LanguageExtensions.Type.Extension)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec
                        GHC.LanguageExtensions.Type.Extension)
                   ExtMonad.$fReadExtension329
                   ExtMonad.$fReadExtension37) -}
384c3f2a41ed79c4f7ffeff2dc393454
  $fReadExtension360 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (GHC.LanguageExtensions.Type.Extension
        -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (ds :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta :: GHC.LanguageExtensions.Type.Extension
                           -> Text.ParserCombinators.ReadP.P b) ->
                 eta GHC.LanguageExtensions.Type.ImplicitPrelude) -}
39f476691cbda002cd3aa1508f2c6b98
  $fReadExtension361 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "ImplicitPrelude"#) -}
562f1156c8524570f08fdf695d40b4ff
  $fReadExtension362 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec
       GHC.LanguageExtensions.Type.Extension)
  {- Strictness: m,
     Unfolding: ((ExtMonad.$fReadExtension364,
                  ExtMonad.$fReadExtension363
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                      <GHC.LanguageExtensions.Type.Extension>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                 <GHC.LanguageExtensions.Type.Extension>_R))))) -}
fd1dcd6c645ef270b00c32b834a91fed
  $fReadExtension363 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (GHC.LanguageExtensions.Type.Extension
        -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (ds :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta :: GHC.LanguageExtensions.Type.Extension
                           -> Text.ParserCombinators.ReadP.P b) ->
                 eta GHC.LanguageExtensions.Type.ImplicitParams) -}
f7f9e555012fd941d109a429476f3990
  $fReadExtension364 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "ImplicitParams"#) -}
2c84dbc43586482f3c0ec67ce96251d3
  $fReadExtension365 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec
       GHC.LanguageExtensions.Type.Extension)
  {- Strictness: m,
     Unfolding: ((ExtMonad.$fReadExtension367,
                  ExtMonad.$fReadExtension366
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                      <GHC.LanguageExtensions.Type.Extension>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                 <GHC.LanguageExtensions.Type.Extension>_R))))) -}
2ff9ff6a011ee15412495867ff592252
  $fReadExtension366 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (GHC.LanguageExtensions.Type.Extension
        -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (ds :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta :: GHC.LanguageExtensions.Type.Extension
                           -> Text.ParserCombinators.ReadP.P b) ->
                 eta GHC.LanguageExtensions.Type.QuasiQuotes) -}
72baf9284e82e383f7b6d64e15dedb57
  $fReadExtension367 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "QuasiQuotes"#) -}
c4319140b6df93cb7eed71631da03a8c
  $fReadExtension368 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec
       GHC.LanguageExtensions.Type.Extension)
  {- Strictness: m,
     Unfolding: ((ExtMonad.$fReadExtension370,
                  ExtMonad.$fReadExtension369
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                      <GHC.LanguageExtensions.Type.Extension>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                 <GHC.LanguageExtensions.Type.Extension>_R))))) -}
4aa88ebdf1547c0ce9898df7e7be95c7
  $fReadExtension369 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (GHC.LanguageExtensions.Type.Extension
        -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (ds :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta :: GHC.LanguageExtensions.Type.Extension
                           -> Text.ParserCombinators.ReadP.P b) ->
                 eta GHC.LanguageExtensions.Type.TemplateHaskellQuotes) -}
e2dd9327a1e0c262d7ef202a3054187b
  $fReadExtension37 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec
        GHC.LanguageExtensions.Type.Extension)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec
                        GHC.LanguageExtensions.Type.Extension)
                   ExtMonad.$fReadExtension326
                   ExtMonad.$fReadExtension38) -}
7238177247354c35dca7e1efd613195f
  $fReadExtension370 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   "TemplateHaskellQuotes"#) -}
9ac8362e746be5899a674206ddfc2961
  $fReadExtension371 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec
       GHC.LanguageExtensions.Type.Extension)
  {- Strictness: m,
     Unfolding: ((ExtMonad.$fReadExtension373,
                  ExtMonad.$fReadExtension372
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                      <GHC.LanguageExtensions.Type.Extension>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                 <GHC.LanguageExtensions.Type.Extension>_R))))) -}
b1ad7511d18f1556e4da6122417cf3a6
  $fReadExtension372 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (GHC.LanguageExtensions.Type.Extension
        -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (ds :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta :: GHC.LanguageExtensions.Type.Extension
                           -> Text.ParserCombinators.ReadP.P b) ->
                 eta GHC.LanguageExtensions.Type.TemplateHaskell) -}
bca9a30e0b67f8bbacc3a649ad512fec
  $fReadExtension373 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "TemplateHaskell"#) -}
404f0badb632f5de59716469ff3c108c
  $fReadExtension374 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec
       GHC.LanguageExtensions.Type.Extension)
  {- Strictness: m,
     Unfolding: ((ExtMonad.$fReadExtension376,
                  ExtMonad.$fReadExtension375
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                      <GHC.LanguageExtensions.Type.Extension>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                 <GHC.LanguageExtensions.Type.Extension>_R))))) -}
d8c7d629817e6e7c65a79ec512d6b8f5
  $fReadExtension375 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (GHC.LanguageExtensions.Type.Extension
        -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (ds :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta :: GHC.LanguageExtensions.Type.Extension
                           -> Text.ParserCombinators.ReadP.P b) ->
                 eta GHC.LanguageExtensions.Type.Arrows) -}
102679c0b5d33e4514add7171a459bbd
  $fReadExtension376 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Arrows"#) -}
0c5be425559c7fdb7545610d1f89c0a1
  $fReadExtension377 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec
       GHC.LanguageExtensions.Type.Extension)
  {- Strictness: m,
     Unfolding: ((ExtMonad.$fReadExtension379,
                  ExtMonad.$fReadExtension378
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                      <GHC.LanguageExtensions.Type.Extension>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                 <GHC.LanguageExtensions.Type.Extension>_R))))) -}
7a8dc7a182e36c17d4e68c42ff5019a6
  $fReadExtension378 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (GHC.LanguageExtensions.Type.Extension
        -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (ds :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta :: GHC.LanguageExtensions.Type.Extension
                           -> Text.ParserCombinators.ReadP.P b) ->
                 eta GHC.LanguageExtensions.Type.ParallelArrays) -}
f0b19830858b822838371c0485d4bf6b
  $fReadExtension379 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "ParallelArrays"#) -}
5e125fd7a39a89fd348fff4a08c53608
  $fReadExtension38 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec
        GHC.LanguageExtensions.Type.Extension)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec
                        GHC.LanguageExtensions.Type.Extension)
                   ExtMonad.$fReadExtension323
                   ExtMonad.$fReadExtension39) -}
40f828ea47c17defee5a353fe150958d
  $fReadExtension380 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec
       GHC.LanguageExtensions.Type.Extension)
  {- Strictness: m,
     Unfolding: ((ExtMonad.$fReadExtension382,
                  ExtMonad.$fReadExtension381
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                      <GHC.LanguageExtensions.Type.Extension>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                 <GHC.LanguageExtensions.Type.Extension>_R))))) -}
716aa91ec6c4567d66d8393516622b8b
  $fReadExtension381 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (GHC.LanguageExtensions.Type.Extension
        -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (ds :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta :: GHC.LanguageExtensions.Type.Extension
                           -> Text.ParserCombinators.ReadP.P b) ->
                 eta GHC.LanguageExtensions.Type.JavaScriptFFI) -}
3531c3d16e00c31a2b0f4ef4ae932bdb
  $fReadExtension382 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "JavaScriptFFI"#) -}
ac5ff0b25a4227deb7bf89e1925f2e78
  $fReadExtension383 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec
       GHC.LanguageExtensions.Type.Extension)
  {- Strictness: m,
     Unfolding: ((ExtMonad.$fReadExtension385,
                  ExtMonad.$fReadExtension384
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                      <GHC.LanguageExtensions.Type.Extension>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                 <GHC.LanguageExtensions.Type.Extension>_R))))) -}
c6990846262afdbf65c712556b052e49
  $fReadExtension384 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (GHC.LanguageExtensions.Type.Extension
        -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (ds :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta :: GHC.LanguageExtensions.Type.Extension
                           -> Text.ParserCombinators.ReadP.P b) ->
                 eta GHC.LanguageExtensions.Type.GHCForeignImportPrim) -}
2f61fbc4d657a581631e7d7d4a614911
  $fReadExtension385 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   "GHCForeignImportPrim"#) -}
296bc6aa2d54bb57232fd313e2276641
  $fReadExtension386 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec
       GHC.LanguageExtensions.Type.Extension)
  {- Strictness: m,
     Unfolding: ((ExtMonad.$fReadExtension388,
                  ExtMonad.$fReadExtension387
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                      <GHC.LanguageExtensions.Type.Extension>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                 <GHC.LanguageExtensions.Type.Extension>_R))))) -}
c7ab49d1429b9e11099203cdfa823a6c
  $fReadExtension387 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (GHC.LanguageExtensions.Type.Extension
        -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (ds :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta :: GHC.LanguageExtensions.Type.Extension
                           -> Text.ParserCombinators.ReadP.P b) ->
                 eta GHC.LanguageExtensions.Type.CApiFFI) -}
7c2f6f429e825735bc450d7dc471bf16
  $fReadExtension388 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "CApiFFI"#) -}
23295fe4274eb30ca4f23dc9e538989c
  $fReadExtension389 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec
       GHC.LanguageExtensions.Type.Extension)
  {- Strictness: m,
     Unfolding: ((ExtMonad.$fReadExtension391,
                  ExtMonad.$fReadExtension390
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                      <GHC.LanguageExtensions.Type.Extension>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                 <GHC.LanguageExtensions.Type.Extension>_R))))) -}
86f3a7c974cf976f9aafda4ca554d215
  $fReadExtension39 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec
        GHC.LanguageExtensions.Type.Extension)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec
                        GHC.LanguageExtensions.Type.Extension)
                   ExtMonad.$fReadExtension320
                   ExtMonad.$fReadExtension40) -}
6e9f63162d794be124130b0938ffb5d4
  $fReadExtension390 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (GHC.LanguageExtensions.Type.Extension
        -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (ds :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta :: GHC.LanguageExtensions.Type.Extension
                           -> Text.ParserCombinators.ReadP.P b) ->
                 eta GHC.LanguageExtensions.Type.InterruptibleFFI) -}
5bffd935a841736946d08699ecc7883b
  $fReadExtension391 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "InterruptibleFFI"#) -}
535905be342b91b9fb40d873d525fab4
  $fReadExtension392 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec
       GHC.LanguageExtensions.Type.Extension)
  {- Strictness: m,
     Unfolding: ((ExtMonad.$fReadExtension394,
                  ExtMonad.$fReadExtension393
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                      <GHC.LanguageExtensions.Type.Extension>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                 <GHC.LanguageExtensions.Type.Extension>_R))))) -}
01816cbbb32065a27e5dd492dcb345bc
  $fReadExtension393 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (GHC.LanguageExtensions.Type.Extension
        -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (ds :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta :: GHC.LanguageExtensions.Type.Extension
                           -> Text.ParserCombinators.ReadP.P b) ->
                 eta GHC.LanguageExtensions.Type.UnliftedFFITypes) -}
8604aefcc2b761c27ec27b385c606407
  $fReadExtension394 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "UnliftedFFITypes"#) -}
8fcf8c8ca685748daae6543b093cf6bb
  $fReadExtension395 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec
       GHC.LanguageExtensions.Type.Extension)
  {- Strictness: m,
     Unfolding: ((ExtMonad.$fReadExtension397,
                  ExtMonad.$fReadExtension396
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                      <GHC.LanguageExtensions.Type.Extension>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                 <GHC.LanguageExtensions.Type.Extension>_R))))) -}
5db2202327024c418990dadd75bf9366
  $fReadExtension396 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (GHC.LanguageExtensions.Type.Extension
        -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (ds :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta :: GHC.LanguageExtensions.Type.Extension
                           -> Text.ParserCombinators.ReadP.P b) ->
                 eta GHC.LanguageExtensions.Type.ForeignFunctionInterface) -}
0630ba6a3241049dd0370cc01412ce47
  $fReadExtension397 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   "ForeignFunctionInterface"#) -}
a7fca127e6116a764bb0bb28d04a01af
  $fReadExtension398 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec
       GHC.LanguageExtensions.Type.Extension)
  {- Strictness: m,
     Unfolding: ((ExtMonad.$fReadExtension400,
                  ExtMonad.$fReadExtension399
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                      <GHC.LanguageExtensions.Type.Extension>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                 <GHC.LanguageExtensions.Type.Extension>_R))))) -}
26f392f4dacef1a670a7f2aeb3929050
  $fReadExtension399 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (GHC.LanguageExtensions.Type.Extension
        -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (ds :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta :: GHC.LanguageExtensions.Type.Extension
                           -> Text.ParserCombinators.ReadP.P b) ->
                 eta GHC.LanguageExtensions.Type.ExtendedDefaultRules) -}
c189822f6145227118506b797cd27195
  $fReadExtension4 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec
        GHC.LanguageExtensions.Type.Extension)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec
                        GHC.LanguageExtensions.Type.Extension)
                   ExtMonad.$fReadExtension425
                   ExtMonad.$fReadExtension5) -}
88bb871ca601183bf2353a23eb1b1dc3
  $fReadExtension40 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec
        GHC.LanguageExtensions.Type.Extension)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec
                        GHC.LanguageExtensions.Type.Extension)
                   ExtMonad.$fReadExtension317
                   ExtMonad.$fReadExtension41) -}
75140f1f274366c2b3a873512794160c
  $fReadExtension400 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   "ExtendedDefaultRules"#) -}
24c0d493bec728a0722c67c136495bc3
  $fReadExtension401 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec
       GHC.LanguageExtensions.Type.Extension)
  {- Strictness: m,
     Unfolding: ((ExtMonad.$fReadExtension403,
                  ExtMonad.$fReadExtension402
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                      <GHC.LanguageExtensions.Type.Extension>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                 <GHC.LanguageExtensions.Type.Extension>_R))))) -}
4e6bc4f3e1e2d3b775c1e915ce9c585c
  $fReadExtension402 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (GHC.LanguageExtensions.Type.Extension
        -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (ds :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta :: GHC.LanguageExtensions.Type.Extension
                           -> Text.ParserCombinators.ReadP.P b) ->
                 eta GHC.LanguageExtensions.Type.RelaxedPolyRec) -}
4ea7c84bea88662c96607904b65dc1b4
  $fReadExtension403 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "RelaxedPolyRec"#) -}
8891dbad1b6bd3aa0d26c8cb4c2891a5
  $fReadExtension404 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec
       GHC.LanguageExtensions.Type.Extension)
  {- Strictness: m,
     Unfolding: ((ExtMonad.$fReadExtension406,
                  ExtMonad.$fReadExtension405
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                      <GHC.LanguageExtensions.Type.Extension>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                 <GHC.LanguageExtensions.Type.Extension>_R))))) -}
0cbee69d16f7d73971b78f2d79a436c8
  $fReadExtension405 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (GHC.LanguageExtensions.Type.Extension
        -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (ds :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta :: GHC.LanguageExtensions.Type.Extension
                           -> Text.ParserCombinators.ReadP.P b) ->
                 eta GHC.LanguageExtensions.Type.MonoLocalBinds) -}
a32c1897b25417b49a612b33c14c9242
  $fReadExtension406 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "MonoLocalBinds"#) -}
b872c81269fa98ae337ad9dab9aebf61
  $fReadExtension407 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec
       GHC.LanguageExtensions.Type.Extension)
  {- Strictness: m,
     Unfolding: ((ExtMonad.$fReadExtension409,
                  ExtMonad.$fReadExtension408
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                      <GHC.LanguageExtensions.Type.Extension>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                 <GHC.LanguageExtensions.Type.Extension>_R))))) -}
50f0ed921365630d6dc08beb6aff031b
  $fReadExtension408 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (GHC.LanguageExtensions.Type.Extension
        -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (ds :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta :: GHC.LanguageExtensions.Type.Extension
                           -> Text.ParserCombinators.ReadP.P b) ->
                 eta GHC.LanguageExtensions.Type.MonoPatBinds) -}
cf16238eea217ea444a01d14baaa7ea1
  $fReadExtension409 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "MonoPatBinds"#) -}
f5274bd48b438b53a51979897194e077
  $fReadExtension41 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec
        GHC.LanguageExtensions.Type.Extension)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec
                        GHC.LanguageExtensions.Type.Extension)
                   ExtMonad.$fReadExtension314
                   ExtMonad.$fReadExtension42) -}
be92be692883d230ef863c4f522c6def
  $fReadExtension410 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec
       GHC.LanguageExtensions.Type.Extension)
  {- Strictness: m,
     Unfolding: ((ExtMonad.$fReadExtension412,
                  ExtMonad.$fReadExtension411
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                      <GHC.LanguageExtensions.Type.Extension>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                 <GHC.LanguageExtensions.Type.Extension>_R))))) -}
f7b5ef180d6f446d2d7cd61179381cc0
  $fReadExtension411 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (GHC.LanguageExtensions.Type.Extension
        -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (ds :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta :: GHC.LanguageExtensions.Type.Extension
                           -> Text.ParserCombinators.ReadP.P b) ->
                 eta GHC.LanguageExtensions.Type.MonomorphismRestriction) -}
befe8f435339f118ce0f124e670bfb21
  $fReadExtension412 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   "MonomorphismRestriction"#) -}
10ee95c4172f947a66999a860fcb66fc
  $fReadExtension413 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec
       GHC.LanguageExtensions.Type.Extension)
  {- Strictness: m,
     Unfolding: ((ExtMonad.$fReadExtension415,
                  ExtMonad.$fReadExtension414
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                      <GHC.LanguageExtensions.Type.Extension>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                 <GHC.LanguageExtensions.Type.Extension>_R))))) -}
488573f36ffde05728322ecb9987663e
  $fReadExtension414 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (GHC.LanguageExtensions.Type.Extension
        -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (ds :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta :: GHC.LanguageExtensions.Type.Extension
                           -> Text.ParserCombinators.ReadP.P b) ->
                 eta GHC.LanguageExtensions.Type.UndecidableSuperClasses) -}
25da1f081b2f157eaebe1fb8c531a421
  $fReadExtension415 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   "UndecidableSuperClasses"#) -}
1e9653ed466a85cdc5233b60bc3248d9
  $fReadExtension416 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec
       GHC.LanguageExtensions.Type.Extension)
  {- Strictness: m,
     Unfolding: ((ExtMonad.$fReadExtension418,
                  ExtMonad.$fReadExtension417
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                      <GHC.LanguageExtensions.Type.Extension>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                 <GHC.LanguageExtensions.Type.Extension>_R))))) -}
232e5e5fbb02263f2a70b7a2bfcbaacf
  $fReadExtension417 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (GHC.LanguageExtensions.Type.Extension
        -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (ds :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta :: GHC.LanguageExtensions.Type.Extension
                           -> Text.ParserCombinators.ReadP.P b) ->
                 eta GHC.LanguageExtensions.Type.IncoherentInstances) -}
385fa70746ac50db6ea98b7ce343eaf6
  $fReadExtension418 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   "IncoherentInstances"#) -}
7f0d8e5dee56145a8479fa1602e7a9cb
  $fReadExtension419 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec
       GHC.LanguageExtensions.Type.Extension)
  {- Strictness: m,
     Unfolding: ((ExtMonad.$fReadExtension421,
                  ExtMonad.$fReadExtension420
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                      <GHC.LanguageExtensions.Type.Extension>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                 <GHC.LanguageExtensions.Type.Extension>_R))))) -}
c1a6a9072d4bbcd875b760421c640052
  $fReadExtension42 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec
        GHC.LanguageExtensions.Type.Extension)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec
                        GHC.LanguageExtensions.Type.Extension)
                   ExtMonad.$fReadExtension311
                   ExtMonad.$fReadExtension43) -}
b5d87b9d5feb01b62fcfe70bdbd132f5
  $fReadExtension420 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (GHC.LanguageExtensions.Type.Extension
        -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (ds :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta :: GHC.LanguageExtensions.Type.Extension
                           -> Text.ParserCombinators.ReadP.P b) ->
                 eta GHC.LanguageExtensions.Type.UndecidableInstances) -}
362fb8abe2fa75ac10f63fc37826cb26
  $fReadExtension421 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   "UndecidableInstances"#) -}
814542d5c708a43bea62c16aee5eeca7
  $fReadExtension422 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec
       GHC.LanguageExtensions.Type.Extension)
  {- Strictness: m,
     Unfolding: ((ExtMonad.$fReadExtension424,
                  ExtMonad.$fReadExtension423
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                      <GHC.LanguageExtensions.Type.Extension>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                 <GHC.LanguageExtensions.Type.Extension>_R))))) -}
6cc8e5ccb60624c85de60754d060ace6
  $fReadExtension423 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (GHC.LanguageExtensions.Type.Extension
        -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (ds :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta :: GHC.LanguageExtensions.Type.Extension
                           -> Text.ParserCombinators.ReadP.P b) ->
                 eta GHC.LanguageExtensions.Type.OverlappingInstances) -}
23f14e903c18e46337714fd933b5c4fe
  $fReadExtension424 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   "OverlappingInstances"#) -}
3e6f412e055d6fcb3d6747fd277257cd
  $fReadExtension425 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec
       GHC.LanguageExtensions.Type.Extension)
  {- Strictness: m,
     Unfolding: ((ExtMonad.$fReadExtension427,
                  ExtMonad.$fReadExtension426
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                      <GHC.LanguageExtensions.Type.Extension>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                 <GHC.LanguageExtensions.Type.Extension>_R))))) -}
a04c538c3ccf0c734fb6206dca0d1ddf
  $fReadExtension426 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (GHC.LanguageExtensions.Type.Extension
        -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (ds :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta :: GHC.LanguageExtensions.Type.Extension
                           -> Text.ParserCombinators.ReadP.P b) ->
                 eta GHC.LanguageExtensions.Type.Cpp) -}
25fe5f2f2dc8173e9522904833b9f258
  $fReadExtension427 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Cpp"#) -}
e233ddbe9086be90668393581a5b95b1
  $fReadExtension428 ::
    Text.ParserCombinators.ReadP.P
      [GHC.LanguageExtensions.Type.Extension]
  {- Unfolding: (GHC.Read.list1
                   @ GHC.LanguageExtensions.Type.Extension
                   ExtMonad.$fReadExtension2
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                             <GHC.LanguageExtensions.Type.Extension>_R))
                   GHC.Read.$fRead()5
                   @ [GHC.LanguageExtensions.Type.Extension]
                   (Text.ParserCombinators.ReadP.$fApplicativeP_$cpure
                      @ [GHC.LanguageExtensions.Type.Extension])) -}
4c2c9853eb67182dbfa349e407104720
  $fReadExtension43 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec
        GHC.LanguageExtensions.Type.Extension)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec
                        GHC.LanguageExtensions.Type.Extension)
                   ExtMonad.$fReadExtension308
                   ExtMonad.$fReadExtension44) -}
e38911f903161594fa58219271528810
  $fReadExtension44 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec
        GHC.LanguageExtensions.Type.Extension)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec
                        GHC.LanguageExtensions.Type.Extension)
                   ExtMonad.$fReadExtension305
                   ExtMonad.$fReadExtension45) -}
c85332f3c8a123d1db62762c3d1cc122
  $fReadExtension45 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec
        GHC.LanguageExtensions.Type.Extension)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec
                        GHC.LanguageExtensions.Type.Extension)
                   ExtMonad.$fReadExtension302
                   ExtMonad.$fReadExtension46) -}
27b3bbee7c4bfc5633754f497fe0e456
  $fReadExtension46 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec
        GHC.LanguageExtensions.Type.Extension)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec
                        GHC.LanguageExtensions.Type.Extension)
                   ExtMonad.$fReadExtension299
                   ExtMonad.$fReadExtension47) -}
cce72889b4c4b3c7163d2c16e6a27529
  $fReadExtension47 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec
        GHC.LanguageExtensions.Type.Extension)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec
                        GHC.LanguageExtensions.Type.Extension)
                   ExtMonad.$fReadExtension296
                   ExtMonad.$fReadExtension48) -}
5eb8820cf3b51b2a11af2947e0758697
  $fReadExtension48 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec
        GHC.LanguageExtensions.Type.Extension)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec
                        GHC.LanguageExtensions.Type.Extension)
                   ExtMonad.$fReadExtension293
                   ExtMonad.$fReadExtension49) -}
0ca3a7826a24f3ab203a4c29c18c2b9a
  $fReadExtension49 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec
        GHC.LanguageExtensions.Type.Extension)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec
                        GHC.LanguageExtensions.Type.Extension)
                   ExtMonad.$fReadExtension290
                   ExtMonad.$fReadExtension50) -}
afa92c25f86af5c16522f517b3937aab
  $fReadExtension5 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec
        GHC.LanguageExtensions.Type.Extension)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec
                        GHC.LanguageExtensions.Type.Extension)
                   ExtMonad.$fReadExtension422
                   ExtMonad.$fReadExtension6) -}
2d591cd26778b6d1f58a45a475129c32
  $fReadExtension50 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec
        GHC.LanguageExtensions.Type.Extension)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec
                        GHC.LanguageExtensions.Type.Extension)
                   ExtMonad.$fReadExtension287
                   ExtMonad.$fReadExtension51) -}
4562e4194f7b236167f9b8d883c93e7f
  $fReadExtension51 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec
        GHC.LanguageExtensions.Type.Extension)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec
                        GHC.LanguageExtensions.Type.Extension)
                   ExtMonad.$fReadExtension284
                   ExtMonad.$fReadExtension52) -}
71c0726a6d42390d550527cdcaee9c8c
  $fReadExtension52 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec
        GHC.LanguageExtensions.Type.Extension)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec
                        GHC.LanguageExtensions.Type.Extension)
                   ExtMonad.$fReadExtension281
                   ExtMonad.$fReadExtension53) -}
e2d0ea217344761b177907c6b990bc35
  $fReadExtension53 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec
        GHC.LanguageExtensions.Type.Extension)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec
                        GHC.LanguageExtensions.Type.Extension)
                   ExtMonad.$fReadExtension278
                   ExtMonad.$fReadExtension54) -}
840b71273bb92b594ed884f96dd9d9d0
  $fReadExtension54 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec
        GHC.LanguageExtensions.Type.Extension)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec
                        GHC.LanguageExtensions.Type.Extension)
                   ExtMonad.$fReadExtension275
                   ExtMonad.$fReadExtension55) -}
a8dbc5841d4fdcffa306920eecd62463
  $fReadExtension55 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec
        GHC.LanguageExtensions.Type.Extension)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec
                        GHC.LanguageExtensions.Type.Extension)
                   ExtMonad.$fReadExtension272
                   ExtMonad.$fReadExtension56) -}
c750fc08fcbd8bbd32b0242c10b4aecc
  $fReadExtension56 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec
        GHC.LanguageExtensions.Type.Extension)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec
                        GHC.LanguageExtensions.Type.Extension)
                   ExtMonad.$fReadExtension269
                   ExtMonad.$fReadExtension57) -}
744ca1568ef51e59ac9de41e5346fc99
  $fReadExtension57 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec
        GHC.LanguageExtensions.Type.Extension)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec
                        GHC.LanguageExtensions.Type.Extension)
                   ExtMonad.$fReadExtension266
                   ExtMonad.$fReadExtension58) -}
30f43611cec330228f966c22512b92c7
  $fReadExtension58 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec
        GHC.LanguageExtensions.Type.Extension)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec
                        GHC.LanguageExtensions.Type.Extension)
                   ExtMonad.$fReadExtension263
                   ExtMonad.$fReadExtension59) -}
d98b6fc8dfe57b3d17faab07b2bd32e3
  $fReadExtension59 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec
        GHC.LanguageExtensions.Type.Extension)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec
                        GHC.LanguageExtensions.Type.Extension)
                   ExtMonad.$fReadExtension260
                   ExtMonad.$fReadExtension60) -}
2282cd5025613e463c04621c830678c7
  $fReadExtension6 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec
        GHC.LanguageExtensions.Type.Extension)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec
                        GHC.LanguageExtensions.Type.Extension)
                   ExtMonad.$fReadExtension419
                   ExtMonad.$fReadExtension7) -}
58423ee7becb0464edf608b33374b6f4
  $fReadExtension60 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec
        GHC.LanguageExtensions.Type.Extension)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec
                        GHC.LanguageExtensions.Type.Extension)
                   ExtMonad.$fReadExtension257
                   ExtMonad.$fReadExtension61) -}
bc20e60d72c0c5939e7622e567d47638
  $fReadExtension61 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec
        GHC.LanguageExtensions.Type.Extension)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec
                        GHC.LanguageExtensions.Type.Extension)
                   ExtMonad.$fReadExtension254
                   ExtMonad.$fReadExtension62) -}
8f99f02d53d9e93db669ab89a070f874
  $fReadExtension62 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec
        GHC.LanguageExtensions.Type.Extension)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec
                        GHC.LanguageExtensions.Type.Extension)
                   ExtMonad.$fReadExtension251
                   ExtMonad.$fReadExtension63) -}
1c5e8e8b19a0e99dcf7fca0afb6e0fa0
  $fReadExtension63 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec
        GHC.LanguageExtensions.Type.Extension)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec
                        GHC.LanguageExtensions.Type.Extension)
                   ExtMonad.$fReadExtension248
                   ExtMonad.$fReadExtension64) -}
d269f3f1197d57cd8e680c4fa6a861d6
  $fReadExtension64 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec
        GHC.LanguageExtensions.Type.Extension)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec
                        GHC.LanguageExtensions.Type.Extension)
                   ExtMonad.$fReadExtension245
                   ExtMonad.$fReadExtension65) -}
061d9e29d46e5c49566ff589fdf6da3a
  $fReadExtension65 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec
        GHC.LanguageExtensions.Type.Extension)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec
                        GHC.LanguageExtensions.Type.Extension)
                   ExtMonad.$fReadExtension242
                   ExtMonad.$fReadExtension66) -}
8b889a6e72954e5b72cdd08fee7f7349
  $fReadExtension66 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec
        GHC.LanguageExtensions.Type.Extension)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec
                        GHC.LanguageExtensions.Type.Extension)
                   ExtMonad.$fReadExtension239
                   ExtMonad.$fReadExtension67) -}
9b05a35e6a330027f844cd38298cbf65
  $fReadExtension67 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec
        GHC.LanguageExtensions.Type.Extension)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec
                        GHC.LanguageExtensions.Type.Extension)
                   ExtMonad.$fReadExtension236
                   ExtMonad.$fReadExtension68) -}
7e13500f9c250f3ff9235fcc0edf86c5
  $fReadExtension68 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec
        GHC.LanguageExtensions.Type.Extension)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec
                        GHC.LanguageExtensions.Type.Extension)
                   ExtMonad.$fReadExtension233
                   ExtMonad.$fReadExtension69) -}
a4745559025ce0e3b3496ff6258e7775
  $fReadExtension69 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec
        GHC.LanguageExtensions.Type.Extension)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec
                        GHC.LanguageExtensions.Type.Extension)
                   ExtMonad.$fReadExtension230
                   ExtMonad.$fReadExtension70) -}
7ae83db9898bf72cb121df86975db37c
  $fReadExtension7 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec
        GHC.LanguageExtensions.Type.Extension)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec
                        GHC.LanguageExtensions.Type.Extension)
                   ExtMonad.$fReadExtension416
                   ExtMonad.$fReadExtension8) -}
c0b22c52e8a09a096e299b24238493a2
  $fReadExtension70 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec
        GHC.LanguageExtensions.Type.Extension)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec
                        GHC.LanguageExtensions.Type.Extension)
                   ExtMonad.$fReadExtension227
                   ExtMonad.$fReadExtension71) -}
232353173d2c158a80f5292fc7ccbbc9
  $fReadExtension71 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec
        GHC.LanguageExtensions.Type.Extension)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec
                        GHC.LanguageExtensions.Type.Extension)
                   ExtMonad.$fReadExtension224
                   ExtMonad.$fReadExtension72) -}
e9ea9e89fac204bf1fde5037c40dad16
  $fReadExtension72 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec
        GHC.LanguageExtensions.Type.Extension)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec
                        GHC.LanguageExtensions.Type.Extension)
                   ExtMonad.$fReadExtension221
                   ExtMonad.$fReadExtension73) -}
d00518950eca2d56fd3911395e1f8efd
  $fReadExtension73 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec
        GHC.LanguageExtensions.Type.Extension)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec
                        GHC.LanguageExtensions.Type.Extension)
                   ExtMonad.$fReadExtension218
                   ExtMonad.$fReadExtension74) -}
ca5b0a10e1c0496d3a55b05331aebecc
  $fReadExtension74 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec
        GHC.LanguageExtensions.Type.Extension)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec
                        GHC.LanguageExtensions.Type.Extension)
                   ExtMonad.$fReadExtension215
                   ExtMonad.$fReadExtension75) -}
2d04be2357a1a39049c0a76285f74663
  $fReadExtension75 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec
        GHC.LanguageExtensions.Type.Extension)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec
                        GHC.LanguageExtensions.Type.Extension)
                   ExtMonad.$fReadExtension212
                   ExtMonad.$fReadExtension76) -}
20ad165069945c9a83c958a279fa5d60
  $fReadExtension76 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec
        GHC.LanguageExtensions.Type.Extension)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec
                        GHC.LanguageExtensions.Type.Extension)
                   ExtMonad.$fReadExtension209
                   ExtMonad.$fReadExtension77) -}
1cd20b581d9b3ec4f2375ca99720d9ad
  $fReadExtension77 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec
        GHC.LanguageExtensions.Type.Extension)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec
                        GHC.LanguageExtensions.Type.Extension)
                   ExtMonad.$fReadExtension206
                   ExtMonad.$fReadExtension78) -}
96b0abf52ad8f9fd0f3fcd1b32f436fe
  $fReadExtension78 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec
        GHC.LanguageExtensions.Type.Extension)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec
                        GHC.LanguageExtensions.Type.Extension)
                   ExtMonad.$fReadExtension203
                   ExtMonad.$fReadExtension79) -}
1c895238fe664e45f28c86fe00bcd06b
  $fReadExtension79 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec
        GHC.LanguageExtensions.Type.Extension)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec
                        GHC.LanguageExtensions.Type.Extension)
                   ExtMonad.$fReadExtension200
                   ExtMonad.$fReadExtension80) -}
ca62c376a0b1617ab3fbd99935f1e2a2
  $fReadExtension8 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec
        GHC.LanguageExtensions.Type.Extension)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec
                        GHC.LanguageExtensions.Type.Extension)
                   ExtMonad.$fReadExtension413
                   ExtMonad.$fReadExtension9) -}
d7d9ef97724bee7d658e2df7e674c703
  $fReadExtension80 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec
        GHC.LanguageExtensions.Type.Extension)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec
                        GHC.LanguageExtensions.Type.Extension)
                   ExtMonad.$fReadExtension197
                   ExtMonad.$fReadExtension81) -}
bed62cf55ef65100d5442e4b77ffbefc
  $fReadExtension81 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec
        GHC.LanguageExtensions.Type.Extension)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec
                        GHC.LanguageExtensions.Type.Extension)
                   ExtMonad.$fReadExtension194
                   ExtMonad.$fReadExtension82) -}
2edf65e989e5400c3dadc070f65a6fe3
  $fReadExtension82 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec
        GHC.LanguageExtensions.Type.Extension)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec
                        GHC.LanguageExtensions.Type.Extension)
                   ExtMonad.$fReadExtension191
                   ExtMonad.$fReadExtension83) -}
d74308c4ef34a2561a8d9b2e70f99196
  $fReadExtension83 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec
        GHC.LanguageExtensions.Type.Extension)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec
                        GHC.LanguageExtensions.Type.Extension)
                   ExtMonad.$fReadExtension188
                   ExtMonad.$fReadExtension84) -}
1b9cc8927abc21cd3df00e46f816601c
  $fReadExtension84 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec
        GHC.LanguageExtensions.Type.Extension)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec
                        GHC.LanguageExtensions.Type.Extension)
                   ExtMonad.$fReadExtension185
                   ExtMonad.$fReadExtension85) -}
8b600db2121b43b148732dc55ab21b45
  $fReadExtension85 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec
        GHC.LanguageExtensions.Type.Extension)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec
                        GHC.LanguageExtensions.Type.Extension)
                   ExtMonad.$fReadExtension182
                   ExtMonad.$fReadExtension86) -}
d371b8b0e9c9e868db08700e88b299c4
  $fReadExtension86 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec
        GHC.LanguageExtensions.Type.Extension)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec
                        GHC.LanguageExtensions.Type.Extension)
                   ExtMonad.$fReadExtension179
                   ExtMonad.$fReadExtension87) -}
ea696bea1d27a57f9676d5a53596195b
  $fReadExtension87 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec
        GHC.LanguageExtensions.Type.Extension)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec
                        GHC.LanguageExtensions.Type.Extension)
                   ExtMonad.$fReadExtension176
                   ExtMonad.$fReadExtension88) -}
5e1e72f1671bfc41336186cdcc7eb8d3
  $fReadExtension88 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec
        GHC.LanguageExtensions.Type.Extension)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec
                        GHC.LanguageExtensions.Type.Extension)
                   ExtMonad.$fReadExtension173
                   ExtMonad.$fReadExtension89) -}
e699e51411e61dd1c06c4cb702c76d2c
  $fReadExtension89 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec
        GHC.LanguageExtensions.Type.Extension)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec
                        GHC.LanguageExtensions.Type.Extension)
                   ExtMonad.$fReadExtension170
                   ExtMonad.$fReadExtension90) -}
ab99cb8d72fe52988331286beb534932
  $fReadExtension9 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec
        GHC.LanguageExtensions.Type.Extension)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec
                        GHC.LanguageExtensions.Type.Extension)
                   ExtMonad.$fReadExtension410
                   ExtMonad.$fReadExtension10) -}
e33b56691636d409e8ffae7f54f2458d
  $fReadExtension90 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec
        GHC.LanguageExtensions.Type.Extension)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec
                        GHC.LanguageExtensions.Type.Extension)
                   ExtMonad.$fReadExtension167
                   ExtMonad.$fReadExtension91) -}
2f323f9361c1cec768d3401bb58d0a4a
  $fReadExtension91 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec
        GHC.LanguageExtensions.Type.Extension)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec
                        GHC.LanguageExtensions.Type.Extension)
                   ExtMonad.$fReadExtension164
                   ExtMonad.$fReadExtension92) -}
c32d2a92335042184212a1f72d251608
  $fReadExtension92 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec
        GHC.LanguageExtensions.Type.Extension)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec
                        GHC.LanguageExtensions.Type.Extension)
                   ExtMonad.$fReadExtension161
                   ExtMonad.$fReadExtension93) -}
e99d0f0c033102030f66af84aca7cb06
  $fReadExtension93 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec
        GHC.LanguageExtensions.Type.Extension)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec
                        GHC.LanguageExtensions.Type.Extension)
                   ExtMonad.$fReadExtension158
                   ExtMonad.$fReadExtension94) -}
ca3c4936a2d584caefe893e492ac5628
  $fReadExtension94 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec
        GHC.LanguageExtensions.Type.Extension)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec
                        GHC.LanguageExtensions.Type.Extension)
                   ExtMonad.$fReadExtension155
                   ExtMonad.$fReadExtension95) -}
c889812d38680e2bf383d6144eacd129
  $fReadExtension95 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec
        GHC.LanguageExtensions.Type.Extension)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec
                        GHC.LanguageExtensions.Type.Extension)
                   ExtMonad.$fReadExtension152
                   ExtMonad.$fReadExtension96) -}
8de4e71fa52fe38937c8a1fe01d2ede4
  $fReadExtension96 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec
        GHC.LanguageExtensions.Type.Extension)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec
                        GHC.LanguageExtensions.Type.Extension)
                   ExtMonad.$fReadExtension149
                   ExtMonad.$fReadExtension97) -}
8d346bf19d4ffe4cbcc3148bc272ad70
  $fReadExtension97 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec
        GHC.LanguageExtensions.Type.Extension)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec
                        GHC.LanguageExtensions.Type.Extension)
                   ExtMonad.$fReadExtension146
                   ExtMonad.$fReadExtension98) -}
c16e013601136466255a495205e620e9
  $fReadExtension98 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec
        GHC.LanguageExtensions.Type.Extension)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec
                        GHC.LanguageExtensions.Type.Extension)
                   ExtMonad.$fReadExtension143
                   ExtMonad.$fReadExtension99) -}
3bfa3bf3be8855d13f4c048775cf7fdd
  $fReadExtension99 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec
        GHC.LanguageExtensions.Type.Extension)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec
                        GHC.LanguageExtensions.Type.Extension)
                   ExtMonad.$fReadExtension140
                   ExtMonad.$fReadExtension100) -}
ca02ec78d2e00eae93fa4eebbf63a134
  $fReadExtension_$creadList ::
    Text.ParserCombinators.ReadP.ReadS
      [GHC.LanguageExtensions.Type.Extension]
  {- Arity: 1,
     Unfolding: (Text.ParserCombinators.ReadP.run
                   @ [GHC.LanguageExtensions.Type.Extension]
                   ExtMonad.$fReadExtension428) -}
ce3fd583939478fd2e14cb956b1c301b
  $fReadExtension_$creadListPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec
      [GHC.LanguageExtensions.Type.Extension]
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (0, True, True)
                ExtMonad.$fReadExtension1
                  `cast`
                (Trans
                     (<Text.ParserCombinators.ReadPrec.Prec>_R
                      ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                    <[GHC.LanguageExtensions.Type.Extension]>_R))
                     (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                               <[GHC.LanguageExtensions.Type.Extension]>_R))) -}
c18994f4fb3b52793a5c968f81cd5fe9
  $fReadExtension_$creadPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec
      GHC.LanguageExtensions.Type.Extension
  {- Arity: 1,
     Unfolding: InlineRule (0, True, True)
                ExtMonad.$fReadExtension2
                  `cast`
                (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                          <GHC.LanguageExtensions.Type.Extension>_R)) -}
6c1b41f6b5b7469cadba725203704170
  $fReadExtension_$creadsPrec ::
    GHC.Types.Int
    -> Text.ParserCombinators.ReadP.ReadS
         GHC.LanguageExtensions.Type.Extension
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (eta :: GHC.Types.Int) ->
                 Text.ParserCombinators.ReadP.run
                   @ GHC.LanguageExtensions.Type.Extension
                   ((GHC.Read.parens1
                       @ GHC.LanguageExtensions.Type.Extension
                       ExtMonad.$fReadExtension3
                         `cast`
                       (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                 <GHC.LanguageExtensions.Type.Extension>_R))
                       eta)
                      `cast`
                    (Text.ParserCombinators.ReadP.N:ReadP[0]
                         <GHC.LanguageExtensions.Type.Extension>_R)
                      @ GHC.LanguageExtensions.Type.Extension
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$cpure
                         @ GHC.LanguageExtensions.Type.Extension))) -}
bf3ee7693465b6ba0a1375862894e45b
  $s$fEqLogicalRelation ::
    GHC.Classes.Eq
      (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                  (ExtMap.$fEqLogicalRelation_$c==
                     @ GHC.LanguageExtensions.Type.Extension
                     ExtMonad.$s$fEqLogicalRelation_$dEq)
                  ExtMonad.$s$fEqLogicalRelation1 -}
b150d296f6860fe7e0143e50b4dea0f0
  $s$fEqLogicalRelation1 ::
    ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension
    -> ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension
    -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (a1 :: ExtMap.LogicalRelation
                            GHC.LanguageExtensions.Type.Extension)
                   (b :: ExtMap.LogicalRelation
                           GHC.LanguageExtensions.Type.Extension) ->
                 case ExtMap.$fEqLogicalRelation_$c==
                        @ GHC.LanguageExtensions.Type.Extension
                        GHC.LanguageExtensions.Type.$fEqExtension
                        a1
                        b of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
9834edcf1c4b7b25f5b46977d7cdcacf
  $s$fEqLogicalRelation_$dEq ::
    GHC.Classes.Eq GHC.LanguageExtensions.Type.Extension
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                GHC.LanguageExtensions.Type.$fEqExtension -}
03d440c6095beb6a0b45842ec9210e6d
  $s$fOrdLogicalRelation ::
    GHC.Classes.Ord
      (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                  ExtMonad.$s$fOrdLogicalRelation_$s$fOrdLogicalRelation_$cp1Ord
                  (ExtMap.$fOrdLogicalRelation_$ccompare
                     @ GHC.LanguageExtensions.Type.Extension
                     ExtMonad.$fOrdExtension)
                  ExtMonad.$s$fOrdLogicalRelation_$s$fOrdLogicalRelation_$c<
                  ExtMonad.$s$fOrdLogicalRelation_$s$fOrdLogicalRelation_$c<=
                  ExtMonad.$s$fOrdLogicalRelation_$s$fOrdLogicalRelation_$c>
                  ExtMonad.$s$fOrdLogicalRelation_$s$fOrdLogicalRelation_$c>=
                  ExtMonad.$s$fOrdLogicalRelation_$s$fOrdLogicalRelation_$cmax
                  ExtMonad.$s$fOrdLogicalRelation_$s$fOrdLogicalRelation_$cmin -}
4b3127d1cddddaf9f35eeed2e919375d
  $s$fOrdLogicalRelation_$s$fOrdLogicalRelation_$c< ::
    ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension
    -> ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension
    -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: ExtMap.LogicalRelation
                           GHC.LanguageExtensions.Type.Extension)
                   (y :: ExtMap.LogicalRelation
                           GHC.LanguageExtensions.Type.Extension) ->
                 case ExtMap.$fOrdLogicalRelation_$ccompare
                        @ GHC.LanguageExtensions.Type.Extension
                        ExtMonad.$fOrdExtension
                        x
                        y of wild {
                   DEFAULT -> GHC.Types.False GHC.Types.LT -> GHC.Types.True }) -}
574ea43b56c7bf303bf6bd0c9b72fd0b
  $s$fOrdLogicalRelation_$s$fOrdLogicalRelation_$c<= ::
    ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension
    -> ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension
    -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: ExtMap.LogicalRelation
                           GHC.LanguageExtensions.Type.Extension)
                   (y :: ExtMap.LogicalRelation
                           GHC.LanguageExtensions.Type.Extension) ->
                 case ExtMap.$fOrdLogicalRelation_$ccompare
                        @ GHC.LanguageExtensions.Type.Extension
                        ExtMonad.$fOrdExtension
                        x
                        y of wild {
                   DEFAULT -> GHC.Types.True GHC.Types.GT -> GHC.Types.False }) -}
6ce819321482d5234d714d291dafafe4
  $s$fOrdLogicalRelation_$s$fOrdLogicalRelation_$c> ::
    ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension
    -> ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension
    -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: ExtMap.LogicalRelation
                           GHC.LanguageExtensions.Type.Extension)
                   (y :: ExtMap.LogicalRelation
                           GHC.LanguageExtensions.Type.Extension) ->
                 case ExtMap.$fOrdLogicalRelation_$ccompare
                        @ GHC.LanguageExtensions.Type.Extension
                        ExtMonad.$fOrdExtension
                        x
                        y of wild {
                   DEFAULT -> GHC.Types.False GHC.Types.GT -> GHC.Types.True }) -}
7bfcca66b1b0a93945e34b0f6625baa2
  $s$fOrdLogicalRelation_$s$fOrdLogicalRelation_$c>= ::
    ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension
    -> ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension
    -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: ExtMap.LogicalRelation
                           GHC.LanguageExtensions.Type.Extension)
                   (y :: ExtMap.LogicalRelation
                           GHC.LanguageExtensions.Type.Extension) ->
                 case ExtMap.$fOrdLogicalRelation_$ccompare
                        @ GHC.LanguageExtensions.Type.Extension
                        ExtMonad.$fOrdExtension
                        x
                        y of wild {
                   DEFAULT -> GHC.Types.True GHC.Types.LT -> GHC.Types.False }) -}
a2527415f3f4675c6910694e5ca153e0
  $s$fOrdLogicalRelation_$s$fOrdLogicalRelation_$cmax ::
    ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension
    -> ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension
    -> ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension
  {- Arity: 2, HasNoCafRefs, Strictness: <S,U><S,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: ExtMap.LogicalRelation
                           GHC.LanguageExtensions.Type.Extension)
                   (y :: ExtMap.LogicalRelation
                           GHC.LanguageExtensions.Type.Extension) ->
                 case ExtMap.$fOrdLogicalRelation_$ccompare
                        @ GHC.LanguageExtensions.Type.Extension
                        ExtMonad.$fOrdExtension
                        x
                        y of wild {
                   DEFAULT -> y GHC.Types.GT -> x }) -}
145fe1cb747a87b4c327491d7d21459b
  $s$fOrdLogicalRelation_$s$fOrdLogicalRelation_$cmin ::
    ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension
    -> ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension
    -> ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension
  {- Arity: 2, HasNoCafRefs, Strictness: <S,U><S,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: ExtMap.LogicalRelation
                           GHC.LanguageExtensions.Type.Extension)
                   (y :: ExtMap.LogicalRelation
                           GHC.LanguageExtensions.Type.Extension) ->
                 case ExtMap.$fOrdLogicalRelation_$ccompare
                        @ GHC.LanguageExtensions.Type.Extension
                        ExtMonad.$fOrdExtension
                        x
                        y of wild {
                   DEFAULT -> x GHC.Types.GT -> y }) -}
2ff0ffcc91a561d3b893b1cdc38f9db7
  $s$fOrdLogicalRelation_$s$fOrdLogicalRelation_$cp1Ord ::
    GHC.Classes.Eq
      (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                ExtMonad.$s$fEqLogicalRelation -}
306a67bd5c6c2514d3baa73b153b92da
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   ExtMonad.$trModule2
                   ExtMonad.$trModule1) -}
0d60f9aabb20ac59d1e88ca0e590c261
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "ExtMonad"#) -}
d5871681fdfcafb565e87571d8108969
  $trModule2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   "ht-extension-organizer-0.1.0.0-y3uypH7gCtA60AaWeuyZL"#) -}
c4252c24e927cc7dfa70b753e26c5b04
  $wgo ::
    [GHC.LanguageExtensions.Type.Extension]
    -> [GHC.LanguageExtensions.Type.Extension]
    -> ExtMap.ExtMap
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          ([GHC.Types.Bool], ExtMap.ExtMap) #)
  {- Arity: 4, HasNoCafRefs, Strictness: <S,1*U><L,U><L,U><S,U>,
     Inline: [0] -}
d2a8a000f373c241c0362787c4b3f842
  type CheckNode (elem :: * -> *) =
    forall dom.
    ExtMonad.ExtDomain dom =>
    elem dom -> ExtMonad.ExtMonad (elem dom)
9a3c78de9fdd35033f52f4944cc68138
  type CheckUNode (uelem :: GHC.Types.*
                            -> GHC.Types.* -> GHC.Types.*) =
    forall dom.
    ExtMonad.ExtDomain dom =>
    Language.Haskell.Tools.AST.Ann.Ann
      uelem dom Language.Haskell.Tools.AST.Ann.SrcTemplateStage
    -> ExtMonad.ExtMonad
         (Language.Haskell.Tools.AST.Ann.Ann
            uelem dom Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
7fc7ae623015a9d2031eb05f95b73507
  type ExtDomain dom =
    Language.Haskell.Tools.AST.SemaInfoClasses.HasNameInfo dom
    :: GHC.Types.Constraint
6ab37cbe93709f9dcdeffcf18c24ce9b
  type ExtMonad =
    Control.Monad.Trans.Reader.ReaderT
      [GHC.LanguageExtensions.Type.Extension]
      (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc)
    :: * -> *
c9603992ac2a28741343ebc5c8fe7b56
  addOccurence ::
    (Control.Monad.State.Class.MonadState ExtMap.ExtMap m,
     Language.Haskell.Tools.AST.Ann.HasRange node) =>
    GHC.LanguageExtensions.Type.Extension -> node -> m node
  {- Arity: 4,
     Strictness: <S(SLLL),U(1*U,A,A,1*C1(U))><L,1*U(1*C1(U),A)><L,U><L,U>,
     Unfolding: (\ @ (m :: * -> *)
                   @ node
                   ($dMonadState :: Control.Monad.State.Class.MonadState
                                      ExtMap.ExtMap m)
                   ($dHasRange :: Language.Haskell.Tools.AST.Ann.HasRange node)
                   (eta :: GHC.LanguageExtensions.Type.Extension)
                   (eta1 :: node) ->
                 let {
                   $dMonad :: GHC.Base.Monad m
                   = Control.Monad.State.Class.$p1MonadState
                       @ ExtMap.ExtMap
                       @ m
                       $dMonadState
                 } in
                 GHC.Base.>>
                   @ m
                   $dMonad
                   @ ()
                   @ node
                   (ExtMonad.addOccurence_
                      @ m
                      @ node
                      $dMonadState
                      $dHasRange
                      eta
                      eta1)
                   (GHC.Base.return @ m $dMonad @ node eta1)) -}
806962a54b1c16e16558458575c9a479
  addOccurence' ::
    (GHC.Classes.Ord k, Language.Haskell.Tools.AST.Ann.HasRange a) =>
    k
    -> a
    -> Data.Map.Base.Map k [SrcLoc.SrcSpan]
    -> Data.Map.Base.Map k [SrcLoc.SrcSpan]
  {- Arity: 4,
     Strictness: <L,U(A,C(C1(U)),A,A,A,A,A,A)><L,1*U(1*C1(U),A)><L,U><L,U>,
     Unfolding: (\ @ k
                   @ a
                   ($dOrd :: GHC.Classes.Ord k)
                   ($dHasRange :: Language.Haskell.Tools.AST.Ann.HasRange a)
                   (key :: k)
                   (node :: a) ->
                 let {
                   eta1 :: SrcLoc.SrcSpan
                   = Language.Haskell.Tools.AST.Ann.getRange @ a $dHasRange node
                 } in
                 let {
                   eta2 :: [SrcLoc.SrcSpan]
                   = GHC.Types.: @ SrcLoc.SrcSpan eta1 (GHC.Types.[] @ SrcLoc.SrcSpan)
                 } in
                 \ (eta3 :: Data.Map.Base.Map k [SrcLoc.SrcSpan]) ->
                 Data.Map.Strict.insertWithKey
                   @ k
                   @ [SrcLoc.SrcSpan]
                   $dOrd
                   (ExtMonad.addOccurence_1 @ k)
                   key
                   eta2
                   eta3) -}
0a70efda5e7142f7b588f7458ea99597
  addOccurence_ ::
    (Control.Monad.State.Class.MonadState ExtMap.ExtMap m,
     Language.Haskell.Tools.AST.Ann.HasRange node) =>
    GHC.LanguageExtensions.Type.Extension -> node -> m ()
  {- Arity: 4,
     Strictness: <S(LLLC(S)),1*U(A,A,A,1*C1(U))><L,1*U(1*C1(U),A)><L,U><L,U>,
     Unfolding: (\ @ (m :: * -> *)
                   @ node
                   ($dMonadState :: Control.Monad.State.Class.MonadState
                                      ExtMap.ExtMap m)
                   ($dHasRange :: Language.Haskell.Tools.AST.Ann.HasRange node)
                   (extension :: GHC.LanguageExtensions.Type.Extension)
                   (element :: node) ->
                 let {
                   key :: ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension
                   = ExtMap.LVar @ GHC.LanguageExtensions.Type.Extension extension
                 } in
                 let {
                   eta1 :: SrcLoc.SrcSpan
                   = Language.Haskell.Tools.AST.Ann.getRange @ node $dHasRange element
                 } in
                 let {
                   eta2 :: [SrcLoc.SrcSpan]
                   = GHC.Types.: @ SrcLoc.SrcSpan eta1 (GHC.Types.[] @ SrcLoc.SrcSpan)
                 } in
                 Control.Monad.State.Class.state
                   @ (Data.Map.Base.Map
                        (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                        [SrcLoc.SrcSpan])
                   @ m
                   $dMonadState
                   @ ()
                   (\ (s1 :: Data.Map.Base.Map
                               (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                               [SrcLoc.SrcSpan]) ->
                    (GHC.Tuple.(),
                     Data.Map.Strict.insertWithKey
                       @ (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                       @ [SrcLoc.SrcSpan]
                       ExtMonad.$s$fOrdLogicalRelation
                       (ExtMonad.addOccurence_1
                          @ (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension))
                       key
                       eta2
                       s1))) -}
124b8c73ddb725d9b04bfbfc21f60869
  addOccurence_1 ::
    k -> [SrcLoc.SrcSpan] -> [SrcLoc.SrcSpan] -> [SrcLoc.SrcSpan]
  {- Arity: 3, HasNoCafRefs,
     Unfolding: (\ @ k
                   (ds :: k)[OneShot]
                   (x' :: [SrcLoc.SrcSpan])[OneShot]
                   (y' :: [SrcLoc.SrcSpan])[OneShot] ->
                 GHC.Base.++ @ SrcLoc.SrcSpan x' y') -}
179fcfe6ec57edddd9abe173be82121d
  conditional ::
    (node -> ExtMonad.ExtMonad node)
    -> GHC.LanguageExtensions.Type.Extension
    -> node
    -> ExtMonad.ExtMonad node
  {- Arity: 3, HasNoCafRefs, Strictness: <L,1*C1(U)><L,U><L,U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ node
                   (checker :: node -> ExtMonad.ExtMonad node)
                   (ext :: GHC.LanguageExtensions.Type.Extension)
                   (eta :: node) ->
                 ExtMonad.conditionalAny
                   @ node
                   checker
                   (GHC.Types.:
                      @ GHC.LanguageExtensions.Type.Extension
                      ext
                      (GHC.Types.[] @ GHC.LanguageExtensions.Type.Extension))
                   eta) -}
53eb934c9b54c6f8fe1c33689d0d30d5
  conditionalAny ::
    (node -> ExtMonad.ExtMonad node)
    -> [GHC.LanguageExtensions.Type.Extension]
    -> node
    -> ExtMonad.ExtMonad node
  {- Arity: 3, HasNoCafRefs, Strictness: <L,1*C1(U)><L,U><L,U>,
     Unfolding: (\ @ node
                   (checker :: node -> ExtMonad.ExtMonad node)
                   (exts :: [GHC.LanguageExtensions.Type.Extension])
                   (node1 :: node) ->
                 let {
                   lvl8 :: ExtMonad.ExtMonad node = checker node1
                 } in
                 (\ (r1 :: [GHC.LanguageExtensions.Type.Extension])
                    (eta :: Data.Map.Base.Map
                              (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                              [SrcLoc.SrcSpan])
                    (eta1 :: GhcMonad.Session)
                    (eta2 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                  case ExtMonad.$wgo exts r1 eta eta2 of ds1 { (#,#) ipv ipv1 ->
                  case ipv1 of wild { (,) a1 s' ->
                  case (ExtMonad.conditionalAny_go a1)
                         `cast`
                       (Data.Monoid.N:Any[0]) of wild1 {
                    GHC.Types.False -> (# ipv, (node1, s') #)
                    GHC.Types.True
                    -> (((lvl8
                            `cast`
                          (Control.Monad.Trans.Reader.N:ReaderT[0]
                               <*>_N
                               <[GHC.LanguageExtensions.Type.Extension]>_R
                               <Control.Monad.Trans.State.Lazy.StateT
                                  ExtMap.ExtMap GhcMonad.Ghc>_R
                               <node>_N)
                            r1)
                           `cast`
                         (Control.Monad.Trans.State.Lazy.N:StateT[0]
                              <Data.Map.Base.Map
                                 (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                                 [SrcLoc.SrcSpan]>_N
                              <GhcMonad.Ghc>_R
                              <node>_N)
                           s')
                          `cast`
                        (GhcMonad.N:Ghc[0]
                             <(node,
                               Data.Map.Base.Map
                                 (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                                 [SrcLoc.SrcSpan])>_R)
                          eta1)
                         `cast`
                       (GHC.Types.N:IO[0]
                            <(node,
                              Data.Map.Base.Map
                                (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                                [SrcLoc.SrcSpan])>_R)
                         ipv } } })
                   `cast`
                 (Trans
                      (<[GHC.LanguageExtensions.Type.Extension]>_R
                       ->_R Trans
                                (<Data.Map.Base.Map
                                    (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                                    [SrcLoc.SrcSpan]>_R
                                 ->_R Trans
                                          (<GhcMonad.Session>_R
                                           ->_R Sym (GHC.Types.N:IO[0]
                                                         <(node,
                                                           Data.Map.Base.Map
                                                             (ExtMap.LogicalRelation
                                                                GHC.LanguageExtensions.Type.Extension)
                                                             [SrcLoc.SrcSpan])>_R))
                                          (Sym (GhcMonad.N:Ghc[0]
                                                    <(node,
                                                      Data.Map.Base.Map
                                                        (ExtMap.LogicalRelation
                                                           GHC.LanguageExtensions.Type.Extension)
                                                        [SrcLoc.SrcSpan])>_R)))
                                (Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                          <Data.Map.Base.Map
                                             (ExtMap.LogicalRelation
                                                GHC.LanguageExtensions.Type.Extension)
                                             [SrcLoc.SrcSpan]>_N
                                          <GhcMonad.Ghc>_R
                                          <node>_N)))
                      (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                <*>_N
                                <[GHC.LanguageExtensions.Type.Extension]>_R
                                <Control.Monad.Trans.State.Lazy.StateT
                                   ExtMap.ExtMap GhcMonad.Ghc>_R
                                <node>_N)))) -}
3764029eb0bfcef1e774f0ff54c2196c
  conditionalAny_go :: [GHC.Types.Bool] -> Data.Monoid.Any
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U> -}
58326d046a06fcac13f090ffdee96f9d
  isTurnedOn ::
    GHC.LanguageExtensions.Type.Extension
    -> ExtMonad.ExtMonad GHC.Types.Bool
  {- Arity: 5, HasNoCafRefs, Strictness: <L,U><S,1*U><L,U><L,A><S,U>,
     Unfolding: InlineRule (0, True, True)
                ExtMonad.isTurnedOn1
                  `cast`
                (<GHC.LanguageExtensions.Type.Extension>_R
                 ->_R Trans
                          (<[GHC.LanguageExtensions.Type.Extension]>_R
                           ->_R Trans
                                    (<Data.Map.Base.Map
                                        (ExtMap.LogicalRelation
                                           GHC.LanguageExtensions.Type.Extension)
                                        [SrcLoc.SrcSpan]>_R
                                     ->_R Trans
                                              (<GhcMonad.Session>_R
                                               ->_R Sym (GHC.Types.N:IO[0]
                                                             <(GHC.Types.Bool,
                                                               Data.Map.Base.Map
                                                                 (ExtMap.LogicalRelation
                                                                    GHC.LanguageExtensions.Type.Extension)
                                                                 [SrcLoc.SrcSpan])>_R))
                                              (Sym (GhcMonad.N:Ghc[0]
                                                        <(GHC.Types.Bool,
                                                          Data.Map.Base.Map
                                                            (ExtMap.LogicalRelation
                                                               GHC.LanguageExtensions.Type.Extension)
                                                            [SrcLoc.SrcSpan])>_R)))
                                    (Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                              <Data.Map.Base.Map
                                                 (ExtMap.LogicalRelation
                                                    GHC.LanguageExtensions.Type.Extension)
                                                 [SrcLoc.SrcSpan]>_N
                                              <GhcMonad.Ghc>_R
                                              <GHC.Types.Bool>_N)))
                          (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                    <*>_N
                                    <[GHC.LanguageExtensions.Type.Extension]>_R
                                    <Control.Monad.Trans.State.Lazy.StateT
                                       ExtMap.ExtMap GhcMonad.Ghc>_R
                                    <GHC.Types.Bool>_N))) -}
0bf5a947dd815a7b034f71fec6284b6e
  isTurnedOn1 ::
    GHC.LanguageExtensions.Type.Extension
    -> [GHC.LanguageExtensions.Type.Extension]
    -> Data.Map.Base.Map
         (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
         [SrcLoc.SrcSpan]
    -> GhcMonad.Session
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          (GHC.Types.Bool,
           Data.Map.Base.Map
             (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
             [SrcLoc.SrcSpan]) #)
  {- Arity: 5, HasNoCafRefs, Strictness: <L,U><S,1*U><L,U><L,A><S,U>,
     Unfolding: InlineRule (5, True, False)
                (\ (ext :: GHC.LanguageExtensions.Type.Extension)
                   (eta :: [GHC.LanguageExtensions.Type.Extension])
                   (eta1 :: Data.Map.Base.Map
                              (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                              [SrcLoc.SrcSpan])
                   (eta2 :: GhcMonad.Session)
                   (eta3 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case GHC.List.elem
                        @ GHC.LanguageExtensions.Type.Extension
                        GHC.LanguageExtensions.Type.$fEqExtension
                        ext
                        eta of vx { DEFAULT ->
                 (# eta3, (vx, eta1) #) }) -}
64013254a8a069463528a96ade6c9f65
  runExtMonadGHC :: ExtMonad.ExtMonad a -> GhcMonad.Ghc a
  {- Arity: 1, HasNoCafRefs, Strictness: <L,1*C1(C1(U))>,
     Unfolding: (\ @ a
                   (x :: Control.Monad.Trans.Reader.ReaderT
                           [GHC.LanguageExtensions.Type.Extension]
                           (Control.Monad.Trans.State.Lazy.StateT
                              (Data.Map.Base.Map
                                 (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                                 [SrcLoc.SrcSpan])
                              GhcMonad.Ghc)
                           a) ->
                 let {
                   m1 :: GhcMonad.Ghc
                           (a,
                            Data.Map.Base.Map
                              (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                              [SrcLoc.SrcSpan])
                   = (x `cast`
                      (Control.Monad.Trans.Reader.N:ReaderT[0]
                           <*>_N
                           <[GHC.LanguageExtensions.Type.Extension]>_R
                           <Control.Monad.Trans.State.Lazy.StateT
                              (Data.Map.Base.Map
                                 (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                                 [SrcLoc.SrcSpan])
                              GhcMonad.Ghc>_R
                           <a>_N)
                        (GHC.Types.[] @ GHC.LanguageExtensions.Type.Extension))
                       `cast`
                     (Control.Monad.Trans.State.Lazy.N:StateT[0]
                          <Data.Map.Base.Map
                             (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                             [SrcLoc.SrcSpan]>_N
                          <GhcMonad.Ghc>_R
                          <a>_N)
                       (Data.Map.Base.Tip
                          @ (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                          @ [SrcLoc.SrcSpan])
                 } in
                 (\ (s :: GhcMonad.Session)
                    (s1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                  case (m1
                          `cast`
                        (GhcMonad.N:Ghc[0]
                             <(a,
                               Data.Map.Base.Map
                                 (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                                 [SrcLoc.SrcSpan])>_R)
                          s)
                         `cast`
                       (GHC.Types.N:IO[0]
                            <(a,
                              Data.Map.Base.Map
                                (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                                [SrcLoc.SrcSpan])>_R)
                         s1 of ds1 { (#,#) ipv ipv1 ->
                  (# ipv, case ipv1 of wild { (,) x1 ds2 -> x1 } #) })
                   `cast`
                 (Trans
                      (<GhcMonad.Session>_R ->_R Sym (GHC.Types.N:IO[0] <a>_R))
                      (Sym (GhcMonad.N:Ghc[0] <a>_R)))) -}
7d696a7ab8d541e03e4a3c0a61328a95
  runExtMonadIO :: ExtMonad.ExtMonad a -> GHC.Types.IO a
  {- Arity: 2, Strictness: <L,1*C1(C1(U))><S,U>,
     Unfolding: InlineRule (0, True, True)
                ExtMonad.runExtMonadIO1
                  `cast`
                (forall (a :: <*>_N).
                 <ExtMonad.ExtMonad a>_R ->_R Sym (GHC.Types.N:IO[0] <a>_R)) -}
3e4aa90d7f72d97573c4bf4304cd3ab4
  runExtMonadIO1 ::
    ExtMonad.ExtMonad a
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, a #)
  {- Arity: 2, Strictness: <L,1*C1(C1(U))><S,U>,
     Unfolding: InlineRule (2, True, False)
                (\ @ a
                   (x :: ExtMonad.ExtMonad a)
                   (eta :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 GHC.runGhc1
                   @ a
                   ExtMonad.runExtMonadIO2
                   (ExtMonad.runExtMonadGHC @ a x)
                   eta) -}
dfaa91f94d8490cd7ece5149687284ca
  runExtMonadIO2 :: GHC.Base.Maybe GHC.IO.FilePath
  {- Strictness: m2,
     Unfolding: (GHC.Base.Just @ GHC.IO.FilePath GHC.Paths.libdir) -}
instance GHC.Classes.Ord [GHC.LanguageExtensions.Type.Extension]
  = ExtMonad.$fOrdExtension
instance GHC.Read.Read [GHC.LanguageExtensions.Type.Extension]
  = ExtMonad.$fReadExtension
"SPEC/ExtMonad $fEqLogicalRelation @ Extension" [ALWAYS] forall ($dEq :: GHC.Classes.Eq
                                                                           GHC.LanguageExtensions.Type.Extension)
  ExtMap.$fEqLogicalRelation @ GHC.LanguageExtensions.Type.Extension
                             $dEq
  = ExtMonad.$s$fEqLogicalRelation
"SPEC/ExtMonad $fOrdLogicalRelation @ Extension" [ALWAYS] forall ($dOrd :: GHC.Classes.Ord
                                                                             GHC.LanguageExtensions.Type.Extension)
  ExtMap.$fOrdLogicalRelation @ GHC.LanguageExtensions.Type.Extension
                              $dOrd
  = ExtMonad.$s$fOrdLogicalRelation
"SPEC/ExtMonad $fOrdLogicalRelation_$c< @ Extension" [ALWAYS] forall ($dOrd :: GHC.Classes.Ord
                                                                                 GHC.LanguageExtensions.Type.Extension)
  ExtMap.$fOrdLogicalRelation_$c< @ GHC.LanguageExtensions.Type.Extension
                                  $dOrd
  = ExtMonad.$s$fOrdLogicalRelation_$s$fOrdLogicalRelation_$c<
"SPEC/ExtMonad $fOrdLogicalRelation_$c<= @ Extension" [ALWAYS] forall ($dOrd :: GHC.Classes.Ord
                                                                                  GHC.LanguageExtensions.Type.Extension)
  ExtMap.$fOrdLogicalRelation_$c<= @ GHC.LanguageExtensions.Type.Extension
                                   $dOrd
  = ExtMonad.$s$fOrdLogicalRelation_$s$fOrdLogicalRelation_$c<=
"SPEC/ExtMonad $fOrdLogicalRelation_$c> @ Extension" [ALWAYS] forall ($dOrd :: GHC.Classes.Ord
                                                                                 GHC.LanguageExtensions.Type.Extension)
  ExtMap.$fOrdLogicalRelation_$c> @ GHC.LanguageExtensions.Type.Extension
                                  $dOrd
  = ExtMonad.$s$fOrdLogicalRelation_$s$fOrdLogicalRelation_$c>
"SPEC/ExtMonad $fOrdLogicalRelation_$c>= @ Extension" [ALWAYS] forall ($dOrd :: GHC.Classes.Ord
                                                                                  GHC.LanguageExtensions.Type.Extension)
  ExtMap.$fOrdLogicalRelation_$c>= @ GHC.LanguageExtensions.Type.Extension
                                   $dOrd
  = ExtMonad.$s$fOrdLogicalRelation_$s$fOrdLogicalRelation_$c>=
"SPEC/ExtMonad $fOrdLogicalRelation_$cmax @ Extension" [ALWAYS] forall ($dOrd :: GHC.Classes.Ord
                                                                                   GHC.LanguageExtensions.Type.Extension)
  ExtMap.$fOrdLogicalRelation_$cmax @ GHC.LanguageExtensions.Type.Extension
                                    $dOrd
  = ExtMonad.$s$fOrdLogicalRelation_$s$fOrdLogicalRelation_$cmax
"SPEC/ExtMonad $fOrdLogicalRelation_$cmin @ Extension" [ALWAYS] forall ($dOrd :: GHC.Classes.Ord
                                                                                   GHC.LanguageExtensions.Type.Extension)
  ExtMap.$fOrdLogicalRelation_$cmin @ GHC.LanguageExtensions.Type.Extension
                                    $dOrd
  = ExtMonad.$s$fOrdLogicalRelation_$s$fOrdLogicalRelation_$cmin
"SPEC/ExtMonad $fOrdLogicalRelation_$cp1Ord @ Extension" [ALWAYS] forall ($dOrd :: GHC.Classes.Ord
                                                                                     GHC.LanguageExtensions.Type.Extension)
  ExtMap.$fOrdLogicalRelation_$cp1Ord @ GHC.LanguageExtensions.Type.Extension
                                      $dOrd
  = ExtMonad.$s$fOrdLogicalRelation_$s$fOrdLogicalRelation_$cp1Ord
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

