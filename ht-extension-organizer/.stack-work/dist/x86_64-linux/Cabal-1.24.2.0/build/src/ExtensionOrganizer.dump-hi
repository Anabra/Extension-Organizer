
==================== FINAL INTERFACE ====================
2017-09-20 22:58:30.058244 UTC

interface ht-extension-organizer-0.1.0.0-y3uypH7gCtA60AaWeuyZL:ExtensionOrganizer 8002
  interface hash: ea407c565017fa965a6e4290e2111f76
  ABI hash: a3b17db1c45307edc6e5a4c4d6152e61
  export-list hash: 21ad5fa3d0f74c9f052a90e9569e361f
  orphan hash: a962892118254bba982cbeb8cb003210
  flag hash: 532b60c6d8df1d08cc66908a0b327b0d
  sig of: Nothing
  used TH splices: True
  where
exports:
  Control.Monad.<$!>
  Control.Monad.<=<
  Control.Monad.>=>
  Control.Monad.filterM
  Control.Monad.foldM
  Control.Monad.foldM_
  Control.Monad.forever
  Control.Monad.guard
  Control.Monad.mapAndUnzipM
  Control.Monad.mfilter
  Control.Monad.replicateM
  Control.Monad.replicateM_
  Control.Monad.unless
  Control.Monad.zipWithM
  Control.Monad.zipWithM_
  Data.Foldable.forM_
  Data.Foldable.mapM_
  Data.Foldable.msum
  Data.Foldable.sequence_
  Data.Function.fix
  Data.Functor.void
  Data.Traversable.forM
  GHC.Base.=<<
  GHC.Base.ap
  GHC.Base.join
  GHC.Base.liftM
  GHC.Base.liftM2
  GHC.Base.liftM3
  GHC.Base.liftM4
  GHC.Base.liftM5
  GHC.Base.when
  ExtMonad.addOccurence
  ExtMonad.addOccurence'
  ExtMonad.addOccurence_
  ExtMonad.conditional
  ExtMonad.conditionalAny
  ExtMonad.isTurnedOn
  ExtMonad.runExtMonadGHC
  ExtMonad.runExtMonadIO
  ExtensionOrganizer.collectDefaultExtensions
  ExtensionOrganizer.collectExtensions
  ExtensionOrganizer.organizeExtensions
  ExtensionOrganizer.tryOut
  Control.Monad.Reader.Class.asks
  Control.Monad.State.Class.gets
  Control.Monad.State.Class.modify
  Control.Monad.State.Class.modify'
  Control.Monad.Trans.Reader.mapReader
  Control.Monad.Trans.Reader.mapReaderT
  Control.Monad.Trans.Reader.runReader
  Control.Monad.Trans.Reader.withReader
  Control.Monad.Trans.Reader.withReaderT
  Control.Monad.Trans.State.Lazy.evalState
  Control.Monad.Trans.State.Lazy.evalStateT
  Control.Monad.Trans.State.Lazy.execState
  Control.Monad.Trans.State.Lazy.execStateT
  Control.Monad.Trans.State.Lazy.mapState
  Control.Monad.Trans.State.Lazy.mapStateT
  Control.Monad.Trans.State.Lazy.runState
  Control.Monad.Trans.State.Lazy.withState
  Control.Monad.Trans.State.Lazy.withStateT
  Control.Monad.Fix.MonadFix{Control.Monad.Fix.mfix}
  Control.Monad.IO.Class.MonadIO{Control.Monad.IO.Class.liftIO}
  Data.Traversable.Traversable|{Data.Traversable.mapM Data.Traversable.sequence}
  GHC.Base.Functor{GHC.Base.fmap}
  GHC.Base.Monad{GHC.Base.>> GHC.Base.>>= GHC.Base.fail GHC.Base.return}
  GHC.Base.MonadPlus{GHC.Base.mplus GHC.Base.mzero}
  GHC.LanguageExtensions.Type.Extension{GHC.LanguageExtensions.Type.AllowAmbiguousTypes GHC.LanguageExtensions.Type.AlternativeLayoutRule GHC.LanguageExtensions.Type.AlternativeLayoutRuleTransitional GHC.LanguageExtensions.Type.ApplicativeDo GHC.LanguageExtensions.Type.Arrows GHC.LanguageExtensions.Type.AutoDeriveTypeable GHC.LanguageExtensions.Type.BangPatterns GHC.LanguageExtensions.Type.BinaryLiterals GHC.LanguageExtensions.Type.CApiFFI GHC.LanguageExtensions.Type.ConstrainedClassMethods GHC.LanguageExtensions.Type.ConstraintKinds GHC.LanguageExtensions.Type.Cpp GHC.LanguageExtensions.Type.DataKinds GHC.LanguageExtensions.Type.DatatypeContexts GHC.LanguageExtensions.Type.DefaultSignatures GHC.LanguageExtensions.Type.DeriveAnyClass GHC.LanguageExtensions.Type.DeriveDataTypeable GHC.LanguageExtensions.Type.DeriveFoldable GHC.LanguageExtensions.Type.DeriveFunctor GHC.LanguageExtensions.Type.DeriveGeneric GHC.LanguageExtensions.Type.DeriveLift GHC.LanguageExtensions.Type.DeriveTraversable GHC.LanguageExtensions.Type.DisambiguateRecordFields GHC.LanguageExtensions.Type.DoAndIfThenElse GHC.LanguageExtensions.Type.DuplicateRecordFields GHC.LanguageExtensions.Type.EmptyCase GHC.LanguageExtensions.Type.EmptyDataDecls GHC.LanguageExtensions.Type.ExistentialQuantification GHC.LanguageExtensions.Type.ExplicitForAll GHC.LanguageExtensions.Type.ExplicitNamespaces GHC.LanguageExtensions.Type.ExtendedDefaultRules GHC.LanguageExtensions.Type.FlexibleContexts GHC.LanguageExtensions.Type.FlexibleInstances GHC.LanguageExtensions.Type.ForeignFunctionInterface GHC.LanguageExtensions.Type.FunctionalDependencies GHC.LanguageExtensions.Type.GADTSyntax GHC.LanguageExtensions.Type.GADTs GHC.LanguageExtensions.Type.GHCForeignImportPrim GHC.LanguageExtensions.Type.GeneralizedNewtypeDeriving GHC.LanguageExtensions.Type.ImplicitParams GHC.LanguageExtensions.Type.ImplicitPrelude GHC.LanguageExtensions.Type.ImpredicativeTypes GHC.LanguageExtensions.Type.IncoherentInstances GHC.LanguageExtensions.Type.InstanceSigs GHC.LanguageExtensions.Type.InterruptibleFFI GHC.LanguageExtensions.Type.JavaScriptFFI GHC.LanguageExtensions.Type.KindSignatures GHC.LanguageExtensions.Type.LambdaCase GHC.LanguageExtensions.Type.LiberalTypeSynonyms GHC.LanguageExtensions.Type.MagicHash GHC.LanguageExtensions.Type.MonadComprehensions GHC.LanguageExtensions.Type.MonadFailDesugaring GHC.LanguageExtensions.Type.MonoLocalBinds GHC.LanguageExtensions.Type.MonoPatBinds GHC.LanguageExtensions.Type.MonomorphismRestriction GHC.LanguageExtensions.Type.MultiParamTypeClasses GHC.LanguageExtensions.Type.MultiWayIf GHC.LanguageExtensions.Type.NPlusKPatterns GHC.LanguageExtensions.Type.NamedWildCards GHC.LanguageExtensions.Type.NegativeLiterals GHC.LanguageExtensions.Type.NondecreasingIndentation GHC.LanguageExtensions.Type.NullaryTypeClasses GHC.LanguageExtensions.Type.NumDecimals GHC.LanguageExtensions.Type.OverlappingInstances GHC.LanguageExtensions.Type.OverloadedLabels GHC.LanguageExtensions.Type.OverloadedLists GHC.LanguageExtensions.Type.OverloadedStrings GHC.LanguageExtensions.Type.PackageImports GHC.LanguageExtensions.Type.ParallelArrays GHC.LanguageExtensions.Type.ParallelListComp GHC.LanguageExtensions.Type.PartialTypeSignatures GHC.LanguageExtensions.Type.PatternGuards GHC.LanguageExtensions.Type.PatternSynonyms GHC.LanguageExtensions.Type.PolyKinds GHC.LanguageExtensions.Type.PostfixOperators GHC.LanguageExtensions.Type.QuasiQuotes GHC.LanguageExtensions.Type.RankNTypes GHC.LanguageExtensions.Type.RebindableSyntax GHC.LanguageExtensions.Type.RecordPuns GHC.LanguageExtensions.Type.RecordWildCards GHC.LanguageExtensions.Type.RecursiveDo GHC.LanguageExtensions.Type.RelaxedLayout GHC.LanguageExtensions.Type.RelaxedPolyRec GHC.LanguageExtensions.Type.RoleAnnotations GHC.LanguageExtensions.Type.ScopedTypeVariables GHC.LanguageExtensions.Type.StandaloneDeriving GHC.LanguageExtensions.Type.StaticPointers GHC.LanguageExtensions.Type.Strict GHC.LanguageExtensions.Type.StrictData GHC.LanguageExtensions.Type.TemplateHaskell GHC.LanguageExtensions.Type.TemplateHaskellQuotes GHC.LanguageExtensions.Type.TraditionalRecordSyntax GHC.LanguageExtensions.Type.TransformListComp GHC.LanguageExtensions.Type.TupleSections GHC.LanguageExtensions.Type.TypeApplications GHC.LanguageExtensions.Type.TypeFamilies GHC.LanguageExtensions.Type.TypeFamilyDependencies GHC.LanguageExtensions.Type.TypeInType GHC.LanguageExtensions.Type.TypeOperators GHC.LanguageExtensions.Type.TypeSynonymInstances GHC.LanguageExtensions.Type.UnboxedTuples GHC.LanguageExtensions.Type.UndecidableInstances GHC.LanguageExtensions.Type.UndecidableSuperClasses GHC.LanguageExtensions.Type.UnicodeSyntax GHC.LanguageExtensions.Type.UnliftedFFITypes GHC.LanguageExtensions.Type.ViewPatterns}
  ExtMap.ExtMap
  ExtMap.LogicalRelation{ExtMap.:&&: ExtMap.:||: ExtMap.LVar ExtMap.Not}
  ExtMonad.CheckNode
  ExtMonad.CheckUNode
  ExtMonad.ExtDomain
  ExtMonad.ExtMonad
  Control.Monad.Reader.Class.MonadReader{Control.Monad.Reader.Class.ask Control.Monad.Reader.Class.local Control.Monad.Reader.Class.reader}
  Control.Monad.State.Class.MonadState{Control.Monad.State.Class.get Control.Monad.State.Class.put Control.Monad.State.Class.state}
  Control.Monad.Trans.Class.MonadTrans{Control.Monad.Trans.Class.lift}
  Control.Monad.Trans.Reader.Reader
  Control.Monad.Trans.Reader.ReaderT{Control.Monad.Trans.Reader.ReaderT runReaderT}
  Control.Monad.Trans.State.Lazy.State
  Control.Monad.Trans.State.Lazy.StateT{Control.Monad.Trans.State.Lazy.StateT runStateT}
module dependencies: BangPatternsChecker DerivingsChecker ExtMap
                     ExtMonad FlexibleInstancesChecker LambdaCaseChecker
                     PatternSynonymsChecker RecordWildCardsChecker
                     TemplateHaskellChecker TraverseAST TupleSectionsChecker
                     UnboxedTuplesChecker ViewPatternsChecker
package dependencies: array-0.5.1.1@array-0.5.1.1 base-4.9.1.0
                      binary-0.8.3.0@binary-0.8.3.0
                      bytestring-0.10.8.1@bytestring-0.10.8.1
                      containers-0.5.7.1@containers-0.5.7.1
                      deepseq-1.4.2.0@deepseq-1.4.2.0 directory-1.3.0.0@directory-1.3.0.0
                      either-4.4.1.1@either-4.4.1.1-6PiwKYkn4v6B4KO2R2Fu1b
                      filepath-1.4.1.1@filepath-1.4.1.1 ghc-8.0.2
                      ghc-boot-8.0.2@ghc-boot-8.0.2 ghc-boot-th-8.0.2@ghc-boot-th-8.0.2
                      ghc-paths-0.1.0.9@ghc-paths-0.1.0.9-AhaDlGOsRAepox069XzG
                      ghc-prim-0.5.0.0 ghci-8.0.2@ghci-8.0.2
                      hashable-1.2.6.1@hashable-1.2.6.1-2ZLNuHq395GGIHwEHuqZol
                      haskell-tools-ast-0.8.1.0@haskell-tools-ast-0.8.1.0-I9ZMaCkuuwT3FoQkwMjyW6
                      haskell-tools-backend-ghc-0.8.1.0@haskell-tools-backend-ghc-0.8.1.0-DqHnbK8OPi6CBD5cIPITWq
                      haskell-tools-prettyprint-0.8.1.0@haskell-tools-prettyprint-0.8.1.0-F9iWkGq5ppnLH6whHm0DlC
                      haskell-tools-refactor-0.8.1.0@haskell-tools-refactor-0.8.1.0-AF8Q4cA8mAnLNwu5t0Icw8
                      haskell-tools-rewrite-0.8.1.0@haskell-tools-rewrite-0.8.1.0-85A6q9dMQgvKEKG9I8fxVU
                      hoopl-3.10.2.1@hoopl-3.10.2.1 hpc-0.6.0.3@hpc-0.6.0.3
                      instance-control-0.1.1.1@instance-control-0.1.1.1-1defRS82vAAEmZKRhe67aa
                      integer-gmp-1.0.0.1 mtl-2.2.1@mtl-2.2.1-BLKBelFsPB3BoFeSWSOYj6
                      pretty-1.1.3.3@pretty-1.1.3.3 process-1.4.3.0@process-1.4.3.0
                      references-0.3.2.2@references-0.3.2.2-y362bKYomIKNQKMTfOWVo
                      safe-0.3.15@safe-0.3.15-2Yd45VWFfdcKqKyispOifY
                      split-0.2.3.2@split-0.2.3.2-CJl40zTyCIV16Pr60nb7CT
                      syb-0.7@syb-0.7-4OKdCpwGutyB1rNRmoa0ya template-haskell-2.11.1.0
                      text-1.2.2.2@text-1.2.2.2-9UQZjEJZQFSGMffj1Z5g00
                      time-1.6.0.1@time-1.6.0.1 transformers-0.5.2.0@transformers-0.5.2.0
                      uniplate-1.6.12@uniplate-1.6.12-4PyZX21trQJ5lfk0CDvC7U
                      unix-2.7.2.1@unix-2.7.2.1
                      unordered-containers-0.2.8.0@unordered-containers-0.2.8.0-Bp9XgxjuHxcI4tFehVMDGC
orphans: base-4.9.1.0:GHC.Base base-4.9.1.0:GHC.Float
         binary-0.8.3.0@binary-0.8.3.0:Data.Binary.Generic
         bytestring-0.10.8.1@bytestring-0.10.8.1:Data.ByteString.Builder
         ghc-8.0.2:BlockId ghc-8.0.2:DsMonad ghc-8.0.2:LoadIface
         ghc-8.0.2:PPC.Ppr ghc-8.0.2:PprCmm ghc-8.0.2:PprCmmDecl
         ghc-8.0.2:PprCmmExpr ghc-8.0.2:PprCore ghc-8.0.2:SPARC.Ppr
         ghc-8.0.2:TcEnv ghc-8.0.2:TcRnMonad ghc-8.0.2:X86.Ppr
         ghc-boot-8.0.2@ghc-boot-8.0.2:GHC.LanguageExtensions
         ghci-8.0.2@ghci-8.0.2:GHCi.Message
         ghci-8.0.2@ghci-8.0.2:GHCi.TH.Binary
         hashable-1.2.6.1@hashable-1.2.6.1-2ZLNuHq395GGIHwEHuqZol:Data.Hashable.Generic
         haskell-tools-ast-0.8.1.0@haskell-tools-ast-0.8.1.0-I9ZMaCkuuwT3FoQkwMjyW6:Language.Haskell.Tools.AST.Instances.Data
         haskell-tools-ast-0.8.1.0@haskell-tools-ast-0.8.1.0-I9ZMaCkuuwT3FoQkwMjyW6:Language.Haskell.Tools.AST.Instances.Eq
         haskell-tools-ast-0.8.1.0@haskell-tools-ast-0.8.1.0-I9ZMaCkuuwT3FoQkwMjyW6:Language.Haskell.Tools.AST.Instances.Generic
         haskell-tools-ast-0.8.1.0@haskell-tools-ast-0.8.1.0-I9ZMaCkuuwT3FoQkwMjyW6:Language.Haskell.Tools.AST.Instances.SemanticTraversal
         haskell-tools-ast-0.8.1.0@haskell-tools-ast-0.8.1.0-I9ZMaCkuuwT3FoQkwMjyW6:Language.Haskell.Tools.AST.Instances.Show
         haskell-tools-ast-0.8.1.0@haskell-tools-ast-0.8.1.0-I9ZMaCkuuwT3FoQkwMjyW6:Language.Haskell.Tools.AST.Instances.SourceInfoTraversal
         haskell-tools-ast-0.8.1.0@haskell-tools-ast-0.8.1.0-I9ZMaCkuuwT3FoQkwMjyW6:Language.Haskell.Tools.AST.SemaInfoTypes
         haskell-tools-ast-0.8.1.0@haskell-tools-ast-0.8.1.0-I9ZMaCkuuwT3FoQkwMjyW6:Language.Haskell.Tools.AST.Utils.GHCInstances
         haskell-tools-backend-ghc-0.8.1.0@haskell-tools-backend-ghc-0.8.1.0-DqHnbK8OPi6CBD5cIPITWq:Language.Haskell.Tools.AST.FromGHC.Utils
         haskell-tools-prettyprint-0.8.1.0@haskell-tools-prettyprint-0.8.1.0-F9iWkGq5ppnLH6whHm0DlC:Language.Haskell.Tools.Transform.RangeTemplate
         haskell-tools-prettyprint-0.8.1.0@haskell-tools-prettyprint-0.8.1.0-F9iWkGq5ppnLH6whHm0DlC:Language.Haskell.Tools.Transform.SourceTemplate
         haskell-tools-prettyprint-0.8.1.0@haskell-tools-prettyprint-0.8.1.0-F9iWkGq5ppnLH6whHm0DlC:Language.Haskell.Tools.Transform.SourceTemplateHelpers
         haskell-tools-refactor-0.8.1.0@haskell-tools-refactor-0.8.1.0-AF8Q4cA8mAnLNwu5t0Icw8:Language.Haskell.Tools.Refactor.RefactorBase
         ht-extension-organizer-0.1.0.0-y3uypH7gCtA60AaWeuyZL:ExtMonad
         references-0.3.2.2@references-0.3.2.2-y362bKYomIKNQKMTfOWVo:Control.Reference.Predefined.Containers.Tree
         references-0.3.2.2@references-0.3.2.2-y362bKYomIKNQKMTfOWVo:Control.Reference.TH.Records
         syb-0.7@syb-0.7-4OKdCpwGutyB1rNRmoa0ya:Data.Generics.Instances
         text-1.2.2.2@text-1.2.2.2-9UQZjEJZQFSGMffj1Z5g00:Data.Text
         text-1.2.2.2@text-1.2.2.2-9UQZjEJZQFSGMffj1Z5g00:Data.Text.Lazy
         text-1.2.2.2@text-1.2.2.2-9UQZjEJZQFSGMffj1Z5g00:Data.Text.Show
         time-1.6.0.1@time-1.6.0.1:Data.Time.Calendar.Gregorian
         time-1.6.0.1@time-1.6.0.1:Data.Time.Format.Parse
         time-1.6.0.1@time-1.6.0.1:Data.Time.LocalTime.LocalTime
         transformers-0.5.2.0@transformers-0.5.2.0:Control.Monad.Trans.Error
         uniplate-1.6.12@uniplate-1.6.12-4PyZX21trQJ5lfk0CDvC7U:Data.Generics.Uniplate.Data
family instance modules: base-4.9.1.0:Control.Applicative
                         base-4.9.1.0:Data.Complex base-4.9.1.0:Data.Either
                         base-4.9.1.0:Data.Functor.Compose base-4.9.1.0:Data.Functor.Const
                         base-4.9.1.0:Data.Functor.Identity
                         base-4.9.1.0:Data.Functor.Product base-4.9.1.0:Data.Functor.Sum
                         base-4.9.1.0:Data.List.NonEmpty base-4.9.1.0:Data.Monoid
                         base-4.9.1.0:Data.Semigroup base-4.9.1.0:Data.Type.Equality
                         base-4.9.1.0:Data.Version base-4.9.1.0:Data.Void
                         base-4.9.1.0:GHC.Exts base-4.9.1.0:GHC.Generics
                         base-4.9.1.0:GHC.IO.Exception base-4.9.1.0:GHC.TypeLits
                         containers-0.5.7.1@containers-0.5.7.1:Data.IntMap.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.IntSet.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.Map.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.Sequence
                         containers-0.5.7.1@containers-0.5.7.1:Data.Set.Base
                         ghc-8.0.2:PlaceHolder ghc-8.0.2:TrieMap
                         ghc-boot-th-8.0.2@ghc-boot-th-8.0.2:GHC.LanguageExtensions.Type
                         ghci-8.0.2@ghci-8.0.2:GHCi.FFI ghci-8.0.2@ghci-8.0.2:GHCi.Message
                         ghci-8.0.2@ghci-8.0.2:GHCi.ResolvedBCO
                         ghci-8.0.2@ghci-8.0.2:SizedSeq
                         haskell-tools-ast-0.8.1.0@haskell-tools-ast-0.8.1.0-I9ZMaCkuuwT3FoQkwMjyW6:Language.Haskell.Tools.AST.Ann
                         haskell-tools-ast-0.8.1.0@haskell-tools-ast-0.8.1.0-I9ZMaCkuuwT3FoQkwMjyW6:Language.Haskell.Tools.AST.Instances.Generic
                         haskell-tools-prettyprint-0.8.1.0@haskell-tools-prettyprint-0.8.1.0-F9iWkGq5ppnLH6whHm0DlC:Language.Haskell.Tools.Transform.RangeTemplate
                         haskell-tools-prettyprint-0.8.1.0@haskell-tools-prettyprint-0.8.1.0-F9iWkGq5ppnLH6whHm0DlC:Language.Haskell.Tools.Transform.SourceTemplate
                         hoopl-3.10.2.1@hoopl-3.10.2.1:Compiler.Hoopl.Block
                         hoopl-3.10.2.1@hoopl-3.10.2.1:Compiler.Hoopl.Dataflow
                         hoopl-3.10.2.1@hoopl-3.10.2.1:Compiler.Hoopl.Fuel
                         hoopl-3.10.2.1@hoopl-3.10.2.1:Compiler.Hoopl.Label
                         hoopl-3.10.2.1@hoopl-3.10.2.1:Compiler.Hoopl.Unique
                         pretty-1.1.3.3@pretty-1.1.3.3:Text.PrettyPrint.Annotated.HughesPJ
                         pretty-1.1.3.3@pretty-1.1.3.3:Text.PrettyPrint.HughesPJ
                         references-0.3.2.2@references-0.3.2.2-y362bKYomIKNQKMTfOWVo:Control.Reference.Predefined.Containers
                         references-0.3.2.2@references-0.3.2.2-y362bKYomIKNQKMTfOWVo:Control.Reference.Predefined.Containers.Tree
                         references-0.3.2.2@references-0.3.2.2-y362bKYomIKNQKMTfOWVo:Control.Reference.Types
                         template-haskell-2.11.1.0:Language.Haskell.TH.Syntax
                         text-1.2.2.2@text-1.2.2.2-9UQZjEJZQFSGMffj1Z5g00:Data.Text
                         text-1.2.2.2@text-1.2.2.2-9UQZjEJZQFSGMffj1Z5g00:Data.Text.Lazy
                         unordered-containers-0.2.8.0@unordered-containers-0.2.8.0-Bp9XgxjuHxcI4tFehVMDGC:Data.HashMap.Base
                         unordered-containers-0.2.8.0@unordered-containers-0.2.8.0-Bp9XgxjuHxcI4tFehVMDGC:Data.HashSet
import  -/  base-4.9.1.0:Control.Monad a6784c5dab0d75c63dabec5a37843f98
import  -/  base-4.9.1.0:Control.Monad.IO.Class 1a4384f66ee999caf5366398edb6ca7b
import  -/  base-4.9.1.0:Data.Char 01433d23661edb6e5ef1536ef1e6774c
import  -/  base-4.9.1.0:Data.Foldable 3e0b6967a1da89945d0e2d47266337a2
import  -/  base-4.9.1.0:Data.Functor 5ab1dc703df5b482e77efb697833ca3c
import  -/  base-4.9.1.0:Data.Ix a87f5170bf213161cce2e025974f49b5
import  -/  base-4.9.1.0:Data.List 07ae2acca6538aa0800bd0a993ac6ac1
import  -/  base-4.9.1.0:Data.Traversable 556020d7cf3c4a34a774600512918a37
import  -/  base-4.9.1.0:Debug.Trace a9edf3aec504f4423d8ba829ab373a25
import  -/  base-4.9.1.0:GHC.Base c4231c43c07e46080a26bf94094c7aa1
import  -/  base-4.9.1.0:GHC.List ab8c4e523e6c479c549d3bcd5fc4a439
import  -/  base-4.9.1.0:GHC.Unicode a175ecf20bf1272d9ae31337e7da43ab
import  -/  base-4.9.1.0:Prelude 22dd289b8469a8fa8dc81cab7b237771
import  -/  base-4.9.1.0:Text.Read 75c59863e882ebaec4532e9465e2ee9b
import  -/  containers-0.5.7.1@containers-0.5.7.1:Data.Map.Base d432f6875983131473086af8cb290590
import  -/  containers-0.5.7.1@containers-0.5.7.1:Data.Map.Strict 9d0c0962e53270a0a3fb5cb63723a381
import  -/  containers-0.5.7.1@containers-0.5.7.1:Data.Set 3ed2324fd1e757464a8ac2b636a64e5a
import  -/  ghc-8.0.2:GHC 2331686350095b94008a49ce7901eaa2
import  -/  ghc-8.0.2:GhcMonad fe90acc3f77ca6bdb0686328a3d31d0f
import  -/  ghc-8.0.2:SrcLoc ae8e460a2b77026f9c6a4d6cdcc5d57e
import  -/  ghc-boot-th-8.0.2@ghc-boot-th-8.0.2:GHC.LanguageExtensions.Type 92441ea50916fa3940e20fae60f255d7
import  -/  ghc-prim-0.5.0.0:GHC.Types 89f8de4f08018c9177c98d979eae0e45
import  -/  haskell-tools-ast-0.8.1.0@haskell-tools-ast-0.8.1.0-I9ZMaCkuuwT3FoQkwMjyW6:Language.Haskell.Tools.AST.Ann 07e8f66a2b6d7f18951fb774264c8644
import  -/  haskell-tools-ast-0.8.1.0@haskell-tools-ast-0.8.1.0-I9ZMaCkuuwT3FoQkwMjyW6:Language.Haskell.Tools.AST.References 46cb31a69f53297ab865876852473aa3
import  -/  haskell-tools-prettyprint-0.8.1.0@haskell-tools-prettyprint-0.8.1.0-F9iWkGq5ppnLH6whHm0DlC:Language.Haskell.Tools.PrettyPrint da7dea6ac299ef1620d7160216fb97b0
import  -/  haskell-tools-refactor-0.8.1.0@haskell-tools-refactor-0.8.1.0-AF8Q4cA8mAnLNwu5t0Icw8:Language.Haskell.Tools.Refactor 84acc8d60e278de91351468f26f90e1c
import  -/  haskell-tools-refactor-0.8.1.0@haskell-tools-refactor-0.8.1.0-AF8Q4cA8mAnLNwu5t0Icw8:Language.Haskell.Tools.Refactor.Prepare 06c995907993af4dca8399eaa224a412
import  -/  haskell-tools-refactor-0.8.1.0@haskell-tools-refactor-0.8.1.0-AF8Q4cA8mAnLNwu5t0Icw8:Language.Haskell.Tools.Refactor.RefactorBase d8cc79a36102a900280f4d51e9bf8f8a
import  -/  DerivingsChecker 8e1f2c0a55518acd3303c01e5ff11788
  exports: c9c99a13421ec9464a9b0877252e817a
import  -/  ExtMap ce208fa2f233772cc4b03c60efef446e
  :&&: 4a12e4fbb68353aea1ce40a572e2a5f4
  :||: b024d415aaaed601318f0e8fa0ffaa04
  ExtMap 86d8b8e09d7cd6f6e3831751b6397a46
  LVar c2b251913343abac99e887c1b70f0c95
  LogicalRelation 244102f8a6d7434a090b758121b05523
  Not a790822a2ae7d0c293b41158b7bc0e52
import  -/  ExtMonad af7b60a65d818af19a46d996e27297ca
  exports: 7f69547596e05261c6f5806398624025
  CheckNode d2a8a000f373c241c0362787c4b3f842
  CheckUNode 9a3c78de9fdd35033f52f4944cc68138
  ExtDomain 7fc7ae623015a9d2031eb05f95b73507
  ExtMonad 6ab37cbe93709f9dcdeffcf18c24ce9b
  addOccurence c9603992ac2a28741343ebc5c8fe7b56
  addOccurence' 806962a54b1c16e16558458575c9a479
  addOccurence_ 0a70efda5e7142f7b588f7458ea99597
  conditional 179fcfe6ec57edddd9abe173be82121d
  conditionalAny 53eb934c9b54c6f8fe1c33689d0d30d5
  isTurnedOn 58326d046a06fcac13f090ffdee96f9d
  runExtMonadGHC 64013254a8a069463528a96ade6c9f65
  runExtMonadIO 7d696a7ab8d541e03e4a3c0a61328a95
import  -/  FlexibleInstancesChecker 613725654704abee4fd54b0f4775ba97
  exports: e3e5947061f31e3de9af61a2611cb8cf
import  -/  RecordWildCardsChecker e2f49d4df4442f9537924c3d04d106da
  exports: e1d6c5023d5d4bebad625065ab76cd62
import  -/  TraverseAST 79558d01680b5677b4dadc7757e88c58
  exports: aee07235b6b1241d28e3091e2b799ca6
  traverseModule 4aa0c6520cfaace2f9c79830dc87fa55
import  -/  mtl-2.2.1@mtl-2.2.1-BLKBelFsPB3BoFeSWSOYj6:Control.Monad.Reader.Class 9573b8d2ba4bcf8261d19527e0170c4d
import  -/  mtl-2.2.1@mtl-2.2.1-BLKBelFsPB3BoFeSWSOYj6:Control.Monad.State 749dca8ca0e6625b32091d445bd92b01
import  -/  mtl-2.2.1@mtl-2.2.1-BLKBelFsPB3BoFeSWSOYj6:Control.Monad.State.Class 6d31234b0a911b56412061943d18b89e
import  -/  references-0.3.2.2@references-0.3.2.2-y362bKYomIKNQKMTfOWVo:Control.Reference d89ee82346f6e25c55a8a19dbf84658e
import  -/  references-0.3.2.2@references-0.3.2.2-y362bKYomIKNQKMTfOWVo:Control.Reference.Combinators ab836299cfb9898d02f637bc65b3765a
import  -/  references-0.3.2.2@references-0.3.2.2-y362bKYomIKNQKMTfOWVo:Control.Reference.Operators 55e717f4df077a71cb70a96f85f6a393
import  -/  transformers-0.5.2.0@transformers-0.5.2.0:Control.Monad.Trans.Class 45530f1305724ee3931a9be21b40ca7e
import  -/  transformers-0.5.2.0@transformers-0.5.2.0:Control.Monad.Trans.Reader 1b607a084a390ae0e50e8f8dcbf2541a
import  -/  transformers-0.5.2.0@transformers-0.5.2.0:Control.Monad.Trans.State.Lazy 371607e50dde46b5f4103b3ab334a497
Module target ht-extension-organizer-0.1.0.0-y3uypH7gCtA60AaWeuyZL:ExtensionOrganizer annotated by 1269 of type [Char]
Module target ht-extension-organizer-0.1.0.0-y3uypH7gCtA60AaWeuyZL:ExtensionOrganizer annotated by 1059 of type [Char]
c2cc4e4e3d5ad0607c1f8f92348fb0f7
  $s$fDataImportInfo ::
    Data.Data.Data
      (Language.Haskell.Tools.AST.SemaInfoTypes.ImportInfo Var.Var)
  {- Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (Language.Haskell.Tools.AST.SemaInfoTypes.ImportInfo Var.Var)
                  (Language.Haskell.Tools.AST.SemaInfoTypes.$fDataImportInfo_$cp1Data
                     @ Var.Var
                     Var.$fDataVar)
                  (Language.Haskell.Tools.AST.SemaInfoTypes.$fDataImportInfo_$cgfoldl
                     @ Var.Var
                     Var.$fDataVar)
                  (Language.Haskell.Tools.AST.SemaInfoTypes.$fDataImportInfo_$cgunfold
                     @ Var.Var
                     Var.$fDataVar)
                  ExtensionOrganizer.$s$fDataImportInfo_$s$fDataImportInfo_$ctoConstr
                  ExtensionOrganizer.$s$fDataImportInfo_$s$fDataImportInfo_$cdataTypeOf
                  (Language.Haskell.Tools.AST.SemaInfoTypes.$fDataImportInfo_$cdataCast1
                     @ Var.Var
                     Var.$fDataVar)
                  ExtensionOrganizer.$s$fDataImportInfo_$s$fDataImportInfo_$cdataCast2
                  (Language.Haskell.Tools.AST.SemaInfoTypes.$fDataImportInfo_$cgmapT
                     @ Var.Var
                     Var.$fDataVar)
                  (Language.Haskell.Tools.AST.SemaInfoTypes.$fDataImportInfo_$cgmapQl
                     @ Var.Var
                     Var.$fDataVar)
                  (Language.Haskell.Tools.AST.SemaInfoTypes.$fDataImportInfo_$cgmapQr
                     @ Var.Var
                     Var.$fDataVar)
                  (Language.Haskell.Tools.AST.SemaInfoTypes.$fDataImportInfo_$cgmapQ
                     @ Var.Var
                     Var.$fDataVar)
                  (Language.Haskell.Tools.AST.SemaInfoTypes.$fDataImportInfo_$cgmapQi
                     @ Var.Var
                     Var.$fDataVar)
                  (Language.Haskell.Tools.AST.SemaInfoTypes.$fDataImportInfo_$cgmapM
                     @ Var.Var
                     Var.$fDataVar)
                  (Language.Haskell.Tools.AST.SemaInfoTypes.$fDataImportInfo_$cgmapMp
                     @ Var.Var
                     Var.$fDataVar)
                  (Language.Haskell.Tools.AST.SemaInfoTypes.$fDataImportInfo_$cgmapMo
                     @ Var.Var
                     Var.$fDataVar) -}
3d4d17863df30f89353dc30d99aed9bb
  $s$fDataImportInfo_$s$fDataImportInfo_$cdataCast2 ::
    Data.Typeable.Internal.Typeable t =>
    (forall d e. (Data.Data.Data d, Data.Data.Data e) => c (t d e))
    -> GHC.Base.Maybe
         (c (Language.Haskell.Tools.AST.SemaInfoTypes.ImportInfo Var.Var))
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><L,A>,
     Unfolding: InlineRule (2, True, True)
                (\ @ (t :: * -> * -> *)
                   @ (c :: * -> *)
                   ($dTypeable :: Data.Typeable.Internal.Typeable t)
                   (ds1 :: forall d e.
                           (Data.Data.Data d, Data.Data.Data e) =>
                           c (t d e)) ->
                 GHC.Base.Nothing
                   @ (c (Language.Haskell.Tools.AST.SemaInfoTypes.ImportInfo
                           Var.Var))) -}
72bf865f94ae46faf307dba5e62f2345
  $s$fDataImportInfo_$s$fDataImportInfo_$cdataTypeOf ::
    Language.Haskell.Tools.AST.SemaInfoTypes.ImportInfo Var.Var
    -> Data.Data.DataType
  {- Arity: 1, Strictness: <L,A>m,
     Unfolding: InlineRule (1, True, True)
                (\ (ds1 :: Language.Haskell.Tools.AST.SemaInfoTypes.ImportInfo
                             Var.Var) ->
                 Language.Haskell.Tools.AST.SemaInfoTypes.$tCGCyyeAJlLA79SU0hhqeif) -}
a70780e8f53cec1295a33a81616ce7b9
  $s$fDataImportInfo_$s$fDataImportInfo_$ctoConstr ::
    Language.Haskell.Tools.AST.SemaInfoTypes.ImportInfo Var.Var
    -> Data.Data.Constr
  {- Arity: 1, Strictness: <S,1*H>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds1 :: Language.Haskell.Tools.AST.SemaInfoTypes.ImportInfo
                             Var.Var) ->
                 case ds1 of wild { Language.Haskell.Tools.AST.SemaInfoTypes.ImportInfo ds2 ds3 ds4 ds5 ds6 ->
                 Language.Haskell.Tools.AST.SemaInfoTypes.$cCGCyyeAJlLA79SU0hhqeif }) -}
7358170a04b973b49271e503ba983833
  $s$fDataModuleInfo ::
    Data.Data.Data
      (Language.Haskell.Tools.AST.SemaInfoTypes.ModuleInfo Var.Var)
  {- Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (Language.Haskell.Tools.AST.SemaInfoTypes.ModuleInfo Var.Var)
                  (Language.Haskell.Tools.AST.SemaInfoTypes.$fDataModuleInfo_$cp1Data
                     @ Var.Var
                     Var.$fDataVar)
                  (Language.Haskell.Tools.AST.SemaInfoTypes.$fDataModuleInfo_$cgfoldl
                     @ Var.Var
                     Var.$fDataVar)
                  (Language.Haskell.Tools.AST.SemaInfoTypes.$fDataModuleInfo_$cgunfold
                     @ Var.Var
                     Var.$fDataVar)
                  ExtensionOrganizer.$s$fDataModuleInfo_$s$fDataModuleInfo_$ctoConstr
                  ExtensionOrganizer.$s$fDataModuleInfo_$s$fDataModuleInfo_$cdataTypeOf
                  (Language.Haskell.Tools.AST.SemaInfoTypes.$fDataModuleInfo_$cdataCast1
                     @ Var.Var
                     Var.$fDataVar)
                  ExtensionOrganizer.$s$fDataModuleInfo_$s$fDataModuleInfo_$cdataCast2
                  (Language.Haskell.Tools.AST.SemaInfoTypes.$fDataModuleInfo_$cgmapT
                     @ Var.Var
                     Var.$fDataVar)
                  (Language.Haskell.Tools.AST.SemaInfoTypes.$fDataModuleInfo_$cgmapQl
                     @ Var.Var
                     Var.$fDataVar)
                  (Language.Haskell.Tools.AST.SemaInfoTypes.$fDataModuleInfo_$cgmapQr
                     @ Var.Var
                     Var.$fDataVar)
                  (Language.Haskell.Tools.AST.SemaInfoTypes.$fDataModuleInfo_$cgmapQ
                     @ Var.Var
                     Var.$fDataVar)
                  (Language.Haskell.Tools.AST.SemaInfoTypes.$fDataModuleInfo_$cgmapQi
                     @ Var.Var
                     Var.$fDataVar)
                  (Language.Haskell.Tools.AST.SemaInfoTypes.$fDataModuleInfo_$cgmapM
                     @ Var.Var
                     Var.$fDataVar)
                  (Language.Haskell.Tools.AST.SemaInfoTypes.$fDataModuleInfo_$cgmapMp
                     @ Var.Var
                     Var.$fDataVar)
                  (Language.Haskell.Tools.AST.SemaInfoTypes.$fDataModuleInfo_$cgmapMo
                     @ Var.Var
                     Var.$fDataVar) -}
bdd14e20e4a4260c25dd5d73da228362
  $s$fDataModuleInfo_$s$fDataModuleInfo_$cdataCast2 ::
    Data.Typeable.Internal.Typeable t =>
    (forall d e. (Data.Data.Data d, Data.Data.Data e) => c (t d e))
    -> GHC.Base.Maybe
         (c (Language.Haskell.Tools.AST.SemaInfoTypes.ModuleInfo Var.Var))
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><L,A>,
     Unfolding: InlineRule (2, True, True)
                (\ @ (t :: * -> * -> *)
                   @ (c :: * -> *)
                   ($dTypeable :: Data.Typeable.Internal.Typeable t)
                   (ds1 :: forall d e.
                           (Data.Data.Data d, Data.Data.Data e) =>
                           c (t d e)) ->
                 GHC.Base.Nothing
                   @ (c (Language.Haskell.Tools.AST.SemaInfoTypes.ModuleInfo
                           Var.Var))) -}
8e50d197c4e2f5cf03997a7e1b42a20e
  $s$fDataModuleInfo_$s$fDataModuleInfo_$cdataTypeOf ::
    Language.Haskell.Tools.AST.SemaInfoTypes.ModuleInfo Var.Var
    -> Data.Data.DataType
  {- Arity: 1, Strictness: <L,A>m,
     Unfolding: InlineRule (1, True, True)
                (\ (ds1 :: Language.Haskell.Tools.AST.SemaInfoTypes.ModuleInfo
                             Var.Var) ->
                 Language.Haskell.Tools.AST.SemaInfoTypes.$t8kQvtqUmj9O26DNBHuLtDJ) -}
c4c0045816a3f7d333a5e132ea6cc02e
  $s$fDataModuleInfo_$s$fDataModuleInfo_$ctoConstr ::
    Language.Haskell.Tools.AST.SemaInfoTypes.ModuleInfo Var.Var
    -> Data.Data.Constr
  {- Arity: 1, Strictness: <S,1*H>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds1 :: Language.Haskell.Tools.AST.SemaInfoTypes.ModuleInfo
                             Var.Var) ->
                 case ds1 of wild { Language.Haskell.Tools.AST.SemaInfoTypes.ModuleInfo ds2 ds3 ds4 ds5 ds6 ds7 ->
                 Language.Haskell.Tools.AST.SemaInfoTypes.$c8kQvtqUmj9O26DNBHuLtDJ }) -}
0d1591e528408c42962f5525cfe620de
  $s$fDomaind ::
    Language.Haskell.Tools.AST.Ann.Domain
      Language.Haskell.Tools.AST.Ann.IdDom
  {- Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Language.Haskell.Tools.AST.Ann.IdDom
                  ExtensionOrganizer.$s$fDomaind7
                  ExtensionOrganizer.$s$fDomaind_$s$fDomaind_$cp2Domain
                  ExtensionOrganizer.$s$fDomaind_$s$fDomaind_$cp3Domain
                  ExtensionOrganizer.$s$fDomaind_$s$fDomaind_$cp4Domain
                  ExtensionOrganizer.$s$fDomaind_$s$fDomaind_$cp5Domain
                  ExtensionOrganizer.$s$fDomaind_$s$fDomaind_$cp6Domain
                  ExtensionOrganizer.$s$fDomaind_$s$fDomaind_$cp7Domain
                  ExtensionOrganizer.$s$fDomaind_$s$fDomaind_$cp8Domain
                  ExtensionOrganizer.$s$fDomaind_$s$fDomaind_$cp9Domain
                  ExtensionOrganizer.$s$fDomaind_$s$fDomaind_$cp10Domain
                  ExtensionOrganizer.$s$fDomaind_$s$fDomaind_$cp11Domain
                  ExtensionOrganizer.$s$fDomaind_$s$fDomaind_$cp12Domain
                  ExtensionOrganizer.$s$fDomaind_$s$fDomaind_$cp13Domain -}
720bace3b89ad0e0cec6bd69cb574daa
  $s$fDomaind1 ::
    GHC.Show.Show
      (Language.Haskell.Tools.AST.SemaInfoTypes.ModuleInfo Var.Id)
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                ExtensionOrganizer.$s$fDomaind_$s$fShowModuleInfo -}
3ad34774095a2f75cc87ca068dcb8930
  $s$fDomaind10 :: GHC.Fingerprint.Type.Fingerprint
  {- HasNoCafRefs,
     Unfolding: (GHC.Fingerprint.Type.Fingerprint
                   11145549849738423769##
                   13393259708013230772##) -}
01e731b4de53b1c5711e102c0918dc54
  $s$fDomaind2 ::
    GHC.Show.Show
      (Language.Haskell.Tools.AST.SemaInfoTypes.ImportInfo Var.Id)
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                ExtensionOrganizer.$s$fDomaind_$s$fShowImportInfo -}
0825efead397c4fb699b925dc84db9bf
  $s$fDomaind3 ::
    Data.Data.Data
      (Language.Haskell.Tools.AST.SemaInfoTypes.ModuleInfo Var.Id)
  {- Unfolding: InlineRule (0, True, True)
                ExtensionOrganizer.$s$fDataModuleInfo -}
7bce828084f8c4b095306295d960da43
  $s$fDomaind4 ::
    Data.Data.Data
      (Language.Haskell.Tools.AST.SemaInfoTypes.ImportInfo Var.Id)
  {- Unfolding: InlineRule (0, True, True)
                ExtensionOrganizer.$s$fDataImportInfo -}
9f8b5812668bf5002e8b70b11e460cf3
  $s$fDomaind5 ::
    Language.Haskell.Tools.AST.SemaInfoTypes.NoSemanticInfo
    Data.Type.Equality.~ Language.Haskell.Tools.AST.SemaInfoTypes.NoSemanticInfo
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                ExtensionOrganizer.$s$fDomaind6
                  `cast`
                (Sym (Data.Type.Equality.N:~[0]
                          <*>_N) <Language.Haskell.Tools.AST.SemaInfoTypes.NoSemanticInfo>_N <Language.Haskell.Tools.AST.SemaInfoTypes.NoSemanticInfo>_N) -}
630890f79ba7d1af6e24458e30a3cd61
  $s$fDomaind6 ::
    Language.Haskell.Tools.AST.SemaInfoTypes.NoSemanticInfo
    GHC.Types.~~ Language.Haskell.Tools.AST.SemaInfoTypes.NoSemanticInfo
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Eq#
                   @ *
                   @ *
                   @ Language.Haskell.Tools.AST.SemaInfoTypes.NoSemanticInfo
                   @ Language.Haskell.Tools.AST.SemaInfoTypes.NoSemanticInfo
                   @~ <Language.Haskell.Tools.AST.SemaInfoTypes.NoSemanticInfo>_N) -}
fc2c312e2b1539190dfdef9f200ee32a
  $s$fDomaind7 ::
    Data.Typeable.Internal.Typeable
      Language.Haskell.Tools.AST.Ann.IdDom
  {- Arity: 1, Strictness: <L,A>,
     Unfolding: InlineRule (0, True, True)
                ExtensionOrganizer.$s$fDomaind8
                  `cast`
                (Sym (Data.Typeable.Internal.N:Typeable[0]
                          <*>_N <Language.Haskell.Tools.AST.Ann.IdDom>_N)) -}
32dd579ca6f5f77d92484b41493fa018
  $s$fDomaind8 ::
    GHC.Prim.Proxy# Language.Haskell.Tools.AST.Ann.IdDom
    -> Data.Typeable.Internal.TypeRep
  {- Arity: 1, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ (wild :: GHC.Prim.Proxy#
                              Language.Haskell.Tools.AST.Ann.IdDom) ->
                 ExtensionOrganizer.$s$fDomaind9) -}
fc7f834da9cfa436e0061bfc846c9c4e
  $s$fDomaind9 :: Data.Typeable.Internal.TypeRep
  {- Unfolding: (case Data.Typeable.Internal.typeRepFingerprints
                        (GHC.Types.[] @ Data.Typeable.Internal.TypeRep)
                        (GHC.Types.[]
                           @ Data.Typeable.Internal.TypeRep) of kt_fps { DEFAULT ->
                 case GHC.Fingerprint.fingerprintFingerprints
                        (GHC.Types.:
                           @ GHC.Fingerprint.Type.Fingerprint
                           ExtensionOrganizer.$s$fDomaind10
                           kt_fps) of dt { GHC.Fingerprint.Type.Fingerprint dt1 dt2 ->
                 Data.Typeable.Internal.TypeRep
                   dt1
                   dt2
                   Language.Haskell.Tools.AST.Ann.$tcIdDom
                   (GHC.Types.[] @ Data.Typeable.Internal.TypeRep)
                   (GHC.Types.[] @ Data.Typeable.Internal.TypeRep) } }) -}
5cfad352fb454d7a8fa4069d5e14db2f
  $s$fDomaind_$s$fDomaind_$cp10Domain ::
    GHC.Show.Show
      (Language.Haskell.Tools.AST.Ann.SemanticInfo'
         Language.Haskell.Tools.AST.Ann.IdDom
         Language.Haskell.Tools.AST.Ann.SameInfoExprCls)
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                Language.Haskell.Tools.AST.SemaInfoTypes.$fShowScopeInfo
                  `cast`
                (GHC.Show.Show
                   (Sym (Language.Haskell.Tools.AST.Ann.D:R:SemanticInfo'IdDomSameInfoExprCls[0])))_R -}
d084125c0cd2b37e0678c5e171e26eb1
  $s$fDomaind_$s$fDomaind_$cp11Domain ::
    GHC.Show.Show
      (Language.Haskell.Tools.AST.Ann.SemanticInfo'
         Language.Haskell.Tools.AST.Ann.IdDom
         Language.Haskell.Tools.AST.Ann.SameInfoImportCls)
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                ExtensionOrganizer.$s$fDomaind2
                  `cast`
                (GHC.Show.Show
                   (Sym (Language.Haskell.Tools.AST.Ann.D:R:SemanticInfo'IdDomSameInfoImportCls[0])))_R -}
459168153c136216aeb0219100b032af
  $s$fDomaind_$s$fDomaind_$cp12Domain ::
    GHC.Show.Show
      (Language.Haskell.Tools.AST.Ann.SemanticInfo'
         Language.Haskell.Tools.AST.Ann.IdDom
         Language.Haskell.Tools.AST.Ann.SameInfoModuleCls)
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                ExtensionOrganizer.$s$fDomaind1
                  `cast`
                (GHC.Show.Show
                   (Sym (Language.Haskell.Tools.AST.Ann.D:R:SemanticInfo'IdDomSameInfoModuleCls[0])))_R -}
734f817f9b64faf2ea95761f56d2a7bb
  $s$fDomaind_$s$fDomaind_$cp13Domain ::
    GHC.Show.Show
      (Language.Haskell.Tools.AST.Ann.SemanticInfo'
         Language.Haskell.Tools.AST.Ann.IdDom
         Language.Haskell.Tools.AST.Ann.SameInfoWildcardCls)
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                Language.Haskell.Tools.AST.SemaInfoTypes.$fShowImplicitFieldInfo
                  `cast`
                (GHC.Show.Show
                   (Sym (Language.Haskell.Tools.AST.Ann.D:R:SemanticInfo'IdDomSameInfoWildcardCls[0])))_R -}
51f3909a1c1660ce38f1aeae2b76e327
  $s$fDomaind_$s$fDomaind_$cp2Domain ::
    Data.Data.Data Language.Haskell.Tools.AST.Ann.IdDom
  {- Unfolding: InlineRule (0, True, True)
                Language.Haskell.Tools.AST.Ann.$fDataIdDom -}
98439e375339cb5fc357e1bd44225dee
  $s$fDomaind_$s$fDomaind_$cp3Domain ::
    Language.Haskell.Tools.AST.Ann.SemanticInfo'
      Language.Haskell.Tools.AST.Ann.IdDom
      Language.Haskell.Tools.AST.Ann.SameInfoDefaultCls
    Data.Type.Equality.~ Language.Haskell.Tools.AST.SemaInfoTypes.NoSemanticInfo
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                ExtensionOrganizer.$s$fDomaind5
                  `cast`
                ((Data.Type.Equality.~)
                   <*>_N
                   (Sym (Language.Haskell.Tools.AST.Ann.D:R:SemanticInfo'IdDomSameInfoDefaultCls[0]))
                   <Language.Haskell.Tools.AST.SemaInfoTypes.NoSemanticInfo>_N)_R -}
1686bfa68fdeb8473c3de968418bc098
  $s$fDomaind_$s$fDomaind_$cp4Domain ::
    Data.Data.Data
      (Language.Haskell.Tools.AST.Ann.SemanticInfo'
         Language.Haskell.Tools.AST.Ann.IdDom
         Language.Haskell.Tools.AST.Ann.SameInfoNameCls)
  {- Unfolding: InlineRule (0, True, True)
                Language.Haskell.Tools.AST.SemaInfoTypes.$fDataCNameInfo
                  `cast`
                (Data.Data.Data
                   (Sym (Language.Haskell.Tools.AST.Ann.D:R:SemanticInfo'IdDomSameInfoNameCls[0])))_R -}
fc5edd38f6254b9f03c8b9d275a303bd
  $s$fDomaind_$s$fDomaind_$cp5Domain ::
    Data.Data.Data
      (Language.Haskell.Tools.AST.Ann.SemanticInfo'
         Language.Haskell.Tools.AST.Ann.IdDom
         Language.Haskell.Tools.AST.Ann.SameInfoExprCls)
  {- Unfolding: InlineRule (0, True, True)
                Language.Haskell.Tools.AST.SemaInfoTypes.$fDataScopeInfo
                  `cast`
                (Data.Data.Data
                   (Sym (Language.Haskell.Tools.AST.Ann.D:R:SemanticInfo'IdDomSameInfoExprCls[0])))_R -}
48ddd6fe1d64450ec2196adf326a4847
  $s$fDomaind_$s$fDomaind_$cp6Domain ::
    Data.Data.Data
      (Language.Haskell.Tools.AST.Ann.SemanticInfo'
         Language.Haskell.Tools.AST.Ann.IdDom
         Language.Haskell.Tools.AST.Ann.SameInfoImportCls)
  {- Unfolding: InlineRule (0, True, True)
                ExtensionOrganizer.$s$fDomaind4
                  `cast`
                (Data.Data.Data
                   (Sym (Language.Haskell.Tools.AST.Ann.D:R:SemanticInfo'IdDomSameInfoImportCls[0])))_R -}
50d73121fd08a407c9a6e7a84fbef9b0
  $s$fDomaind_$s$fDomaind_$cp7Domain ::
    Data.Data.Data
      (Language.Haskell.Tools.AST.Ann.SemanticInfo'
         Language.Haskell.Tools.AST.Ann.IdDom
         Language.Haskell.Tools.AST.Ann.SameInfoModuleCls)
  {- Unfolding: InlineRule (0, True, True)
                ExtensionOrganizer.$s$fDomaind3
                  `cast`
                (Data.Data.Data
                   (Sym (Language.Haskell.Tools.AST.Ann.D:R:SemanticInfo'IdDomSameInfoModuleCls[0])))_R -}
af8b799a7a13c60fef3fe5826152b3db
  $s$fDomaind_$s$fDomaind_$cp8Domain ::
    Data.Data.Data
      (Language.Haskell.Tools.AST.Ann.SemanticInfo'
         Language.Haskell.Tools.AST.Ann.IdDom
         Language.Haskell.Tools.AST.Ann.SameInfoWildcardCls)
  {- Unfolding: InlineRule (0, True, True)
                Language.Haskell.Tools.AST.SemaInfoTypes.$fDataImplicitFieldInfo
                  `cast`
                (Data.Data.Data
                   (Sym (Language.Haskell.Tools.AST.Ann.D:R:SemanticInfo'IdDomSameInfoWildcardCls[0])))_R -}
f74951873bfa032889e08a1207137449
  $s$fDomaind_$s$fDomaind_$cp9Domain ::
    GHC.Show.Show
      (Language.Haskell.Tools.AST.Ann.SemanticInfo'
         Language.Haskell.Tools.AST.Ann.IdDom
         Language.Haskell.Tools.AST.Ann.SameInfoNameCls)
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                Language.Haskell.Tools.AST.SemaInfoTypes.$fShowCNameInfo
                  `cast`
                (GHC.Show.Show
                   (Sym (Language.Haskell.Tools.AST.Ann.D:R:SemanticInfo'IdDomSameInfoNameCls[0])))_R -}
972ab9af88923890b3a9637447856215
  $s$fDomaind_$s$fShowImportInfo ::
    GHC.Show.Show
      (Language.Haskell.Tools.AST.SemaInfoTypes.ImportInfo Var.Var)
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (Language.Haskell.Tools.AST.SemaInfoTypes.ImportInfo Var.Var)
                  ExtensionOrganizer.$s$fDomaind_$s$fShowImportInfo_$cshowsPrec
                  (Language.Haskell.Tools.AST.SemaInfoTypes.$fShowImportInfo_$cshow
                     @ Var.Var
                     Var.$fOutputableVar)
                  (Language.Haskell.Tools.AST.SemaInfoTypes.$fShowImportInfo_$cshowList
                     @ Var.Var
                     Var.$fOutputableVar) -}
930207d42e7d388d4fa6f36ff8f5d290
  $s$fDomaind_$s$fShowImportInfo_$cshowsPrec ::
    GHC.Types.Int
    -> Language.Haskell.Tools.AST.SemaInfoTypes.ImportInfo Var.Var
    -> GHC.Show.ShowS
  {- Arity: 3,
     Strictness: <L,A><S,1*U(1*U(U(U,U,U,U,U,U,U),U(U,U,U,U,U,U,U)),1*U,1*U,1*U,1*U)><L,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ (ds1 :: GHC.Types.Int)
                   (x :: Language.Haskell.Tools.AST.SemaInfoTypes.ImportInfo Var.Var)
                   (s :: GHC.Base.String) ->
                 GHC.Base.augment
                   @ GHC.Types.Char
                   (\ @ b
                      (c :: GHC.Types.Char -> b -> b)[OneShot]
                      (n1 :: b)[OneShot] ->
                    GHC.Base.foldr
                      @ GHC.Types.Char
                      @ b
                      c
                      n1
                      (Language.Haskell.Tools.AST.SemaInfoTypes.$fShowImportInfo_$cshow
                         @ Var.Var
                         Var.$fOutputableVar
                         x))
                   s) -}
61b118082a7f2ae10f09399e082b8af9
  $s$fDomaind_$s$fShowModuleInfo ::
    GHC.Show.Show
      (Language.Haskell.Tools.AST.SemaInfoTypes.ModuleInfo Var.Var)
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (Language.Haskell.Tools.AST.SemaInfoTypes.ModuleInfo Var.Var)
                  ExtensionOrganizer.$s$fDomaind_$s$fShowModuleInfo_$cshowsPrec
                  (Language.Haskell.Tools.AST.SemaInfoTypes.$fShowModuleInfo_$cshow
                     @ Var.Var
                     Var.$fOutputableVar)
                  (Language.Haskell.Tools.AST.SemaInfoTypes.$fShowModuleInfo_$cshowList
                     @ Var.Var
                     Var.$fOutputableVar) -}
18d1fe39bc6a2cb4d9e02cf5338d8fd2
  $s$fDomaind_$s$fShowModuleInfo_$cshowsPrec ::
    GHC.Types.Int
    -> Language.Haskell.Tools.AST.SemaInfoTypes.ModuleInfo Var.Var
    -> GHC.Show.ShowS
  {- Arity: 3,
     Strictness: <L,A><S,1*U(1*U(U(U,U,U,U,U,U,U),U(U,U,U,U,U,U,U)),A,1*U,1*U,1*U,1*U)><L,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ (ds1 :: GHC.Types.Int)
                   (x :: Language.Haskell.Tools.AST.SemaInfoTypes.ModuleInfo Var.Var)
                   (s :: GHC.Base.String) ->
                 GHC.Base.augment
                   @ GHC.Types.Char
                   (\ @ b
                      (c :: GHC.Types.Char -> b -> b)[OneShot]
                      (n1 :: b)[OneShot] ->
                    GHC.Base.foldr
                      @ GHC.Types.Char
                      @ b
                      c
                      n1
                      (Language.Haskell.Tools.AST.SemaInfoTypes.$fShowModuleInfo_$cshow
                         @ Var.Var
                         Var.$fOutputableVar
                         x))
                   s) -}
c542cd287668ba33b2e69ffaa3dc0440
  $sannList1 :: [a] -> [a]
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, True)
                (\ @ a (eta :: [a]) -> eta) -}
97ffd9c4438c2e79e7ce08c9b7ff6e20
  $slocalRefactoring1 ::
    (Language.Haskell.Tools.AST.Ann.Domain
       Language.Haskell.Tools.AST.Ann.IdDom,
     Language.Haskell.Tools.AST.SemaInfoClasses.HasModuleInfo'
       (Language.Haskell.Tools.AST.SemaInfoTypes.ModuleInfo Var.Id))
  {- Strictness: m,
     Unfolding: ((ExtensionOrganizer.$s$fDomaind,
                  Language.Haskell.Tools.AST.SemaInfoClasses.$fHasModuleInfo'ModuleInfo)) -}
25ce28cc5887d22468b71211349753ab
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   ExtensionOrganizer.$trModule2
                   ExtensionOrganizer.$trModule1) -}
4dad1a3fad23a2920c062777166370eb
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "ExtensionOrganizer"#) -}
345cd021932f0d61430fc9b3a4606b65
  $trModule2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   "ht-extension-organizer-0.1.0.0-y3uypH7gCtA60AaWeuyZL"#) -}
7b3493e192d3e58bb15bb6d0f14d174d
  collectDefaultExtensions ::
    Language.Haskell.Tools.Refactor.RefactorBase.UnnamedModule dom
    -> [GHC.LanguageExtensions.Type.Extension]
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ @ dom
                   (x :: Language.Haskell.Tools.Refactor.RefactorBase.UnnamedModule
                           dom) ->
                 case ExtensionOrganizer.collectDefaultExtensions4
                        @ dom of wild { Control.Reference.Representation.Reference ds ds1 ds2 ds3 ds4 ds5 ->
                 GHC.Base.build
                   @ GHC.LanguageExtensions.Type.Extension
                   (\ @ b1
                      (c :: GHC.LanguageExtensions.Type.Extension -> b1 -> b1)[OneShot]
                      (n :: b1)[OneShot] ->
                    GHC.Base.foldr
                      @ [GHC.Types.Char]
                      @ b1
                      (GHC.Base.mapFB
                         @ GHC.LanguageExtensions.Type.Extension
                         @ b1
                         @ [GHC.Types.Char]
                         c
                         ExtensionOrganizer.collectDefaultExtensions_toExt)
                      n
                      (ds
                         @ GHC.Base.String
                         (GHC.Base.$fApplicative[]_$cpure @ GHC.Base.String)
                         x)) }) -}
888985ef40abf314b7dc89143ed9e7ca
  collectDefaultExtensions1 :: GHC.LanguageExtensions.Type.Extension
  {- Strictness: x -}
4538b9607cda7d066a7e06e62065eba5
  collectDefaultExtensions10 ::
    Control.Reference.Representation.Reference
      Control.Reference.Representation.MU
      []
      Control.Reference.Representation.MU
      Control.Reference.Representation.MU
      (Language.Haskell.Tools.AST.Ann.Ann
         Language.Haskell.Tools.AST.Representation.Modules.UModule
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
      (Language.Haskell.Tools.AST.Ann.Ann
         Language.Haskell.Tools.AST.Representation.Modules.UModule
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
      (Language.Haskell.Tools.AST.Ann.Ann
         Language.Haskell.Tools.AST.Representation.Modules.UFilePragma
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
      (Language.Haskell.Tools.AST.Ann.Ann
         Language.Haskell.Tools.AST.Representation.Modules.UFilePragma
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
  {- Unfolding: (\ @ dom ->
                 case Control.Reference.Combinators.$w&
                        @ Control.Reference.Representation.MU
                        @ []
                        @ Control.Reference.Representation.MU
                        @ Control.Reference.Representation.MU
                        @ (Language.Haskell.Tools.AST.Ann.Ann
                             Language.Haskell.Tools.AST.Representation.Modules.UModule
                             dom
                             Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                        @ (Language.Haskell.Tools.AST.Ann.Ann
                             Language.Haskell.Tools.AST.Representation.Modules.UModule
                             dom
                             Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                        @ (Language.Haskell.Tools.AST.Ann.AnnListG
                             Language.Haskell.Tools.AST.Representation.Modules.UFilePragma
                             dom
                             Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                        @ (Language.Haskell.Tools.AST.Ann.AnnListG
                             Language.Haskell.Tools.AST.Representation.Modules.UFilePragma
                             dom
                             Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                        @ (Language.Haskell.Tools.AST.Ann.Ann
                             Language.Haskell.Tools.AST.Representation.Modules.UFilePragma
                             dom
                             Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                        @ (Language.Haskell.Tools.AST.Ann.Ann
                             Language.Haskell.Tools.AST.Representation.Modules.UFilePragma
                             dom
                             Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                        (ExtensionOrganizer.collectDefaultExtensions12 @ dom)
                        (ExtensionOrganizer.collectDefaultExtensions11
                           @ dom) of ww { (#,,,,,#) ww1 ww2 ww3 ww4 ww5 ww6 ->
                 Control.Reference.Representation.Reference
                   @ Control.Reference.Representation.MU
                   @ []
                   @ Control.Reference.Representation.MU
                   @ Control.Reference.Representation.MU
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        Language.Haskell.Tools.AST.Representation.Modules.UModule
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        Language.Haskell.Tools.AST.Representation.Modules.UModule
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        Language.Haskell.Tools.AST.Representation.Modules.UFilePragma
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        Language.Haskell.Tools.AST.Representation.Modules.UFilePragma
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   ww1
                   ww2
                   ww3
                   ww4
                   ww5
                   ww6 }) -}
7fbf8c1228a2aa26e85a29732f49ca83
  collectDefaultExtensions11 ::
    Control.Reference.Representation.Reference
      Control.Reference.Representation.MU
      []
      Control.Reference.Representation.MU
      Control.Reference.Representation.MU
      (Language.Haskell.Tools.AST.Ann.AnnListG
         Language.Haskell.Tools.AST.Representation.Modules.UFilePragma
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
      (Language.Haskell.Tools.AST.Ann.AnnListG
         Language.Haskell.Tools.AST.Representation.Modules.UFilePragma
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
      (Language.Haskell.Tools.AST.Ann.Ann
         Language.Haskell.Tools.AST.Representation.Modules.UFilePragma
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
      (Language.Haskell.Tools.AST.Ann.Ann
         Language.Haskell.Tools.AST.Representation.Modules.UFilePragma
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
  {- Unfolding: (\ @ dom ->
                 case Language.Haskell.Tools.AST.Ann.$wannList
                        @ Language.Haskell.Tools.AST.Representation.Modules.UFilePragma
                        @ dom
                        @ Language.Haskell.Tools.AST.Ann.SrcTemplateStage
                        @ Control.Reference.Representation.MU
                        @ []
                        Control.Reference.TH.Records.$s$fRefMonadswr1
                        ExtensionOrganizer.$sannList1
                          `cast`
                        (Sym (Control.Instances.Morph.N:Morph[0]
                                  <[]>_N <[]>_N)) of ww { (#,,,,,#) ww1 ww2 ww3 ww4 ww5 ww6 ->
                 Control.Reference.Representation.Reference
                   @ Control.Reference.Representation.MU
                   @ []
                   @ Control.Reference.Representation.MU
                   @ Control.Reference.Representation.MU
                   @ (Language.Haskell.Tools.AST.Ann.AnnListG
                        Language.Haskell.Tools.AST.Representation.Modules.UFilePragma
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   @ (Language.Haskell.Tools.AST.Ann.AnnListG
                        Language.Haskell.Tools.AST.Representation.Modules.UFilePragma
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        Language.Haskell.Tools.AST.Representation.Modules.UFilePragma
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        Language.Haskell.Tools.AST.Representation.Modules.UFilePragma
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   ww1
                   ww2
                   ww3
                   ww4
                   ww5
                   ww6 }) -}
f65fc9d42bae85c58ae6a610a25e09fe
  collectDefaultExtensions12 ::
    Control.Reference.Representation.Reference
      Control.Reference.Representation.MU
      []
      Control.Reference.Representation.MU
      Control.Reference.Representation.MU
      (Language.Haskell.Tools.AST.Ann.Ann
         Language.Haskell.Tools.AST.Representation.Modules.UModule
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
      (Language.Haskell.Tools.AST.Ann.Ann
         Language.Haskell.Tools.AST.Representation.Modules.UModule
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
      (Language.Haskell.Tools.AST.Ann.AnnListG
         Language.Haskell.Tools.AST.Representation.Modules.UFilePragma
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
      (Language.Haskell.Tools.AST.Ann.AnnListG
         Language.Haskell.Tools.AST.Representation.Modules.UFilePragma
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
  {- Unfolding: (\ @ dom ->
                 case Language.Haskell.Tools.AST.References.$wfilePragmas
                        @ dom
                        @ Language.Haskell.Tools.AST.Ann.SrcTemplateStage
                        @ Control.Reference.Representation.MU
                        @ []
                        Control.Reference.TH.Records.$s$fRefMonadswr1 of ww { (#,,,,,#) ww1 ww2 ww3 ww4 ww5 ww6 ->
                 Control.Reference.Representation.Reference
                   @ Control.Reference.Representation.MU
                   @ []
                   @ Control.Reference.Representation.MU
                   @ Control.Reference.Representation.MU
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        Language.Haskell.Tools.AST.Representation.Modules.UModule
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        Language.Haskell.Tools.AST.Representation.Modules.UModule
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   @ (Language.Haskell.Tools.AST.Ann.AnnListG
                        Language.Haskell.Tools.AST.Representation.Modules.UFilePragma
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   @ (Language.Haskell.Tools.AST.Ann.AnnListG
                        Language.Haskell.Tools.AST.Representation.Modules.UFilePragma
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   ww1
                   ww2
                   ww3
                   ww4
                   ww5
                   ww6 }) -}
8ecbf6d71fdc19c4601817bfb1b29df3
  collectDefaultExtensions2 :: GHC.LanguageExtensions.Type.Extension
  {- Strictness: x -}
8a1df53d613ed8d6eef3e862f264b67d
  collectDefaultExtensions3 ::
    Text.ParserCombinators.ReadP.P
      GHC.LanguageExtensions.Type.Extension
  {- Unfolding: ((GHC.Read.parens1
                    @ GHC.LanguageExtensions.Type.Extension
                    ExtMonad.$fReadExtension3
                      `cast`
                    (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                              <GHC.LanguageExtensions.Type.Extension>_R))
                    Text.ParserCombinators.ReadPrec.minPrec)
                   `cast`
                 (Text.ParserCombinators.ReadP.N:ReadP[0]
                      <GHC.LanguageExtensions.Type.Extension>_R)
                   @ GHC.LanguageExtensions.Type.Extension
                   (Text.Read.readEither5 @ GHC.LanguageExtensions.Type.Extension)) -}
e05000966c35cd340d9f0fb916d4d72f
  collectDefaultExtensions4 ::
    Control.Reference.Representation.Reference
      Control.Reference.Representation.MU
      []
      Control.Reference.Representation.MU
      Control.Reference.Representation.MU
      (Language.Haskell.Tools.AST.Ann.Ann
         Language.Haskell.Tools.AST.Representation.Modules.UModule
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
      (Language.Haskell.Tools.AST.Ann.Ann
         Language.Haskell.Tools.AST.Representation.Modules.UModule
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
      GHC.Base.String
      GHC.Base.String
  {- Unfolding: (\ @ dom ->
                 case Control.Reference.Combinators.$w&
                        @ Control.Reference.Representation.MU
                        @ []
                        @ Control.Reference.Representation.MU
                        @ Control.Reference.Representation.MU
                        @ (Language.Haskell.Tools.AST.Ann.Ann
                             Language.Haskell.Tools.AST.Representation.Modules.UModule
                             dom
                             Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                        @ (Language.Haskell.Tools.AST.Ann.Ann
                             Language.Haskell.Tools.AST.Representation.Modules.UModule
                             dom
                             Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                        @ (Language.Haskell.Tools.AST.Ann.Ann
                             Language.Haskell.Tools.AST.Representation.Modules.ULanguageExtension
                             dom
                             Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                        @ (Language.Haskell.Tools.AST.Ann.Ann
                             Language.Haskell.Tools.AST.Representation.Modules.ULanguageExtension
                             dom
                             Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                        @ GHC.Base.String
                        @ GHC.Base.String
                        (ExtensionOrganizer.collectDefaultExtensions6 @ dom)
                        (ExtensionOrganizer.collectDefaultExtensions5
                           @ dom) of ww { (#,,,,,#) ww1 ww2 ww3 ww4 ww5 ww6 ->
                 Control.Reference.Representation.Reference
                   @ Control.Reference.Representation.MU
                   @ []
                   @ Control.Reference.Representation.MU
                   @ Control.Reference.Representation.MU
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        Language.Haskell.Tools.AST.Representation.Modules.UModule
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        Language.Haskell.Tools.AST.Representation.Modules.UModule
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   @ GHC.Base.String
                   @ GHC.Base.String
                   ww1
                   ww2
                   ww3
                   ww4
                   ww5
                   ww6 }) -}
0e881f40d29f312555a4defcf6a20ae6
  collectDefaultExtensions5 ::
    Control.Reference.Representation.Reference
      Control.Reference.Representation.MU
      []
      Control.Reference.Representation.MU
      Control.Reference.Representation.MU
      (Language.Haskell.Tools.AST.Ann.Ann
         Language.Haskell.Tools.AST.Representation.Modules.ULanguageExtension
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
      (Language.Haskell.Tools.AST.Ann.Ann
         Language.Haskell.Tools.AST.Representation.Modules.ULanguageExtension
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
      GHC.Base.String
      GHC.Base.String
  {- Unfolding: (\ @ dom ->
                 case Language.Haskell.Tools.AST.References.$wlangExt
                        @ dom
                        @ Language.Haskell.Tools.AST.Ann.SrcTemplateStage
                        @ Control.Reference.Representation.MU
                        @ []
                        Control.Reference.TH.Records.$s$fRefMonadswr1 of ww { (#,,,,,#) ww1 ww2 ww3 ww4 ww5 ww6 ->
                 Control.Reference.Representation.Reference
                   @ Control.Reference.Representation.MU
                   @ []
                   @ Control.Reference.Representation.MU
                   @ Control.Reference.Representation.MU
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        Language.Haskell.Tools.AST.Representation.Modules.ULanguageExtension
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        Language.Haskell.Tools.AST.Representation.Modules.ULanguageExtension
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   @ GHC.Base.String
                   @ GHC.Base.String
                   ww1
                   ww2
                   ww3
                   ww4
                   ww5
                   ww6 }) -}
a8ca847229298bff19a816e1f3b5f1ae
  collectDefaultExtensions6 ::
    Control.Reference.Representation.Reference
      Control.Reference.Representation.MU
      []
      Control.Reference.Representation.MU
      Control.Reference.Representation.MU
      (Language.Haskell.Tools.AST.Ann.Ann
         Language.Haskell.Tools.AST.Representation.Modules.UModule
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
      (Language.Haskell.Tools.AST.Ann.Ann
         Language.Haskell.Tools.AST.Representation.Modules.UModule
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
      (Language.Haskell.Tools.AST.Ann.Ann
         Language.Haskell.Tools.AST.Representation.Modules.ULanguageExtension
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
      (Language.Haskell.Tools.AST.Ann.Ann
         Language.Haskell.Tools.AST.Representation.Modules.ULanguageExtension
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
  {- Unfolding: (\ @ dom ->
                 case Control.Reference.Combinators.$w&
                        @ Control.Reference.Representation.MU
                        @ []
                        @ Control.Reference.Representation.MU
                        @ Control.Reference.Representation.MU
                        @ (Language.Haskell.Tools.AST.Ann.Ann
                             Language.Haskell.Tools.AST.Representation.Modules.UModule
                             dom
                             Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                        @ (Language.Haskell.Tools.AST.Ann.Ann
                             Language.Haskell.Tools.AST.Representation.Modules.UModule
                             dom
                             Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                        @ (Language.Haskell.Tools.AST.Ann.AnnListG
                             Language.Haskell.Tools.AST.Representation.Modules.ULanguageExtension
                             dom
                             Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                        @ (Language.Haskell.Tools.AST.Ann.AnnListG
                             Language.Haskell.Tools.AST.Representation.Modules.ULanguageExtension
                             dom
                             Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                        @ (Language.Haskell.Tools.AST.Ann.Ann
                             Language.Haskell.Tools.AST.Representation.Modules.ULanguageExtension
                             dom
                             Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                        @ (Language.Haskell.Tools.AST.Ann.Ann
                             Language.Haskell.Tools.AST.Representation.Modules.ULanguageExtension
                             dom
                             Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                        (ExtensionOrganizer.collectDefaultExtensions8 @ dom)
                        (ExtensionOrganizer.collectDefaultExtensions7
                           @ dom) of ww { (#,,,,,#) ww1 ww2 ww3 ww4 ww5 ww6 ->
                 Control.Reference.Representation.Reference
                   @ Control.Reference.Representation.MU
                   @ []
                   @ Control.Reference.Representation.MU
                   @ Control.Reference.Representation.MU
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        Language.Haskell.Tools.AST.Representation.Modules.UModule
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        Language.Haskell.Tools.AST.Representation.Modules.UModule
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        Language.Haskell.Tools.AST.Representation.Modules.ULanguageExtension
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        Language.Haskell.Tools.AST.Representation.Modules.ULanguageExtension
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   ww1
                   ww2
                   ww3
                   ww4
                   ww5
                   ww6 }) -}
06bd6123050f5377e5ec4524368cea0a
  collectDefaultExtensions7 ::
    Control.Reference.Representation.Reference
      Control.Reference.Representation.MU
      []
      Control.Reference.Representation.MU
      Control.Reference.Representation.MU
      (Language.Haskell.Tools.AST.Ann.AnnListG
         Language.Haskell.Tools.AST.Representation.Modules.ULanguageExtension
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
      (Language.Haskell.Tools.AST.Ann.AnnListG
         Language.Haskell.Tools.AST.Representation.Modules.ULanguageExtension
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
      (Language.Haskell.Tools.AST.Ann.Ann
         Language.Haskell.Tools.AST.Representation.Modules.ULanguageExtension
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
      (Language.Haskell.Tools.AST.Ann.Ann
         Language.Haskell.Tools.AST.Representation.Modules.ULanguageExtension
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
  {- Unfolding: (\ @ dom ->
                 case Language.Haskell.Tools.AST.Ann.$wannList
                        @ Language.Haskell.Tools.AST.Representation.Modules.ULanguageExtension
                        @ dom
                        @ Language.Haskell.Tools.AST.Ann.SrcTemplateStage
                        @ Control.Reference.Representation.MU
                        @ []
                        Control.Reference.TH.Records.$s$fRefMonadswr1
                        ExtensionOrganizer.$sannList1
                          `cast`
                        (Sym (Control.Instances.Morph.N:Morph[0]
                                  <[]>_N <[]>_N)) of ww { (#,,,,,#) ww1 ww2 ww3 ww4 ww5 ww6 ->
                 Control.Reference.Representation.Reference
                   @ Control.Reference.Representation.MU
                   @ []
                   @ Control.Reference.Representation.MU
                   @ Control.Reference.Representation.MU
                   @ (Language.Haskell.Tools.AST.Ann.AnnListG
                        Language.Haskell.Tools.AST.Representation.Modules.ULanguageExtension
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   @ (Language.Haskell.Tools.AST.Ann.AnnListG
                        Language.Haskell.Tools.AST.Representation.Modules.ULanguageExtension
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        Language.Haskell.Tools.AST.Representation.Modules.ULanguageExtension
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        Language.Haskell.Tools.AST.Representation.Modules.ULanguageExtension
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   ww1
                   ww2
                   ww3
                   ww4
                   ww5
                   ww6 }) -}
397cab23ea3361fbe9d433742c497475
  collectDefaultExtensions8 ::
    Control.Reference.Representation.Reference
      Control.Reference.Representation.MU
      []
      Control.Reference.Representation.MU
      Control.Reference.Representation.MU
      (Language.Haskell.Tools.AST.Ann.Ann
         Language.Haskell.Tools.AST.Representation.Modules.UModule
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
      (Language.Haskell.Tools.AST.Ann.Ann
         Language.Haskell.Tools.AST.Representation.Modules.UModule
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
      (Language.Haskell.Tools.AST.Ann.AnnListG
         Language.Haskell.Tools.AST.Representation.Modules.ULanguageExtension
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
      (Language.Haskell.Tools.AST.Ann.AnnListG
         Language.Haskell.Tools.AST.Representation.Modules.ULanguageExtension
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
  {- Unfolding: (\ @ dom ->
                 case Control.Reference.Combinators.$w&
                        @ Control.Reference.Representation.MU
                        @ []
                        @ Control.Reference.Representation.MU
                        @ Control.Reference.Representation.MU
                        @ (Language.Haskell.Tools.AST.Ann.Ann
                             Language.Haskell.Tools.AST.Representation.Modules.UModule
                             dom
                             Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                        @ (Language.Haskell.Tools.AST.Ann.Ann
                             Language.Haskell.Tools.AST.Representation.Modules.UModule
                             dom
                             Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                        @ (Language.Haskell.Tools.AST.Ann.Ann
                             Language.Haskell.Tools.AST.Representation.Modules.UFilePragma
                             dom
                             Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                        @ (Language.Haskell.Tools.AST.Ann.Ann
                             Language.Haskell.Tools.AST.Representation.Modules.UFilePragma
                             dom
                             Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                        @ (Language.Haskell.Tools.AST.Ann.AnnListG
                             Language.Haskell.Tools.AST.Representation.Modules.ULanguageExtension
                             dom
                             Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                        @ (Language.Haskell.Tools.AST.Ann.AnnListG
                             Language.Haskell.Tools.AST.Representation.Modules.ULanguageExtension
                             dom
                             Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                        (ExtensionOrganizer.collectDefaultExtensions10 @ dom)
                        (ExtensionOrganizer.collectDefaultExtensions9
                           @ dom) of ww { (#,,,,,#) ww1 ww2 ww3 ww4 ww5 ww6 ->
                 Control.Reference.Representation.Reference
                   @ Control.Reference.Representation.MU
                   @ []
                   @ Control.Reference.Representation.MU
                   @ Control.Reference.Representation.MU
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        Language.Haskell.Tools.AST.Representation.Modules.UModule
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        Language.Haskell.Tools.AST.Representation.Modules.UModule
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   @ (Language.Haskell.Tools.AST.Ann.AnnListG
                        Language.Haskell.Tools.AST.Representation.Modules.ULanguageExtension
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   @ (Language.Haskell.Tools.AST.Ann.AnnListG
                        Language.Haskell.Tools.AST.Representation.Modules.ULanguageExtension
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   ww1
                   ww2
                   ww3
                   ww4
                   ww5
                   ww6 }) -}
3f366c04cc47df6a8b7d20b63b9d392b
  collectDefaultExtensions9 ::
    Control.Reference.Representation.Reference
      Control.Reference.Representation.MU
      []
      Control.Reference.Representation.MU
      Control.Reference.Representation.MU
      (Language.Haskell.Tools.AST.Ann.Ann
         Language.Haskell.Tools.AST.Representation.Modules.UFilePragma
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
      (Language.Haskell.Tools.AST.Ann.Ann
         Language.Haskell.Tools.AST.Representation.Modules.UFilePragma
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
      (Language.Haskell.Tools.AST.Ann.AnnListG
         Language.Haskell.Tools.AST.Representation.Modules.ULanguageExtension
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
      (Language.Haskell.Tools.AST.Ann.AnnListG
         Language.Haskell.Tools.AST.Representation.Modules.ULanguageExtension
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
  {- Unfolding: (\ @ dom ->
                 case Language.Haskell.Tools.AST.References.$wlpPragmas
                        @ dom
                        @ Language.Haskell.Tools.AST.Ann.SrcTemplateStage
                        @ Control.Reference.Representation.MU
                        @ []
                        Data.Proxy.$fMonadProxy
                        GHC.Base.$fMonadPlus[]
                        Data.Maybe.maybeToList
                          `cast`
                        (Sym (Control.Instances.Morph.N:Morph[0]
                                  <GHC.Base.Maybe>_N
                                  <[]>_N)) of ww { (#,,,,,#) ww1 ww2 ww3 ww4 ww5 ww6 ->
                 Control.Reference.Representation.Reference
                   @ Control.Reference.Representation.MU
                   @ []
                   @ Control.Reference.Representation.MU
                   @ Control.Reference.Representation.MU
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        Language.Haskell.Tools.AST.Representation.Modules.UFilePragma
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        Language.Haskell.Tools.AST.Representation.Modules.UFilePragma
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   @ (Language.Haskell.Tools.AST.Ann.AnnListG
                        Language.Haskell.Tools.AST.Representation.Modules.ULanguageExtension
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   @ (Language.Haskell.Tools.AST.Ann.AnnListG
                        Language.Haskell.Tools.AST.Representation.Modules.ULanguageExtension
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   ww1
                   ww2
                   ww3
                   ww4
                   ww5
                   ww6 }) -}
9217fef0f10ab561307b12683cc0fb08
  collectDefaultExtensions_toExt ::
    GHC.Base.String -> GHC.LanguageExtensions.Type.Extension
  {- Arity: 1, Strictness: <L,1*U>,
     Unfolding: (\ (x :: [GHC.Types.Char]) ->
                 case Text.Read.readEither6
                        @ GHC.LanguageExtensions.Type.Extension
                        (Text.ParserCombinators.ReadP.run
                           @ GHC.LanguageExtensions.Type.Extension
                           ExtensionOrganizer.collectDefaultExtensions3
                           (GHC.List.takeWhile
                              @ GHC.Types.Char
                              GHC.Unicode.isAlpha
                              x)) of wild {
                   [] -> ExtensionOrganizer.collectDefaultExtensions2
                   : x1 ds
                   -> case ds of wild1 {
                        [] -> x1
                        : ipv ipv1 -> ExtensionOrganizer.collectDefaultExtensions1 } }) -}
641b2d6102cd59c41083e549a5e248d8
  collectExtensions ::
    ExtMonad.ExtDomain dom =>
    Language.Haskell.Tools.Refactor.RefactorBase.UnnamedModule dom
    -> GhcMonad.Ghc ExtMap.ExtMap
  {- Arity: 2,
     Strictness: <S(S(LLS(S)LLLLLLLLLL)L),U(U(U,U,U(U),U,U,U,U,U,U,U,U,U,U),U)><L,U>,
     Unfolding: (\ @ dom
                   ($d(%,%) :: ExtMonad.ExtDomain dom)
                   (eta :: Language.Haskell.Tools.Refactor.RefactorBase.UnnamedModule
                             dom) ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Language.Haskell.Tools.AST.Ann.SemanticInfo'
                             dom Language.Haskell.Tools.AST.Ann.SameInfoDefaultCls)
                        @ Language.Haskell.Tools.AST.SemaInfoTypes.NoSemanticInfo
                        (Language.Haskell.Tools.AST.Ann.$p3Domain
                           @ dom
                           (GHC.Classes.$p1(%,%)
                              @ (Language.Haskell.Tools.AST.Ann.Domain dom)
                              @ (Language.Haskell.Tools.AST.SemaInfoClasses.HasNameInfo'
                                   (Language.Haskell.Tools.AST.Ann.SemanticInfo
                                      dom
                                      Language.Haskell.Tools.AST.Representation.Names.UQualifiedName))
                              $d(%,%)))
                          `cast`
                        (Data.Type.Equality.N:~[0]
                             <*>_N <Language.Haskell.Tools.AST.Ann.SemanticInfo'
                                      dom
                                      Language.Haskell.Tools.AST.Ann.SameInfoDefaultCls>_N <Language.Haskell.Tools.AST.SemaInfoTypes.NoSemanticInfo>_N) of cobox0 { DEFAULT ->
                 let {
                   m :: GhcMonad.Ghc
                          (Language.Haskell.Tools.AST.Ann.Ann
                             Language.Haskell.Tools.AST.Representation.Modules.UModule
                             dom
                             Language.Haskell.Tools.AST.Ann.SrcTemplateStage,
                           Data.Map.Base.Map
                             (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                             [SrcLoc.SrcSpan])
                   = ((TraverseAST.traverseModule @ dom $d(%,%) eta)
                        `cast`
                      (Control.Monad.Trans.Reader.N:ReaderT[0]
                           <*>_N
                           <[GHC.LanguageExtensions.Type.Extension]>_R
                           <Control.Monad.Trans.State.Lazy.StateT
                              ExtMap.ExtMap GhcMonad.Ghc>_R
                           <Language.Haskell.Tools.Refactor.RefactorBase.UnnamedModule dom>_N)
                        (ExtensionOrganizer.collectDefaultExtensions @ dom eta))
                       `cast`
                     (Control.Monad.Trans.State.Lazy.N:StateT[0]
                          <Data.Map.Base.Map
                             (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                             [SrcLoc.SrcSpan]>_N
                          <GhcMonad.Ghc>_R
                          <Language.Haskell.Tools.AST.Ann.Ann
                             Language.Haskell.Tools.AST.Representation.Modules.UModule
                             dom
                             Language.Haskell.Tools.AST.Ann.SrcTemplateStage>_N)
                       (Data.Map.Base.Tip
                          @ (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                          @ [SrcLoc.SrcSpan])
                 } in
                 (\ (s :: GhcMonad.Session)
                    (s1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                  case (m `cast`
                        (GhcMonad.N:Ghc[0]
                             <(Language.Haskell.Tools.AST.Ann.Ann
                                 Language.Haskell.Tools.AST.Representation.Modules.UModule
                                 dom
                                 Language.Haskell.Tools.AST.Ann.SrcTemplateStage,
                               Data.Map.Base.Map
                                 (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                                 [SrcLoc.SrcSpan])>_R)
                          s)
                         `cast`
                       (GHC.Types.N:IO[0]
                            <(Language.Haskell.Tools.AST.Ann.Ann
                                Language.Haskell.Tools.AST.Representation.Modules.UModule
                                dom
                                Language.Haskell.Tools.AST.Ann.SrcTemplateStage,
                              Data.Map.Base.Map
                                (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                                [SrcLoc.SrcSpan])>_R)
                         s1 of ds1 { (#,#) ipv ipv1 ->
                  (# ipv, case ipv1 of wild { (,) ds2 s' -> s' } #) })
                   `cast`
                 (Trans
                      (<GhcMonad.Session>_R
                       ->_R Sym (GHC.Types.N:IO[0]
                                     <Data.Map.Base.Map
                                        (ExtMap.LogicalRelation
                                           GHC.LanguageExtensions.Type.Extension)
                                        [SrcLoc.SrcSpan]>_R))
                      (Sym (GhcMonad.N:Ghc[0]
                                <Data.Map.Base.Map
                                   (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                                   [SrcLoc.SrcSpan]>_R))) }) -}
99dd51505430e6bdc855413b639a79a5
  collectExtensions1 ::
    Language.Haskell.Tools.Refactor.RefactorBase.UnnamedModule
      Language.Haskell.Tools.AST.Ann.IdDom
    -> ExtMonad.ExtMonad
         (Language.Haskell.Tools.Refactor.RefactorBase.UnnamedModule
            Language.Haskell.Tools.AST.Ann.IdDom)
  {- Unfolding: (case TraverseAST.traverseModule1
                        @ Language.Haskell.Tools.AST.Ann.IdDom of wild { Control.Reference.Representation.Reference ds1 ds2 ds3 ds4 ds5 ds6 ->
                 ds3 ExtensionOrganizer.collectExtensions2 }) -}
eaa4238aeafe532198ffa50ce3c779f0
  collectExtensions2 ::
    Language.Haskell.Tools.AST.ElementTypes.Decl
      Language.Haskell.Tools.AST.Ann.IdDom
    -> ExtMonad.ExtMonad
         (Language.Haskell.Tools.AST.ElementTypes.Decl
            Language.Haskell.Tools.AST.Ann.IdDom)
  {- Unfolding: (TraverseAST.traverseDecl
                   @ Language.Haskell.Tools.AST.Ann.IdDom
                   ExtensionOrganizer.collectExtensions3
                     `cast`
                   (GHC.Classes.(%,%)
                      <Language.Haskell.Tools.AST.Ann.Domain
                         Language.Haskell.Tools.AST.Ann.IdDom>_N
                      (Language.Haskell.Tools.AST.SemaInfoClasses.HasNameInfo'
                         (Trans
                              (Sym (Language.Haskell.Tools.AST.Ann.D:R:SemanticInfo'IdDomSameInfoNameCls[0]))
                              (Language.Haskell.Tools.AST.Ann.SemanticInfo'
                                 <Language.Haskell.Tools.AST.Ann.IdDom>_N
                                 (Sym (Language.Haskell.Tools.AST.Ann.D:R:SemaInfoClassify[0])))_N))_N)_R) -}
237532998ef2a2a78a4184ff293595ec
  collectExtensions3 ::
    (Language.Haskell.Tools.AST.Ann.Domain
       Language.Haskell.Tools.AST.Ann.IdDom,
     Language.Haskell.Tools.AST.SemaInfoClasses.HasNameInfo'
       Language.Haskell.Tools.AST.SemaInfoTypes.CNameInfo)
  {- Unfolding: ((ExtensionOrganizer.$s$fDomaind,
                  Language.Haskell.Tools.AST.SemaInfoClasses.$fHasIdInfo'CNameInfo_$csemanticsName
                    `cast`
                  (Sym (Language.Haskell.Tools.AST.SemaInfoClasses.N:HasNameInfo'[0]
                            <Language.Haskell.Tools.AST.SemaInfoTypes.CNameInfo>_N)))) -}
0275a5b21e43ec04f5b2f2ef28c60aa9
  organizeExtensions ::
    ExtMonad.ExtDomain dom =>
    Language.Haskell.Tools.Refactor.RefactorBase.LocalRefactoring dom
  {- Arity: 2,
     Strictness: <S(S(LLS(S)LLLLLLLLLL)L),U(U(U,U,U(U),U,U,U,U,U,U,U,U,U,U),U)><L,U>,
     Unfolding: (\ @ dom
                   ($d(%,%) :: ExtMonad.ExtDomain dom)
                   (eta :: Language.Haskell.Tools.Refactor.RefactorBase.UnnamedModule
                             dom) ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Language.Haskell.Tools.AST.Ann.SemanticInfo'
                             dom Language.Haskell.Tools.AST.Ann.SameInfoDefaultCls)
                        @ Language.Haskell.Tools.AST.SemaInfoTypes.NoSemanticInfo
                        (Language.Haskell.Tools.AST.Ann.$p3Domain
                           @ dom
                           (GHC.Classes.$p1(%,%)
                              @ (Language.Haskell.Tools.AST.Ann.Domain dom)
                              @ (Language.Haskell.Tools.AST.SemaInfoClasses.HasNameInfo'
                                   (Language.Haskell.Tools.AST.Ann.SemanticInfo
                                      dom
                                      Language.Haskell.Tools.AST.Representation.Names.UQualifiedName))
                              $d(%,%)))
                          `cast`
                        (Data.Type.Equality.N:~[0]
                             <*>_N <Language.Haskell.Tools.AST.Ann.SemanticInfo'
                                      dom
                                      Language.Haskell.Tools.AST.Ann.SameInfoDefaultCls>_N <Language.Haskell.Tools.AST.SemaInfoTypes.NoSemanticInfo>_N) of cobox0 { DEFAULT ->
                 let {
                   x :: GhcMonad.Ghc ExtMap.ExtMap
                   = ExtensionOrganizer.collectExtensions @ dom $d(%,%) eta
                 } in
                 (\ (r1 :: Language.Haskell.Tools.Refactor.RefactorBase.RefactorCtx
                             dom)
                    (eta1 :: GhcMonad.Session)
                    (eta2 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                  case (x `cast` (GhcMonad.N:Ghc[0] <ExtMap.ExtMap>_R) eta1)
                         `cast`
                       (GHC.Types.N:IO[0] <ExtMap.ExtMap>_R)
                         eta2 of ds1 { (#,#) ipv ipv1 ->
                  case (((ExtensionOrganizer.organizeExtensions4
                            @ dom
                            (ExtensionOrganizer.organizeExtensions3 @ dom)
                              `cast`
                            (Trans
                                 (<Language.Haskell.Tools.Refactor.RefactorBase.RefactorCtx dom>_R
                                  ->_R Trans
                                           (<GhcMonad.Session>_R
                                            ->_R Sym (GHC.Types.N:IO[0]
                                                          <Data.Either.Either
                                                             [GHC.Types.Char]
                                                             ((),
                                                              [Data.Either.Either
                                                                 Name.Name
                                                                 (SrcLoc.SrcSpan, GHC.Base.String,
                                                                  GHC.Base.String)])>_R))
                                           (Trans
                                                (Sym (GhcMonad.N:Ghc[0]
                                                          <Data.Either.Either
                                                             [GHC.Types.Char]
                                                             ((),
                                                              [Data.Either.Either
                                                                 Name.Name
                                                                 (SrcLoc.SrcSpan, GHC.Base.String,
                                                                  GHC.Base.String)])>_R))
                                                (Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                                          <[GHC.Types.Char]>_N
                                                          <GhcMonad.Ghc>_R
                                                          <((),
                                                            [Data.Either.Either
                                                               Name.Name
                                                               (SrcLoc.SrcSpan, GHC.Base.String,
                                                                GHC.Base.String)])>_N))))
                                 (Trans
                                      (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                                <*>_N
                                                <Language.Haskell.Tools.Refactor.RefactorBase.RefactorCtx
                                                   dom>_R
                                                <Control.Monad.Trans.Except.ExceptT
                                                   GHC.Base.String GhcMonad.Ghc>_R
                                                <((),
                                                  [Data.Either.Either
                                                     Name.Name
                                                     (SrcLoc.SrcSpan, GHC.Base.String,
                                                      GHC.Base.String)])>_N))
                                      (Trans
                                           (Sym (Control.Monad.Trans.Writer.Lazy.N:WriterT[0]
                                                     <[Data.Either.Either
                                                         Name.Name
                                                         (SrcLoc.SrcSpan, GHC.Base.String,
                                                          GHC.Base.String)]>_N
                                                     <Control.Monad.Trans.Reader.ReaderT
                                                        (Language.Haskell.Tools.Refactor.RefactorBase.RefactorCtx
                                                           dom)
                                                        (Control.Monad.Trans.Except.ExceptT
                                                           GHC.Base.String GhcMonad.Ghc)>_R
                                                     <()>_N))
                                           (Sym (Language.Haskell.Tools.Refactor.RefactorBase.N:LocalRefactorT[0]
                                                     <dom>_N
                                                     <Control.Monad.Trans.Except.ExceptT
                                                        GHC.Base.String GhcMonad.Ghc>_R) <()>_N))))
                            ipv1)
                           `cast`
                         (Trans
                              (Language.Haskell.Tools.Refactor.RefactorBase.N:LocalRefactorT[0]
                                   <dom>_N
                                   <Control.Monad.Trans.Except.ExceptT
                                      GHC.Base.String GhcMonad.Ghc>_R <()>_N)
                              (Trans
                                   (Control.Monad.Trans.Writer.Lazy.N:WriterT[0]
                                        <[Data.Either.Either
                                            Name.Name
                                            (SrcLoc.SrcSpan, GHC.Base.String, GHC.Base.String)]>_N
                                        <Control.Monad.Trans.Reader.ReaderT
                                           (Language.Haskell.Tools.Refactor.RefactorBase.RefactorCtx
                                              dom)
                                           (Control.Monad.Trans.Except.ExceptT
                                              GHC.Base.String GhcMonad.Ghc)>_R
                                        <()>_N)
                                   (Control.Monad.Trans.Reader.N:ReaderT[0]
                                        <*>_N
                                        <Language.Haskell.Tools.Refactor.RefactorBase.RefactorCtx
                                           dom>_R
                                        <Control.Monad.Trans.Except.ExceptT
                                           GHC.Base.String GhcMonad.Ghc>_R
                                        <((),
                                          [Data.Either.Either
                                             Name.Name
                                             (SrcLoc.SrcSpan, GHC.Base.String,
                                              GHC.Base.String)])>_N)))
                           r1)
                          `cast`
                        (Trans
                             (Control.Monad.Trans.Except.N:ExceptT[0]
                                  <[GHC.Types.Char]>_N
                                  <GhcMonad.Ghc>_R
                                  <((),
                                    [Data.Either.Either
                                       Name.Name
                                       (SrcLoc.SrcSpan, GHC.Base.String, GHC.Base.String)])>_N)
                             (GhcMonad.N:Ghc[0]
                                  <Data.Either.Either
                                     [GHC.Types.Char]
                                     ((),
                                      [Data.Either.Either
                                         Name.Name
                                         (SrcLoc.SrcSpan, GHC.Base.String, GHC.Base.String)])>_R))
                          eta1)
                         `cast`
                       (GHC.Types.N:IO[0]
                            <Data.Either.Either
                               [GHC.Types.Char]
                               ((),
                                [Data.Either.Either
                                   Name.Name
                                   (SrcLoc.SrcSpan, GHC.Base.String, GHC.Base.String)])>_R)
                         ipv of ds2 { (#,#) ipv2 ipv3 ->
                  case ipv3 of wild {
                    Data.Either.Left e1
                    -> (# ipv2,
                          Data.Either.Left
                            @ [GHC.Types.Char]
                            @ (Language.Haskell.Tools.Refactor.RefactorBase.UnnamedModule dom,
                               [Data.Either.Either
                                  Name.Name (SrcLoc.SrcSpan, GHC.Base.String, GHC.Base.String)])
                            e1 #)
                    Data.Either.Right x1
                    -> (# ipv2,
                          Data.Either.Right
                            @ [GHC.Types.Char]
                            @ (Language.Haskell.Tools.Refactor.RefactorBase.UnnamedModule dom,
                               [Data.Either.Either
                                  Name.Name (SrcLoc.SrcSpan, GHC.Base.String, GHC.Base.String)])
                            (eta, case x1 of wild1 { (,) a3 w2 -> w2 }) #) } } })
                   `cast`
                 (Trans
                      (<Language.Haskell.Tools.Refactor.RefactorBase.RefactorCtx dom>_R
                       ->_R Trans
                                (<GhcMonad.Session>_R
                                 ->_R Sym (GHC.Types.N:IO[0]
                                               <Data.Either.Either
                                                  [GHC.Types.Char]
                                                  (Language.Haskell.Tools.Refactor.RefactorBase.UnnamedModule
                                                     dom,
                                                   [Data.Either.Either
                                                      Name.Name
                                                      (SrcLoc.SrcSpan, GHC.Base.String,
                                                       GHC.Base.String)])>_R))
                                (Trans
                                     (Sym (GhcMonad.N:Ghc[0]
                                               <Data.Either.Either
                                                  [GHC.Types.Char]
                                                  (Language.Haskell.Tools.Refactor.RefactorBase.UnnamedModule
                                                     dom,
                                                   [Data.Either.Either
                                                      Name.Name
                                                      (SrcLoc.SrcSpan, GHC.Base.String,
                                                       GHC.Base.String)])>_R))
                                     (Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                               <[GHC.Types.Char]>_N
                                               <GhcMonad.Ghc>_R
                                               <(Language.Haskell.Tools.Refactor.RefactorBase.UnnamedModule
                                                   dom,
                                                 [Data.Either.Either
                                                    Name.Name
                                                    (SrcLoc.SrcSpan, GHC.Base.String,
                                                     GHC.Base.String)])>_N))))
                      (Trans
                           (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                     <*>_N
                                     <Language.Haskell.Tools.Refactor.RefactorBase.RefactorCtx
                                        dom>_R
                                     <Control.Monad.Trans.Except.ExceptT
                                        GHC.Base.String GhcMonad.Ghc>_R
                                     <(Language.Haskell.Tools.Refactor.RefactorBase.UnnamedModule
                                         dom,
                                       [Data.Either.Either
                                          Name.Name
                                          (SrcLoc.SrcSpan, GHC.Base.String, GHC.Base.String)])>_N))
                           (Trans
                                (Sym (Control.Monad.Trans.Writer.Lazy.N:WriterT[0]
                                          <[Data.Either.Either
                                              Name.Name
                                              (SrcLoc.SrcSpan, GHC.Base.String, GHC.Base.String)]>_N
                                          <Control.Monad.Trans.Reader.ReaderT
                                             (Language.Haskell.Tools.Refactor.RefactorBase.RefactorCtx
                                                dom)
                                             (Control.Monad.Trans.Except.ExceptT
                                                GHC.Base.String GhcMonad.Ghc)>_R
                                          <Language.Haskell.Tools.Refactor.RefactorBase.UnnamedModule
                                             dom>_N))
                                (Sym (Language.Haskell.Tools.Refactor.RefactorBase.N:LocalRefactorT[0]
                                          <dom>_N
                                          <Control.Monad.Trans.Except.ExceptT
                                             GHC.Base.String
                                             GhcMonad.Ghc>_R) <Language.Haskell.Tools.Refactor.RefactorBase.UnnamedModule
                                                                 dom>_N)))) }) -}
bedeb1e59f78c0bf5d0f6622a1d0caec
  organizeExtensions1 ::
    Language.Haskell.Tools.Refactor.RefactorBase.RefactorCtx
      Language.Haskell.Tools.AST.Ann.IdDom
    -> GhcMonad.Session
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Either.Either
            [GHC.Types.Char]
            ((),
             [Data.Either.Either
                Name.Name (SrcLoc.SrcSpan, GHC.Base.String, GHC.Base.String)]) #)
  {- Arity: 3, HasNoCafRefs, Strictness: <L,A><L,A><S,U>,
     Unfolding: InlineRule (3, True, True)
                (\ (eta1 :: Language.Haskell.Tools.Refactor.RefactorBase.RefactorCtx
                              Language.Haskell.Tools.AST.Ann.IdDom)
                   (eta :: GhcMonad.Session)
                   (eta2 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 (# eta2, ExtensionOrganizer.organizeExtensions_a1 #)) -}
8795459ad3acecc0fc8f27a65f73f53e
  organizeExtensions2 ::
    ((),
     [Data.Either.Either
        Name.Name (SrcLoc.SrcSpan, GHC.Base.String, GHC.Base.String)])
  {- HasNoCafRefs, Strictness: m,
     Unfolding: ((GHC.Tuple.(),
                  GHC.Types.[]
                    @ (Data.Either.Either
                         Name.Name (SrcLoc.SrcSpan, GHC.Base.String, GHC.Base.String)))) -}
a28dcbeec246184707b440e21faee755
  organizeExtensions3 ::
    Language.Haskell.Tools.Refactor.RefactorBase.RefactorCtx dom
    -> GhcMonad.Session
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Either.Either
            [GHC.Types.Char]
            ((),
             [Data.Either.Either
                Name.Name (SrcLoc.SrcSpan, GHC.Base.String, GHC.Base.String)]) #)
  {- Arity: 3, HasNoCafRefs, Strictness: <L,A><L,A><S,U>,
     Unfolding: InlineRule (3, True, True)
                (\ @ dom
                   (eta1 :: Language.Haskell.Tools.Refactor.RefactorBase.RefactorCtx
                              dom)
                   (eta :: GhcMonad.Session)
                   (eta2 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 (# eta2, ExtensionOrganizer.organizeExtensions_a1 #)) -}
da92ae115f40b04c2ebfb3a39285b62a
  organizeExtensions4 ::
    Language.Haskell.Tools.Refactor.RefactorBase.LocalRefactorT
      dom Language.Haskell.Tools.Refactor.RefactorBase.Refactor ()
    -> Data.Map.Base.Map
         (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
         [SrcLoc.SrcSpan]
    -> Language.Haskell.Tools.Refactor.RefactorBase.LocalRefactorT
         dom Language.Haskell.Tools.Refactor.RefactorBase.Refactor ()
  {- Arity: 2, Strictness: <L,1*U><S,1*U> -}
85f722627775fa7eef8ba2951795b4a1
  organizeExtensions_$sorganizeExtensions ::
    Language.Haskell.Tools.Refactor.RefactorBase.LocalRefactoring
      Language.Haskell.Tools.AST.Ann.IdDom
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: (\ (moduleAST :: Language.Haskell.Tools.Refactor.RefactorBase.UnnamedModule
                                   Language.Haskell.Tools.AST.Ann.IdDom) ->
                 let {
                   m :: GhcMonad.Ghc
                          (Language.Haskell.Tools.AST.Ann.Ann
                             Language.Haskell.Tools.AST.Representation.Modules.UModule
                             Language.Haskell.Tools.AST.Ann.IdDom
                             Language.Haskell.Tools.AST.Ann.SrcTemplateStage,
                           Data.Map.Base.Map
                             (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                             [SrcLoc.SrcSpan])
                   = ((ExtensionOrganizer.collectExtensions1 moduleAST)
                        `cast`
                      (Control.Monad.Trans.Reader.N:ReaderT[0]
                           <*>_N
                           <[GHC.LanguageExtensions.Type.Extension]>_R
                           <Control.Monad.Trans.State.Lazy.StateT
                              ExtMap.ExtMap GhcMonad.Ghc>_R
                           <Language.Haskell.Tools.Refactor.RefactorBase.UnnamedModule
                              Language.Haskell.Tools.AST.Ann.IdDom>_N)
                        (ExtensionOrganizer.collectDefaultExtensions
                           @ Language.Haskell.Tools.AST.Ann.IdDom
                           moduleAST))
                       `cast`
                     (Control.Monad.Trans.State.Lazy.N:StateT[0]
                          <Data.Map.Base.Map
                             (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                             [SrcLoc.SrcSpan]>_N
                          <GhcMonad.Ghc>_R
                          <Language.Haskell.Tools.AST.Ann.Ann
                             Language.Haskell.Tools.AST.Representation.Modules.UModule
                             Language.Haskell.Tools.AST.Ann.IdDom
                             Language.Haskell.Tools.AST.Ann.SrcTemplateStage>_N)
                       (Data.Map.Base.Tip
                          @ (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                          @ [SrcLoc.SrcSpan])
                 } in
                 (\ (r1 :: Language.Haskell.Tools.Refactor.RefactorBase.RefactorCtx
                             Language.Haskell.Tools.AST.Ann.IdDom)
                    (eta :: GhcMonad.Session)
                    (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                  case (m `cast`
                        (GhcMonad.N:Ghc[0]
                             <(Language.Haskell.Tools.AST.Ann.Ann
                                 Language.Haskell.Tools.AST.Representation.Modules.UModule
                                 Language.Haskell.Tools.AST.Ann.IdDom
                                 Language.Haskell.Tools.AST.Ann.SrcTemplateStage,
                               Data.Map.Base.Map
                                 (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                                 [SrcLoc.SrcSpan])>_R)
                          eta)
                         `cast`
                       (GHC.Types.N:IO[0]
                            <(Language.Haskell.Tools.AST.Ann.Ann
                                Language.Haskell.Tools.AST.Representation.Modules.UModule
                                Language.Haskell.Tools.AST.Ann.IdDom
                                Language.Haskell.Tools.AST.Ann.SrcTemplateStage,
                              Data.Map.Base.Map
                                (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                                [SrcLoc.SrcSpan])>_R)
                         eta1 of ds1 { (#,#) ipv ipv1 ->
                  case ipv1 of wild { (,) ds2 s' ->
                  case (((ExtensionOrganizer.organizeExtensions_go10
                            ExtensionOrganizer.organizeExtensions1
                              `cast`
                            (Trans
                                 (<Language.Haskell.Tools.Refactor.RefactorBase.RefactorCtx
                                     Language.Haskell.Tools.AST.Ann.IdDom>_R
                                  ->_R Trans
                                           (<GhcMonad.Session>_R
                                            ->_R Sym (GHC.Types.N:IO[0]
                                                          <Data.Either.Either
                                                             [GHC.Types.Char]
                                                             ((),
                                                              [Data.Either.Either
                                                                 Name.Name
                                                                 (SrcLoc.SrcSpan, GHC.Base.String,
                                                                  GHC.Base.String)])>_R))
                                           (Trans
                                                (Sym (GhcMonad.N:Ghc[0]
                                                          <Data.Either.Either
                                                             [GHC.Types.Char]
                                                             ((),
                                                              [Data.Either.Either
                                                                 Name.Name
                                                                 (SrcLoc.SrcSpan, GHC.Base.String,
                                                                  GHC.Base.String)])>_R))
                                                (Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                                          <[GHC.Types.Char]>_N
                                                          <GhcMonad.Ghc>_R
                                                          <((),
                                                            [Data.Either.Either
                                                               Name.Name
                                                               (SrcLoc.SrcSpan, GHC.Base.String,
                                                                GHC.Base.String)])>_N))))
                                 (Trans
                                      (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                                <*>_N
                                                <Language.Haskell.Tools.Refactor.RefactorBase.RefactorCtx
                                                   Language.Haskell.Tools.AST.Ann.IdDom>_R
                                                <Control.Monad.Trans.Except.ExceptT
                                                   GHC.Base.String GhcMonad.Ghc>_R
                                                <((),
                                                  [Data.Either.Either
                                                     Name.Name
                                                     (SrcLoc.SrcSpan, GHC.Base.String,
                                                      GHC.Base.String)])>_N))
                                      (Trans
                                           (Sym (Control.Monad.Trans.Writer.Lazy.N:WriterT[0]
                                                     <[Data.Either.Either
                                                         Name.Name
                                                         (SrcLoc.SrcSpan, GHC.Base.String,
                                                          GHC.Base.String)]>_N
                                                     <Control.Monad.Trans.Reader.ReaderT
                                                        (Language.Haskell.Tools.Refactor.RefactorBase.RefactorCtx
                                                           Language.Haskell.Tools.AST.Ann.IdDom)
                                                        (Control.Monad.Trans.Except.ExceptT
                                                           GHC.Base.String GhcMonad.Ghc)>_R
                                                     <()>_N))
                                           (Sym (Language.Haskell.Tools.Refactor.RefactorBase.N:LocalRefactorT[0]
                                                     <Language.Haskell.Tools.AST.Ann.IdDom>_N
                                                     <Control.Monad.Trans.Except.ExceptT
                                                        GHC.Base.String GhcMonad.Ghc>_R) <()>_N))))
                            s')
                           `cast`
                         (Trans
                              (Language.Haskell.Tools.Refactor.RefactorBase.N:LocalRefactorT[0]
                                   <Language.Haskell.Tools.AST.Ann.IdDom>_N
                                   <Control.Monad.Trans.Except.ExceptT
                                      GHC.Base.String GhcMonad.Ghc>_R <()>_N)
                              (Trans
                                   (Control.Monad.Trans.Writer.Lazy.N:WriterT[0]
                                        <[Data.Either.Either
                                            Name.Name
                                            (SrcLoc.SrcSpan, GHC.Base.String, GHC.Base.String)]>_N
                                        <Control.Monad.Trans.Reader.ReaderT
                                           (Language.Haskell.Tools.Refactor.RefactorBase.RefactorCtx
                                              Language.Haskell.Tools.AST.Ann.IdDom)
                                           (Control.Monad.Trans.Except.ExceptT
                                              GHC.Base.String GhcMonad.Ghc)>_R
                                        <()>_N)
                                   (Control.Monad.Trans.Reader.N:ReaderT[0]
                                        <*>_N
                                        <Language.Haskell.Tools.Refactor.RefactorBase.RefactorCtx
                                           Language.Haskell.Tools.AST.Ann.IdDom>_R
                                        <Control.Monad.Trans.Except.ExceptT
                                           GHC.Base.String GhcMonad.Ghc>_R
                                        <((),
                                          [Data.Either.Either
                                             Name.Name
                                             (SrcLoc.SrcSpan, GHC.Base.String,
                                              GHC.Base.String)])>_N)))
                           r1)
                          `cast`
                        (Trans
                             (Control.Monad.Trans.Except.N:ExceptT[0]
                                  <[GHC.Types.Char]>_N
                                  <GhcMonad.Ghc>_R
                                  <((),
                                    [Data.Either.Either
                                       Name.Name
                                       (SrcLoc.SrcSpan, GHC.Base.String, GHC.Base.String)])>_N)
                             (GhcMonad.N:Ghc[0]
                                  <Data.Either.Either
                                     [GHC.Types.Char]
                                     ((),
                                      [Data.Either.Either
                                         Name.Name
                                         (SrcLoc.SrcSpan, GHC.Base.String, GHC.Base.String)])>_R))
                          eta)
                         `cast`
                       (GHC.Types.N:IO[0]
                            <Data.Either.Either
                               [GHC.Types.Char]
                               ((),
                                [Data.Either.Either
                                   Name.Name
                                   (SrcLoc.SrcSpan, GHC.Base.String, GHC.Base.String)])>_R)
                         ipv of ds3 { (#,#) ipv2 ipv3 ->
                  case ipv3 of wild1 {
                    Data.Either.Left e1
                    -> (# ipv2,
                          Data.Either.Left
                            @ [GHC.Types.Char]
                            @ (Language.Haskell.Tools.Refactor.RefactorBase.UnnamedModule
                                 Language.Haskell.Tools.AST.Ann.IdDom,
                               [Data.Either.Either
                                  Name.Name (SrcLoc.SrcSpan, GHC.Base.String, GHC.Base.String)])
                            e1 #)
                    Data.Either.Right x
                    -> (# ipv2,
                          Data.Either.Right
                            @ [GHC.Types.Char]
                            @ (Language.Haskell.Tools.Refactor.RefactorBase.UnnamedModule
                                 Language.Haskell.Tools.AST.Ann.IdDom,
                               [Data.Either.Either
                                  Name.Name (SrcLoc.SrcSpan, GHC.Base.String, GHC.Base.String)])
                            (moduleAST, case x of wild2 { (,) a3 w2 -> w2 }) #) } } } })
                   `cast`
                 (Trans
                      (<Language.Haskell.Tools.Refactor.RefactorBase.RefactorCtx
                          Language.Haskell.Tools.AST.Ann.IdDom>_R
                       ->_R Trans
                                (<GhcMonad.Session>_R
                                 ->_R Sym (GHC.Types.N:IO[0]
                                               <Data.Either.Either
                                                  [GHC.Types.Char]
                                                  (Language.Haskell.Tools.Refactor.RefactorBase.UnnamedModule
                                                     Language.Haskell.Tools.AST.Ann.IdDom,
                                                   [Data.Either.Either
                                                      Name.Name
                                                      (SrcLoc.SrcSpan, GHC.Base.String,
                                                       GHC.Base.String)])>_R))
                                (Trans
                                     (Sym (GhcMonad.N:Ghc[0]
                                               <Data.Either.Either
                                                  [GHC.Types.Char]
                                                  (Language.Haskell.Tools.Refactor.RefactorBase.UnnamedModule
                                                     Language.Haskell.Tools.AST.Ann.IdDom,
                                                   [Data.Either.Either
                                                      Name.Name
                                                      (SrcLoc.SrcSpan, GHC.Base.String,
                                                       GHC.Base.String)])>_R))
                                     (Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                               <[GHC.Types.Char]>_N
                                               <GhcMonad.Ghc>_R
                                               <(Language.Haskell.Tools.Refactor.RefactorBase.UnnamedModule
                                                   Language.Haskell.Tools.AST.Ann.IdDom,
                                                 [Data.Either.Either
                                                    Name.Name
                                                    (SrcLoc.SrcSpan, GHC.Base.String,
                                                     GHC.Base.String)])>_N))))
                      (Trans
                           (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                     <*>_N
                                     <Language.Haskell.Tools.Refactor.RefactorBase.RefactorCtx
                                        Language.Haskell.Tools.AST.Ann.IdDom>_R
                                     <Control.Monad.Trans.Except.ExceptT
                                        GHC.Base.String GhcMonad.Ghc>_R
                                     <(Language.Haskell.Tools.Refactor.RefactorBase.UnnamedModule
                                         Language.Haskell.Tools.AST.Ann.IdDom,
                                       [Data.Either.Either
                                          Name.Name
                                          (SrcLoc.SrcSpan, GHC.Base.String, GHC.Base.String)])>_N))
                           (Trans
                                (Sym (Control.Monad.Trans.Writer.Lazy.N:WriterT[0]
                                          <[Data.Either.Either
                                              Name.Name
                                              (SrcLoc.SrcSpan, GHC.Base.String, GHC.Base.String)]>_N
                                          <Control.Monad.Trans.Reader.ReaderT
                                             (Language.Haskell.Tools.Refactor.RefactorBase.RefactorCtx
                                                Language.Haskell.Tools.AST.Ann.IdDom)
                                             (Control.Monad.Trans.Except.ExceptT
                                                GHC.Base.String GhcMonad.Ghc)>_R
                                          <Language.Haskell.Tools.Refactor.RefactorBase.UnnamedModule
                                             Language.Haskell.Tools.AST.Ann.IdDom>_N))
                                (Sym (Language.Haskell.Tools.Refactor.RefactorBase.N:LocalRefactorT[0]
                                          <Language.Haskell.Tools.AST.Ann.IdDom>_N
                                          <Control.Monad.Trans.Except.ExceptT
                                             GHC.Base.String
                                             GhcMonad.Ghc>_R) <Language.Haskell.Tools.Refactor.RefactorBase.UnnamedModule
                                                                 Language.Haskell.Tools.AST.Ann.IdDom>_N))))) -}
a4d63f9f5e0988dc79e02f867f09d513
  organizeExtensions_a1 ::
    Data.Either.Either
      [GHC.Types.Char]
      ((),
       [Data.Either.Either
          Name.Name (SrcLoc.SrcSpan, GHC.Base.String, GHC.Base.String)])
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (Data.Either.Right
                   @ [GHC.Types.Char]
                   @ ((),
                      [Data.Either.Either
                         Name.Name (SrcLoc.SrcSpan, GHC.Base.String, GHC.Base.String)])
                   ExtensionOrganizer.organizeExtensions2) -}
9d5d848791d49da29f6c06ffe628b45e
  organizeExtensions_go10 ::
    Language.Haskell.Tools.Refactor.RefactorBase.LocalRefactorT
      Language.Haskell.Tools.AST.Ann.IdDom
      Language.Haskell.Tools.Refactor.RefactorBase.Refactor
      ()
    -> Data.Map.Base.Map
         (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
         [SrcLoc.SrcSpan]
    -> Language.Haskell.Tools.Refactor.RefactorBase.LocalRefactorT
         Language.Haskell.Tools.AST.Ann.IdDom
         Language.Haskell.Tools.Refactor.RefactorBase.Refactor
         ()
  {- Arity: 2, Strictness: <L,1*U><S,1*U> -}
032c26d52f869e4c6bc865705b0bdb98
  tryOut :: GHC.Base.String -> GHC.Base.String -> GHC.Types.IO ()
  {- Arity: 3,
     Unfolding: InlineRule (0, True, True)
                ExtensionOrganizer.tryOut1
                  `cast`
                (<GHC.Base.String>_R
                 ->_R <GHC.Base.String>_R
                 ->_R Sym (GHC.Types.N:IO[0] <()>_R)) -}
b0fee13352156b09db6d74263a94e136
  tryOut1 ::
    GHC.Base.String
    -> GHC.Base.String
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 3,
     Unfolding: (Language.Haskell.Tools.Refactor.Prepare.tryRefactor1
                   ExtensionOrganizer.tryOut2) -}
d55c9c84ba37c2e3145e9f1366465b24
  tryOut2 ::
    SrcLoc.RealSrcSpan
    -> Language.Haskell.Tools.Refactor.RefactorBase.Refactoring
         Language.Haskell.Tools.AST.Ann.IdDom
  {- Arity: 3, Strictness: <L,A><S,1*U(U,U)><L,A>,
     Unfolding: InlineRule (3, True, False)
                (\ (x :: SrcLoc.RealSrcSpan)
                   (w2 :: Language.Haskell.Tools.Refactor.RefactorBase.ModuleDom
                            Language.Haskell.Tools.AST.Ann.IdDom)
                   (w3 :: [Language.Haskell.Tools.Refactor.RefactorBase.ModuleDom
                             Language.Haskell.Tools.AST.Ann.IdDom]) ->
                 case w2 of ww { (,) ww12 ww13 ->
                 Language.Haskell.Tools.Refactor.RefactorBase.$wlocalRefactoring
                   @ Language.Haskell.Tools.AST.Ann.IdDom
                   ExtensionOrganizer.$slocalRefactoring1
                     `cast`
                   (GHC.Classes.(%,%)
                      <Language.Haskell.Tools.AST.Ann.Domain
                         Language.Haskell.Tools.AST.Ann.IdDom>_N
                      (Language.Haskell.Tools.AST.SemaInfoClasses.HasModuleInfo'
                         (Trans
                              (Sym (Language.Haskell.Tools.AST.Ann.D:R:SemanticInfo'IdDomSameInfoModuleCls[0]))
                              (Language.Haskell.Tools.AST.Ann.SemanticInfo'
                                 <Language.Haskell.Tools.AST.Ann.IdDom>_N
                                 (Sym (Language.Haskell.Tools.AST.Ann.D:R:SemaInfoClassify[3])))_N))_N)_R
                   ExtensionOrganizer.organizeExtensions_$sorganizeExtensions
                   ww12
                   ww13 }) -}
"SPEC organizeExtensions @ IdDom" [ALWAYS] forall ($d(%,%) :: ExtMonad.ExtDomain
                                                                Language.Haskell.Tools.AST.Ann.IdDom)
  ExtensionOrganizer.organizeExtensions @ Language.Haskell.Tools.AST.Ann.IdDom
                                        $d(%,%)
  = ExtensionOrganizer.organizeExtensions_$sorganizeExtensions
"SPEC/ExtensionOrganizer $fDataImportInfo @ Var" [ALWAYS] forall ($dData :: Data.Data.Data
                                                                              Var.Var)
  Language.Haskell.Tools.AST.SemaInfoTypes.$fDataImportInfo @ Var.Var
                                                            $dData
  = ExtensionOrganizer.$s$fDataImportInfo
"SPEC/ExtensionOrganizer $fDataImportInfo_$cdataCast2 @ Var" [ALWAYS] forall ($dData :: Data.Data.Data
                                                                                          Var.Var)
  Language.Haskell.Tools.AST.SemaInfoTypes.$fDataImportInfo_$cdataCast2 @ Var.Var
                                                                        $dData
  = ExtensionOrganizer.$s$fDataImportInfo_$s$fDataImportInfo_$cdataCast2
"SPEC/ExtensionOrganizer $fDataImportInfo_$cdataTypeOf @ Var" [ALWAYS] forall ($dData :: Data.Data.Data
                                                                                           Var.Var)
  Language.Haskell.Tools.AST.SemaInfoTypes.$fDataImportInfo_$cdataTypeOf @ Var.Var
                                                                         $dData
  = ExtensionOrganizer.$s$fDataImportInfo_$s$fDataImportInfo_$cdataTypeOf
"SPEC/ExtensionOrganizer $fDataImportInfo_$ctoConstr @ Var" [ALWAYS] forall ($dData :: Data.Data.Data
                                                                                         Var.Var)
  Language.Haskell.Tools.AST.SemaInfoTypes.$fDataImportInfo_$ctoConstr @ Var.Var
                                                                       $dData
  = ExtensionOrganizer.$s$fDataImportInfo_$s$fDataImportInfo_$ctoConstr
"SPEC/ExtensionOrganizer $fDataModuleInfo @ Var" [ALWAYS] forall ($dData :: Data.Data.Data
                                                                              Var.Var)
  Language.Haskell.Tools.AST.SemaInfoTypes.$fDataModuleInfo @ Var.Var
                                                            $dData
  = ExtensionOrganizer.$s$fDataModuleInfo
"SPEC/ExtensionOrganizer $fDataModuleInfo_$cdataCast2 @ Var" [ALWAYS] forall ($dData :: Data.Data.Data
                                                                                          Var.Var)
  Language.Haskell.Tools.AST.SemaInfoTypes.$fDataModuleInfo_$cdataCast2 @ Var.Var
                                                                        $dData
  = ExtensionOrganizer.$s$fDataModuleInfo_$s$fDataModuleInfo_$cdataCast2
"SPEC/ExtensionOrganizer $fDataModuleInfo_$cdataTypeOf @ Var" [ALWAYS] forall ($dData :: Data.Data.Data
                                                                                           Var.Var)
  Language.Haskell.Tools.AST.SemaInfoTypes.$fDataModuleInfo_$cdataTypeOf @ Var.Var
                                                                         $dData
  = ExtensionOrganizer.$s$fDataModuleInfo_$s$fDataModuleInfo_$cdataTypeOf
"SPEC/ExtensionOrganizer $fDataModuleInfo_$ctoConstr @ Var" [ALWAYS] forall ($dData :: Data.Data.Data
                                                                                         Var.Var)
  Language.Haskell.Tools.AST.SemaInfoTypes.$fDataModuleInfo_$ctoConstr @ Var.Var
                                                                       $dData
  = ExtensionOrganizer.$s$fDataModuleInfo_$s$fDataModuleInfo_$ctoConstr
"SPEC/ExtensionOrganizer $fDomaind @ IdDom" [ALWAYS] forall ($dShow4 :: GHC.Show.Show
                                                                          (Language.Haskell.Tools.AST.Ann.SemanticInfo'
                                                                             Language.Haskell.Tools.AST.Ann.IdDom
                                                                             Language.Haskell.Tools.AST.Ann.SameInfoWildcardCls))
                                                            ($dShow3 :: GHC.Show.Show
                                                                          (Language.Haskell.Tools.AST.Ann.SemanticInfo'
                                                                             Language.Haskell.Tools.AST.Ann.IdDom
                                                                             Language.Haskell.Tools.AST.Ann.SameInfoModuleCls))
                                                            ($dShow2 :: GHC.Show.Show
                                                                          (Language.Haskell.Tools.AST.Ann.SemanticInfo'
                                                                             Language.Haskell.Tools.AST.Ann.IdDom
                                                                             Language.Haskell.Tools.AST.Ann.SameInfoImportCls))
                                                            ($dShow1 :: GHC.Show.Show
                                                                          (Language.Haskell.Tools.AST.Ann.SemanticInfo'
                                                                             Language.Haskell.Tools.AST.Ann.IdDom
                                                                             Language.Haskell.Tools.AST.Ann.SameInfoExprCls))
                                                            ($dShow :: GHC.Show.Show
                                                                         (Language.Haskell.Tools.AST.Ann.SemanticInfo'
                                                                            Language.Haskell.Tools.AST.Ann.IdDom
                                                                            Language.Haskell.Tools.AST.Ann.SameInfoNameCls))
                                                            ($dData5 :: Data.Data.Data
                                                                          (Language.Haskell.Tools.AST.Ann.SemanticInfo'
                                                                             Language.Haskell.Tools.AST.Ann.IdDom
                                                                             Language.Haskell.Tools.AST.Ann.SameInfoWildcardCls))
                                                            ($dData4 :: Data.Data.Data
                                                                          (Language.Haskell.Tools.AST.Ann.SemanticInfo'
                                                                             Language.Haskell.Tools.AST.Ann.IdDom
                                                                             Language.Haskell.Tools.AST.Ann.SameInfoModuleCls))
                                                            ($dData3 :: Data.Data.Data
                                                                          (Language.Haskell.Tools.AST.Ann.SemanticInfo'
                                                                             Language.Haskell.Tools.AST.Ann.IdDom
                                                                             Language.Haskell.Tools.AST.Ann.SameInfoImportCls))
                                                            ($dData2 :: Data.Data.Data
                                                                          (Language.Haskell.Tools.AST.Ann.SemanticInfo'
                                                                             Language.Haskell.Tools.AST.Ann.IdDom
                                                                             Language.Haskell.Tools.AST.Ann.SameInfoExprCls))
                                                            ($dData1 :: Data.Data.Data
                                                                          (Language.Haskell.Tools.AST.Ann.SemanticInfo'
                                                                             Language.Haskell.Tools.AST.Ann.IdDom
                                                                             Language.Haskell.Tools.AST.Ann.SameInfoNameCls))
                                                            ($d~ :: Language.Haskell.Tools.AST.Ann.SemanticInfo'
                                                                      Language.Haskell.Tools.AST.Ann.IdDom
                                                                      Language.Haskell.Tools.AST.Ann.SameInfoDefaultCls
                                                                    Data.Type.Equality.~ Language.Haskell.Tools.AST.SemaInfoTypes.NoSemanticInfo)
                                                            ($dData :: Data.Data.Data
                                                                         Language.Haskell.Tools.AST.Ann.IdDom)
                                                            ($dTypeable :: Data.Typeable.Internal.Typeable
                                                                             Language.Haskell.Tools.AST.Ann.IdDom)
  Language.Haskell.Tools.AST.Ann.$fDomaind @ Language.Haskell.Tools.AST.Ann.IdDom
                                           $dTypeable
                                           $dData
                                           $d~
                                           $dData1
                                           $dData2
                                           $dData3
                                           $dData4
                                           $dData5
                                           $dShow
                                           $dShow1
                                           $dShow2
                                           $dShow3
                                           $dShow4
  = ExtensionOrganizer.$s$fDomaind
"SPEC/ExtensionOrganizer $fDomaind_$cp10Domain @ IdDom" [ALWAYS] forall ($dShow4 :: GHC.Show.Show
                                                                                      (Language.Haskell.Tools.AST.Ann.SemanticInfo'
                                                                                         Language.Haskell.Tools.AST.Ann.IdDom
                                                                                         Language.Haskell.Tools.AST.Ann.SameInfoWildcardCls))
                                                                        ($dShow3 :: GHC.Show.Show
                                                                                      (Language.Haskell.Tools.AST.Ann.SemanticInfo'
                                                                                         Language.Haskell.Tools.AST.Ann.IdDom
                                                                                         Language.Haskell.Tools.AST.Ann.SameInfoModuleCls))
                                                                        ($dShow2 :: GHC.Show.Show
                                                                                      (Language.Haskell.Tools.AST.Ann.SemanticInfo'
                                                                                         Language.Haskell.Tools.AST.Ann.IdDom
                                                                                         Language.Haskell.Tools.AST.Ann.SameInfoImportCls))
                                                                        ($dShow1 :: GHC.Show.Show
                                                                                      (Language.Haskell.Tools.AST.Ann.SemanticInfo'
                                                                                         Language.Haskell.Tools.AST.Ann.IdDom
                                                                                         Language.Haskell.Tools.AST.Ann.SameInfoExprCls))
                                                                        ($dShow :: GHC.Show.Show
                                                                                     (Language.Haskell.Tools.AST.Ann.SemanticInfo'
                                                                                        Language.Haskell.Tools.AST.Ann.IdDom
                                                                                        Language.Haskell.Tools.AST.Ann.SameInfoNameCls))
                                                                        ($dData5 :: Data.Data.Data
                                                                                      (Language.Haskell.Tools.AST.Ann.SemanticInfo'
                                                                                         Language.Haskell.Tools.AST.Ann.IdDom
                                                                                         Language.Haskell.Tools.AST.Ann.SameInfoWildcardCls))
                                                                        ($dData4 :: Data.Data.Data
                                                                                      (Language.Haskell.Tools.AST.Ann.SemanticInfo'
                                                                                         Language.Haskell.Tools.AST.Ann.IdDom
                                                                                         Language.Haskell.Tools.AST.Ann.SameInfoModuleCls))
                                                                        ($dData3 :: Data.Data.Data
                                                                                      (Language.Haskell.Tools.AST.Ann.SemanticInfo'
                                                                                         Language.Haskell.Tools.AST.Ann.IdDom
                                                                                         Language.Haskell.Tools.AST.Ann.SameInfoImportCls))
                                                                        ($dData2 :: Data.Data.Data
                                                                                      (Language.Haskell.Tools.AST.Ann.SemanticInfo'
                                                                                         Language.Haskell.Tools.AST.Ann.IdDom
                                                                                         Language.Haskell.Tools.AST.Ann.SameInfoExprCls))
                                                                        ($dData1 :: Data.Data.Data
                                                                                      (Language.Haskell.Tools.AST.Ann.SemanticInfo'
                                                                                         Language.Haskell.Tools.AST.Ann.IdDom
                                                                                         Language.Haskell.Tools.AST.Ann.SameInfoNameCls))
                                                                        ($d~ :: Language.Haskell.Tools.AST.Ann.SemanticInfo'
                                                                                  Language.Haskell.Tools.AST.Ann.IdDom
                                                                                  Language.Haskell.Tools.AST.Ann.SameInfoDefaultCls
                                                                                Data.Type.Equality.~ Language.Haskell.Tools.AST.SemaInfoTypes.NoSemanticInfo)
                                                                        ($dData :: Data.Data.Data
                                                                                     Language.Haskell.Tools.AST.Ann.IdDom)
                                                                        ($dTypeable :: Data.Typeable.Internal.Typeable
                                                                                         Language.Haskell.Tools.AST.Ann.IdDom)
  Language.Haskell.Tools.AST.Ann.$fDomaind_$cp10Domain @ Language.Haskell.Tools.AST.Ann.IdDom
                                                       $dTypeable
                                                       $dData
                                                       $d~
                                                       $dData1
                                                       $dData2
                                                       $dData3
                                                       $dData4
                                                       $dData5
                                                       $dShow
                                                       $dShow1
                                                       $dShow2
                                                       $dShow3
                                                       $dShow4
  = ExtensionOrganizer.$s$fDomaind_$s$fDomaind_$cp10Domain
"SPEC/ExtensionOrganizer $fDomaind_$cp11Domain @ IdDom" [ALWAYS] forall ($dShow4 :: GHC.Show.Show
                                                                                      (Language.Haskell.Tools.AST.Ann.SemanticInfo'
                                                                                         Language.Haskell.Tools.AST.Ann.IdDom
                                                                                         Language.Haskell.Tools.AST.Ann.SameInfoWildcardCls))
                                                                        ($dShow3 :: GHC.Show.Show
                                                                                      (Language.Haskell.Tools.AST.Ann.SemanticInfo'
                                                                                         Language.Haskell.Tools.AST.Ann.IdDom
                                                                                         Language.Haskell.Tools.AST.Ann.SameInfoModuleCls))
                                                                        ($dShow2 :: GHC.Show.Show
                                                                                      (Language.Haskell.Tools.AST.Ann.SemanticInfo'
                                                                                         Language.Haskell.Tools.AST.Ann.IdDom
                                                                                         Language.Haskell.Tools.AST.Ann.SameInfoImportCls))
                                                                        ($dShow1 :: GHC.Show.Show
                                                                                      (Language.Haskell.Tools.AST.Ann.SemanticInfo'
                                                                                         Language.Haskell.Tools.AST.Ann.IdDom
                                                                                         Language.Haskell.Tools.AST.Ann.SameInfoExprCls))
                                                                        ($dShow :: GHC.Show.Show
                                                                                     (Language.Haskell.Tools.AST.Ann.SemanticInfo'
                                                                                        Language.Haskell.Tools.AST.Ann.IdDom
                                                                                        Language.Haskell.Tools.AST.Ann.SameInfoNameCls))
                                                                        ($dData5 :: Data.Data.Data
                                                                                      (Language.Haskell.Tools.AST.Ann.SemanticInfo'
                                                                                         Language.Haskell.Tools.AST.Ann.IdDom
                                                                                         Language.Haskell.Tools.AST.Ann.SameInfoWildcardCls))
                                                                        ($dData4 :: Data.Data.Data
                                                                                      (Language.Haskell.Tools.AST.Ann.SemanticInfo'
                                                                                         Language.Haskell.Tools.AST.Ann.IdDom
                                                                                         Language.Haskell.Tools.AST.Ann.SameInfoModuleCls))
                                                                        ($dData3 :: Data.Data.Data
                                                                                      (Language.Haskell.Tools.AST.Ann.SemanticInfo'
                                                                                         Language.Haskell.Tools.AST.Ann.IdDom
                                                                                         Language.Haskell.Tools.AST.Ann.SameInfoImportCls))
                                                                        ($dData2 :: Data.Data.Data
                                                                                      (Language.Haskell.Tools.AST.Ann.SemanticInfo'
                                                                                         Language.Haskell.Tools.AST.Ann.IdDom
                                                                                         Language.Haskell.Tools.AST.Ann.SameInfoExprCls))
                                                                        ($dData1 :: Data.Data.Data
                                                                                      (Language.Haskell.Tools.AST.Ann.SemanticInfo'
                                                                                         Language.Haskell.Tools.AST.Ann.IdDom
                                                                                         Language.Haskell.Tools.AST.Ann.SameInfoNameCls))
                                                                        ($d~ :: Language.Haskell.Tools.AST.Ann.SemanticInfo'
                                                                                  Language.Haskell.Tools.AST.Ann.IdDom
                                                                                  Language.Haskell.Tools.AST.Ann.SameInfoDefaultCls
                                                                                Data.Type.Equality.~ Language.Haskell.Tools.AST.SemaInfoTypes.NoSemanticInfo)
                                                                        ($dData :: Data.Data.Data
                                                                                     Language.Haskell.Tools.AST.Ann.IdDom)
                                                                        ($dTypeable :: Data.Typeable.Internal.Typeable
                                                                                         Language.Haskell.Tools.AST.Ann.IdDom)
  Language.Haskell.Tools.AST.Ann.$fDomaind_$cp11Domain @ Language.Haskell.Tools.AST.Ann.IdDom
                                                       $dTypeable
                                                       $dData
                                                       $d~
                                                       $dData1
                                                       $dData2
                                                       $dData3
                                                       $dData4
                                                       $dData5
                                                       $dShow
                                                       $dShow1
                                                       $dShow2
                                                       $dShow3
                                                       $dShow4
  = ExtensionOrganizer.$s$fDomaind_$s$fDomaind_$cp11Domain
"SPEC/ExtensionOrganizer $fDomaind_$cp12Domain @ IdDom" [ALWAYS] forall ($dShow4 :: GHC.Show.Show
                                                                                      (Language.Haskell.Tools.AST.Ann.SemanticInfo'
                                                                                         Language.Haskell.Tools.AST.Ann.IdDom
                                                                                         Language.Haskell.Tools.AST.Ann.SameInfoWildcardCls))
                                                                        ($dShow3 :: GHC.Show.Show
                                                                                      (Language.Haskell.Tools.AST.Ann.SemanticInfo'
                                                                                         Language.Haskell.Tools.AST.Ann.IdDom
                                                                                         Language.Haskell.Tools.AST.Ann.SameInfoModuleCls))
                                                                        ($dShow2 :: GHC.Show.Show
                                                                                      (Language.Haskell.Tools.AST.Ann.SemanticInfo'
                                                                                         Language.Haskell.Tools.AST.Ann.IdDom
                                                                                         Language.Haskell.Tools.AST.Ann.SameInfoImportCls))
                                                                        ($dShow1 :: GHC.Show.Show
                                                                                      (Language.Haskell.Tools.AST.Ann.SemanticInfo'
                                                                                         Language.Haskell.Tools.AST.Ann.IdDom
                                                                                         Language.Haskell.Tools.AST.Ann.SameInfoExprCls))
                                                                        ($dShow :: GHC.Show.Show
                                                                                     (Language.Haskell.Tools.AST.Ann.SemanticInfo'
                                                                                        Language.Haskell.Tools.AST.Ann.IdDom
                                                                                        Language.Haskell.Tools.AST.Ann.SameInfoNameCls))
                                                                        ($dData5 :: Data.Data.Data
                                                                                      (Language.Haskell.Tools.AST.Ann.SemanticInfo'
                                                                                         Language.Haskell.Tools.AST.Ann.IdDom
                                                                                         Language.Haskell.Tools.AST.Ann.SameInfoWildcardCls))
                                                                        ($dData4 :: Data.Data.Data
                                                                                      (Language.Haskell.Tools.AST.Ann.SemanticInfo'
                                                                                         Language.Haskell.Tools.AST.Ann.IdDom
                                                                                         Language.Haskell.Tools.AST.Ann.SameInfoModuleCls))
                                                                        ($dData3 :: Data.Data.Data
                                                                                      (Language.Haskell.Tools.AST.Ann.SemanticInfo'
                                                                                         Language.Haskell.Tools.AST.Ann.IdDom
                                                                                         Language.Haskell.Tools.AST.Ann.SameInfoImportCls))
                                                                        ($dData2 :: Data.Data.Data
                                                                                      (Language.Haskell.Tools.AST.Ann.SemanticInfo'
                                                                                         Language.Haskell.Tools.AST.Ann.IdDom
                                                                                         Language.Haskell.Tools.AST.Ann.SameInfoExprCls))
                                                                        ($dData1 :: Data.Data.Data
                                                                                      (Language.Haskell.Tools.AST.Ann.SemanticInfo'
                                                                                         Language.Haskell.Tools.AST.Ann.IdDom
                                                                                         Language.Haskell.Tools.AST.Ann.SameInfoNameCls))
                                                                        ($d~ :: Language.Haskell.Tools.AST.Ann.SemanticInfo'
                                                                                  Language.Haskell.Tools.AST.Ann.IdDom
                                                                                  Language.Haskell.Tools.AST.Ann.SameInfoDefaultCls
                                                                                Data.Type.Equality.~ Language.Haskell.Tools.AST.SemaInfoTypes.NoSemanticInfo)
                                                                        ($dData :: Data.Data.Data
                                                                                     Language.Haskell.Tools.AST.Ann.IdDom)
                                                                        ($dTypeable :: Data.Typeable.Internal.Typeable
                                                                                         Language.Haskell.Tools.AST.Ann.IdDom)
  Language.Haskell.Tools.AST.Ann.$fDomaind_$cp12Domain @ Language.Haskell.Tools.AST.Ann.IdDom
                                                       $dTypeable
                                                       $dData
                                                       $d~
                                                       $dData1
                                                       $dData2
                                                       $dData3
                                                       $dData4
                                                       $dData5
                                                       $dShow
                                                       $dShow1
                                                       $dShow2
                                                       $dShow3
                                                       $dShow4
  = ExtensionOrganizer.$s$fDomaind_$s$fDomaind_$cp12Domain
"SPEC/ExtensionOrganizer $fDomaind_$cp13Domain @ IdDom" [ALWAYS] forall ($dShow4 :: GHC.Show.Show
                                                                                      (Language.Haskell.Tools.AST.Ann.SemanticInfo'
                                                                                         Language.Haskell.Tools.AST.Ann.IdDom
                                                                                         Language.Haskell.Tools.AST.Ann.SameInfoWildcardCls))
                                                                        ($dShow3 :: GHC.Show.Show
                                                                                      (Language.Haskell.Tools.AST.Ann.SemanticInfo'
                                                                                         Language.Haskell.Tools.AST.Ann.IdDom
                                                                                         Language.Haskell.Tools.AST.Ann.SameInfoModuleCls))
                                                                        ($dShow2 :: GHC.Show.Show
                                                                                      (Language.Haskell.Tools.AST.Ann.SemanticInfo'
                                                                                         Language.Haskell.Tools.AST.Ann.IdDom
                                                                                         Language.Haskell.Tools.AST.Ann.SameInfoImportCls))
                                                                        ($dShow1 :: GHC.Show.Show
                                                                                      (Language.Haskell.Tools.AST.Ann.SemanticInfo'
                                                                                         Language.Haskell.Tools.AST.Ann.IdDom
                                                                                         Language.Haskell.Tools.AST.Ann.SameInfoExprCls))
                                                                        ($dShow :: GHC.Show.Show
                                                                                     (Language.Haskell.Tools.AST.Ann.SemanticInfo'
                                                                                        Language.Haskell.Tools.AST.Ann.IdDom
                                                                                        Language.Haskell.Tools.AST.Ann.SameInfoNameCls))
                                                                        ($dData5 :: Data.Data.Data
                                                                                      (Language.Haskell.Tools.AST.Ann.SemanticInfo'
                                                                                         Language.Haskell.Tools.AST.Ann.IdDom
                                                                                         Language.Haskell.Tools.AST.Ann.SameInfoWildcardCls))
                                                                        ($dData4 :: Data.Data.Data
                                                                                      (Language.Haskell.Tools.AST.Ann.SemanticInfo'
                                                                                         Language.Haskell.Tools.AST.Ann.IdDom
                                                                                         Language.Haskell.Tools.AST.Ann.SameInfoModuleCls))
                                                                        ($dData3 :: Data.Data.Data
                                                                                      (Language.Haskell.Tools.AST.Ann.SemanticInfo'
                                                                                         Language.Haskell.Tools.AST.Ann.IdDom
                                                                                         Language.Haskell.Tools.AST.Ann.SameInfoImportCls))
                                                                        ($dData2 :: Data.Data.Data
                                                                                      (Language.Haskell.Tools.AST.Ann.SemanticInfo'
                                                                                         Language.Haskell.Tools.AST.Ann.IdDom
                                                                                         Language.Haskell.Tools.AST.Ann.SameInfoExprCls))
                                                                        ($dData1 :: Data.Data.Data
                                                                                      (Language.Haskell.Tools.AST.Ann.SemanticInfo'
                                                                                         Language.Haskell.Tools.AST.Ann.IdDom
                                                                                         Language.Haskell.Tools.AST.Ann.SameInfoNameCls))
                                                                        ($d~ :: Language.Haskell.Tools.AST.Ann.SemanticInfo'
                                                                                  Language.Haskell.Tools.AST.Ann.IdDom
                                                                                  Language.Haskell.Tools.AST.Ann.SameInfoDefaultCls
                                                                                Data.Type.Equality.~ Language.Haskell.Tools.AST.SemaInfoTypes.NoSemanticInfo)
                                                                        ($dData :: Data.Data.Data
                                                                                     Language.Haskell.Tools.AST.Ann.IdDom)
                                                                        ($dTypeable :: Data.Typeable.Internal.Typeable
                                                                                         Language.Haskell.Tools.AST.Ann.IdDom)
  Language.Haskell.Tools.AST.Ann.$fDomaind_$cp13Domain @ Language.Haskell.Tools.AST.Ann.IdDom
                                                       $dTypeable
                                                       $dData
                                                       $d~
                                                       $dData1
                                                       $dData2
                                                       $dData3
                                                       $dData4
                                                       $dData5
                                                       $dShow
                                                       $dShow1
                                                       $dShow2
                                                       $dShow3
                                                       $dShow4
  = ExtensionOrganizer.$s$fDomaind_$s$fDomaind_$cp13Domain
"SPEC/ExtensionOrganizer $fDomaind_$cp2Domain @ IdDom" [ALWAYS] forall ($dShow4 :: GHC.Show.Show
                                                                                     (Language.Haskell.Tools.AST.Ann.SemanticInfo'
                                                                                        Language.Haskell.Tools.AST.Ann.IdDom
                                                                                        Language.Haskell.Tools.AST.Ann.SameInfoWildcardCls))
                                                                       ($dShow3 :: GHC.Show.Show
                                                                                     (Language.Haskell.Tools.AST.Ann.SemanticInfo'
                                                                                        Language.Haskell.Tools.AST.Ann.IdDom
                                                                                        Language.Haskell.Tools.AST.Ann.SameInfoModuleCls))
                                                                       ($dShow2 :: GHC.Show.Show
                                                                                     (Language.Haskell.Tools.AST.Ann.SemanticInfo'
                                                                                        Language.Haskell.Tools.AST.Ann.IdDom
                                                                                        Language.Haskell.Tools.AST.Ann.SameInfoImportCls))
                                                                       ($dShow1 :: GHC.Show.Show
                                                                                     (Language.Haskell.Tools.AST.Ann.SemanticInfo'
                                                                                        Language.Haskell.Tools.AST.Ann.IdDom
                                                                                        Language.Haskell.Tools.AST.Ann.SameInfoExprCls))
                                                                       ($dShow :: GHC.Show.Show
                                                                                    (Language.Haskell.Tools.AST.Ann.SemanticInfo'
                                                                                       Language.Haskell.Tools.AST.Ann.IdDom
                                                                                       Language.Haskell.Tools.AST.Ann.SameInfoNameCls))
                                                                       ($dData5 :: Data.Data.Data
                                                                                     (Language.Haskell.Tools.AST.Ann.SemanticInfo'
                                                                                        Language.Haskell.Tools.AST.Ann.IdDom
                                                                                        Language.Haskell.Tools.AST.Ann.SameInfoWildcardCls))
                                                                       ($dData4 :: Data.Data.Data
                                                                                     (Language.Haskell.Tools.AST.Ann.SemanticInfo'
                                                                                        Language.Haskell.Tools.AST.Ann.IdDom
                                                                                        Language.Haskell.Tools.AST.Ann.SameInfoModuleCls))
                                                                       ($dData3 :: Data.Data.Data
                                                                                     (Language.Haskell.Tools.AST.Ann.SemanticInfo'
                                                                                        Language.Haskell.Tools.AST.Ann.IdDom
                                                                                        Language.Haskell.Tools.AST.Ann.SameInfoImportCls))
                                                                       ($dData2 :: Data.Data.Data
                                                                                     (Language.Haskell.Tools.AST.Ann.SemanticInfo'
                                                                                        Language.Haskell.Tools.AST.Ann.IdDom
                                                                                        Language.Haskell.Tools.AST.Ann.SameInfoExprCls))
                                                                       ($dData1 :: Data.Data.Data
                                                                                     (Language.Haskell.Tools.AST.Ann.SemanticInfo'
                                                                                        Language.Haskell.Tools.AST.Ann.IdDom
                                                                                        Language.Haskell.Tools.AST.Ann.SameInfoNameCls))
                                                                       ($d~ :: Language.Haskell.Tools.AST.Ann.SemanticInfo'
                                                                                 Language.Haskell.Tools.AST.Ann.IdDom
                                                                                 Language.Haskell.Tools.AST.Ann.SameInfoDefaultCls
                                                                               Data.Type.Equality.~ Language.Haskell.Tools.AST.SemaInfoTypes.NoSemanticInfo)
                                                                       ($dData :: Data.Data.Data
                                                                                    Language.Haskell.Tools.AST.Ann.IdDom)
                                                                       ($dTypeable :: Data.Typeable.Internal.Typeable
                                                                                        Language.Haskell.Tools.AST.Ann.IdDom)
  Language.Haskell.Tools.AST.Ann.$fDomaind_$cp2Domain @ Language.Haskell.Tools.AST.Ann.IdDom
                                                      $dTypeable
                                                      $dData
                                                      $d~
                                                      $dData1
                                                      $dData2
                                                      $dData3
                                                      $dData4
                                                      $dData5
                                                      $dShow
                                                      $dShow1
                                                      $dShow2
                                                      $dShow3
                                                      $dShow4
  = ExtensionOrganizer.$s$fDomaind_$s$fDomaind_$cp2Domain
"SPEC/ExtensionOrganizer $fDomaind_$cp3Domain @ IdDom" [ALWAYS] forall ($dShow4 :: GHC.Show.Show
                                                                                     (Language.Haskell.Tools.AST.Ann.SemanticInfo'
                                                                                        Language.Haskell.Tools.AST.Ann.IdDom
                                                                                        Language.Haskell.Tools.AST.Ann.SameInfoWildcardCls))
                                                                       ($dShow3 :: GHC.Show.Show
                                                                                     (Language.Haskell.Tools.AST.Ann.SemanticInfo'
                                                                                        Language.Haskell.Tools.AST.Ann.IdDom
                                                                                        Language.Haskell.Tools.AST.Ann.SameInfoModuleCls))
                                                                       ($dShow2 :: GHC.Show.Show
                                                                                     (Language.Haskell.Tools.AST.Ann.SemanticInfo'
                                                                                        Language.Haskell.Tools.AST.Ann.IdDom
                                                                                        Language.Haskell.Tools.AST.Ann.SameInfoImportCls))
                                                                       ($dShow1 :: GHC.Show.Show
                                                                                     (Language.Haskell.Tools.AST.Ann.SemanticInfo'
                                                                                        Language.Haskell.Tools.AST.Ann.IdDom
                                                                                        Language.Haskell.Tools.AST.Ann.SameInfoExprCls))
                                                                       ($dShow :: GHC.Show.Show
                                                                                    (Language.Haskell.Tools.AST.Ann.SemanticInfo'
                                                                                       Language.Haskell.Tools.AST.Ann.IdDom
                                                                                       Language.Haskell.Tools.AST.Ann.SameInfoNameCls))
                                                                       ($dData5 :: Data.Data.Data
                                                                                     (Language.Haskell.Tools.AST.Ann.SemanticInfo'
                                                                                        Language.Haskell.Tools.AST.Ann.IdDom
                                                                                        Language.Haskell.Tools.AST.Ann.SameInfoWildcardCls))
                                                                       ($dData4 :: Data.Data.Data
                                                                                     (Language.Haskell.Tools.AST.Ann.SemanticInfo'
                                                                                        Language.Haskell.Tools.AST.Ann.IdDom
                                                                                        Language.Haskell.Tools.AST.Ann.SameInfoModuleCls))
                                                                       ($dData3 :: Data.Data.Data
                                                                                     (Language.Haskell.Tools.AST.Ann.SemanticInfo'
                                                                                        Language.Haskell.Tools.AST.Ann.IdDom
                                                                                        Language.Haskell.Tools.AST.Ann.SameInfoImportCls))
                                                                       ($dData2 :: Data.Data.Data
                                                                                     (Language.Haskell.Tools.AST.Ann.SemanticInfo'
                                                                                        Language.Haskell.Tools.AST.Ann.IdDom
                                                                                        Language.Haskell.Tools.AST.Ann.SameInfoExprCls))
                                                                       ($dData1 :: Data.Data.Data
                                                                                     (Language.Haskell.Tools.AST.Ann.SemanticInfo'
                                                                                        Language.Haskell.Tools.AST.Ann.IdDom
                                                                                        Language.Haskell.Tools.AST.Ann.SameInfoNameCls))
                                                                       ($d~ :: Language.Haskell.Tools.AST.Ann.SemanticInfo'
                                                                                 Language.Haskell.Tools.AST.Ann.IdDom
                                                                                 Language.Haskell.Tools.AST.Ann.SameInfoDefaultCls
                                                                               Data.Type.Equality.~ Language.Haskell.Tools.AST.SemaInfoTypes.NoSemanticInfo)
                                                                       ($dData :: Data.Data.Data
                                                                                    Language.Haskell.Tools.AST.Ann.IdDom)
                                                                       ($dTypeable :: Data.Typeable.Internal.Typeable
                                                                                        Language.Haskell.Tools.AST.Ann.IdDom)
  Language.Haskell.Tools.AST.Ann.$fDomaind_$cp3Domain @ Language.Haskell.Tools.AST.Ann.IdDom
                                                      $dTypeable
                                                      $dData
                                                      $d~
                                                      $dData1
                                                      $dData2
                                                      $dData3
                                                      $dData4
                                                      $dData5
                                                      $dShow
                                                      $dShow1
                                                      $dShow2
                                                      $dShow3
                                                      $dShow4
  = ExtensionOrganizer.$s$fDomaind_$s$fDomaind_$cp3Domain
"SPEC/ExtensionOrganizer $fDomaind_$cp4Domain @ IdDom" [ALWAYS] forall ($dShow4 :: GHC.Show.Show
                                                                                     (Language.Haskell.Tools.AST.Ann.SemanticInfo'
                                                                                        Language.Haskell.Tools.AST.Ann.IdDom
                                                                                        Language.Haskell.Tools.AST.Ann.SameInfoWildcardCls))
                                                                       ($dShow3 :: GHC.Show.Show
                                                                                     (Language.Haskell.Tools.AST.Ann.SemanticInfo'
                                                                                        Language.Haskell.Tools.AST.Ann.IdDom
                                                                                        Language.Haskell.Tools.AST.Ann.SameInfoModuleCls))
                                                                       ($dShow2 :: GHC.Show.Show
                                                                                     (Language.Haskell.Tools.AST.Ann.SemanticInfo'
                                                                                        Language.Haskell.Tools.AST.Ann.IdDom
                                                                                        Language.Haskell.Tools.AST.Ann.SameInfoImportCls))
                                                                       ($dShow1 :: GHC.Show.Show
                                                                                     (Language.Haskell.Tools.AST.Ann.SemanticInfo'
                                                                                        Language.Haskell.Tools.AST.Ann.IdDom
                                                                                        Language.Haskell.Tools.AST.Ann.SameInfoExprCls))
                                                                       ($dShow :: GHC.Show.Show
                                                                                    (Language.Haskell.Tools.AST.Ann.SemanticInfo'
                                                                                       Language.Haskell.Tools.AST.Ann.IdDom
                                                                                       Language.Haskell.Tools.AST.Ann.SameInfoNameCls))
                                                                       ($dData5 :: Data.Data.Data
                                                                                     (Language.Haskell.Tools.AST.Ann.SemanticInfo'
                                                                                        Language.Haskell.Tools.AST.Ann.IdDom
                                                                                        Language.Haskell.Tools.AST.Ann.SameInfoWildcardCls))
                                                                       ($dData4 :: Data.Data.Data
                                                                                     (Language.Haskell.Tools.AST.Ann.SemanticInfo'
                                                                                        Language.Haskell.Tools.AST.Ann.IdDom
                                                                                        Language.Haskell.Tools.AST.Ann.SameInfoModuleCls))
                                                                       ($dData3 :: Data.Data.Data
                                                                                     (Language.Haskell.Tools.AST.Ann.SemanticInfo'
                                                                                        Language.Haskell.Tools.AST.Ann.IdDom
                                                                                        Language.Haskell.Tools.AST.Ann.SameInfoImportCls))
                                                                       ($dData2 :: Data.Data.Data
                                                                                     (Language.Haskell.Tools.AST.Ann.SemanticInfo'
                                                                                        Language.Haskell.Tools.AST.Ann.IdDom
                                                                                        Language.Haskell.Tools.AST.Ann.SameInfoExprCls))
                                                                       ($dData1 :: Data.Data.Data
                                                                                     (Language.Haskell.Tools.AST.Ann.SemanticInfo'
                                                                                        Language.Haskell.Tools.AST.Ann.IdDom
                                                                                        Language.Haskell.Tools.AST.Ann.SameInfoNameCls))
                                                                       ($d~ :: Language.Haskell.Tools.AST.Ann.SemanticInfo'
                                                                                 Language.Haskell.Tools.AST.Ann.IdDom
                                                                                 Language.Haskell.Tools.AST.Ann.SameInfoDefaultCls
                                                                               Data.Type.Equality.~ Language.Haskell.Tools.AST.SemaInfoTypes.NoSemanticInfo)
                                                                       ($dData :: Data.Data.Data
                                                                                    Language.Haskell.Tools.AST.Ann.IdDom)
                                                                       ($dTypeable :: Data.Typeable.Internal.Typeable
                                                                                        Language.Haskell.Tools.AST.Ann.IdDom)
  Language.Haskell.Tools.AST.Ann.$fDomaind_$cp4Domain @ Language.Haskell.Tools.AST.Ann.IdDom
                                                      $dTypeable
                                                      $dData
                                                      $d~
                                                      $dData1
                                                      $dData2
                                                      $dData3
                                                      $dData4
                                                      $dData5
                                                      $dShow
                                                      $dShow1
                                                      $dShow2
                                                      $dShow3
                                                      $dShow4
  = ExtensionOrganizer.$s$fDomaind_$s$fDomaind_$cp4Domain
"SPEC/ExtensionOrganizer $fDomaind_$cp5Domain @ IdDom" [ALWAYS] forall ($dShow4 :: GHC.Show.Show
                                                                                     (Language.Haskell.Tools.AST.Ann.SemanticInfo'
                                                                                        Language.Haskell.Tools.AST.Ann.IdDom
                                                                                        Language.Haskell.Tools.AST.Ann.SameInfoWildcardCls))
                                                                       ($dShow3 :: GHC.Show.Show
                                                                                     (Language.Haskell.Tools.AST.Ann.SemanticInfo'
                                                                                        Language.Haskell.Tools.AST.Ann.IdDom
                                                                                        Language.Haskell.Tools.AST.Ann.SameInfoModuleCls))
                                                                       ($dShow2 :: GHC.Show.Show
                                                                                     (Language.Haskell.Tools.AST.Ann.SemanticInfo'
                                                                                        Language.Haskell.Tools.AST.Ann.IdDom
                                                                                        Language.Haskell.Tools.AST.Ann.SameInfoImportCls))
                                                                       ($dShow1 :: GHC.Show.Show
                                                                                     (Language.Haskell.Tools.AST.Ann.SemanticInfo'
                                                                                        Language.Haskell.Tools.AST.Ann.IdDom
                                                                                        Language.Haskell.Tools.AST.Ann.SameInfoExprCls))
                                                                       ($dShow :: GHC.Show.Show
                                                                                    (Language.Haskell.Tools.AST.Ann.SemanticInfo'
                                                                                       Language.Haskell.Tools.AST.Ann.IdDom
                                                                                       Language.Haskell.Tools.AST.Ann.SameInfoNameCls))
                                                                       ($dData5 :: Data.Data.Data
                                                                                     (Language.Haskell.Tools.AST.Ann.SemanticInfo'
                                                                                        Language.Haskell.Tools.AST.Ann.IdDom
                                                                                        Language.Haskell.Tools.AST.Ann.SameInfoWildcardCls))
                                                                       ($dData4 :: Data.Data.Data
                                                                                     (Language.Haskell.Tools.AST.Ann.SemanticInfo'
                                                                                        Language.Haskell.Tools.AST.Ann.IdDom
                                                                                        Language.Haskell.Tools.AST.Ann.SameInfoModuleCls))
                                                                       ($dData3 :: Data.Data.Data
                                                                                     (Language.Haskell.Tools.AST.Ann.SemanticInfo'
                                                                                        Language.Haskell.Tools.AST.Ann.IdDom
                                                                                        Language.Haskell.Tools.AST.Ann.SameInfoImportCls))
                                                                       ($dData2 :: Data.Data.Data
                                                                                     (Language.Haskell.Tools.AST.Ann.SemanticInfo'
                                                                                        Language.Haskell.Tools.AST.Ann.IdDom
                                                                                        Language.Haskell.Tools.AST.Ann.SameInfoExprCls))
                                                                       ($dData1 :: Data.Data.Data
                                                                                     (Language.Haskell.Tools.AST.Ann.SemanticInfo'
                                                                                        Language.Haskell.Tools.AST.Ann.IdDom
                                                                                        Language.Haskell.Tools.AST.Ann.SameInfoNameCls))
                                                                       ($d~ :: Language.Haskell.Tools.AST.Ann.SemanticInfo'
                                                                                 Language.Haskell.Tools.AST.Ann.IdDom
                                                                                 Language.Haskell.Tools.AST.Ann.SameInfoDefaultCls
                                                                               Data.Type.Equality.~ Language.Haskell.Tools.AST.SemaInfoTypes.NoSemanticInfo)
                                                                       ($dData :: Data.Data.Data
                                                                                    Language.Haskell.Tools.AST.Ann.IdDom)
                                                                       ($dTypeable :: Data.Typeable.Internal.Typeable
                                                                                        Language.Haskell.Tools.AST.Ann.IdDom)
  Language.Haskell.Tools.AST.Ann.$fDomaind_$cp5Domain @ Language.Haskell.Tools.AST.Ann.IdDom
                                                      $dTypeable
                                                      $dData
                                                      $d~
                                                      $dData1
                                                      $dData2
                                                      $dData3
                                                      $dData4
                                                      $dData5
                                                      $dShow
                                                      $dShow1
                                                      $dShow2
                                                      $dShow3
                                                      $dShow4
  = ExtensionOrganizer.$s$fDomaind_$s$fDomaind_$cp5Domain
"SPEC/ExtensionOrganizer $fDomaind_$cp6Domain @ IdDom" [ALWAYS] forall ($dShow4 :: GHC.Show.Show
                                                                                     (Language.Haskell.Tools.AST.Ann.SemanticInfo'
                                                                                        Language.Haskell.Tools.AST.Ann.IdDom
                                                                                        Language.Haskell.Tools.AST.Ann.SameInfoWildcardCls))
                                                                       ($dShow3 :: GHC.Show.Show
                                                                                     (Language.Haskell.Tools.AST.Ann.SemanticInfo'
                                                                                        Language.Haskell.Tools.AST.Ann.IdDom
                                                                                        Language.Haskell.Tools.AST.Ann.SameInfoModuleCls))
                                                                       ($dShow2 :: GHC.Show.Show
                                                                                     (Language.Haskell.Tools.AST.Ann.SemanticInfo'
                                                                                        Language.Haskell.Tools.AST.Ann.IdDom
                                                                                        Language.Haskell.Tools.AST.Ann.SameInfoImportCls))
                                                                       ($dShow1 :: GHC.Show.Show
                                                                                     (Language.Haskell.Tools.AST.Ann.SemanticInfo'
                                                                                        Language.Haskell.Tools.AST.Ann.IdDom
                                                                                        Language.Haskell.Tools.AST.Ann.SameInfoExprCls))
                                                                       ($dShow :: GHC.Show.Show
                                                                                    (Language.Haskell.Tools.AST.Ann.SemanticInfo'
                                                                                       Language.Haskell.Tools.AST.Ann.IdDom
                                                                                       Language.Haskell.Tools.AST.Ann.SameInfoNameCls))
                                                                       ($dData5 :: Data.Data.Data
                                                                                     (Language.Haskell.Tools.AST.Ann.SemanticInfo'
                                                                                        Language.Haskell.Tools.AST.Ann.IdDom
                                                                                        Language.Haskell.Tools.AST.Ann.SameInfoWildcardCls))
                                                                       ($dData4 :: Data.Data.Data
                                                                                     (Language.Haskell.Tools.AST.Ann.SemanticInfo'
                                                                                        Language.Haskell.Tools.AST.Ann.IdDom
                                                                                        Language.Haskell.Tools.AST.Ann.SameInfoModuleCls))
                                                                       ($dData3 :: Data.Data.Data
                                                                                     (Language.Haskell.Tools.AST.Ann.SemanticInfo'
                                                                                        Language.Haskell.Tools.AST.Ann.IdDom
                                                                                        Language.Haskell.Tools.AST.Ann.SameInfoImportCls))
                                                                       ($dData2 :: Data.Data.Data
                                                                                     (Language.Haskell.Tools.AST.Ann.SemanticInfo'
                                                                                        Language.Haskell.Tools.AST.Ann.IdDom
                                                                                        Language.Haskell.Tools.AST.Ann.SameInfoExprCls))
                                                                       ($dData1 :: Data.Data.Data
                                                                                     (Language.Haskell.Tools.AST.Ann.SemanticInfo'
                                                                                        Language.Haskell.Tools.AST.Ann.IdDom
                                                                                        Language.Haskell.Tools.AST.Ann.SameInfoNameCls))
                                                                       ($d~ :: Language.Haskell.Tools.AST.Ann.SemanticInfo'
                                                                                 Language.Haskell.Tools.AST.Ann.IdDom
                                                                                 Language.Haskell.Tools.AST.Ann.SameInfoDefaultCls
                                                                               Data.Type.Equality.~ Language.Haskell.Tools.AST.SemaInfoTypes.NoSemanticInfo)
                                                                       ($dData :: Data.Data.Data
                                                                                    Language.Haskell.Tools.AST.Ann.IdDom)
                                                                       ($dTypeable :: Data.Typeable.Internal.Typeable
                                                                                        Language.Haskell.Tools.AST.Ann.IdDom)
  Language.Haskell.Tools.AST.Ann.$fDomaind_$cp6Domain @ Language.Haskell.Tools.AST.Ann.IdDom
                                                      $dTypeable
                                                      $dData
                                                      $d~
                                                      $dData1
                                                      $dData2
                                                      $dData3
                                                      $dData4
                                                      $dData5
                                                      $dShow
                                                      $dShow1
                                                      $dShow2
                                                      $dShow3
                                                      $dShow4
  = ExtensionOrganizer.$s$fDomaind_$s$fDomaind_$cp6Domain
"SPEC/ExtensionOrganizer $fDomaind_$cp7Domain @ IdDom" [ALWAYS] forall ($dShow4 :: GHC.Show.Show
                                                                                     (Language.Haskell.Tools.AST.Ann.SemanticInfo'
                                                                                        Language.Haskell.Tools.AST.Ann.IdDom
                                                                                        Language.Haskell.Tools.AST.Ann.SameInfoWildcardCls))
                                                                       ($dShow3 :: GHC.Show.Show
                                                                                     (Language.Haskell.Tools.AST.Ann.SemanticInfo'
                                                                                        Language.Haskell.Tools.AST.Ann.IdDom
                                                                                        Language.Haskell.Tools.AST.Ann.SameInfoModuleCls))
                                                                       ($dShow2 :: GHC.Show.Show
                                                                                     (Language.Haskell.Tools.AST.Ann.SemanticInfo'
                                                                                        Language.Haskell.Tools.AST.Ann.IdDom
                                                                                        Language.Haskell.Tools.AST.Ann.SameInfoImportCls))
                                                                       ($dShow1 :: GHC.Show.Show
                                                                                     (Language.Haskell.Tools.AST.Ann.SemanticInfo'
                                                                                        Language.Haskell.Tools.AST.Ann.IdDom
                                                                                        Language.Haskell.Tools.AST.Ann.SameInfoExprCls))
                                                                       ($dShow :: GHC.Show.Show
                                                                                    (Language.Haskell.Tools.AST.Ann.SemanticInfo'
                                                                                       Language.Haskell.Tools.AST.Ann.IdDom
                                                                                       Language.Haskell.Tools.AST.Ann.SameInfoNameCls))
                                                                       ($dData5 :: Data.Data.Data
                                                                                     (Language.Haskell.Tools.AST.Ann.SemanticInfo'
                                                                                        Language.Haskell.Tools.AST.Ann.IdDom
                                                                                        Language.Haskell.Tools.AST.Ann.SameInfoWildcardCls))
                                                                       ($dData4 :: Data.Data.Data
                                                                                     (Language.Haskell.Tools.AST.Ann.SemanticInfo'
                                                                                        Language.Haskell.Tools.AST.Ann.IdDom
                                                                                        Language.Haskell.Tools.AST.Ann.SameInfoModuleCls))
                                                                       ($dData3 :: Data.Data.Data
                                                                                     (Language.Haskell.Tools.AST.Ann.SemanticInfo'
                                                                                        Language.Haskell.Tools.AST.Ann.IdDom
                                                                                        Language.Haskell.Tools.AST.Ann.SameInfoImportCls))
                                                                       ($dData2 :: Data.Data.Data
                                                                                     (Language.Haskell.Tools.AST.Ann.SemanticInfo'
                                                                                        Language.Haskell.Tools.AST.Ann.IdDom
                                                                                        Language.Haskell.Tools.AST.Ann.SameInfoExprCls))
                                                                       ($dData1 :: Data.Data.Data
                                                                                     (Language.Haskell.Tools.AST.Ann.SemanticInfo'
                                                                                        Language.Haskell.Tools.AST.Ann.IdDom
                                                                                        Language.Haskell.Tools.AST.Ann.SameInfoNameCls))
                                                                       ($d~ :: Language.Haskell.Tools.AST.Ann.SemanticInfo'
                                                                                 Language.Haskell.Tools.AST.Ann.IdDom
                                                                                 Language.Haskell.Tools.AST.Ann.SameInfoDefaultCls
                                                                               Data.Type.Equality.~ Language.Haskell.Tools.AST.SemaInfoTypes.NoSemanticInfo)
                                                                       ($dData :: Data.Data.Data
                                                                                    Language.Haskell.Tools.AST.Ann.IdDom)
                                                                       ($dTypeable :: Data.Typeable.Internal.Typeable
                                                                                        Language.Haskell.Tools.AST.Ann.IdDom)
  Language.Haskell.Tools.AST.Ann.$fDomaind_$cp7Domain @ Language.Haskell.Tools.AST.Ann.IdDom
                                                      $dTypeable
                                                      $dData
                                                      $d~
                                                      $dData1
                                                      $dData2
                                                      $dData3
                                                      $dData4
                                                      $dData5
                                                      $dShow
                                                      $dShow1
                                                      $dShow2
                                                      $dShow3
                                                      $dShow4
  = ExtensionOrganizer.$s$fDomaind_$s$fDomaind_$cp7Domain
"SPEC/ExtensionOrganizer $fDomaind_$cp8Domain @ IdDom" [ALWAYS] forall ($dShow4 :: GHC.Show.Show
                                                                                     (Language.Haskell.Tools.AST.Ann.SemanticInfo'
                                                                                        Language.Haskell.Tools.AST.Ann.IdDom
                                                                                        Language.Haskell.Tools.AST.Ann.SameInfoWildcardCls))
                                                                       ($dShow3 :: GHC.Show.Show
                                                                                     (Language.Haskell.Tools.AST.Ann.SemanticInfo'
                                                                                        Language.Haskell.Tools.AST.Ann.IdDom
                                                                                        Language.Haskell.Tools.AST.Ann.SameInfoModuleCls))
                                                                       ($dShow2 :: GHC.Show.Show
                                                                                     (Language.Haskell.Tools.AST.Ann.SemanticInfo'
                                                                                        Language.Haskell.Tools.AST.Ann.IdDom
                                                                                        Language.Haskell.Tools.AST.Ann.SameInfoImportCls))
                                                                       ($dShow1 :: GHC.Show.Show
                                                                                     (Language.Haskell.Tools.AST.Ann.SemanticInfo'
                                                                                        Language.Haskell.Tools.AST.Ann.IdDom
                                                                                        Language.Haskell.Tools.AST.Ann.SameInfoExprCls))
                                                                       ($dShow :: GHC.Show.Show
                                                                                    (Language.Haskell.Tools.AST.Ann.SemanticInfo'
                                                                                       Language.Haskell.Tools.AST.Ann.IdDom
                                                                                       Language.Haskell.Tools.AST.Ann.SameInfoNameCls))
                                                                       ($dData5 :: Data.Data.Data
                                                                                     (Language.Haskell.Tools.AST.Ann.SemanticInfo'
                                                                                        Language.Haskell.Tools.AST.Ann.IdDom
                                                                                        Language.Haskell.Tools.AST.Ann.SameInfoWildcardCls))
                                                                       ($dData4 :: Data.Data.Data
                                                                                     (Language.Haskell.Tools.AST.Ann.SemanticInfo'
                                                                                        Language.Haskell.Tools.AST.Ann.IdDom
                                                                                        Language.Haskell.Tools.AST.Ann.SameInfoModuleCls))
                                                                       ($dData3 :: Data.Data.Data
                                                                                     (Language.Haskell.Tools.AST.Ann.SemanticInfo'
                                                                                        Language.Haskell.Tools.AST.Ann.IdDom
                                                                                        Language.Haskell.Tools.AST.Ann.SameInfoImportCls))
                                                                       ($dData2 :: Data.Data.Data
                                                                                     (Language.Haskell.Tools.AST.Ann.SemanticInfo'
                                                                                        Language.Haskell.Tools.AST.Ann.IdDom
                                                                                        Language.Haskell.Tools.AST.Ann.SameInfoExprCls))
                                                                       ($dData1 :: Data.Data.Data
                                                                                     (Language.Haskell.Tools.AST.Ann.SemanticInfo'
                                                                                        Language.Haskell.Tools.AST.Ann.IdDom
                                                                                        Language.Haskell.Tools.AST.Ann.SameInfoNameCls))
                                                                       ($d~ :: Language.Haskell.Tools.AST.Ann.SemanticInfo'
                                                                                 Language.Haskell.Tools.AST.Ann.IdDom
                                                                                 Language.Haskell.Tools.AST.Ann.SameInfoDefaultCls
                                                                               Data.Type.Equality.~ Language.Haskell.Tools.AST.SemaInfoTypes.NoSemanticInfo)
                                                                       ($dData :: Data.Data.Data
                                                                                    Language.Haskell.Tools.AST.Ann.IdDom)
                                                                       ($dTypeable :: Data.Typeable.Internal.Typeable
                                                                                        Language.Haskell.Tools.AST.Ann.IdDom)
  Language.Haskell.Tools.AST.Ann.$fDomaind_$cp8Domain @ Language.Haskell.Tools.AST.Ann.IdDom
                                                      $dTypeable
                                                      $dData
                                                      $d~
                                                      $dData1
                                                      $dData2
                                                      $dData3
                                                      $dData4
                                                      $dData5
                                                      $dShow
                                                      $dShow1
                                                      $dShow2
                                                      $dShow3
                                                      $dShow4
  = ExtensionOrganizer.$s$fDomaind_$s$fDomaind_$cp8Domain
"SPEC/ExtensionOrganizer $fDomaind_$cp9Domain @ IdDom" [ALWAYS] forall ($dShow4 :: GHC.Show.Show
                                                                                     (Language.Haskell.Tools.AST.Ann.SemanticInfo'
                                                                                        Language.Haskell.Tools.AST.Ann.IdDom
                                                                                        Language.Haskell.Tools.AST.Ann.SameInfoWildcardCls))
                                                                       ($dShow3 :: GHC.Show.Show
                                                                                     (Language.Haskell.Tools.AST.Ann.SemanticInfo'
                                                                                        Language.Haskell.Tools.AST.Ann.IdDom
                                                                                        Language.Haskell.Tools.AST.Ann.SameInfoModuleCls))
                                                                       ($dShow2 :: GHC.Show.Show
                                                                                     (Language.Haskell.Tools.AST.Ann.SemanticInfo'
                                                                                        Language.Haskell.Tools.AST.Ann.IdDom
                                                                                        Language.Haskell.Tools.AST.Ann.SameInfoImportCls))
                                                                       ($dShow1 :: GHC.Show.Show
                                                                                     (Language.Haskell.Tools.AST.Ann.SemanticInfo'
                                                                                        Language.Haskell.Tools.AST.Ann.IdDom
                                                                                        Language.Haskell.Tools.AST.Ann.SameInfoExprCls))
                                                                       ($dShow :: GHC.Show.Show
                                                                                    (Language.Haskell.Tools.AST.Ann.SemanticInfo'
                                                                                       Language.Haskell.Tools.AST.Ann.IdDom
                                                                                       Language.Haskell.Tools.AST.Ann.SameInfoNameCls))
                                                                       ($dData5 :: Data.Data.Data
                                                                                     (Language.Haskell.Tools.AST.Ann.SemanticInfo'
                                                                                        Language.Haskell.Tools.AST.Ann.IdDom
                                                                                        Language.Haskell.Tools.AST.Ann.SameInfoWildcardCls))
                                                                       ($dData4 :: Data.Data.Data
                                                                                     (Language.Haskell.Tools.AST.Ann.SemanticInfo'
                                                                                        Language.Haskell.Tools.AST.Ann.IdDom
                                                                                        Language.Haskell.Tools.AST.Ann.SameInfoModuleCls))
                                                                       ($dData3 :: Data.Data.Data
                                                                                     (Language.Haskell.Tools.AST.Ann.SemanticInfo'
                                                                                        Language.Haskell.Tools.AST.Ann.IdDom
                                                                                        Language.Haskell.Tools.AST.Ann.SameInfoImportCls))
                                                                       ($dData2 :: Data.Data.Data
                                                                                     (Language.Haskell.Tools.AST.Ann.SemanticInfo'
                                                                                        Language.Haskell.Tools.AST.Ann.IdDom
                                                                                        Language.Haskell.Tools.AST.Ann.SameInfoExprCls))
                                                                       ($dData1 :: Data.Data.Data
                                                                                     (Language.Haskell.Tools.AST.Ann.SemanticInfo'
                                                                                        Language.Haskell.Tools.AST.Ann.IdDom
                                                                                        Language.Haskell.Tools.AST.Ann.SameInfoNameCls))
                                                                       ($d~ :: Language.Haskell.Tools.AST.Ann.SemanticInfo'
                                                                                 Language.Haskell.Tools.AST.Ann.IdDom
                                                                                 Language.Haskell.Tools.AST.Ann.SameInfoDefaultCls
                                                                               Data.Type.Equality.~ Language.Haskell.Tools.AST.SemaInfoTypes.NoSemanticInfo)
                                                                       ($dData :: Data.Data.Data
                                                                                    Language.Haskell.Tools.AST.Ann.IdDom)
                                                                       ($dTypeable :: Data.Typeable.Internal.Typeable
                                                                                        Language.Haskell.Tools.AST.Ann.IdDom)
  Language.Haskell.Tools.AST.Ann.$fDomaind_$cp9Domain @ Language.Haskell.Tools.AST.Ann.IdDom
                                                      $dTypeable
                                                      $dData
                                                      $d~
                                                      $dData1
                                                      $dData2
                                                      $dData3
                                                      $dData4
                                                      $dData5
                                                      $dShow
                                                      $dShow1
                                                      $dShow2
                                                      $dShow3
                                                      $dShow4
  = ExtensionOrganizer.$s$fDomaind_$s$fDomaind_$cp9Domain
"SPEC/ExtensionOrganizer $fShowImportInfo @ Var" [ALWAYS] forall ($dOutputable :: Outputable.Outputable
                                                                                    Var.Var)
  Language.Haskell.Tools.AST.SemaInfoTypes.$fShowImportInfo @ Var.Var
                                                            $dOutputable
  = ExtensionOrganizer.$s$fDomaind_$s$fShowImportInfo
"SPEC/ExtensionOrganizer $fShowImportInfo_$cshowsPrec @ Var" [ALWAYS] forall ($dOutputable :: Outputable.Outputable
                                                                                                Var.Var)
  Language.Haskell.Tools.AST.SemaInfoTypes.$fShowImportInfo_$cshowsPrec @ Var.Var
                                                                        $dOutputable
  = ExtensionOrganizer.$s$fDomaind_$s$fShowImportInfo_$cshowsPrec
"SPEC/ExtensionOrganizer $fShowModuleInfo @ Var" [ALWAYS] forall ($dOutputable :: Outputable.Outputable
                                                                                    Var.Var)
  Language.Haskell.Tools.AST.SemaInfoTypes.$fShowModuleInfo @ Var.Var
                                                            $dOutputable
  = ExtensionOrganizer.$s$fDomaind_$s$fShowModuleInfo
"SPEC/ExtensionOrganizer $fShowModuleInfo_$cshowsPrec @ Var" [ALWAYS] forall ($dOutputable :: Outputable.Outputable
                                                                                                Var.Var)
  Language.Haskell.Tools.AST.SemaInfoTypes.$fShowModuleInfo_$cshowsPrec @ Var.Var
                                                                        $dOutputable
  = ExtensionOrganizer.$s$fDomaind_$s$fShowModuleInfo_$cshowsPrec
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

