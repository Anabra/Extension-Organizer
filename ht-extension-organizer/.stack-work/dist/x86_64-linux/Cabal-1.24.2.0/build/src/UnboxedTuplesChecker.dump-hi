
==================== FINAL INTERFACE ====================
2017-09-20 22:58:21.300222 UTC

interface ht-extension-organizer-0.1.0.0-y3uypH7gCtA60AaWeuyZL:UnboxedTuplesChecker 8002
  interface hash: 442ec04cd062b365a24485bf7e54a58e
  ABI hash: 2faf3e71416cce6539237d5c66935953
  export-list hash: d18fdf9fb7c81b960769b8c94b8a37be
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: 91cd76246f60d900fce8e309e594df82
  sig of: Nothing
  used TH splices: False
  where
exports:
  UnboxedTuplesChecker.chkUnboxedTuplesExpr
  UnboxedTuplesChecker.chkUnboxedTuplesExpr'
  UnboxedTuplesChecker.chkUnboxedTuplesPat
  UnboxedTuplesChecker.chkUnboxedTuplesPat'
  UnboxedTuplesChecker.chkUnboxedTuplesType
  UnboxedTuplesChecker.chkUnboxedTuplesType'
module dependencies: ExtMap ExtMonad
package dependencies: array-0.5.1.1@array-0.5.1.1 base-4.9.1.0
                      binary-0.8.3.0@binary-0.8.3.0
                      bytestring-0.10.8.1@bytestring-0.10.8.1
                      containers-0.5.7.1@containers-0.5.7.1
                      deepseq-1.4.2.0@deepseq-1.4.2.0 directory-1.3.0.0@directory-1.3.0.0
                      either-4.4.1.1@either-4.4.1.1-6PiwKYkn4v6B4KO2R2Fu1b
                      filepath-1.4.1.1@filepath-1.4.1.1 ghc-8.0.2
                      ghc-boot-8.0.2@ghc-boot-8.0.2 ghc-boot-th-8.0.2@ghc-boot-th-8.0.2
                      ghc-paths-0.1.0.9@ghc-paths-0.1.0.9-AhaDlGOsRAepox069XzG
                      ghc-prim-0.5.0.0 ghci-8.0.2@ghci-8.0.2
                      hashable-1.2.6.1@hashable-1.2.6.1-2ZLNuHq395GGIHwEHuqZol
                      haskell-tools-ast-0.8.1.0@haskell-tools-ast-0.8.1.0-I9ZMaCkuuwT3FoQkwMjyW6
                      haskell-tools-backend-ghc-0.8.1.0@haskell-tools-backend-ghc-0.8.1.0-DqHnbK8OPi6CBD5cIPITWq
                      haskell-tools-prettyprint-0.8.1.0@haskell-tools-prettyprint-0.8.1.0-F9iWkGq5ppnLH6whHm0DlC
                      haskell-tools-refactor-0.8.1.0@haskell-tools-refactor-0.8.1.0-AF8Q4cA8mAnLNwu5t0Icw8
                      haskell-tools-rewrite-0.8.1.0@haskell-tools-rewrite-0.8.1.0-85A6q9dMQgvKEKG9I8fxVU
                      hoopl-3.10.2.1@hoopl-3.10.2.1 hpc-0.6.0.3@hpc-0.6.0.3
                      instance-control-0.1.1.1@instance-control-0.1.1.1-1defRS82vAAEmZKRhe67aa
                      integer-gmp-1.0.0.1 mtl-2.2.1@mtl-2.2.1-BLKBelFsPB3BoFeSWSOYj6
                      pretty-1.1.3.3@pretty-1.1.3.3 process-1.4.3.0@process-1.4.3.0
                      references-0.3.2.2@references-0.3.2.2-y362bKYomIKNQKMTfOWVo
                      safe-0.3.15@safe-0.3.15-2Yd45VWFfdcKqKyispOifY
                      split-0.2.3.2@split-0.2.3.2-CJl40zTyCIV16Pr60nb7CT
                      syb-0.7@syb-0.7-4OKdCpwGutyB1rNRmoa0ya template-haskell-2.11.1.0
                      text-1.2.2.2@text-1.2.2.2-9UQZjEJZQFSGMffj1Z5g00
                      time-1.6.0.1@time-1.6.0.1 transformers-0.5.2.0@transformers-0.5.2.0
                      uniplate-1.6.12@uniplate-1.6.12-4PyZX21trQJ5lfk0CDvC7U
                      unix-2.7.2.1@unix-2.7.2.1
                      unordered-containers-0.2.8.0@unordered-containers-0.2.8.0-Bp9XgxjuHxcI4tFehVMDGC
orphans: base-4.9.1.0:GHC.Base base-4.9.1.0:GHC.Float
         binary-0.8.3.0@binary-0.8.3.0:Data.Binary.Generic
         bytestring-0.10.8.1@bytestring-0.10.8.1:Data.ByteString.Builder
         ghc-8.0.2:BlockId ghc-8.0.2:DsMonad ghc-8.0.2:LoadIface
         ghc-8.0.2:PPC.Ppr ghc-8.0.2:PprCmm ghc-8.0.2:PprCmmDecl
         ghc-8.0.2:PprCmmExpr ghc-8.0.2:PprCore ghc-8.0.2:SPARC.Ppr
         ghc-8.0.2:TcEnv ghc-8.0.2:TcRnMonad ghc-8.0.2:X86.Ppr
         ghc-boot-8.0.2@ghc-boot-8.0.2:GHC.LanguageExtensions
         ghci-8.0.2@ghci-8.0.2:GHCi.Message
         ghci-8.0.2@ghci-8.0.2:GHCi.TH.Binary
         hashable-1.2.6.1@hashable-1.2.6.1-2ZLNuHq395GGIHwEHuqZol:Data.Hashable.Generic
         haskell-tools-ast-0.8.1.0@haskell-tools-ast-0.8.1.0-I9ZMaCkuuwT3FoQkwMjyW6:Language.Haskell.Tools.AST.Instances.Data
         haskell-tools-ast-0.8.1.0@haskell-tools-ast-0.8.1.0-I9ZMaCkuuwT3FoQkwMjyW6:Language.Haskell.Tools.AST.Instances.Eq
         haskell-tools-ast-0.8.1.0@haskell-tools-ast-0.8.1.0-I9ZMaCkuuwT3FoQkwMjyW6:Language.Haskell.Tools.AST.Instances.Generic
         haskell-tools-ast-0.8.1.0@haskell-tools-ast-0.8.1.0-I9ZMaCkuuwT3FoQkwMjyW6:Language.Haskell.Tools.AST.Instances.SemanticTraversal
         haskell-tools-ast-0.8.1.0@haskell-tools-ast-0.8.1.0-I9ZMaCkuuwT3FoQkwMjyW6:Language.Haskell.Tools.AST.Instances.Show
         haskell-tools-ast-0.8.1.0@haskell-tools-ast-0.8.1.0-I9ZMaCkuuwT3FoQkwMjyW6:Language.Haskell.Tools.AST.Instances.SourceInfoTraversal
         haskell-tools-ast-0.8.1.0@haskell-tools-ast-0.8.1.0-I9ZMaCkuuwT3FoQkwMjyW6:Language.Haskell.Tools.AST.SemaInfoTypes
         haskell-tools-ast-0.8.1.0@haskell-tools-ast-0.8.1.0-I9ZMaCkuuwT3FoQkwMjyW6:Language.Haskell.Tools.AST.Utils.GHCInstances
         haskell-tools-backend-ghc-0.8.1.0@haskell-tools-backend-ghc-0.8.1.0-DqHnbK8OPi6CBD5cIPITWq:Language.Haskell.Tools.AST.FromGHC.Utils
         haskell-tools-prettyprint-0.8.1.0@haskell-tools-prettyprint-0.8.1.0-F9iWkGq5ppnLH6whHm0DlC:Language.Haskell.Tools.Transform.RangeTemplate
         haskell-tools-prettyprint-0.8.1.0@haskell-tools-prettyprint-0.8.1.0-F9iWkGq5ppnLH6whHm0DlC:Language.Haskell.Tools.Transform.SourceTemplate
         haskell-tools-prettyprint-0.8.1.0@haskell-tools-prettyprint-0.8.1.0-F9iWkGq5ppnLH6whHm0DlC:Language.Haskell.Tools.Transform.SourceTemplateHelpers
         haskell-tools-refactor-0.8.1.0@haskell-tools-refactor-0.8.1.0-AF8Q4cA8mAnLNwu5t0Icw8:Language.Haskell.Tools.Refactor.RefactorBase
         ht-extension-organizer-0.1.0.0-y3uypH7gCtA60AaWeuyZL:ExtMonad
         references-0.3.2.2@references-0.3.2.2-y362bKYomIKNQKMTfOWVo:Control.Reference.Predefined.Containers.Tree
         references-0.3.2.2@references-0.3.2.2-y362bKYomIKNQKMTfOWVo:Control.Reference.TH.Records
         syb-0.7@syb-0.7-4OKdCpwGutyB1rNRmoa0ya:Data.Generics.Instances
         text-1.2.2.2@text-1.2.2.2-9UQZjEJZQFSGMffj1Z5g00:Data.Text
         text-1.2.2.2@text-1.2.2.2-9UQZjEJZQFSGMffj1Z5g00:Data.Text.Lazy
         text-1.2.2.2@text-1.2.2.2-9UQZjEJZQFSGMffj1Z5g00:Data.Text.Show
         time-1.6.0.1@time-1.6.0.1:Data.Time.Calendar.Gregorian
         time-1.6.0.1@time-1.6.0.1:Data.Time.Format.Parse
         time-1.6.0.1@time-1.6.0.1:Data.Time.LocalTime.LocalTime
         transformers-0.5.2.0@transformers-0.5.2.0:Control.Monad.Trans.Error
         uniplate-1.6.12@uniplate-1.6.12-4PyZX21trQJ5lfk0CDvC7U:Data.Generics.Uniplate.Data
family instance modules: base-4.9.1.0:Control.Applicative
                         base-4.9.1.0:Data.Complex base-4.9.1.0:Data.Either
                         base-4.9.1.0:Data.Functor.Compose base-4.9.1.0:Data.Functor.Const
                         base-4.9.1.0:Data.Functor.Identity
                         base-4.9.1.0:Data.Functor.Product base-4.9.1.0:Data.Functor.Sum
                         base-4.9.1.0:Data.List.NonEmpty base-4.9.1.0:Data.Monoid
                         base-4.9.1.0:Data.Semigroup base-4.9.1.0:Data.Type.Equality
                         base-4.9.1.0:Data.Version base-4.9.1.0:Data.Void
                         base-4.9.1.0:GHC.Exts base-4.9.1.0:GHC.Generics
                         base-4.9.1.0:GHC.IO.Exception base-4.9.1.0:GHC.TypeLits
                         containers-0.5.7.1@containers-0.5.7.1:Data.IntMap.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.IntSet.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.Map.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.Sequence
                         containers-0.5.7.1@containers-0.5.7.1:Data.Set.Base
                         ghc-8.0.2:PlaceHolder ghc-8.0.2:TrieMap
                         ghc-boot-th-8.0.2@ghc-boot-th-8.0.2:GHC.LanguageExtensions.Type
                         ghci-8.0.2@ghci-8.0.2:GHCi.FFI ghci-8.0.2@ghci-8.0.2:GHCi.Message
                         ghci-8.0.2@ghci-8.0.2:GHCi.ResolvedBCO
                         ghci-8.0.2@ghci-8.0.2:SizedSeq
                         haskell-tools-ast-0.8.1.0@haskell-tools-ast-0.8.1.0-I9ZMaCkuuwT3FoQkwMjyW6:Language.Haskell.Tools.AST.Ann
                         haskell-tools-ast-0.8.1.0@haskell-tools-ast-0.8.1.0-I9ZMaCkuuwT3FoQkwMjyW6:Language.Haskell.Tools.AST.Instances.Generic
                         haskell-tools-prettyprint-0.8.1.0@haskell-tools-prettyprint-0.8.1.0-F9iWkGq5ppnLH6whHm0DlC:Language.Haskell.Tools.Transform.RangeTemplate
                         haskell-tools-prettyprint-0.8.1.0@haskell-tools-prettyprint-0.8.1.0-F9iWkGq5ppnLH6whHm0DlC:Language.Haskell.Tools.Transform.SourceTemplate
                         hoopl-3.10.2.1@hoopl-3.10.2.1:Compiler.Hoopl.Block
                         hoopl-3.10.2.1@hoopl-3.10.2.1:Compiler.Hoopl.Dataflow
                         hoopl-3.10.2.1@hoopl-3.10.2.1:Compiler.Hoopl.Fuel
                         hoopl-3.10.2.1@hoopl-3.10.2.1:Compiler.Hoopl.Label
                         hoopl-3.10.2.1@hoopl-3.10.2.1:Compiler.Hoopl.Unique
                         pretty-1.1.3.3@pretty-1.1.3.3:Text.PrettyPrint.Annotated.HughesPJ
                         pretty-1.1.3.3@pretty-1.1.3.3:Text.PrettyPrint.HughesPJ
                         references-0.3.2.2@references-0.3.2.2-y362bKYomIKNQKMTfOWVo:Control.Reference.Predefined.Containers
                         references-0.3.2.2@references-0.3.2.2-y362bKYomIKNQKMTfOWVo:Control.Reference.Predefined.Containers.Tree
                         references-0.3.2.2@references-0.3.2.2-y362bKYomIKNQKMTfOWVo:Control.Reference.Types
                         template-haskell-2.11.1.0:Language.Haskell.TH.Syntax
                         text-1.2.2.2@text-1.2.2.2-9UQZjEJZQFSGMffj1Z5g00:Data.Text
                         text-1.2.2.2@text-1.2.2.2-9UQZjEJZQFSGMffj1Z5g00:Data.Text.Lazy
                         unordered-containers-0.2.8.0@unordered-containers-0.2.8.0-Bp9XgxjuHxcI4tFehVMDGC:Data.HashMap.Base
                         unordered-containers-0.2.8.0@unordered-containers-0.2.8.0-Bp9XgxjuHxcI4tFehVMDGC:Data.HashSet
import  -/  base-4.9.1.0:GHC.Base c4231c43c07e46080a26bf94094c7aa1
import  -/  base-4.9.1.0:Prelude 22dd289b8469a8fa8dc81cab7b237771
import  -/  ghc-boot-th-8.0.2@ghc-boot-th-8.0.2:GHC.LanguageExtensions.Type 92441ea50916fa3940e20fae60f255d7
import  -/  haskell-tools-refactor-0.8.1.0@haskell-tools-refactor-0.8.1.0-AF8Q4cA8mAnLNwu5t0Icw8:Language.Haskell.Tools.Refactor 84acc8d60e278de91351468f26f90e1c
import  -/  haskell-tools-rewrite-0.8.1.0@haskell-tools-rewrite-0.8.1.0-85A6q9dMQgvKEKG9I8fxVU:Language.Haskell.Tools.AST.ElementTypes df954b524d036aee274d8ad0f571417a
import  -/  haskell-tools-rewrite-0.8.1.0@haskell-tools-rewrite-0.8.1.0-85A6q9dMQgvKEKG9I8fxVU:Language.Haskell.Tools.AST.Match.Exprs 40e6739cc8a80bd68ce2dee2765b9b5e
import  -/  haskell-tools-rewrite-0.8.1.0@haskell-tools-rewrite-0.8.1.0-85A6q9dMQgvKEKG9I8fxVU:Language.Haskell.Tools.AST.Match.Patterns 2fd4c4dbea6a0193d161dd2ecdde7cd7
import  -/  haskell-tools-rewrite-0.8.1.0@haskell-tools-rewrite-0.8.1.0-85A6q9dMQgvKEKG9I8fxVU:Language.Haskell.Tools.AST.Match.Types 85da168b886fc25a3bfd49c2d6ecd710
import  -/  ExtMonad af7b60a65d818af19a46d996e27297ca
  exports: 7f69547596e05261c6f5806398624025
  CheckNode d2a8a000f373c241c0362787c4b3f842
  addOccurence c9603992ac2a28741343ebc5c8fe7b56
  conditional 179fcfe6ec57edddd9abe173be82121d
76ee3ba3acbedb02eaf31b8884126ec5
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   UnboxedTuplesChecker.$trModule2
                   UnboxedTuplesChecker.$trModule1) -}
454ee411917b2586eddaf041912f5d8b
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "UnboxedTuplesChecker"#) -}
a78724f16481d66bde262125102e2c6d
  $trModule2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   "ht-extension-organizer-0.1.0.0-y3uypH7gCtA60AaWeuyZL"#) -}
b821de33cd61bcb67e8c06bc6c6caa46
  $wchkUnboxedTuplesExpr' ::
    ExtMonad.ExtDomain dom =>
    Language.Haskell.Tools.AST.Ann.NodeInfo
      (Language.Haskell.Tools.AST.Ann.SemanticInfo
         dom Language.Haskell.Tools.AST.Representation.Exprs.UExpr)
      (Language.Haskell.Tools.AST.Ann.SpanInfo
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
    -> Language.Haskell.Tools.AST.Representation.Exprs.UExpr
         dom Language.Haskell.Tools.AST.Ann.SrcTemplateStage
    -> ExtMap.ExtMap
    -> GhcMonad.Ghc
         (Language.Haskell.Tools.AST.ElementTypes.Expr dom, ExtMap.ExtMap)
  {- Arity: 4,
     Strictness: <S(S(LLS(S)LLLLLLLLLL)L),1*U(1*U(A,A,1*U(1*U),A,A,A,A,A,A,A,A,A,A),A)><L,U(U,U(U,U,U,U))><S,U><L,U>,
     Inline: [0],
     Unfolding: (\ @ dom
                   (w :: ExtMonad.ExtDomain dom)
                   (ww :: Language.Haskell.Tools.AST.Ann.NodeInfo
                            (Language.Haskell.Tools.AST.Ann.SemanticInfo
                               dom Language.Haskell.Tools.AST.Representation.Exprs.UExpr)
                            (Language.Haskell.Tools.AST.Ann.SpanInfo
                               Language.Haskell.Tools.AST.Ann.SrcTemplateStage))
                   (ww1 :: Language.Haskell.Tools.AST.Representation.Exprs.UExpr
                             dom Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   (w1 :: ExtMap.ExtMap) ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Language.Haskell.Tools.AST.Ann.SemanticInfo'
                             dom Language.Haskell.Tools.AST.Ann.SameInfoDefaultCls)
                        @ Language.Haskell.Tools.AST.SemaInfoTypes.NoSemanticInfo
                        (Language.Haskell.Tools.AST.Ann.$p3Domain
                           @ dom
                           (GHC.Classes.$p1(%,%)
                              @ (Language.Haskell.Tools.AST.Ann.Domain dom)
                              @ (Language.Haskell.Tools.AST.SemaInfoClasses.HasNameInfo'
                                   (Language.Haskell.Tools.AST.Ann.SemanticInfo
                                      dom
                                      Language.Haskell.Tools.AST.Representation.Names.UQualifiedName))
                              w))
                          `cast`
                        (Data.Type.Equality.N:~[0]
                             <*>_N <Language.Haskell.Tools.AST.Ann.SemanticInfo'
                                      dom
                                      Language.Haskell.Tools.AST.Ann.SameInfoDefaultCls>_N <Language.Haskell.Tools.AST.SemaInfoTypes.NoSemanticInfo>_N) of cobox0 { DEFAULT ->
                 let {
                   wild :: Language.Haskell.Tools.AST.ElementTypes.Expr dom
                   = Language.Haskell.Tools.AST.Ann.Ann
                       @ Language.Haskell.Tools.AST.Representation.Exprs.UExpr
                       @ dom
                       @ Language.Haskell.Tools.AST.Ann.SrcTemplateStage
                       ww
                       ww1
                 } in
                 case ww1 of wild1 {
                   DEFAULT
                   -> let {
                        lvl9 :: (Language.Haskell.Tools.AST.ElementTypes.Expr dom,
                                 Data.Map.Base.Map
                                   (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                                   [SrcLoc.SrcSpan])
                        = (wild, w1)
                      } in
                      (\ (eta :: GhcMonad.Session)
                         (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                       (# eta1, lvl9 #))
                        `cast`
                      (Trans
                           (<GhcMonad.Session>_R
                            ->_R Sym (GHC.Types.N:IO[0]
                                          <(Language.Haskell.Tools.AST.ElementTypes.Expr dom,
                                            Data.Map.Base.Map
                                              (ExtMap.LogicalRelation
                                                 GHC.LanguageExtensions.Type.Extension)
                                              [SrcLoc.SrcSpan])>_R))
                           (Sym (GhcMonad.N:Ghc[0]
                                     <(Language.Haskell.Tools.AST.ElementTypes.Expr dom,
                                       Data.Map.Base.Map
                                         (ExtMap.LogicalRelation
                                            GHC.LanguageExtensions.Type.Extension)
                                         [SrcLoc.SrcSpan])>_R)))
                   Language.Haskell.Tools.AST.Representation.Exprs.UUnboxedTuple exprs
                   -> let {
                        a1 :: Data.Map.Base.Map
                                (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                                [SrcLoc.SrcSpan]
                        = Data.Map.Strict.insertWithKey
                            @ (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                            @ [SrcLoc.SrcSpan]
                            ExtMonad.$s$fOrdLogicalRelation
                            (ExtMonad.addOccurence_1
                               @ (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension))
                            UnboxedTuplesChecker.chkUnboxedTuplesExpr3
                            (GHC.Types.:
                               @ SrcLoc.SrcSpan
                               (case ww of wild2 { Language.Haskell.Tools.AST.Ann.NodeInfo ds1 ds2 ->
                                case ds2
                                       `cast`
                                     (Language.Haskell.Tools.Transform.SourceTemplate.D:R:SpanInfoSrcTemplateStage0[0]) of wild3 { Language.Haskell.Tools.Transform.SourceTemplate.SourceTemplateNode ds4 ds5 ds3 ds6 ->
                                ds4 } })
                               (GHC.Types.[] @ SrcLoc.SrcSpan))
                            w1
                      } in
                      let {
                        lvl9 :: (Language.Haskell.Tools.AST.ElementTypes.Expr dom,
                                 Data.Map.Base.Map
                                   (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                                   [SrcLoc.SrcSpan])
                        = (wild, a1)
                      } in
                      (\ (s :: GhcMonad.Session)
                         (s1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                       (# s1, lvl9 #))
                        `cast`
                      (Trans
                           (<GhcMonad.Session>_R
                            ->_R Sym (GHC.Types.N:IO[0]
                                          <(Language.Haskell.Tools.AST.ElementTypes.Expr dom,
                                            Data.Map.Base.Map
                                              (ExtMap.LogicalRelation
                                                 GHC.LanguageExtensions.Type.Extension)
                                              [SrcLoc.SrcSpan])>_R))
                           (Sym (GhcMonad.N:Ghc[0]
                                     <(Language.Haskell.Tools.AST.ElementTypes.Expr dom,
                                       Data.Map.Base.Map
                                         (ExtMap.LogicalRelation
                                            GHC.LanguageExtensions.Type.Extension)
                                         [SrcLoc.SrcSpan])>_R)))
                   Language.Haskell.Tools.AST.Representation.Exprs.UUnboxedTupSec elems
                   -> let {
                        a1 :: Data.Map.Base.Map
                                (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                                [SrcLoc.SrcSpan]
                        = Data.Map.Strict.insertWithKey
                            @ (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                            @ [SrcLoc.SrcSpan]
                            ExtMonad.$s$fOrdLogicalRelation
                            (ExtMonad.addOccurence_1
                               @ (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension))
                            UnboxedTuplesChecker.chkUnboxedTuplesExpr3
                            (GHC.Types.:
                               @ SrcLoc.SrcSpan
                               (case ww of wild2 { Language.Haskell.Tools.AST.Ann.NodeInfo ds1 ds2 ->
                                case ds2
                                       `cast`
                                     (Language.Haskell.Tools.Transform.SourceTemplate.D:R:SpanInfoSrcTemplateStage0[0]) of wild3 { Language.Haskell.Tools.Transform.SourceTemplate.SourceTemplateNode ds4 ds5 ds3 ds6 ->
                                ds4 } })
                               (GHC.Types.[] @ SrcLoc.SrcSpan))
                            w1
                      } in
                      let {
                        lvl9 :: (Language.Haskell.Tools.AST.ElementTypes.Expr dom,
                                 Data.Map.Base.Map
                                   (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                                   [SrcLoc.SrcSpan])
                        = (wild, a1)
                      } in
                      (\ (s :: GhcMonad.Session)
                         (s1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                       (# s1, lvl9 #))
                        `cast`
                      (Trans
                           (<GhcMonad.Session>_R
                            ->_R Sym (GHC.Types.N:IO[0]
                                          <(Language.Haskell.Tools.AST.ElementTypes.Expr dom,
                                            Data.Map.Base.Map
                                              (ExtMap.LogicalRelation
                                                 GHC.LanguageExtensions.Type.Extension)
                                              [SrcLoc.SrcSpan])>_R))
                           (Sym (GhcMonad.N:Ghc[0]
                                     <(Language.Haskell.Tools.AST.ElementTypes.Expr dom,
                                       Data.Map.Base.Map
                                         (ExtMap.LogicalRelation
                                            GHC.LanguageExtensions.Type.Extension)
                                         [SrcLoc.SrcSpan])>_R))) } }) -}
9588f1a9f82621b9d94c37b2e90c9ed9
  $wchkUnboxedTuplesPat' ::
    ExtMonad.ExtDomain dom =>
    Language.Haskell.Tools.AST.Ann.NodeInfo
      (Language.Haskell.Tools.AST.Ann.SemanticInfo
         dom Language.Haskell.Tools.AST.Representation.Patterns.UPattern)
      (Language.Haskell.Tools.AST.Ann.SpanInfo
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
    -> Language.Haskell.Tools.AST.Representation.Patterns.UPattern
         dom Language.Haskell.Tools.AST.Ann.SrcTemplateStage
    -> ExtMap.ExtMap
    -> GhcMonad.Ghc
         (Language.Haskell.Tools.AST.ElementTypes.Pattern dom,
          ExtMap.ExtMap)
  {- Arity: 4,
     Strictness: <S(S(LLS(S)LLLLLLLLLL)L),1*U(1*U(A,A,1*U(1*U),A,A,A,A,A,A,A,A,A,A),A)><L,U(U,U(U,U,U,U))><S,U><L,U>,
     Inline: [0],
     Unfolding: (\ @ dom
                   (w :: ExtMonad.ExtDomain dom)
                   (ww :: Language.Haskell.Tools.AST.Ann.NodeInfo
                            (Language.Haskell.Tools.AST.Ann.SemanticInfo
                               dom Language.Haskell.Tools.AST.Representation.Patterns.UPattern)
                            (Language.Haskell.Tools.AST.Ann.SpanInfo
                               Language.Haskell.Tools.AST.Ann.SrcTemplateStage))
                   (ww1 :: Language.Haskell.Tools.AST.Representation.Patterns.UPattern
                             dom Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   (w1 :: ExtMap.ExtMap) ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Language.Haskell.Tools.AST.Ann.SemanticInfo'
                             dom Language.Haskell.Tools.AST.Ann.SameInfoDefaultCls)
                        @ Language.Haskell.Tools.AST.SemaInfoTypes.NoSemanticInfo
                        (Language.Haskell.Tools.AST.Ann.$p3Domain
                           @ dom
                           (GHC.Classes.$p1(%,%)
                              @ (Language.Haskell.Tools.AST.Ann.Domain dom)
                              @ (Language.Haskell.Tools.AST.SemaInfoClasses.HasNameInfo'
                                   (Language.Haskell.Tools.AST.Ann.SemanticInfo
                                      dom
                                      Language.Haskell.Tools.AST.Representation.Names.UQualifiedName))
                              w))
                          `cast`
                        (Data.Type.Equality.N:~[0]
                             <*>_N <Language.Haskell.Tools.AST.Ann.SemanticInfo'
                                      dom
                                      Language.Haskell.Tools.AST.Ann.SameInfoDefaultCls>_N <Language.Haskell.Tools.AST.SemaInfoTypes.NoSemanticInfo>_N) of cobox0 { DEFAULT ->
                 let {
                   wild :: Language.Haskell.Tools.AST.ElementTypes.Pattern dom
                   = Language.Haskell.Tools.AST.Ann.Ann
                       @ Language.Haskell.Tools.AST.Representation.Patterns.UPattern
                       @ dom
                       @ Language.Haskell.Tools.AST.Ann.SrcTemplateStage
                       ww
                       ww1
                 } in
                 case ww1 of wild1 {
                   DEFAULT
                   -> let {
                        lvl9 :: (Language.Haskell.Tools.AST.ElementTypes.Pattern dom,
                                 Data.Map.Base.Map
                                   (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                                   [SrcLoc.SrcSpan])
                        = (wild, w1)
                      } in
                      (\ (eta :: GhcMonad.Session)
                         (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                       (# eta1, lvl9 #))
                        `cast`
                      (Trans
                           (<GhcMonad.Session>_R
                            ->_R Sym (GHC.Types.N:IO[0]
                                          <(Language.Haskell.Tools.AST.ElementTypes.Pattern dom,
                                            Data.Map.Base.Map
                                              (ExtMap.LogicalRelation
                                                 GHC.LanguageExtensions.Type.Extension)
                                              [SrcLoc.SrcSpan])>_R))
                           (Sym (GhcMonad.N:Ghc[0]
                                     <(Language.Haskell.Tools.AST.ElementTypes.Pattern dom,
                                       Data.Map.Base.Map
                                         (ExtMap.LogicalRelation
                                            GHC.LanguageExtensions.Type.Extension)
                                         [SrcLoc.SrcSpan])>_R)))
                   Language.Haskell.Tools.AST.Representation.Patterns.UUnboxTuplePat pats
                   -> let {
                        a1 :: Data.Map.Base.Map
                                (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                                [SrcLoc.SrcSpan]
                        = Data.Map.Strict.insertWithKey
                            @ (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                            @ [SrcLoc.SrcSpan]
                            ExtMonad.$s$fOrdLogicalRelation
                            (ExtMonad.addOccurence_1
                               @ (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension))
                            UnboxedTuplesChecker.chkUnboxedTuplesExpr3
                            (GHC.Types.:
                               @ SrcLoc.SrcSpan
                               (case ww of wild2 { Language.Haskell.Tools.AST.Ann.NodeInfo ds1 ds2 ->
                                case ds2
                                       `cast`
                                     (Language.Haskell.Tools.Transform.SourceTemplate.D:R:SpanInfoSrcTemplateStage0[0]) of wild3 { Language.Haskell.Tools.Transform.SourceTemplate.SourceTemplateNode ds4 ds5 ds3 ds6 ->
                                ds4 } })
                               (GHC.Types.[] @ SrcLoc.SrcSpan))
                            w1
                      } in
                      let {
                        lvl9 :: (Language.Haskell.Tools.AST.ElementTypes.Pattern dom,
                                 Data.Map.Base.Map
                                   (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                                   [SrcLoc.SrcSpan])
                        = (wild, a1)
                      } in
                      (\ (s :: GhcMonad.Session)
                         (s1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                       (# s1, lvl9 #))
                        `cast`
                      (Trans
                           (<GhcMonad.Session>_R
                            ->_R Sym (GHC.Types.N:IO[0]
                                          <(Language.Haskell.Tools.AST.ElementTypes.Pattern dom,
                                            Data.Map.Base.Map
                                              (ExtMap.LogicalRelation
                                                 GHC.LanguageExtensions.Type.Extension)
                                              [SrcLoc.SrcSpan])>_R))
                           (Sym (GhcMonad.N:Ghc[0]
                                     <(Language.Haskell.Tools.AST.ElementTypes.Pattern dom,
                                       Data.Map.Base.Map
                                         (ExtMap.LogicalRelation
                                            GHC.LanguageExtensions.Type.Extension)
                                         [SrcLoc.SrcSpan])>_R))) } }) -}
b6b17d5b3500cd4348f7597370fa2090
  $wchkUnboxedTuplesType' ::
    ExtMonad.ExtDomain dom =>
    Language.Haskell.Tools.AST.Ann.NodeInfo
      (Language.Haskell.Tools.AST.Ann.SemanticInfo
         dom Language.Haskell.Tools.AST.Representation.Types.UType)
      (Language.Haskell.Tools.AST.Ann.SpanInfo
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
    -> Language.Haskell.Tools.AST.Representation.Types.UType
         dom Language.Haskell.Tools.AST.Ann.SrcTemplateStage
    -> ExtMap.ExtMap
    -> GhcMonad.Ghc
         (Language.Haskell.Tools.AST.ElementTypes.Type dom, ExtMap.ExtMap)
  {- Arity: 4,
     Strictness: <S(S(LLS(S)LLLLLLLLLL)L),1*U(1*U(A,A,1*U(1*U),A,A,A,A,A,A,A,A,A,A),A)><L,U(U,U(U,U,U,U))><S,U><L,U>,
     Inline: [0],
     Unfolding: (\ @ dom
                   (w :: ExtMonad.ExtDomain dom)
                   (ww :: Language.Haskell.Tools.AST.Ann.NodeInfo
                            (Language.Haskell.Tools.AST.Ann.SemanticInfo
                               dom Language.Haskell.Tools.AST.Representation.Types.UType)
                            (Language.Haskell.Tools.AST.Ann.SpanInfo
                               Language.Haskell.Tools.AST.Ann.SrcTemplateStage))
                   (ww1 :: Language.Haskell.Tools.AST.Representation.Types.UType
                             dom Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   (w1 :: ExtMap.ExtMap) ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Language.Haskell.Tools.AST.Ann.SemanticInfo'
                             dom Language.Haskell.Tools.AST.Ann.SameInfoDefaultCls)
                        @ Language.Haskell.Tools.AST.SemaInfoTypes.NoSemanticInfo
                        (Language.Haskell.Tools.AST.Ann.$p3Domain
                           @ dom
                           (GHC.Classes.$p1(%,%)
                              @ (Language.Haskell.Tools.AST.Ann.Domain dom)
                              @ (Language.Haskell.Tools.AST.SemaInfoClasses.HasNameInfo'
                                   (Language.Haskell.Tools.AST.Ann.SemanticInfo
                                      dom
                                      Language.Haskell.Tools.AST.Representation.Names.UQualifiedName))
                              w))
                          `cast`
                        (Data.Type.Equality.N:~[0]
                             <*>_N <Language.Haskell.Tools.AST.Ann.SemanticInfo'
                                      dom
                                      Language.Haskell.Tools.AST.Ann.SameInfoDefaultCls>_N <Language.Haskell.Tools.AST.SemaInfoTypes.NoSemanticInfo>_N) of cobox0 { DEFAULT ->
                 let {
                   wild :: Language.Haskell.Tools.AST.ElementTypes.Type dom
                   = Language.Haskell.Tools.AST.Ann.Ann
                       @ Language.Haskell.Tools.AST.Representation.Types.UType
                       @ dom
                       @ Language.Haskell.Tools.AST.Ann.SrcTemplateStage
                       ww
                       ww1
                 } in
                 case ww1 of wild1 {
                   DEFAULT
                   -> let {
                        lvl9 :: (Language.Haskell.Tools.AST.ElementTypes.Type dom,
                                 Data.Map.Base.Map
                                   (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                                   [SrcLoc.SrcSpan])
                        = (wild, w1)
                      } in
                      (\ (eta :: GhcMonad.Session)
                         (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                       (# eta1, lvl9 #))
                        `cast`
                      (Trans
                           (<GhcMonad.Session>_R
                            ->_R Sym (GHC.Types.N:IO[0]
                                          <(Language.Haskell.Tools.AST.ElementTypes.Type dom,
                                            Data.Map.Base.Map
                                              (ExtMap.LogicalRelation
                                                 GHC.LanguageExtensions.Type.Extension)
                                              [SrcLoc.SrcSpan])>_R))
                           (Sym (GhcMonad.N:Ghc[0]
                                     <(Language.Haskell.Tools.AST.ElementTypes.Type dom,
                                       Data.Map.Base.Map
                                         (ExtMap.LogicalRelation
                                            GHC.LanguageExtensions.Type.Extension)
                                         [SrcLoc.SrcSpan])>_R)))
                   Language.Haskell.Tools.AST.Representation.Types.UTyUnbTuple args
                   -> let {
                        a1 :: Data.Map.Base.Map
                                (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                                [SrcLoc.SrcSpan]
                        = Data.Map.Strict.insertWithKey
                            @ (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                            @ [SrcLoc.SrcSpan]
                            ExtMonad.$s$fOrdLogicalRelation
                            (ExtMonad.addOccurence_1
                               @ (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension))
                            UnboxedTuplesChecker.chkUnboxedTuplesExpr3
                            (GHC.Types.:
                               @ SrcLoc.SrcSpan
                               (case ww of wild2 { Language.Haskell.Tools.AST.Ann.NodeInfo ds1 ds2 ->
                                case ds2
                                       `cast`
                                     (Language.Haskell.Tools.Transform.SourceTemplate.D:R:SpanInfoSrcTemplateStage0[0]) of wild3 { Language.Haskell.Tools.Transform.SourceTemplate.SourceTemplateNode ds4 ds5 ds3 ds6 ->
                                ds4 } })
                               (GHC.Types.[] @ SrcLoc.SrcSpan))
                            w1
                      } in
                      let {
                        lvl9 :: (Language.Haskell.Tools.AST.ElementTypes.Type dom,
                                 Data.Map.Base.Map
                                   (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                                   [SrcLoc.SrcSpan])
                        = (wild, a1)
                      } in
                      (\ (s :: GhcMonad.Session)
                         (s1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                       (# s1, lvl9 #))
                        `cast`
                      (Trans
                           (<GhcMonad.Session>_R
                            ->_R Sym (GHC.Types.N:IO[0]
                                          <(Language.Haskell.Tools.AST.ElementTypes.Type dom,
                                            Data.Map.Base.Map
                                              (ExtMap.LogicalRelation
                                                 GHC.LanguageExtensions.Type.Extension)
                                              [SrcLoc.SrcSpan])>_R))
                           (Sym (GhcMonad.N:Ghc[0]
                                     <(Language.Haskell.Tools.AST.ElementTypes.Type dom,
                                       Data.Map.Base.Map
                                         (ExtMap.LogicalRelation
                                            GHC.LanguageExtensions.Type.Extension)
                                         [SrcLoc.SrcSpan])>_R))) } }) -}
3043db734f280dc9d910a533a3270aca
  chkUnboxedTuplesExpr ::
    ExtMonad.CheckNode Language.Haskell.Tools.AST.ElementTypes.Expr
  {- Arity: 2,
     Strictness: <S(S(LLS(S)LLLLLLLLLL)L),U(U(A,A,U(U),A,A,A,A,A,A,A,A,A,A),A)><L,U>,
     Unfolding: (\ @ dom
                   ($d(%,%) :: ExtMonad.ExtDomain dom)
                   (eta :: Language.Haskell.Tools.AST.ElementTypes.Expr dom) ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Language.Haskell.Tools.AST.Ann.SemanticInfo'
                             dom Language.Haskell.Tools.AST.Ann.SameInfoDefaultCls)
                        @ Language.Haskell.Tools.AST.SemaInfoTypes.NoSemanticInfo
                        (Language.Haskell.Tools.AST.Ann.$p3Domain
                           @ dom
                           (GHC.Classes.$p1(%,%)
                              @ (Language.Haskell.Tools.AST.Ann.Domain dom)
                              @ (Language.Haskell.Tools.AST.SemaInfoClasses.HasNameInfo'
                                   (Language.Haskell.Tools.AST.Ann.SemanticInfo
                                      dom
                                      Language.Haskell.Tools.AST.Representation.Names.UQualifiedName))
                              $d(%,%)))
                          `cast`
                        (Data.Type.Equality.N:~[0]
                             <*>_N <Language.Haskell.Tools.AST.Ann.SemanticInfo'
                                      dom
                                      Language.Haskell.Tools.AST.Ann.SameInfoDefaultCls>_N <Language.Haskell.Tools.AST.SemaInfoTypes.NoSemanticInfo>_N) of cobox0 { DEFAULT ->
                 ExtMonad.conditionalAny
                   @ (Language.Haskell.Tools.AST.ElementTypes.Expr dom)
                   (UnboxedTuplesChecker.chkUnboxedTuplesExpr2 @ dom $d(%,%))
                     `cast`
                   (<Language.Haskell.Tools.AST.ElementTypes.Expr dom>_R
                    ->_R Trans
                             (<[GHC.LanguageExtensions.Type.Extension]>_R
                              ->_R Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                            <ExtMap.ExtMap>_N
                                            <GhcMonad.Ghc>_R
                                            <Language.Haskell.Tools.AST.ElementTypes.Expr dom>_N))
                             (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                       <*>_N
                                       <[GHC.LanguageExtensions.Type.Extension]>_R
                                       <Control.Monad.Trans.State.Lazy.StateT
                                          ExtMap.ExtMap GhcMonad.Ghc>_R
                                       <Language.Haskell.Tools.AST.ElementTypes.Expr dom>_N)))
                   UnboxedTuplesChecker.chkUnboxedTuplesExpr1
                   eta }) -}
babd634da1a254afa239066cdd0d20b1
  chkUnboxedTuplesExpr' ::
    ExtMonad.CheckNode Language.Haskell.Tools.AST.ElementTypes.Expr
  {- Arity: 4,
     Strictness: <S(S(LLS(S)LLLLLLLLLL)L),1*U(1*U(A,A,1*U(1*U),A,A,A,A,A,A,A,A,A,A),A)><S(LS),1*U(U(U,U(U,U,U,U)),U)><L,A><L,U>,
     Unfolding: InlineRule (0, True, True)
                UnboxedTuplesChecker.chkUnboxedTuplesExpr2
                  `cast`
                (forall (dom :: <*>_N).
                 <ExtMonad.ExtDomain dom>_R
                 ->_R <Language.Haskell.Tools.AST.ElementTypes.Expr dom>_R
                 ->_R Trans
                          (<[GHC.LanguageExtensions.Type.Extension]>_R
                           ->_R Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                         <ExtMap.ExtMap>_N
                                         <GhcMonad.Ghc>_R
                                         <Language.Haskell.Tools.AST.ElementTypes.Expr dom>_N))
                          (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                    <*>_N
                                    <[GHC.LanguageExtensions.Type.Extension]>_R
                                    <Control.Monad.Trans.State.Lazy.StateT
                                       ExtMap.ExtMap GhcMonad.Ghc>_R
                                    <Language.Haskell.Tools.AST.ElementTypes.Expr dom>_N))) -}
5a8529665d14481eb33d6b8fe7cdb41b
  chkUnboxedTuplesExpr1 :: [GHC.LanguageExtensions.Type.Extension]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ GHC.LanguageExtensions.Type.Extension
                   GHC.LanguageExtensions.Type.UnboxedTuples
                   (GHC.Types.[] @ GHC.LanguageExtensions.Type.Extension)) -}
dfe860b3cbeb491d4fcd4abcbd18e97e
  chkUnboxedTuplesExpr2 ::
    ExtMonad.ExtDomain dom =>
    Language.Haskell.Tools.AST.ElementTypes.Expr dom
    -> [GHC.LanguageExtensions.Type.Extension]
    -> ExtMap.ExtMap
    -> GhcMonad.Ghc
         (Language.Haskell.Tools.AST.ElementTypes.Expr dom, ExtMap.ExtMap)
  {- Arity: 4,
     Strictness: <S(S(LLS(S)LLLLLLLLLL)L),1*U(1*U(A,A,1*U(1*U),A,A,A,A,A,A,A,A,A,A),A)><S(LS),1*U(U(U,U(U,U,U,U)),U)><L,A><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (4, True, False)
                (\ @ dom
                   (w :: ExtMonad.ExtDomain dom)
                   (w1 :: Language.Haskell.Tools.AST.ElementTypes.Expr dom)
                   (w2 :: [GHC.LanguageExtensions.Type.Extension])
                   (w3 :: ExtMap.ExtMap) ->
                 case w1 of ww { Language.Haskell.Tools.AST.Ann.Ann ww1 ww2 ->
                 UnboxedTuplesChecker.$wchkUnboxedTuplesExpr'
                   @ dom
                   w
                   ww1
                   ww2
                   w3 }) -}
0e9bcea2204b2b5aca67bf571c3974bb
  chkUnboxedTuplesExpr3 ::
    ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension
  {- HasNoCafRefs,
     Unfolding: (ExtMap.LVar
                   @ GHC.LanguageExtensions.Type.Extension
                   GHC.LanguageExtensions.Type.UnboxedTuples) -}
075b8d2c1d590fb228bb475825badd2d
  chkUnboxedTuplesPat ::
    ExtMonad.CheckNode Language.Haskell.Tools.AST.ElementTypes.Pattern
  {- Arity: 2,
     Strictness: <S(S(LLS(S)LLLLLLLLLL)L),U(U(A,A,U(U),A,A,A,A,A,A,A,A,A,A),A)><L,U>,
     Unfolding: (\ @ dom
                   ($d(%,%) :: ExtMonad.ExtDomain dom)
                   (eta :: Language.Haskell.Tools.AST.ElementTypes.Pattern dom) ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Language.Haskell.Tools.AST.Ann.SemanticInfo'
                             dom Language.Haskell.Tools.AST.Ann.SameInfoDefaultCls)
                        @ Language.Haskell.Tools.AST.SemaInfoTypes.NoSemanticInfo
                        (Language.Haskell.Tools.AST.Ann.$p3Domain
                           @ dom
                           (GHC.Classes.$p1(%,%)
                              @ (Language.Haskell.Tools.AST.Ann.Domain dom)
                              @ (Language.Haskell.Tools.AST.SemaInfoClasses.HasNameInfo'
                                   (Language.Haskell.Tools.AST.Ann.SemanticInfo
                                      dom
                                      Language.Haskell.Tools.AST.Representation.Names.UQualifiedName))
                              $d(%,%)))
                          `cast`
                        (Data.Type.Equality.N:~[0]
                             <*>_N <Language.Haskell.Tools.AST.Ann.SemanticInfo'
                                      dom
                                      Language.Haskell.Tools.AST.Ann.SameInfoDefaultCls>_N <Language.Haskell.Tools.AST.SemaInfoTypes.NoSemanticInfo>_N) of cobox0 { DEFAULT ->
                 ExtMonad.conditionalAny
                   @ (Language.Haskell.Tools.AST.ElementTypes.Pattern dom)
                   (UnboxedTuplesChecker.chkUnboxedTuplesPat1 @ dom $d(%,%))
                     `cast`
                   (<Language.Haskell.Tools.AST.ElementTypes.Pattern dom>_R
                    ->_R Trans
                             (<[GHC.LanguageExtensions.Type.Extension]>_R
                              ->_R Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                            <ExtMap.ExtMap>_N
                                            <GhcMonad.Ghc>_R
                                            <Language.Haskell.Tools.AST.ElementTypes.Pattern
                                               dom>_N))
                             (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                       <*>_N
                                       <[GHC.LanguageExtensions.Type.Extension]>_R
                                       <Control.Monad.Trans.State.Lazy.StateT
                                          ExtMap.ExtMap GhcMonad.Ghc>_R
                                       <Language.Haskell.Tools.AST.ElementTypes.Pattern dom>_N)))
                   UnboxedTuplesChecker.chkUnboxedTuplesExpr1
                   eta }) -}
dea14ecffb74054e8660acfe927061dc
  chkUnboxedTuplesPat' ::
    ExtMonad.CheckNode Language.Haskell.Tools.AST.ElementTypes.Pattern
  {- Arity: 4,
     Strictness: <S(S(LLS(S)LLLLLLLLLL)L),1*U(1*U(A,A,1*U(1*U),A,A,A,A,A,A,A,A,A,A),A)><S(LS),1*U(U(U,U(U,U,U,U)),U)><L,A><L,U>,
     Unfolding: InlineRule (0, True, True)
                UnboxedTuplesChecker.chkUnboxedTuplesPat1
                  `cast`
                (forall (dom :: <*>_N).
                 <ExtMonad.ExtDomain dom>_R
                 ->_R <Language.Haskell.Tools.AST.ElementTypes.Pattern dom>_R
                 ->_R Trans
                          (<[GHC.LanguageExtensions.Type.Extension]>_R
                           ->_R Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                         <ExtMap.ExtMap>_N
                                         <GhcMonad.Ghc>_R
                                         <Language.Haskell.Tools.AST.ElementTypes.Pattern dom>_N))
                          (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                    <*>_N
                                    <[GHC.LanguageExtensions.Type.Extension]>_R
                                    <Control.Monad.Trans.State.Lazy.StateT
                                       ExtMap.ExtMap GhcMonad.Ghc>_R
                                    <Language.Haskell.Tools.AST.ElementTypes.Pattern dom>_N))) -}
bbca22807473bf114b78cb9996da73fa
  chkUnboxedTuplesPat1 ::
    ExtMonad.ExtDomain dom =>
    Language.Haskell.Tools.AST.ElementTypes.Pattern dom
    -> [GHC.LanguageExtensions.Type.Extension]
    -> ExtMap.ExtMap
    -> GhcMonad.Ghc
         (Language.Haskell.Tools.AST.ElementTypes.Pattern dom,
          ExtMap.ExtMap)
  {- Arity: 4,
     Strictness: <S(S(LLS(S)LLLLLLLLLL)L),1*U(1*U(A,A,1*U(1*U),A,A,A,A,A,A,A,A,A,A),A)><S(LS),1*U(U(U,U(U,U,U,U)),U)><L,A><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (4, True, False)
                (\ @ dom
                   (w :: ExtMonad.ExtDomain dom)
                   (w1 :: Language.Haskell.Tools.AST.ElementTypes.Pattern dom)
                   (w2 :: [GHC.LanguageExtensions.Type.Extension])
                   (w3 :: ExtMap.ExtMap) ->
                 case w1 of ww { Language.Haskell.Tools.AST.Ann.Ann ww1 ww2 ->
                 UnboxedTuplesChecker.$wchkUnboxedTuplesPat'
                   @ dom
                   w
                   ww1
                   ww2
                   w3 }) -}
f560dce205825bb24f46045a0e56d527
  chkUnboxedTuplesType ::
    ExtMonad.CheckNode Language.Haskell.Tools.AST.ElementTypes.Type
  {- Arity: 2,
     Strictness: <S(S(LLS(S)LLLLLLLLLL)L),U(U(A,A,U(U),A,A,A,A,A,A,A,A,A,A),A)><L,U>,
     Unfolding: (\ @ dom
                   ($d(%,%) :: ExtMonad.ExtDomain dom)
                   (eta :: Language.Haskell.Tools.AST.ElementTypes.Type dom) ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Language.Haskell.Tools.AST.Ann.SemanticInfo'
                             dom Language.Haskell.Tools.AST.Ann.SameInfoDefaultCls)
                        @ Language.Haskell.Tools.AST.SemaInfoTypes.NoSemanticInfo
                        (Language.Haskell.Tools.AST.Ann.$p3Domain
                           @ dom
                           (GHC.Classes.$p1(%,%)
                              @ (Language.Haskell.Tools.AST.Ann.Domain dom)
                              @ (Language.Haskell.Tools.AST.SemaInfoClasses.HasNameInfo'
                                   (Language.Haskell.Tools.AST.Ann.SemanticInfo
                                      dom
                                      Language.Haskell.Tools.AST.Representation.Names.UQualifiedName))
                              $d(%,%)))
                          `cast`
                        (Data.Type.Equality.N:~[0]
                             <*>_N <Language.Haskell.Tools.AST.Ann.SemanticInfo'
                                      dom
                                      Language.Haskell.Tools.AST.Ann.SameInfoDefaultCls>_N <Language.Haskell.Tools.AST.SemaInfoTypes.NoSemanticInfo>_N) of cobox0 { DEFAULT ->
                 ExtMonad.conditionalAny
                   @ (Language.Haskell.Tools.AST.ElementTypes.Type dom)
                   (UnboxedTuplesChecker.chkUnboxedTuplesType1 @ dom $d(%,%))
                     `cast`
                   (<Language.Haskell.Tools.AST.ElementTypes.Type dom>_R
                    ->_R Trans
                             (<[GHC.LanguageExtensions.Type.Extension]>_R
                              ->_R Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                            <ExtMap.ExtMap>_N
                                            <GhcMonad.Ghc>_R
                                            <Language.Haskell.Tools.AST.ElementTypes.Type dom>_N))
                             (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                       <*>_N
                                       <[GHC.LanguageExtensions.Type.Extension]>_R
                                       <Control.Monad.Trans.State.Lazy.StateT
                                          ExtMap.ExtMap GhcMonad.Ghc>_R
                                       <Language.Haskell.Tools.AST.ElementTypes.Type dom>_N)))
                   UnboxedTuplesChecker.chkUnboxedTuplesExpr1
                   eta }) -}
f89f829c22fb9b04e6e18c8a25820bff
  chkUnboxedTuplesType' ::
    ExtMonad.CheckNode Language.Haskell.Tools.AST.ElementTypes.Type
  {- Arity: 4,
     Strictness: <S(S(LLS(S)LLLLLLLLLL)L),1*U(1*U(A,A,1*U(1*U),A,A,A,A,A,A,A,A,A,A),A)><S(LS),1*U(U(U,U(U,U,U,U)),U)><L,A><L,U>,
     Unfolding: InlineRule (0, True, True)
                UnboxedTuplesChecker.chkUnboxedTuplesType1
                  `cast`
                (forall (dom :: <*>_N).
                 <ExtMonad.ExtDomain dom>_R
                 ->_R <Language.Haskell.Tools.AST.ElementTypes.Type dom>_R
                 ->_R Trans
                          (<[GHC.LanguageExtensions.Type.Extension]>_R
                           ->_R Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                         <ExtMap.ExtMap>_N
                                         <GhcMonad.Ghc>_R
                                         <Language.Haskell.Tools.AST.ElementTypes.Type dom>_N))
                          (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                    <*>_N
                                    <[GHC.LanguageExtensions.Type.Extension]>_R
                                    <Control.Monad.Trans.State.Lazy.StateT
                                       ExtMap.ExtMap GhcMonad.Ghc>_R
                                    <Language.Haskell.Tools.AST.ElementTypes.Type dom>_N))) -}
be796b45fc20bd9ce5fa0a0904b91e81
  chkUnboxedTuplesType1 ::
    ExtMonad.ExtDomain dom =>
    Language.Haskell.Tools.AST.ElementTypes.Type dom
    -> [GHC.LanguageExtensions.Type.Extension]
    -> ExtMap.ExtMap
    -> GhcMonad.Ghc
         (Language.Haskell.Tools.AST.ElementTypes.Type dom, ExtMap.ExtMap)
  {- Arity: 4,
     Strictness: <S(S(LLS(S)LLLLLLLLLL)L),1*U(1*U(A,A,1*U(1*U),A,A,A,A,A,A,A,A,A,A),A)><S(LS),1*U(U(U,U(U,U,U,U)),U)><L,A><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (4, True, False)
                (\ @ dom
                   (w :: ExtMonad.ExtDomain dom)
                   (w1 :: Language.Haskell.Tools.AST.ElementTypes.Type dom)
                   (w2 :: [GHC.LanguageExtensions.Type.Extension])
                   (w3 :: ExtMap.ExtMap) ->
                 case w1 of ww { Language.Haskell.Tools.AST.Ann.Ann ww1 ww2 ->
                 UnboxedTuplesChecker.$wchkUnboxedTuplesType'
                   @ dom
                   w
                   ww1
                   ww2
                   w3 }) -}
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

