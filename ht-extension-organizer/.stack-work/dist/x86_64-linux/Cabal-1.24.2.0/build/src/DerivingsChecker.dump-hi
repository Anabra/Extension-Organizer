
==================== FINAL INTERFACE ====================
2017-09-19 15:19:16.356099 UTC

interface ht-extension-organizer-0.1.0.0-y3uypH7gCtA60AaWeuyZL:DerivingsChecker 8002
  interface hash: 12ec8d04a19475b1b1ee693cccabc49d
  ABI hash: 508b12dc2c43e9c76a38bc9f50ae230e
  export-list hash: c9c99a13421ec9464a9b0877252e817a
  orphan hash: 3ead2fc9ae6a795da7b4383e40705ad9
  flag hash: c009764d2a5cf9388241fdc2e65020cd
  sig of: Nothing
  used TH splices: False
  where
exports:
  DerivingsChecker.canBeGeneralized
  DerivingsChecker.chkClassForData
  DerivingsChecker.chkClassForNewtype
  DerivingsChecker.chkDataDecl
  DerivingsChecker.chkDataInstance
  DerivingsChecker.chkDerivingClause
  DerivingsChecker.chkDerivings
  DerivingsChecker.chkGADTDataDecl
  DerivingsChecker.chkStandaloneDeriving
  DerivingsChecker.getClassCon
  DerivingsChecker.getSemName
  DerivingsChecker.isNewtype
  DerivingsChecker.isNewtypeTyCon
  DerivingsChecker.isSynNewType
  DerivingsChecker.isWiredInClass
  DerivingsChecker.lookupSynDef
  DerivingsChecker.lookupType
  DerivingsChecker.nameFromType
  DerivingsChecker.notGNTD
  DerivingsChecker.readClass
  DerivingsChecker.readIntoExt
  DerivingsChecker.rightmostType
  DerivingsChecker.separateByKeyword
  DerivingsChecker.skipParens
  DerivingsChecker.tyconFromGHCType
  DerivingsChecker.tyconFromTyThing
  DerivingsChecker.whichExtension
  DerivingsChecker.wiredInClasses
  DerivingsChecker.DerivableClass{DerivingsChecker.ClsBounded DerivingsChecker.ClsData DerivingsChecker.ClsEnum DerivingsChecker.ClsEq DerivingsChecker.ClsFoldable DerivingsChecker.ClsFunctor DerivingsChecker.ClsGeneric DerivingsChecker.ClsIx DerivingsChecker.ClsOrd DerivingsChecker.ClsRead DerivingsChecker.ClsShow DerivingsChecker.ClsTraversable DerivingsChecker.ClsTypeable}
module dependencies: ExtMap ExtMonad
package dependencies: array-0.5.1.1@array-0.5.1.1 base-4.9.1.0
                      binary-0.8.3.0@binary-0.8.3.0
                      bytestring-0.10.8.1@bytestring-0.10.8.1
                      containers-0.5.7.1@containers-0.5.7.1
                      deepseq-1.4.2.0@deepseq-1.4.2.0 directory-1.3.0.0@directory-1.3.0.0
                      either-4.4.1.1@either-4.4.1.1-6PiwKYkn4v6B4KO2R2Fu1b
                      filepath-1.4.1.1@filepath-1.4.1.1 ghc-8.0.2
                      ghc-boot-8.0.2@ghc-boot-8.0.2 ghc-boot-th-8.0.2@ghc-boot-th-8.0.2
                      ghc-paths-0.1.0.9@ghc-paths-0.1.0.9-AhaDlGOsRAepox069XzG
                      ghc-prim-0.5.0.0 ghci-8.0.2@ghci-8.0.2
                      hashable-1.2.6.1@hashable-1.2.6.1-2ZLNuHq395GGIHwEHuqZol
                      haskell-tools-ast-0.8.1.0@haskell-tools-ast-0.8.1.0-I9ZMaCkuuwT3FoQkwMjyW6
                      haskell-tools-backend-ghc-0.8.1.0@haskell-tools-backend-ghc-0.8.1.0-DqHnbK8OPi6CBD5cIPITWq
                      haskell-tools-prettyprint-0.8.1.0@haskell-tools-prettyprint-0.8.1.0-F9iWkGq5ppnLH6whHm0DlC
                      haskell-tools-refactor-0.8.1.0@haskell-tools-refactor-0.8.1.0-AF8Q4cA8mAnLNwu5t0Icw8
                      haskell-tools-rewrite-0.8.1.0@haskell-tools-rewrite-0.8.1.0-85A6q9dMQgvKEKG9I8fxVU
                      hoopl-3.10.2.1@hoopl-3.10.2.1 hpc-0.6.0.3@hpc-0.6.0.3
                      instance-control-0.1.1.1@instance-control-0.1.1.1-1defRS82vAAEmZKRhe67aa
                      integer-gmp-1.0.0.1 mtl-2.2.1@mtl-2.2.1-BLKBelFsPB3BoFeSWSOYj6
                      pretty-1.1.3.3@pretty-1.1.3.3 process-1.4.3.0@process-1.4.3.0
                      references-0.3.2.2@references-0.3.2.2-y362bKYomIKNQKMTfOWVo
                      safe-0.3.15@safe-0.3.15-2Yd45VWFfdcKqKyispOifY
                      split-0.2.3.2@split-0.2.3.2-CJl40zTyCIV16Pr60nb7CT
                      syb-0.7@syb-0.7-4OKdCpwGutyB1rNRmoa0ya template-haskell-2.11.1.0
                      text-1.2.2.2@text-1.2.2.2-9UQZjEJZQFSGMffj1Z5g00
                      time-1.6.0.1@time-1.6.0.1 transformers-0.5.2.0@transformers-0.5.2.0
                      uniplate-1.6.12@uniplate-1.6.12-4PyZX21trQJ5lfk0CDvC7U
                      unix-2.7.2.1@unix-2.7.2.1
                      unordered-containers-0.2.8.0@unordered-containers-0.2.8.0-Bp9XgxjuHxcI4tFehVMDGC
orphans: base-4.9.1.0:GHC.Base base-4.9.1.0:GHC.Float
         binary-0.8.3.0@binary-0.8.3.0:Data.Binary.Generic
         bytestring-0.10.8.1@bytestring-0.10.8.1:Data.ByteString.Builder
         ghc-8.0.2:BlockId ghc-8.0.2:DsMonad ghc-8.0.2:LoadIface
         ghc-8.0.2:PPC.Ppr ghc-8.0.2:PprCmm ghc-8.0.2:PprCmmDecl
         ghc-8.0.2:PprCmmExpr ghc-8.0.2:PprCore ghc-8.0.2:SPARC.Ppr
         ghc-8.0.2:TcEnv ghc-8.0.2:TcRnMonad ghc-8.0.2:X86.Ppr
         ghc-boot-8.0.2@ghc-boot-8.0.2:GHC.LanguageExtensions
         ghci-8.0.2@ghci-8.0.2:GHCi.Message
         ghci-8.0.2@ghci-8.0.2:GHCi.TH.Binary
         hashable-1.2.6.1@hashable-1.2.6.1-2ZLNuHq395GGIHwEHuqZol:Data.Hashable.Generic
         haskell-tools-ast-0.8.1.0@haskell-tools-ast-0.8.1.0-I9ZMaCkuuwT3FoQkwMjyW6:Language.Haskell.Tools.AST.Instances.Data
         haskell-tools-ast-0.8.1.0@haskell-tools-ast-0.8.1.0-I9ZMaCkuuwT3FoQkwMjyW6:Language.Haskell.Tools.AST.Instances.Eq
         haskell-tools-ast-0.8.1.0@haskell-tools-ast-0.8.1.0-I9ZMaCkuuwT3FoQkwMjyW6:Language.Haskell.Tools.AST.Instances.Generic
         haskell-tools-ast-0.8.1.0@haskell-tools-ast-0.8.1.0-I9ZMaCkuuwT3FoQkwMjyW6:Language.Haskell.Tools.AST.Instances.SemanticTraversal
         haskell-tools-ast-0.8.1.0@haskell-tools-ast-0.8.1.0-I9ZMaCkuuwT3FoQkwMjyW6:Language.Haskell.Tools.AST.Instances.Show
         haskell-tools-ast-0.8.1.0@haskell-tools-ast-0.8.1.0-I9ZMaCkuuwT3FoQkwMjyW6:Language.Haskell.Tools.AST.Instances.SourceInfoTraversal
         haskell-tools-ast-0.8.1.0@haskell-tools-ast-0.8.1.0-I9ZMaCkuuwT3FoQkwMjyW6:Language.Haskell.Tools.AST.SemaInfoTypes
         haskell-tools-ast-0.8.1.0@haskell-tools-ast-0.8.1.0-I9ZMaCkuuwT3FoQkwMjyW6:Language.Haskell.Tools.AST.Utils.GHCInstances
         haskell-tools-backend-ghc-0.8.1.0@haskell-tools-backend-ghc-0.8.1.0-DqHnbK8OPi6CBD5cIPITWq:Language.Haskell.Tools.AST.FromGHC.Utils
         haskell-tools-prettyprint-0.8.1.0@haskell-tools-prettyprint-0.8.1.0-F9iWkGq5ppnLH6whHm0DlC:Language.Haskell.Tools.Transform.RangeTemplate
         haskell-tools-prettyprint-0.8.1.0@haskell-tools-prettyprint-0.8.1.0-F9iWkGq5ppnLH6whHm0DlC:Language.Haskell.Tools.Transform.SourceTemplate
         haskell-tools-prettyprint-0.8.1.0@haskell-tools-prettyprint-0.8.1.0-F9iWkGq5ppnLH6whHm0DlC:Language.Haskell.Tools.Transform.SourceTemplateHelpers
         haskell-tools-refactor-0.8.1.0@haskell-tools-refactor-0.8.1.0-AF8Q4cA8mAnLNwu5t0Icw8:Language.Haskell.Tools.Refactor.RefactorBase
         ht-extension-organizer-0.1.0.0-y3uypH7gCtA60AaWeuyZL:ExtMonad
         references-0.3.2.2@references-0.3.2.2-y362bKYomIKNQKMTfOWVo:Control.Reference.Predefined.Containers.Tree
         references-0.3.2.2@references-0.3.2.2-y362bKYomIKNQKMTfOWVo:Control.Reference.TH.Records
         syb-0.7@syb-0.7-4OKdCpwGutyB1rNRmoa0ya:Data.Generics.Instances
         text-1.2.2.2@text-1.2.2.2-9UQZjEJZQFSGMffj1Z5g00:Data.Text
         text-1.2.2.2@text-1.2.2.2-9UQZjEJZQFSGMffj1Z5g00:Data.Text.Lazy
         text-1.2.2.2@text-1.2.2.2-9UQZjEJZQFSGMffj1Z5g00:Data.Text.Show
         time-1.6.0.1@time-1.6.0.1:Data.Time.Calendar.Gregorian
         time-1.6.0.1@time-1.6.0.1:Data.Time.Format.Parse
         time-1.6.0.1@time-1.6.0.1:Data.Time.LocalTime.LocalTime
         transformers-0.5.2.0@transformers-0.5.2.0:Control.Monad.Trans.Error
         uniplate-1.6.12@uniplate-1.6.12-4PyZX21trQJ5lfk0CDvC7U:Data.Generics.Uniplate.Data
family instance modules: base-4.9.1.0:Control.Applicative
                         base-4.9.1.0:Data.Complex base-4.9.1.0:Data.Either
                         base-4.9.1.0:Data.Functor.Compose base-4.9.1.0:Data.Functor.Const
                         base-4.9.1.0:Data.Functor.Identity
                         base-4.9.1.0:Data.Functor.Product base-4.9.1.0:Data.Functor.Sum
                         base-4.9.1.0:Data.List.NonEmpty base-4.9.1.0:Data.Monoid
                         base-4.9.1.0:Data.Semigroup base-4.9.1.0:Data.Type.Equality
                         base-4.9.1.0:Data.Version base-4.9.1.0:Data.Void
                         base-4.9.1.0:GHC.Exts base-4.9.1.0:GHC.Generics
                         base-4.9.1.0:GHC.IO.Exception base-4.9.1.0:GHC.TypeLits
                         containers-0.5.7.1@containers-0.5.7.1:Data.IntMap.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.IntSet.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.Map.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.Sequence
                         containers-0.5.7.1@containers-0.5.7.1:Data.Set.Base
                         ghc-8.0.2:PlaceHolder ghc-8.0.2:TrieMap
                         ghc-boot-th-8.0.2@ghc-boot-th-8.0.2:GHC.LanguageExtensions.Type
                         ghci-8.0.2@ghci-8.0.2:GHCi.FFI ghci-8.0.2@ghci-8.0.2:GHCi.Message
                         ghci-8.0.2@ghci-8.0.2:GHCi.ResolvedBCO
                         ghci-8.0.2@ghci-8.0.2:SizedSeq
                         haskell-tools-ast-0.8.1.0@haskell-tools-ast-0.8.1.0-I9ZMaCkuuwT3FoQkwMjyW6:Language.Haskell.Tools.AST.Ann
                         haskell-tools-ast-0.8.1.0@haskell-tools-ast-0.8.1.0-I9ZMaCkuuwT3FoQkwMjyW6:Language.Haskell.Tools.AST.Instances.Generic
                         haskell-tools-prettyprint-0.8.1.0@haskell-tools-prettyprint-0.8.1.0-F9iWkGq5ppnLH6whHm0DlC:Language.Haskell.Tools.Transform.RangeTemplate
                         haskell-tools-prettyprint-0.8.1.0@haskell-tools-prettyprint-0.8.1.0-F9iWkGq5ppnLH6whHm0DlC:Language.Haskell.Tools.Transform.SourceTemplate
                         hoopl-3.10.2.1@hoopl-3.10.2.1:Compiler.Hoopl.Block
                         hoopl-3.10.2.1@hoopl-3.10.2.1:Compiler.Hoopl.Dataflow
                         hoopl-3.10.2.1@hoopl-3.10.2.1:Compiler.Hoopl.Fuel
                         hoopl-3.10.2.1@hoopl-3.10.2.1:Compiler.Hoopl.Label
                         hoopl-3.10.2.1@hoopl-3.10.2.1:Compiler.Hoopl.Unique
                         pretty-1.1.3.3@pretty-1.1.3.3:Text.PrettyPrint.Annotated.HughesPJ
                         pretty-1.1.3.3@pretty-1.1.3.3:Text.PrettyPrint.HughesPJ
                         references-0.3.2.2@references-0.3.2.2-y362bKYomIKNQKMTfOWVo:Control.Reference.Predefined.Containers
                         references-0.3.2.2@references-0.3.2.2-y362bKYomIKNQKMTfOWVo:Control.Reference.Predefined.Containers.Tree
                         references-0.3.2.2@references-0.3.2.2-y362bKYomIKNQKMTfOWVo:Control.Reference.Types
                         template-haskell-2.11.1.0:Language.Haskell.TH.Syntax
                         text-1.2.2.2@text-1.2.2.2-9UQZjEJZQFSGMffj1Z5g00:Data.Text
                         text-1.2.2.2@text-1.2.2.2-9UQZjEJZQFSGMffj1Z5g00:Data.Text.Lazy
                         unordered-containers-0.2.8.0@unordered-containers-0.2.8.0-Bp9XgxjuHxcI4tFehVMDGC:Data.HashMap.Base
                         unordered-containers-0.2.8.0@unordered-containers-0.2.8.0-Bp9XgxjuHxcI4tFehVMDGC:Data.HashSet
import  -/  base-4.9.1.0:Control.Monad a6784c5dab0d75c63dabec5a37843f98
import  -/  base-4.9.1.0:Data.Foldable 3e0b6967a1da89945d0e2d47266337a2
import  -/  base-4.9.1.0:Data.Maybe d876c4ffe4b3c43755a781e8ad860d88
import  -/  base-4.9.1.0:Data.Tuple 7dc4bbb45d2e69c991ffac438beeca11
import  -/  base-4.9.1.0:Debug.Trace a9edf3aec504f4423d8ba829ab373a25
import  -/  base-4.9.1.0:GHC.Base c4231c43c07e46080a26bf94094c7aa1
import  -/  base-4.9.1.0:GHC.List ab8c4e523e6c479c549d3bcd5fc4a439
import  -/  base-4.9.1.0:GHC.Read b6821365d2d5fa2155c9e910160e7f57
import  -/  base-4.9.1.0:GHC.Show a027f5ac24879eaba752f44aa90fe511
import  -/  base-4.9.1.0:Prelude 22dd289b8469a8fa8dc81cab7b237771
import  -/  base-4.9.1.0:Text.Read 75c59863e882ebaec4532e9465e2ee9b
import  -/  ghc-8.0.2:GHC 2331686350095b94008a49ce7901eaa2
import  -/  ghc-8.0.2:Name 3840150d8ea7eb12e36901129df6e8d4
import  -/  ghc-8.0.2:PrelNames e475dbf7aa171f7a72ba07b4af803f2e
import  -/  ghc-8.0.2:SrcLoc ae8e460a2b77026f9c6a4d6cdcc5d57e
import  -/  ghc-8.0.2:TyCoRep d6aa9725262ca0e96d64a06015f6829c
import  -/  ghc-8.0.2:TyCon 1b42b6416cd55b60ff926f4b4f655bfd
import  -/  ghc-boot-th-8.0.2@ghc-boot-th-8.0.2:GHC.LanguageExtensions.Type 92441ea50916fa3940e20fae60f255d7
import  -/  ghc-prim-0.5.0.0:GHC.Classes 0bdf3d057a415ec1b84a7b1994efbe47
import  -/  ghc-prim-0.5.0.0:GHC.Types 89f8de4f08018c9177c98d979eae0e45
import  -/  haskell-tools-ast-0.8.1.0@haskell-tools-ast-0.8.1.0-I9ZMaCkuuwT3FoQkwMjyW6:Language.Haskell.Tools.AST 3560a1061fd66e2c7888fe18991ca1cc
import  -/  haskell-tools-ast-0.8.1.0@haskell-tools-ast-0.8.1.0-I9ZMaCkuuwT3FoQkwMjyW6:Language.Haskell.Tools.AST.Ann 07e8f66a2b6d7f18951fb774264c8644
import  -/  haskell-tools-ast-0.8.1.0@haskell-tools-ast-0.8.1.0-I9ZMaCkuuwT3FoQkwMjyW6:Language.Haskell.Tools.AST.References 46cb31a69f53297ab865876852473aa3
import  -/  haskell-tools-ast-0.8.1.0@haskell-tools-ast-0.8.1.0-I9ZMaCkuuwT3FoQkwMjyW6:Language.Haskell.Tools.AST.Representation.Decls 60721f1e250af626bb8375487132cd66
import  -/  haskell-tools-ast-0.8.1.0@haskell-tools-ast-0.8.1.0-I9ZMaCkuuwT3FoQkwMjyW6:Language.Haskell.Tools.AST.SemaInfoClasses c2ef5a6a7a968ca08e3bc3c3b14a4a2f
import  -/  haskell-tools-prettyprint-0.8.1.0@haskell-tools-prettyprint-0.8.1.0-F9iWkGq5ppnLH6whHm0DlC:Language.Haskell.Tools.PrettyPrint da7dea6ac299ef1620d7160216fb97b0
import  -/  haskell-tools-refactor-0.8.1.0@haskell-tools-refactor-0.8.1.0-AF8Q4cA8mAnLNwu5t0Icw8:Language.Haskell.Tools.Refactor 84acc8d60e278de91351468f26f90e1c
import  -/  haskell-tools-rewrite-0.8.1.0@haskell-tools-rewrite-0.8.1.0-85A6q9dMQgvKEKG9I8fxVU:Language.Haskell.Tools.AST.ElementTypes df954b524d036aee274d8ad0f571417a
import  -/  haskell-tools-rewrite-0.8.1.0@haskell-tools-rewrite-0.8.1.0-85A6q9dMQgvKEKG9I8fxVU:Language.Haskell.Tools.AST.Match.Decls b84d56450f5735caccd2c24b62b5f303
import  -/  haskell-tools-rewrite-0.8.1.0@haskell-tools-rewrite-0.8.1.0-85A6q9dMQgvKEKG9I8fxVU:Language.Haskell.Tools.AST.Match.Types 85da168b886fc25a3bfd49c2d6ecd710
import  -/  ExtMonad 059f5fd988c212e6bf2913400d89e5c4
  exports: e114cdeb7f705ff3639c044bf88c57d7
  CheckNode d2a8a000f373c241c0362787c4b3f842
  ExtMonad 6ab37cbe93709f9dcdeffcf18c24ce9b
  addOccurence c9603992ac2a28741343ebc5c8fe7b56
  addOccurence_ 0a70efda5e7142f7b588f7458ea99597
  isTurnedOn 58326d046a06fcac13f090ffdee96f9d
import  -/  references-0.3.2.2@references-0.3.2.2-y362bKYomIKNQKMTfOWVo:Control.Reference d89ee82346f6e25c55a8a19dbf84658e
import  -/  references-0.3.2.2@references-0.3.2.2-y362bKYomIKNQKMTfOWVo:Control.Reference.Combinators ab836299cfb9898d02f637bc65b3765a
import  -/  references-0.3.2.2@references-0.3.2.2-y362bKYomIKNQKMTfOWVo:Control.Reference.Operators 55e717f4df077a71cb70a96f85f6a393
import  -/  transformers-0.5.2.0@transformers-0.5.2.0:Control.Monad.Trans.Maybe fb717b7ffb317f01e5849d6be7e862b4
022f1fbcf4a5103d33816fe9ef107bcf
  $fEqDerivableClass ::
    GHC.Classes.Eq DerivingsChecker.DerivableClass
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ DerivingsChecker.DerivableClass
                  DerivingsChecker.$fEqDerivableClass_$c==
                  DerivingsChecker.$fEqDerivableClass_$c/= -}
022f1fbcf4a5103d33816fe9ef107bcf
  $fEqDerivableClass_$c/= ::
    DerivingsChecker.DerivableClass
    -> DerivingsChecker.DerivableClass -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (a :: DerivingsChecker.DerivableClass)
                   (b :: DerivingsChecker.DerivableClass) ->
                 case a of x1 { DEFAULT ->
                 case b of x2 { DEFAULT ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.==#
                           (GHC.Prim.dataToTag# @ DerivingsChecker.DerivableClass x1)
                           (GHC.Prim.dataToTag#
                              @ DerivingsChecker.DerivableClass
                              x2)) of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False } } }) -}
022f1fbcf4a5103d33816fe9ef107bcf
  $fEqDerivableClass_$c== ::
    DerivingsChecker.DerivableClass
    -> DerivingsChecker.DerivableClass -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (a :: DerivingsChecker.DerivableClass)
                   (b :: DerivingsChecker.DerivableClass) ->
                 case a of x1 { DEFAULT ->
                 case b of x2 { DEFAULT ->
                 GHC.Prim.tagToEnum#
                   @ GHC.Types.Bool
                   (GHC.Prim.==#
                      (GHC.Prim.dataToTag# @ DerivingsChecker.DerivableClass x1)
                      (GHC.Prim.dataToTag# @ DerivingsChecker.DerivableClass x2)) } }) -}
022f1fbcf4a5103d33816fe9ef107bcf
  $fOrdDerivableClass ::
    GHC.Classes.Ord DerivingsChecker.DerivableClass
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ DerivingsChecker.DerivableClass
                  DerivingsChecker.$fEqDerivableClass
                  DerivingsChecker.$fOrdDerivableClass_$ccompare
                  DerivingsChecker.$fOrdDerivableClass_$c<
                  DerivingsChecker.$fOrdDerivableClass_$c<=
                  DerivingsChecker.$fOrdDerivableClass_$c>
                  DerivingsChecker.$fOrdDerivableClass_$c>=
                  DerivingsChecker.$fOrdDerivableClass_$cmax
                  DerivingsChecker.$fOrdDerivableClass_$cmin -}
022f1fbcf4a5103d33816fe9ef107bcf
  $fOrdDerivableClass_$c< ::
    DerivingsChecker.DerivableClass
    -> DerivingsChecker.DerivableClass -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (a :: DerivingsChecker.DerivableClass)
                   (b :: DerivingsChecker.DerivableClass) ->
                 case a of x1 { DEFAULT ->
                 case b of x2 { DEFAULT ->
                 GHC.Prim.tagToEnum#
                   @ GHC.Types.Bool
                   (GHC.Prim.<#
                      (GHC.Prim.dataToTag# @ DerivingsChecker.DerivableClass x1)
                      (GHC.Prim.dataToTag# @ DerivingsChecker.DerivableClass x2)) } }) -}
022f1fbcf4a5103d33816fe9ef107bcf
  $fOrdDerivableClass_$c<= ::
    DerivingsChecker.DerivableClass
    -> DerivingsChecker.DerivableClass -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (a :: DerivingsChecker.DerivableClass)
                   (b :: DerivingsChecker.DerivableClass) ->
                 case a of x1 { DEFAULT ->
                 case b of x2 { DEFAULT ->
                 GHC.Prim.tagToEnum#
                   @ GHC.Types.Bool
                   (GHC.Prim.<=#
                      (GHC.Prim.dataToTag# @ DerivingsChecker.DerivableClass x1)
                      (GHC.Prim.dataToTag# @ DerivingsChecker.DerivableClass x2)) } }) -}
022f1fbcf4a5103d33816fe9ef107bcf
  $fOrdDerivableClass_$c> ::
    DerivingsChecker.DerivableClass
    -> DerivingsChecker.DerivableClass -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (a :: DerivingsChecker.DerivableClass)
                   (b :: DerivingsChecker.DerivableClass) ->
                 case a of x1 { DEFAULT ->
                 case b of x2 { DEFAULT ->
                 GHC.Prim.tagToEnum#
                   @ GHC.Types.Bool
                   (GHC.Prim.>#
                      (GHC.Prim.dataToTag# @ DerivingsChecker.DerivableClass x1)
                      (GHC.Prim.dataToTag# @ DerivingsChecker.DerivableClass x2)) } }) -}
022f1fbcf4a5103d33816fe9ef107bcf
  $fOrdDerivableClass_$c>= ::
    DerivingsChecker.DerivableClass
    -> DerivingsChecker.DerivableClass -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (a :: DerivingsChecker.DerivableClass)
                   (b :: DerivingsChecker.DerivableClass) ->
                 case a of x1 { DEFAULT ->
                 case b of x2 { DEFAULT ->
                 GHC.Prim.tagToEnum#
                   @ GHC.Types.Bool
                   (GHC.Prim.>=#
                      (GHC.Prim.dataToTag# @ DerivingsChecker.DerivableClass x1)
                      (GHC.Prim.dataToTag# @ DerivingsChecker.DerivableClass x2)) } }) -}
022f1fbcf4a5103d33816fe9ef107bcf
  $fOrdDerivableClass_$ccompare ::
    DerivingsChecker.DerivableClass
    -> DerivingsChecker.DerivableClass -> GHC.Types.Ordering
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (a :: DerivingsChecker.DerivableClass)
                   (b :: DerivingsChecker.DerivableClass) ->
                 case a of x1 { DEFAULT ->
                 case b of x2 { DEFAULT ->
                 let {
                   b# :: GHC.Prim.Int#
                   = GHC.Prim.dataToTag# @ DerivingsChecker.DerivableClass x2
                 } in
                 let {
                   a# :: GHC.Prim.Int#
                   = GHC.Prim.dataToTag# @ DerivingsChecker.DerivableClass x1
                 } in
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.<# a# b#) of wild {
                   GHC.Types.False
                   -> case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.==# a# b#) of wild1 {
                        GHC.Types.False -> GHC.Types.GT GHC.Types.True -> GHC.Types.EQ }
                   GHC.Types.True -> GHC.Types.LT } } }) -}
022f1fbcf4a5103d33816fe9ef107bcf
  $fOrdDerivableClass_$cmax ::
    DerivingsChecker.DerivableClass
    -> DerivingsChecker.DerivableClass
    -> DerivingsChecker.DerivableClass
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: DerivingsChecker.DerivableClass)
                   (y :: DerivingsChecker.DerivableClass) ->
                 case x of x1 { DEFAULT ->
                 case y of x2 { DEFAULT ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.<=#
                           (GHC.Prim.dataToTag# @ DerivingsChecker.DerivableClass x1)
                           (GHC.Prim.dataToTag#
                              @ DerivingsChecker.DerivableClass
                              x2)) of wild {
                   GHC.Types.False -> x1 GHC.Types.True -> x2 } } }) -}
022f1fbcf4a5103d33816fe9ef107bcf
  $fOrdDerivableClass_$cmin ::
    DerivingsChecker.DerivableClass
    -> DerivingsChecker.DerivableClass
    -> DerivingsChecker.DerivableClass
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: DerivingsChecker.DerivableClass)
                   (y :: DerivingsChecker.DerivableClass) ->
                 case x of x1 { DEFAULT ->
                 case y of x2 { DEFAULT ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.<=#
                           (GHC.Prim.dataToTag# @ DerivingsChecker.DerivableClass x1)
                           (GHC.Prim.dataToTag#
                              @ DerivingsChecker.DerivableClass
                              x2)) of wild {
                   GHC.Types.False -> x2 GHC.Types.True -> x1 } } }) -}
022f1fbcf4a5103d33816fe9ef107bcf
  $fReadDerivableClass ::
    GHC.Read.Read DerivingsChecker.DerivableClass
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ DerivingsChecker.DerivableClass
                  DerivingsChecker.$fReadDerivableClass_$creadsPrec
                  DerivingsChecker.$fReadDerivableClass_$creadList
                  DerivingsChecker.$fReadDerivableClass_$creadPrec
                  DerivingsChecker.$fReadDerivableClass_$creadListPrec -}
022f1fbcf4a5103d33816fe9ef107bcf
  $fReadDerivableClass1 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       ([DerivingsChecker.DerivableClass]
        -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (eta :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta1 :: [DerivingsChecker.DerivableClass]
                            -> Text.ParserCombinators.ReadP.P b) ->
                 GHC.Read.list1
                   @ DerivingsChecker.DerivableClass
                   DerivingsChecker.$fReadDerivableClass2
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                             <DerivingsChecker.DerivableClass>_R))
                   eta
                   @ b
                   eta1) -}
022f1fbcf4a5103d33816fe9ef107bcf
  $fReadDerivableClass10 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec
        DerivingsChecker.DerivableClass)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec
                        DerivingsChecker.DerivableClass)
                   DerivingsChecker.$fReadDerivableClass35
                   DerivingsChecker.$fReadDerivableClass11) -}
022f1fbcf4a5103d33816fe9ef107bcf
  $fReadDerivableClass11 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec
        DerivingsChecker.DerivableClass)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec
                        DerivingsChecker.DerivableClass)
                   DerivingsChecker.$fReadDerivableClass32
                   DerivingsChecker.$fReadDerivableClass12) -}
022f1fbcf4a5103d33816fe9ef107bcf
  $fReadDerivableClass12 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec
        DerivingsChecker.DerivableClass)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec
                        DerivingsChecker.DerivableClass)
                   DerivingsChecker.$fReadDerivableClass29
                   DerivingsChecker.$fReadDerivableClass13) -}
022f1fbcf4a5103d33816fe9ef107bcf
  $fReadDerivableClass13 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec
        DerivingsChecker.DerivableClass)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec
                        DerivingsChecker.DerivableClass)
                   DerivingsChecker.$fReadDerivableClass26
                   DerivingsChecker.$fReadDerivableClass14) -}
022f1fbcf4a5103d33816fe9ef107bcf
  $fReadDerivableClass14 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec
        DerivingsChecker.DerivableClass)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec
                        DerivingsChecker.DerivableClass)
                   DerivingsChecker.$fReadDerivableClass23
                   DerivingsChecker.$fReadDerivableClass15) -}
022f1fbcf4a5103d33816fe9ef107bcf
  $fReadDerivableClass15 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec
        DerivingsChecker.DerivableClass)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec
                        DerivingsChecker.DerivableClass)
                   DerivingsChecker.$fReadDerivableClass20
                   DerivingsChecker.$fReadDerivableClass16) -}
022f1fbcf4a5103d33816fe9ef107bcf
  $fReadDerivableClass16 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec
        DerivingsChecker.DerivableClass)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec
                        DerivingsChecker.DerivableClass)
                   DerivingsChecker.$fReadDerivableClass17
                   (GHC.Types.[]
                      @ (GHC.Base.String,
                         Text.ParserCombinators.ReadPrec.ReadPrec
                           DerivingsChecker.DerivableClass))) -}
022f1fbcf4a5103d33816fe9ef107bcf
  $fReadDerivableClass17 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec
       DerivingsChecker.DerivableClass)
  {- Strictness: m,
     Unfolding: ((DerivingsChecker.$fReadDerivableClass19,
                  DerivingsChecker.$fReadDerivableClass18
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                      <DerivingsChecker.DerivableClass>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                 <DerivingsChecker.DerivableClass>_R))))) -}
022f1fbcf4a5103d33816fe9ef107bcf
  $fReadDerivableClass18 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (DerivingsChecker.DerivableClass
        -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (ds :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta :: DerivingsChecker.DerivableClass
                           -> Text.ParserCombinators.ReadP.P b) ->
                 eta DerivingsChecker.ClsTraversable) -}
5f20da250d6cadfbf989a7a708b4edc6
  $fReadDerivableClass19 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "ClsTraversable"#) -}
022f1fbcf4a5103d33816fe9ef107bcf
  $fReadDerivableClass2 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> Text.ParserCombinators.ReadP.ReadP
         DerivingsChecker.DerivableClass
  {- Arity: 1,
     Unfolding: (GHC.Read.parens1
                   @ DerivingsChecker.DerivableClass
                   DerivingsChecker.$fReadDerivableClass3
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                             <DerivingsChecker.DerivableClass>_R))) -}
022f1fbcf4a5103d33816fe9ef107bcf
  $fReadDerivableClass20 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec
       DerivingsChecker.DerivableClass)
  {- Strictness: m,
     Unfolding: ((DerivingsChecker.$fReadDerivableClass22,
                  DerivingsChecker.$fReadDerivableClass21
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                      <DerivingsChecker.DerivableClass>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                 <DerivingsChecker.DerivableClass>_R))))) -}
022f1fbcf4a5103d33816fe9ef107bcf
  $fReadDerivableClass21 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (DerivingsChecker.DerivableClass
        -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (ds :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta :: DerivingsChecker.DerivableClass
                           -> Text.ParserCombinators.ReadP.P b) ->
                 eta DerivingsChecker.ClsFoldable) -}
780c4e4238d5d37624689fda7228f4e5
  $fReadDerivableClass22 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "ClsFoldable"#) -}
022f1fbcf4a5103d33816fe9ef107bcf
  $fReadDerivableClass23 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec
       DerivingsChecker.DerivableClass)
  {- Strictness: m,
     Unfolding: ((DerivingsChecker.$fReadDerivableClass25,
                  DerivingsChecker.$fReadDerivableClass24
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                      <DerivingsChecker.DerivableClass>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                 <DerivingsChecker.DerivableClass>_R))))) -}
022f1fbcf4a5103d33816fe9ef107bcf
  $fReadDerivableClass24 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (DerivingsChecker.DerivableClass
        -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (ds :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta :: DerivingsChecker.DerivableClass
                           -> Text.ParserCombinators.ReadP.P b) ->
                 eta DerivingsChecker.ClsFunctor) -}
de3a1abc4724e6e0980eea2d0080f147
  $fReadDerivableClass25 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "ClsFunctor"#) -}
022f1fbcf4a5103d33816fe9ef107bcf
  $fReadDerivableClass26 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec
       DerivingsChecker.DerivableClass)
  {- Strictness: m,
     Unfolding: ((DerivingsChecker.$fReadDerivableClass28,
                  DerivingsChecker.$fReadDerivableClass27
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                      <DerivingsChecker.DerivableClass>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                 <DerivingsChecker.DerivableClass>_R))))) -}
022f1fbcf4a5103d33816fe9ef107bcf
  $fReadDerivableClass27 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (DerivingsChecker.DerivableClass
        -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (ds :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta :: DerivingsChecker.DerivableClass
                           -> Text.ParserCombinators.ReadP.P b) ->
                 eta DerivingsChecker.ClsGeneric) -}
9594764140917fa7a8463409df6b5668
  $fReadDerivableClass28 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "ClsGeneric"#) -}
022f1fbcf4a5103d33816fe9ef107bcf
  $fReadDerivableClass29 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec
       DerivingsChecker.DerivableClass)
  {- Strictness: m,
     Unfolding: ((DerivingsChecker.$fReadDerivableClass31,
                  DerivingsChecker.$fReadDerivableClass30
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                      <DerivingsChecker.DerivableClass>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                 <DerivingsChecker.DerivableClass>_R))))) -}
022f1fbcf4a5103d33816fe9ef107bcf
  $fReadDerivableClass3 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> Text.ParserCombinators.ReadP.ReadP
         DerivingsChecker.DerivableClass
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (eta :: Text.ParserCombinators.ReadPrec.Prec) ->
                 GHC.Read.choose2
                   @ DerivingsChecker.DerivableClass
                   DerivingsChecker.$fReadDerivableClass4
                   eta) -}
022f1fbcf4a5103d33816fe9ef107bcf
  $fReadDerivableClass30 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (DerivingsChecker.DerivableClass
        -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (ds :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta :: DerivingsChecker.DerivableClass
                           -> Text.ParserCombinators.ReadP.P b) ->
                 eta DerivingsChecker.ClsTypeable) -}
95703283bd537cd24941348a7ab7ab6c
  $fReadDerivableClass31 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "ClsTypeable"#) -}
022f1fbcf4a5103d33816fe9ef107bcf
  $fReadDerivableClass32 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec
       DerivingsChecker.DerivableClass)
  {- Strictness: m,
     Unfolding: ((DerivingsChecker.$fReadDerivableClass34,
                  DerivingsChecker.$fReadDerivableClass33
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                      <DerivingsChecker.DerivableClass>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                 <DerivingsChecker.DerivableClass>_R))))) -}
022f1fbcf4a5103d33816fe9ef107bcf
  $fReadDerivableClass33 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (DerivingsChecker.DerivableClass
        -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (ds :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta :: DerivingsChecker.DerivableClass
                           -> Text.ParserCombinators.ReadP.P b) ->
                 eta DerivingsChecker.ClsData) -}
55633fcc3766f99290c91ef79a89413b
  $fReadDerivableClass34 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "ClsData"#) -}
022f1fbcf4a5103d33816fe9ef107bcf
  $fReadDerivableClass35 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec
       DerivingsChecker.DerivableClass)
  {- Strictness: m,
     Unfolding: ((DerivingsChecker.$fReadDerivableClass37,
                  DerivingsChecker.$fReadDerivableClass36
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                      <DerivingsChecker.DerivableClass>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                 <DerivingsChecker.DerivableClass>_R))))) -}
022f1fbcf4a5103d33816fe9ef107bcf
  $fReadDerivableClass36 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (DerivingsChecker.DerivableClass
        -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (ds :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta :: DerivingsChecker.DerivableClass
                           -> Text.ParserCombinators.ReadP.P b) ->
                 eta DerivingsChecker.ClsBounded) -}
b0fffd592d5863861be4d679995f9865
  $fReadDerivableClass37 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "ClsBounded"#) -}
022f1fbcf4a5103d33816fe9ef107bcf
  $fReadDerivableClass38 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec
       DerivingsChecker.DerivableClass)
  {- Strictness: m,
     Unfolding: ((DerivingsChecker.$fReadDerivableClass40,
                  DerivingsChecker.$fReadDerivableClass39
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                      <DerivingsChecker.DerivableClass>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                 <DerivingsChecker.DerivableClass>_R))))) -}
022f1fbcf4a5103d33816fe9ef107bcf
  $fReadDerivableClass39 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (DerivingsChecker.DerivableClass
        -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (ds :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta :: DerivingsChecker.DerivableClass
                           -> Text.ParserCombinators.ReadP.P b) ->
                 eta DerivingsChecker.ClsEnum) -}
022f1fbcf4a5103d33816fe9ef107bcf
  $fReadDerivableClass4 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec
        DerivingsChecker.DerivableClass)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec
                        DerivingsChecker.DerivableClass)
                   DerivingsChecker.$fReadDerivableClass53
                   DerivingsChecker.$fReadDerivableClass5) -}
f9ce1bca4519a53c1aa6a70a3fcd0dcf
  $fReadDerivableClass40 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "ClsEnum"#) -}
022f1fbcf4a5103d33816fe9ef107bcf
  $fReadDerivableClass41 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec
       DerivingsChecker.DerivableClass)
  {- Strictness: m,
     Unfolding: ((DerivingsChecker.$fReadDerivableClass43,
                  DerivingsChecker.$fReadDerivableClass42
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                      <DerivingsChecker.DerivableClass>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                 <DerivingsChecker.DerivableClass>_R))))) -}
022f1fbcf4a5103d33816fe9ef107bcf
  $fReadDerivableClass42 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (DerivingsChecker.DerivableClass
        -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (ds :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta :: DerivingsChecker.DerivableClass
                           -> Text.ParserCombinators.ReadP.P b) ->
                 eta DerivingsChecker.ClsRead) -}
dab7389d9ff79021e0e697685aeb9bfc
  $fReadDerivableClass43 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "ClsRead"#) -}
022f1fbcf4a5103d33816fe9ef107bcf
  $fReadDerivableClass44 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec
       DerivingsChecker.DerivableClass)
  {- Strictness: m,
     Unfolding: ((DerivingsChecker.$fReadDerivableClass46,
                  DerivingsChecker.$fReadDerivableClass45
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                      <DerivingsChecker.DerivableClass>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                 <DerivingsChecker.DerivableClass>_R))))) -}
022f1fbcf4a5103d33816fe9ef107bcf
  $fReadDerivableClass45 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (DerivingsChecker.DerivableClass
        -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (ds :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta :: DerivingsChecker.DerivableClass
                           -> Text.ParserCombinators.ReadP.P b) ->
                 eta DerivingsChecker.ClsShow) -}
722d7245eadbc84166657d52b19a83ad
  $fReadDerivableClass46 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "ClsShow"#) -}
022f1fbcf4a5103d33816fe9ef107bcf
  $fReadDerivableClass47 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec
       DerivingsChecker.DerivableClass)
  {- Strictness: m,
     Unfolding: ((DerivingsChecker.$fReadDerivableClass49,
                  DerivingsChecker.$fReadDerivableClass48
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                      <DerivingsChecker.DerivableClass>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                 <DerivingsChecker.DerivableClass>_R))))) -}
022f1fbcf4a5103d33816fe9ef107bcf
  $fReadDerivableClass48 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (DerivingsChecker.DerivableClass
        -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (ds :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta :: DerivingsChecker.DerivableClass
                           -> Text.ParserCombinators.ReadP.P b) ->
                 eta DerivingsChecker.ClsIx) -}
1f28c1d50580fbc29e258228ecfc779f
  $fReadDerivableClass49 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "ClsIx"#) -}
022f1fbcf4a5103d33816fe9ef107bcf
  $fReadDerivableClass5 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec
        DerivingsChecker.DerivableClass)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec
                        DerivingsChecker.DerivableClass)
                   DerivingsChecker.$fReadDerivableClass50
                   DerivingsChecker.$fReadDerivableClass6) -}
022f1fbcf4a5103d33816fe9ef107bcf
  $fReadDerivableClass50 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec
       DerivingsChecker.DerivableClass)
  {- Strictness: m,
     Unfolding: ((DerivingsChecker.$fReadDerivableClass52,
                  DerivingsChecker.$fReadDerivableClass51
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                      <DerivingsChecker.DerivableClass>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                 <DerivingsChecker.DerivableClass>_R))))) -}
022f1fbcf4a5103d33816fe9ef107bcf
  $fReadDerivableClass51 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (DerivingsChecker.DerivableClass
        -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (ds :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta :: DerivingsChecker.DerivableClass
                           -> Text.ParserCombinators.ReadP.P b) ->
                 eta DerivingsChecker.ClsOrd) -}
9fc0dfe14df373ac54cff85cd40cc09d
  $fReadDerivableClass52 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "ClsOrd"#) -}
022f1fbcf4a5103d33816fe9ef107bcf
  $fReadDerivableClass53 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec
       DerivingsChecker.DerivableClass)
  {- Strictness: m,
     Unfolding: ((DerivingsChecker.$fReadDerivableClass55,
                  DerivingsChecker.$fReadDerivableClass54
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                      <DerivingsChecker.DerivableClass>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                 <DerivingsChecker.DerivableClass>_R))))) -}
022f1fbcf4a5103d33816fe9ef107bcf
  $fReadDerivableClass54 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (DerivingsChecker.DerivableClass
        -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (ds :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta :: DerivingsChecker.DerivableClass
                           -> Text.ParserCombinators.ReadP.P b) ->
                 eta DerivingsChecker.ClsEq) -}
425f394b4a7d8cfad8674b5bd9cf8d3a
  $fReadDerivableClass55 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "ClsEq"#) -}
022f1fbcf4a5103d33816fe9ef107bcf
  $fReadDerivableClass56 ::
    Text.ParserCombinators.ReadP.P [DerivingsChecker.DerivableClass]
  {- Unfolding: (GHC.Read.list1
                   @ DerivingsChecker.DerivableClass
                   DerivingsChecker.$fReadDerivableClass2
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                             <DerivingsChecker.DerivableClass>_R))
                   GHC.Read.$fRead()5
                   @ [DerivingsChecker.DerivableClass]
                   (Text.ParserCombinators.ReadP.$fApplicativeP_$cpure
                      @ [DerivingsChecker.DerivableClass])) -}
022f1fbcf4a5103d33816fe9ef107bcf
  $fReadDerivableClass6 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec
        DerivingsChecker.DerivableClass)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec
                        DerivingsChecker.DerivableClass)
                   DerivingsChecker.$fReadDerivableClass47
                   DerivingsChecker.$fReadDerivableClass7) -}
022f1fbcf4a5103d33816fe9ef107bcf
  $fReadDerivableClass7 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec
        DerivingsChecker.DerivableClass)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec
                        DerivingsChecker.DerivableClass)
                   DerivingsChecker.$fReadDerivableClass44
                   DerivingsChecker.$fReadDerivableClass8) -}
022f1fbcf4a5103d33816fe9ef107bcf
  $fReadDerivableClass8 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec
        DerivingsChecker.DerivableClass)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec
                        DerivingsChecker.DerivableClass)
                   DerivingsChecker.$fReadDerivableClass41
                   DerivingsChecker.$fReadDerivableClass9) -}
022f1fbcf4a5103d33816fe9ef107bcf
  $fReadDerivableClass9 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec
        DerivingsChecker.DerivableClass)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec
                        DerivingsChecker.DerivableClass)
                   DerivingsChecker.$fReadDerivableClass38
                   DerivingsChecker.$fReadDerivableClass10) -}
022f1fbcf4a5103d33816fe9ef107bcf
  $fReadDerivableClass_$creadList ::
    Text.ParserCombinators.ReadP.ReadS
      [DerivingsChecker.DerivableClass]
  {- Arity: 1,
     Unfolding: (Text.ParserCombinators.ReadP.run
                   @ [DerivingsChecker.DerivableClass]
                   DerivingsChecker.$fReadDerivableClass56) -}
022f1fbcf4a5103d33816fe9ef107bcf
  $fReadDerivableClass_$creadListPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec
      [DerivingsChecker.DerivableClass]
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (0, True, True)
                DerivingsChecker.$fReadDerivableClass1
                  `cast`
                (Trans
                     (<Text.ParserCombinators.ReadPrec.Prec>_R
                      ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                    <[DerivingsChecker.DerivableClass]>_R))
                     (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                               <[DerivingsChecker.DerivableClass]>_R))) -}
022f1fbcf4a5103d33816fe9ef107bcf
  $fReadDerivableClass_$creadPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec
      DerivingsChecker.DerivableClass
  {- Arity: 1,
     Unfolding: InlineRule (0, True, True)
                DerivingsChecker.$fReadDerivableClass2
                  `cast`
                (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                          <DerivingsChecker.DerivableClass>_R)) -}
022f1fbcf4a5103d33816fe9ef107bcf
  $fReadDerivableClass_$creadsPrec ::
    GHC.Types.Int
    -> Text.ParserCombinators.ReadP.ReadS
         DerivingsChecker.DerivableClass
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (eta :: GHC.Types.Int) ->
                 Text.ParserCombinators.ReadP.run
                   @ DerivingsChecker.DerivableClass
                   ((GHC.Read.parens1
                       @ DerivingsChecker.DerivableClass
                       DerivingsChecker.$fReadDerivableClass3
                         `cast`
                       (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                 <DerivingsChecker.DerivableClass>_R))
                       eta)
                      `cast`
                    (Text.ParserCombinators.ReadP.N:ReadP[0]
                         <DerivingsChecker.DerivableClass>_R)
                      @ DerivingsChecker.DerivableClass
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$cpure
                         @ DerivingsChecker.DerivableClass))) -}
022f1fbcf4a5103d33816fe9ef107bcf
  $fShowDerivableClass ::
    GHC.Show.Show DerivingsChecker.DerivableClass
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ DerivingsChecker.DerivableClass
                  DerivingsChecker.$fShowDerivableClass_$cshowsPrec
                  DerivingsChecker.$fShowDerivableClass_$cshow
                  DerivingsChecker.$fShowDerivableClass_$cshowList -}
022f1fbcf4a5103d33816fe9ef107bcf
  $fShowDerivableClass_$cshow ::
    DerivingsChecker.DerivableClass -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: DerivingsChecker.DerivableClass) ->
                 DerivingsChecker.$fShowDerivableClass_$cshowsPrec
                   GHC.Show.shows22
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
022f1fbcf4a5103d33816fe9ef107bcf
  $fShowDerivableClass_$cshowList ::
    [DerivingsChecker.DerivableClass] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ DerivingsChecker.DerivableClass
                   DerivingsChecker.$w$cshowsPrec) -}
022f1fbcf4a5103d33816fe9ef107bcf
  $fShowDerivableClass_$cshowsPrec ::
    GHC.Types.Int -> DerivingsChecker.DerivableClass -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,A><S,1*U><L,1*U>, Inline: INLINE[0],
     Unfolding: InlineRule (3, True, True)
                (\ (w :: GHC.Types.Int)
                   (w1 :: DerivingsChecker.DerivableClass)
                   (w2 :: GHC.Base.String) ->
                 DerivingsChecker.$w$cshowsPrec w1 w2) -}
b52ce12750959fbf77311a412945576b
  $s$fApplicativeReaderT ::
    GHC.Base.Applicative
      (Control.Monad.Trans.Reader.ReaderT
         r
         (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc))
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ r.
                  @ (Control.Monad.Trans.Reader.ReaderT
                       r
                       (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc))
                  (Control.Monad.Trans.Reader.$fApplicativeReaderT_$cp1Applicative
                     @ (Control.Monad.Trans.State.Lazy.StateT
                          ExtMap.ExtMap GhcMonad.Ghc)
                     @ r
                     DerivingsChecker.$s$fApplicativeReaderT1)
                  (\ @ a (eta :: a) ->
                   let {
                     m1 :: Control.Monad.Trans.State.Lazy.StateT
                             ExtMap.ExtMap GhcMonad.Ghc a
                     = GHC.Base.$
                         @ 'GHC.Types.PtrRepLifted
                         @ (Data.Map.Base.Map
                              (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                              [SrcLoc.SrcSpan]
                            -> GhcMonad.Ghc
                                 (a,
                                  Data.Map.Base.Map
                                    (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                                    [SrcLoc.SrcSpan]))
                         @ (Control.Monad.Trans.State.Lazy.StateT
                              (Data.Map.Base.Map
                                 (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                                 [SrcLoc.SrcSpan])
                              GhcMonad.Ghc
                              a)
                         (\ (tpl :: Data.Map.Base.Map
                                      (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                                      [SrcLoc.SrcSpan]
                                    -> GhcMonad.Ghc
                                         (a,
                                          Data.Map.Base.Map
                                            (ExtMap.LogicalRelation
                                               GHC.LanguageExtensions.Type.Extension)
                                            [SrcLoc.SrcSpan])) ->
                          tpl)
                           `cast`
                         (<Data.Map.Base.Map
                             (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                             [SrcLoc.SrcSpan]
                           -> GhcMonad.Ghc
                                (a,
                                 Data.Map.Base.Map
                                   (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                                   [SrcLoc.SrcSpan])>_R
                          ->_R Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                        <Data.Map.Base.Map
                                           (ExtMap.LogicalRelation
                                              GHC.LanguageExtensions.Type.Extension)
                                           [SrcLoc.SrcSpan]>_N
                                        <GhcMonad.Ghc>_R
                                        <a>_N))
                         (\ (s1 :: Data.Map.Base.Map
                                     (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                                     [SrcLoc.SrcSpan])
                            (eta1 :: GhcMonad.Session)
                            (eta2 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                          ((GhcMonad.$fApplicativeGhc_$cpure
                              @ (a,
                                 Data.Map.Base.Map
                                   (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                                   [SrcLoc.SrcSpan])
                              (eta, s1))
                             `cast`
                           (GhcMonad.N:Ghc[0]
                                <(a,
                                  Data.Map.Base.Map
                                    (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                                    [SrcLoc.SrcSpan])>_R)
                             eta1)
                            `cast`
                          (GHC.Types.N:IO[0]
                               <(a,
                                 Data.Map.Base.Map
                                   (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                                   [SrcLoc.SrcSpan])>_R)
                            eta2)
                           `cast`
                         (<Data.Map.Base.Map
                             (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                             [SrcLoc.SrcSpan]>_R
                          ->_R Trans
                                   (<GhcMonad.Session>_R
                                    ->_R Sym (GHC.Types.N:IO[0]
                                                  <(a,
                                                    Data.Map.Base.Map
                                                      (ExtMap.LogicalRelation
                                                         GHC.LanguageExtensions.Type.Extension)
                                                      [SrcLoc.SrcSpan])>_R))
                                   (Sym (GhcMonad.N:Ghc[0]
                                             <(a,
                                               Data.Map.Base.Map
                                                 (ExtMap.LogicalRelation
                                                    GHC.LanguageExtensions.Type.Extension)
                                                 [SrcLoc.SrcSpan])>_R)))
                   } in
                   (\ (eta1 :: r) ->
                    GHC.Base.const
                      @ (Control.Monad.Trans.State.Lazy.StateT
                           ExtMap.ExtMap GhcMonad.Ghc a)
                      @ r
                      m1
                      eta1)
                     `cast`
                   (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                             <*>_N
                             <r>_R
                             <Control.Monad.Trans.State.Lazy.StateT
                                ExtMap.ExtMap GhcMonad.Ghc>_R
                             <a>_N)))
                  (Control.Monad.Trans.Reader.$fApplicativeReaderT_$c<*>
                     @ (Control.Monad.Trans.State.Lazy.StateT
                          ExtMap.ExtMap GhcMonad.Ghc)
                     @ r
                     DerivingsChecker.$s$fApplicativeReaderT1)
                  (Control.Monad.Trans.Reader.$fApplicativeReaderT_$c*>
                     @ (Control.Monad.Trans.State.Lazy.StateT
                          ExtMap.ExtMap GhcMonad.Ghc)
                     @ r
                     DerivingsChecker.$s$fApplicativeReaderT1)
                  (Control.Monad.Trans.Reader.$fApplicativeReaderT_$c<*
                     @ (Control.Monad.Trans.State.Lazy.StateT
                          ExtMap.ExtMap GhcMonad.Ghc)
                     @ r
                     DerivingsChecker.$s$fApplicativeReaderT1) -}
ef98f6f5ac43c9f1a945d271ef184683
  $s$fApplicativeReaderT1 ::
    GHC.Base.Applicative
      (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc)
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                (DerivingsChecker.$s$fApplicativeReaderT_$s$fApplicativeStateT
                   @ (Data.Map.Base.Map
                        (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                        [SrcLoc.SrcSpan])) -}
b2fcc7880851471457cbd895a6ab3c84
  $s$fApplicativeReaderT_$s$fApplicativeStateT ::
    GHC.Base.Applicative
      (Control.Monad.Trans.State.Lazy.StateT s GhcMonad.Ghc)
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ s.
                  @ (Control.Monad.Trans.State.Lazy.StateT s GhcMonad.Ghc)
                  (DerivingsChecker.$s$fApplicativeReaderT_$s$fApplicativeStateT_$cp1Applicative
                     @ s)
                  (DerivingsChecker.$s$fApplicativeReaderT_$s$fApplicativeStateT_$cpure
                     @ s)
                  (DerivingsChecker.$s$fApplicativeReaderT_$s$fApplicativeStateT_$c<*>
                     @ s)
                  (Control.Monad.Trans.State.Lazy.$fApplicativeStateT_$c*>
                     @ GhcMonad.Ghc
                     @ s
                     GhcMonad.$fFunctorGhc
                     GhcMonad.$fMonadGhc)
                  (Control.Monad.Trans.State.Lazy.$fApplicativeStateT_$c<*
                     @ GhcMonad.Ghc
                     @ s
                     GhcMonad.$fFunctorGhc
                     GhcMonad.$fMonadGhc) -}
119608d5ee025616a5b8ed319ba6dbe6
  $s$fApplicativeReaderT_$s$fApplicativeStateT_$c<*> ::
    Control.Monad.Trans.State.Lazy.StateT s GhcMonad.Ghc (a -> b)
    -> Control.Monad.Trans.State.Lazy.StateT s GhcMonad.Ghc a
    -> Control.Monad.Trans.State.Lazy.StateT s GhcMonad.Ghc b
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*C1(U)><L,C(C1(C1(U(U,U(1*U,1*U)))))><L,U>,
     Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ @ s
                   @ a
                   @ b
                   (ds :: Control.Monad.Trans.State.Lazy.StateT
                            s GhcMonad.Ghc (a -> b))
                   (ds1 :: Control.Monad.Trans.State.Lazy.StateT s GhcMonad.Ghc a) ->
                 GHC.Base.$
                   @ 'GHC.Types.PtrRepLifted
                   @ (s -> GhcMonad.Ghc (b, s))
                   @ (Control.Monad.Trans.State.Lazy.StateT s GhcMonad.Ghc b)
                   (\ (tpl :: s -> GhcMonad.Ghc (b, s)) -> tpl)
                     `cast`
                   (<s -> GhcMonad.Ghc (b, s)>_R
                    ->_R Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                  <s>_N <GhcMonad.Ghc>_R <b>_N))
                   (\ (s1 :: s) ->
                    GhcMonad.$fMonadGhc_$c>>=
                      @ (a -> b, s)
                      @ (b, s)
                      (ds
                         `cast`
                       (Control.Monad.Trans.State.Lazy.N:StateT[0]
                            <s>_N <GhcMonad.Ghc>_R <a -> b>_N)
                         s1)
                      (\ (ds2 :: (a -> b, s)) ->
                       GhcMonad.$fMonadGhc_$c>>=
                         @ (a, s)
                         @ (b, s)
                         (ds1
                            `cast`
                          (Control.Monad.Trans.State.Lazy.N:StateT[0]
                               <s>_N <GhcMonad.Ghc>_R <a>_N)
                            (case ds2 of wild { (,) f s' -> s' }))
                         (\ (ds3 :: (a, s)) ->
                          GhcMonad.$fApplicativeGhc_$cpure
                            @ (b, s)
                            (case ds2 of wild { (,) f s' ->
                             f (case ds3 of wild1 { (,) x s'' -> x }) },
                             case ds3 of wild { (,) x s'' -> s'' }))))) -}
82350831a114ccd0e0489e1ebd1d9142
  $s$fApplicativeReaderT_$s$fApplicativeStateT_$cp1Applicative ::
    GHC.Base.Functor
      (Control.Monad.Trans.State.Lazy.StateT s GhcMonad.Ghc)
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                DerivingsChecker.$s$fApplicativeReaderT_$s$fFunctorStateT -}
b2d380a1dd36ab81196b24047f26990b
  $s$fApplicativeReaderT_$s$fApplicativeStateT_$cpure ::
    a -> Control.Monad.Trans.State.Lazy.StateT s GhcMonad.Ghc a
  {- Arity: 4, HasNoCafRefs, Strictness: <L,U><L,U><L,A><S,U>,
     Inline: INLINE (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ @ s @ a (a1 :: a) ->
                 GHC.Base.$
                   @ 'GHC.Types.PtrRepLifted
                   @ (s -> GhcMonad.Ghc (a, s))
                   @ (Control.Monad.Trans.State.Lazy.StateT s GhcMonad.Ghc a)
                   (\ (tpl :: s -> GhcMonad.Ghc (a, s)) -> tpl)
                     `cast`
                   (<s -> GhcMonad.Ghc (a, s)>_R
                    ->_R Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                  <s>_N <GhcMonad.Ghc>_R <a>_N))
                   (\ (s1 :: s)
                      (eta :: GhcMonad.Session)
                      (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                    ((GhcMonad.$fApplicativeGhc_$cpure @ (a, s) (a1, s1))
                       `cast`
                     (GhcMonad.N:Ghc[0] <(a, s)>_R)
                       eta)
                      `cast`
                    (GHC.Types.N:IO[0] <(a, s)>_R)
                      eta1)
                     `cast`
                   (<s>_R
                    ->_R Trans
                             (<GhcMonad.Session>_R ->_R Sym (GHC.Types.N:IO[0] <(a, s)>_R))
                             (Sym (GhcMonad.N:Ghc[0] <(a, s)>_R)))) -}
bc870387b9e8fcebb1f2680efc110ccb
  $s$fApplicativeReaderT_$s$fFunctorStateT ::
    GHC.Base.Functor
      (Control.Monad.Trans.State.Lazy.StateT s GhcMonad.Ghc)
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ s.
                  @ (Control.Monad.Trans.State.Lazy.StateT s GhcMonad.Ghc)
                  (DerivingsChecker.$s$fApplicativeReaderT_$s$fFunctorStateT_$cfmap
                     @ s)
                  (Control.Monad.Trans.State.Lazy.$fFunctorStateT_$c<$
                     @ GhcMonad.Ghc
                     @ s
                     GhcMonad.$fFunctorGhc) -}
c1c9cc6491862c5730397069a4f7e9fc
  $s$fApplicativeReaderT_$s$fFunctorStateT_$cfmap ::
    (a -> b)
    -> Control.Monad.Trans.State.Lazy.StateT s GhcMonad.Ghc a
    -> Control.Monad.Trans.State.Lazy.StateT s GhcMonad.Ghc b
  {- Arity: 3, HasNoCafRefs, Strictness: <L,C(U)><L,1*C1(U)><L,U>,
     Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ @ s
                   @ a
                   @ b
                   (f :: a -> b)
                   (m1 :: Control.Monad.Trans.State.Lazy.StateT s GhcMonad.Ghc a) ->
                 GHC.Base.$
                   @ 'GHC.Types.PtrRepLifted
                   @ (s -> GhcMonad.Ghc (b, s))
                   @ (Control.Monad.Trans.State.Lazy.StateT s GhcMonad.Ghc b)
                   (\ (tpl :: s -> GhcMonad.Ghc (b, s)) -> tpl)
                     `cast`
                   (<s -> GhcMonad.Ghc (b, s)>_R
                    ->_R Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                  <s>_N <GhcMonad.Ghc>_R <b>_N))
                   (\ (s1 :: s) ->
                    GHC.Base.$
                      @ 'GHC.Types.PtrRepLifted
                      @ (GhcMonad.Ghc (a, s))
                      @ (GhcMonad.Ghc (b, s))
                      (GhcMonad.$fFunctorGhc_$cfmap
                         @ (a, s)
                         @ (b, s)
                         (\ (ds :: (a, s)) ->
                          (f (case ds of wild { (,) a1 s' -> a1 }),
                           case ds of wild { (,) a1 s' -> s' })))
                      (Control.Monad.Trans.State.Lazy.runStateT
                         @ s
                         @ GhcMonad.Ghc
                         @ a
                         m1
                         s1))) -}
0144a8d6ff6340788b4ad4be8b23ff6f
  $s$fExceptionMonadStateT ::
    Exception.ExceptionMonad
      (Control.Monad.Trans.State.Lazy.StateT s GhcMonad.Ghc)
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ s.
                  @ (Control.Monad.Trans.State.Lazy.StateT s GhcMonad.Ghc)
                  (Language.Haskell.Tools.Refactor.RefactorBase.$fExceptionMonadStateT_$cp1ExceptionMonad
                     @ GhcMonad.Ghc
                     @ s
                     DerivingsChecker.$s$fExceptionMonadStateT_$dExceptionMonad)
                  (DerivingsChecker.$s$fExceptionMonadStateT_$s$fGhcMonadStateT_$cp2GhcMonad
                     @ s)
                  (Language.Haskell.Tools.Refactor.RefactorBase.$fExceptionMonadStateT_$cgcatch
                     @ GhcMonad.Ghc
                     @ s
                     DerivingsChecker.$s$fExceptionMonadStateT_$dExceptionMonad)
                  (Language.Haskell.Tools.Refactor.RefactorBase.$fExceptionMonadStateT_$cgmask
                     @ GhcMonad.Ghc
                     @ s
                     DerivingsChecker.$s$fExceptionMonadStateT_$dExceptionMonad)
                  (Language.Haskell.Tools.Refactor.RefactorBase.$fExceptionMonadStateT_$cgbracket
                     @ GhcMonad.Ghc
                     @ s
                     DerivingsChecker.$s$fExceptionMonadStateT_$dExceptionMonad)
                  (Language.Haskell.Tools.Refactor.RefactorBase.$fExceptionMonadStateT_$cgfinally
                     @ GhcMonad.Ghc
                     @ s
                     DerivingsChecker.$s$fExceptionMonadStateT_$dExceptionMonad) -}
1853333d938ee3d3476d08be2ab4c98d
  $s$fExceptionMonadStateT_$dExceptionMonad ::
    Exception.ExceptionMonad GhcMonad.Ghc
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                GhcMonad.$fExceptionMonadGhc -}
eedcbcd2df85324615503dbcee1d632f
  $s$fExceptionMonadStateT_$s$fGhcMonadStateT_$cp2GhcMonad ::
    Control.Monad.IO.Class.MonadIO
      (Control.Monad.Trans.State.Lazy.StateT s GhcMonad.Ghc)
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                DerivingsChecker.$s$fExceptionMonadStateT_$s$fMonadIOStateT -}
b6d8c2a111e729f7d6a1c4a554fec7f3
  $s$fExceptionMonadStateT_$s$fMonadIOStateT ::
    Control.Monad.IO.Class.MonadIO
      (Control.Monad.Trans.State.Lazy.StateT s GhcMonad.Ghc)
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ s.
                  @ (Control.Monad.Trans.State.Lazy.StateT s GhcMonad.Ghc)
                  (DerivingsChecker.$s$fExceptionMonadStateT_$s$fMonadIOStateT_$cp1MonadIO
                     @ s)
                  (\ @ a (eta :: GHC.Types.IO a) ->
                   let {
                     m1 :: GhcMonad.Ghc a {- Arity: 1 -}
                     = GhcMonad.$fMonadIOGhc_$cliftIO @ a eta
                   } in
                   GHC.Base.$
                     @ 'GHC.Types.PtrRepLifted
                     @ (s -> GhcMonad.Ghc (a, s))
                     @ (Control.Monad.Trans.State.Lazy.StateT s GhcMonad.Ghc a)
                     (\ (tpl :: s -> GhcMonad.Ghc (a, s)) -> tpl)
                       `cast`
                     (<s -> GhcMonad.Ghc (a, s)>_R
                      ->_R Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                    <s>_N <GhcMonad.Ghc>_R <a>_N))
                     (\ (s1 :: s)
                        (eta1 :: GhcMonad.Session)
                        (eta2 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                      ((GhcMonad.$fMonadGhc_$c>>=
                          @ a
                          @ (a, s)
                          m1
                          (\ (a1 :: a)
                             (eta3 :: GhcMonad.Session)
                             (eta4 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                           ((GhcMonad.$fApplicativeGhc_$cpure @ (a, s) (a1, s1))
                              `cast`
                            (GhcMonad.N:Ghc[0] <(a, s)>_R)
                              eta3)
                             `cast`
                           (GHC.Types.N:IO[0] <(a, s)>_R)
                             eta4)
                            `cast`
                          (<a>_R
                           ->_R Trans
                                    (<GhcMonad.Session>_R ->_R Sym (GHC.Types.N:IO[0] <(a, s)>_R))
                                    (Sym (GhcMonad.N:Ghc[0] <(a, s)>_R))))
                         `cast`
                       (GhcMonad.N:Ghc[0] <(a, s)>_R)
                         eta1)
                        `cast`
                      (GHC.Types.N:IO[0] <(a, s)>_R)
                        eta2)
                       `cast`
                     (<s>_R
                      ->_R Trans
                               (<GhcMonad.Session>_R ->_R Sym (GHC.Types.N:IO[0] <(a, s)>_R))
                               (Sym (GhcMonad.N:Ghc[0] <(a, s)>_R)))) -}
e70526f129ffdfe8c19b34fcc19df1bc
  $s$fExceptionMonadStateT_$s$fMonadIOStateT_$cp1MonadIO ::
    GHC.Base.Monad
      (Control.Monad.Trans.State.Lazy.StateT s GhcMonad.Ghc)
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                DerivingsChecker.$s$fExceptionMonadStateT_$s$fMonadStateT -}
0411efdc2ca421a94988605c1631bb41
  $s$fExceptionMonadStateT_$s$fMonadStateT ::
    GHC.Base.Monad
      (Control.Monad.Trans.State.Lazy.StateT s GhcMonad.Ghc)
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ s.
                  @ (Control.Monad.Trans.State.Lazy.StateT s GhcMonad.Ghc)
                  (DerivingsChecker.$s$fExceptionMonadStateT_$s$fMonadStateT_$cp1Monad
                     @ s)
                  (DerivingsChecker.$s$fExceptionMonadStateT_$s$fMonadStateT_$c>>=
                     @ s)
                  (DerivingsChecker.$s$fExceptionMonadStateT_$s$fMonadStateT_$c>>
                     @ s)
                  (Control.Monad.Trans.State.Lazy.$fMonadStateT_$creturn
                     @ GhcMonad.Ghc
                     @ s
                     GhcMonad.$fMonadGhc)
                  (DerivingsChecker.$s$fExceptionMonadStateT_$s$fMonadStateT_$cfail
                     @ s) -}
82f799f816e387f2561597e44a1e6086
  $s$fExceptionMonadStateT_$s$fMonadStateT_$c>> ::
    Control.Monad.Trans.State.Lazy.StateT s GhcMonad.Ghc a
    -> Control.Monad.Trans.State.Lazy.StateT s GhcMonad.Ghc b
    -> Control.Monad.Trans.State.Lazy.StateT s GhcMonad.Ghc b
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*C1(U)><L,C(C1(C1(U)))><L,U>,
     Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ @ s
                   @ a
                   @ b
                   (m1 :: Control.Monad.Trans.State.Lazy.StateT s GhcMonad.Ghc a)
                   (k :: Control.Monad.Trans.State.Lazy.StateT s GhcMonad.Ghc b) ->
                 GHC.Base.$
                   @ 'GHC.Types.PtrRepLifted
                   @ (s -> GhcMonad.Ghc (b, s))
                   @ (Control.Monad.Trans.State.Lazy.StateT s GhcMonad.Ghc b)
                   (\ (tpl :: s -> GhcMonad.Ghc (b, s)) -> tpl)
                     `cast`
                   (<s -> GhcMonad.Ghc (b, s)>_R
                    ->_R Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                  <s>_N <GhcMonad.Ghc>_R <b>_N))
                   (\ (s1 :: s) ->
                    GhcMonad.$fMonadGhc_$c>>=
                      @ (a, s)
                      @ (b, s)
                      (Control.Monad.Trans.State.Lazy.runStateT
                         @ s
                         @ GhcMonad.Ghc
                         @ a
                         m1
                         s1)
                      (\ (ds :: (a, s)) ->
                       Control.Monad.Trans.State.Lazy.runStateT
                         @ s
                         @ GhcMonad.Ghc
                         @ b
                         k
                         (case ds of wild { (,) a1 s' -> s' })))) -}
de889407060049d0ff98445317e53293
  $s$fExceptionMonadStateT_$s$fMonadStateT_$c>>= ::
    Control.Monad.Trans.State.Lazy.StateT s GhcMonad.Ghc a
    -> (a -> Control.Monad.Trans.State.Lazy.StateT s GhcMonad.Ghc b)
    -> Control.Monad.Trans.State.Lazy.StateT s GhcMonad.Ghc b
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*C1(U)><L,C(C1(C1(C1(U))))><L,U>,
     Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ @ s
                   @ a
                   @ b
                   (m1 :: Control.Monad.Trans.State.Lazy.StateT s GhcMonad.Ghc a)
                   (k :: a
                         -> Control.Monad.Trans.State.Lazy.StateT s GhcMonad.Ghc b) ->
                 GHC.Base.$
                   @ 'GHC.Types.PtrRepLifted
                   @ (s -> GhcMonad.Ghc (b, s))
                   @ (Control.Monad.Trans.State.Lazy.StateT s GhcMonad.Ghc b)
                   (\ (tpl :: s -> GhcMonad.Ghc (b, s)) -> tpl)
                     `cast`
                   (<s -> GhcMonad.Ghc (b, s)>_R
                    ->_R Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                  <s>_N <GhcMonad.Ghc>_R <b>_N))
                   (\ (s1 :: s) ->
                    GhcMonad.$fMonadGhc_$c>>=
                      @ (a, s)
                      @ (b, s)
                      (Control.Monad.Trans.State.Lazy.runStateT
                         @ s
                         @ GhcMonad.Ghc
                         @ a
                         m1
                         s1)
                      (\ (ds :: (a, s)) ->
                       Control.Monad.Trans.State.Lazy.runStateT
                         @ s
                         @ GhcMonad.Ghc
                         @ b
                         (k (case ds of wild { (,) a1 s' -> a1 }))
                         (case ds of wild { (,) a1 s' -> s' })))) -}
6b22344884b888236185a22c40f3a56d
  $s$fExceptionMonadStateT_$s$fMonadStateT_$cfail ::
    GHC.Base.String
    -> Control.Monad.Trans.State.Lazy.StateT s GhcMonad.Ghc a
  {- Arity: 2, Strictness: <B,U><B,A>x, Inline: INLINE (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ @ s @ a (str :: GHC.Base.String) ->
                 GHC.Base.$
                   @ 'GHC.Types.PtrRepLifted
                   @ (s -> GhcMonad.Ghc (a, s))
                   @ (Control.Monad.Trans.State.Lazy.StateT s GhcMonad.Ghc a)
                   (\ (tpl :: s -> GhcMonad.Ghc (a, s)) -> tpl)
                     `cast`
                   (<s -> GhcMonad.Ghc (a, s)>_R
                    ->_R Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                  <s>_N <GhcMonad.Ghc>_R <a>_N))
                   (\ (ds :: s) -> GhcMonad.$fMonadGhc_$s$dmfail @ (a, s) str)) -}
5734dd37e3621fc475fdc9421420f4d1
  $s$fExceptionMonadStateT_$s$fMonadStateT_$cp1Monad ::
    GHC.Base.Applicative
      (Control.Monad.Trans.State.Lazy.StateT s GhcMonad.Ghc)
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                DerivingsChecker.$s$fApplicativeReaderT_$s$fApplicativeStateT -}
515581f2d92e6b1c833d556d95093ecd
  $s$fFunctorReaderT ::
    GHC.Base.Functor
      (Control.Monad.Trans.Reader.ReaderT
         r
         (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc))
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ r.
                  @ (Control.Monad.Trans.Reader.ReaderT
                       r
                       (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc))
                  (Control.Monad.Trans.Reader.$fFunctorReaderT_$cfmap
                     @ (Control.Monad.Trans.State.Lazy.StateT
                          ExtMap.ExtMap GhcMonad.Ghc)
                     @ r
                     DerivingsChecker.$s$fFunctorReaderT1)
                  (Control.Monad.Trans.Reader.$fFunctorReaderT_$c<$
                     @ (Control.Monad.Trans.State.Lazy.StateT
                          ExtMap.ExtMap GhcMonad.Ghc)
                     @ r
                     DerivingsChecker.$s$fFunctorReaderT1) -}
6a26602388db3ad20bddaf60212d70c4
  $s$fFunctorReaderT1 ::
    GHC.Base.Functor
      (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc)
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                (DerivingsChecker.$s$fApplicativeReaderT_$s$fFunctorStateT
                   @ (Data.Map.Base.Map
                        (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                        [SrcLoc.SrcSpan])) -}
900ac804cee1ff31342dacb24e36ed36
  $s$fGhcMonadReaderT ::
    GhcMonad.GhcMonad
      (Control.Monad.Trans.Reader.ReaderT
         s
         (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc))
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ s.
                  @ (Control.Monad.Trans.Reader.ReaderT
                       s
                       (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc))
                  (Language.Haskell.Tools.Refactor.RefactorBase.$fGhcMonadReaderT_$cp1GhcMonad
                     @ (Control.Monad.Trans.State.Lazy.StateT
                          ExtMap.ExtMap GhcMonad.Ghc)
                     @ s
                     DerivingsChecker.$s$fGhcMonadReaderT1)
                  (Language.Haskell.Tools.Refactor.RefactorBase.$fGhcMonadReaderT_$cp2GhcMonad
                     @ (Control.Monad.Trans.State.Lazy.StateT
                          ExtMap.ExtMap GhcMonad.Ghc)
                     @ s
                     DerivingsChecker.$s$fGhcMonadReaderT1)
                  (Language.Haskell.Tools.Refactor.RefactorBase.$fGhcMonadReaderT_$cp3GhcMonad
                     @ (Control.Monad.Trans.State.Lazy.StateT
                          ExtMap.ExtMap GhcMonad.Ghc)
                     @ s
                     DerivingsChecker.$s$fGhcMonadReaderT1)
                  (Language.Haskell.Tools.Refactor.RefactorBase.$fGhcMonadReaderT_$cp4GhcMonad
                     @ (Control.Monad.Trans.State.Lazy.StateT
                          ExtMap.ExtMap GhcMonad.Ghc)
                     @ s
                     DerivingsChecker.$s$fGhcMonadReaderT1)
                  (Language.Haskell.Tools.Refactor.RefactorBase.$fGhcMonadReaderT_$cgetSession
                     @ (Control.Monad.Trans.State.Lazy.StateT
                          ExtMap.ExtMap GhcMonad.Ghc)
                     @ s
                     DerivingsChecker.$s$fGhcMonadReaderT1)
                  (Language.Haskell.Tools.Refactor.RefactorBase.$fGhcMonadReaderT_$csetSession
                     @ (Control.Monad.Trans.State.Lazy.StateT
                          ExtMap.ExtMap GhcMonad.Ghc)
                     @ s
                     DerivingsChecker.$s$fGhcMonadReaderT1) -}
a3796340ea573a71cf3bfa0df482915d
  $s$fGhcMonadReaderT1 ::
    GhcMonad.GhcMonad
      (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc)
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                (DerivingsChecker.$s$fGhcMonadReaderT_$s$fGhcMonadStateT
                   @ (Data.Map.Base.Map
                        (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                        [SrcLoc.SrcSpan])) -}
c6336c1a184ad7efc4ca710c17d7fd6c
  $s$fGhcMonadReaderT_$s$fGhcMonadStateT ::
    GhcMonad.GhcMonad
      (Control.Monad.Trans.State.Lazy.StateT s GhcMonad.Ghc)
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ s.
                  @ (Control.Monad.Trans.State.Lazy.StateT s GhcMonad.Ghc)
                  (DerivingsChecker.$s$fApplicativeReaderT_$s$fApplicativeStateT_$cp1Applicative
                     @ s)
                  (DerivingsChecker.$s$fExceptionMonadStateT_$s$fGhcMonadStateT_$cp2GhcMonad
                     @ s)
                  (DerivingsChecker.$s$fGhcMonadReaderT_$s$fGhcMonadStateT_$cp3GhcMonad
                     @ s)
                  (Language.Haskell.Tools.Refactor.RefactorBase.$fGhcMonadStateT_$cp4GhcMonad
                     @ GhcMonad.Ghc
                     @ s
                     GhcMonad.$fGhcMonadGhc)
                  (Language.Haskell.Tools.Refactor.RefactorBase.$fGhcMonadStateT_$cgetSession
                     @ GhcMonad.Ghc
                     @ s
                     GhcMonad.$fGhcMonadGhc)
                  (Language.Haskell.Tools.Refactor.RefactorBase.$fGhcMonadStateT_$csetSession
                     @ GhcMonad.Ghc
                     @ s
                     GhcMonad.$fGhcMonadGhc) -}
bdbfcd0c8a175758d009b864aef6e012
  $s$fGhcMonadReaderT_$s$fGhcMonadStateT_$cp3GhcMonad ::
    Exception.ExceptionMonad
      (Control.Monad.Trans.State.Lazy.StateT s GhcMonad.Ghc)
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                DerivingsChecker.$s$fExceptionMonadStateT -}
aa994ac6a2e076a5bf176fa15556b722
  $s$fMonadMaybeT_$c>>=_$s$fMonadReaderT_$creturn ::
    a
    -> Control.Monad.Trans.Reader.ReaderT
         r
         (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc)
         a
  {- Arity: 5, HasNoCafRefs, Strictness: <L,U><L,A><L,U><L,A><S,U>,
     Unfolding: InlineRule (1, True, False)
                (\ @ r @ a (eta :: a) ->
                 let {
                   m1 :: Control.Monad.Trans.State.Lazy.StateT
                           ExtMap.ExtMap GhcMonad.Ghc a
                   = GHC.Base.$
                       @ 'GHC.Types.PtrRepLifted
                       @ (Data.Map.Base.Map
                            (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                            [SrcLoc.SrcSpan]
                          -> GhcMonad.Ghc
                               (a,
                                Data.Map.Base.Map
                                  (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                                  [SrcLoc.SrcSpan]))
                       @ (Control.Monad.Trans.State.Lazy.StateT
                            (Data.Map.Base.Map
                               (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                               [SrcLoc.SrcSpan])
                            GhcMonad.Ghc
                            a)
                       (\ (tpl :: Data.Map.Base.Map
                                    (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                                    [SrcLoc.SrcSpan]
                                  -> GhcMonad.Ghc
                                       (a,
                                        Data.Map.Base.Map
                                          (ExtMap.LogicalRelation
                                             GHC.LanguageExtensions.Type.Extension)
                                          [SrcLoc.SrcSpan])) ->
                        tpl)
                         `cast`
                       (<Data.Map.Base.Map
                           (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                           [SrcLoc.SrcSpan]
                         -> GhcMonad.Ghc
                              (a,
                               Data.Map.Base.Map
                                 (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                                 [SrcLoc.SrcSpan])>_R
                        ->_R Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                      <Data.Map.Base.Map
                                         (ExtMap.LogicalRelation
                                            GHC.LanguageExtensions.Type.Extension)
                                         [SrcLoc.SrcSpan]>_N
                                      <GhcMonad.Ghc>_R
                                      <a>_N))
                       (\ (s1 :: Data.Map.Base.Map
                                   (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                                   [SrcLoc.SrcSpan])
                          (eta1 :: GhcMonad.Session)
                          (eta2 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                        ((GhcMonad.$fApplicativeGhc_$cpure
                            @ (a,
                               Data.Map.Base.Map
                                 (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                                 [SrcLoc.SrcSpan])
                            (eta, s1))
                           `cast`
                         (GhcMonad.N:Ghc[0]
                              <(a,
                                Data.Map.Base.Map
                                  (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                                  [SrcLoc.SrcSpan])>_R)
                           eta1)
                          `cast`
                        (GHC.Types.N:IO[0]
                             <(a,
                               Data.Map.Base.Map
                                 (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                                 [SrcLoc.SrcSpan])>_R)
                          eta2)
                         `cast`
                       (<Data.Map.Base.Map
                           (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                           [SrcLoc.SrcSpan]>_R
                        ->_R Trans
                                 (<GhcMonad.Session>_R
                                  ->_R Sym (GHC.Types.N:IO[0]
                                                <(a,
                                                  Data.Map.Base.Map
                                                    (ExtMap.LogicalRelation
                                                       GHC.LanguageExtensions.Type.Extension)
                                                    [SrcLoc.SrcSpan])>_R))
                                 (Sym (GhcMonad.N:Ghc[0]
                                           <(a,
                                             Data.Map.Base.Map
                                               (ExtMap.LogicalRelation
                                                  GHC.LanguageExtensions.Type.Extension)
                                               [SrcLoc.SrcSpan])>_R)))
                 } in
                 (\ (eta1 :: r) -> m1)
                   `cast`
                 (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                           <*>_N
                           <r>_R
                           <Control.Monad.Trans.State.Lazy.StateT
                              ExtMap.ExtMap GhcMonad.Ghc>_R
                           <a>_N))) -}
82111ea084e15ad6cca3ddca045585df
  $s$fMonadReaderT ::
    GHC.Base.Monad
      (Control.Monad.Trans.Reader.ReaderT
         r
         (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc))
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ r.
                  @ (Control.Monad.Trans.Reader.ReaderT
                       r
                       (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc))
                  (DerivingsChecker.$s$fMonadReaderT_$s$fMonadReaderT_$cp1Monad @ r)
                  (DerivingsChecker.$s$fMonadReaderT_$s$fMonadReaderT_$c>>= @ r)
                  (DerivingsChecker.$s$fMonadReaderT_$s$fMonadReaderT_$c>> @ r)
                  (DerivingsChecker.$s$fMonadMaybeT_$c>>=_$s$fMonadReaderT_$creturn
                     @ r)
                  (DerivingsChecker.$s$fMonadReaderT_$s$fMonadReaderT_$cfail @ r) -}
2e02c5e96c1ad0346d498f6b5dc0c0c9
  $s$fMonadReaderT_$s$fMonadReaderT_$c>> ::
    Control.Monad.Trans.Reader.ReaderT
      r
      (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc)
      a
    -> Control.Monad.Trans.Reader.ReaderT
         r
         (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc)
         b
    -> Control.Monad.Trans.Reader.ReaderT
         r
         (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc)
         b
  {- Arity: 3, HasNoCafRefs, Strictness: <L,1*C1(U)><L,1*C1(U)><L,U>,
     Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ @ r
                   @ a
                   @ b
                   (m1 :: Control.Monad.Trans.Reader.ReaderT
                            r
                            (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc)
                            a)
                   (k :: Control.Monad.Trans.Reader.ReaderT
                           r
                           (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc)
                           b) ->
                 GHC.Base.$
                   @ 'GHC.Types.PtrRepLifted
                   @ (r
                      -> Control.Monad.Trans.State.Lazy.StateT
                           ExtMap.ExtMap GhcMonad.Ghc b)
                   @ (Control.Monad.Trans.Reader.ReaderT
                        r
                        (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc)
                        b)
                   (\ (tpl :: r
                              -> Control.Monad.Trans.State.Lazy.StateT
                                   ExtMap.ExtMap GhcMonad.Ghc b) ->
                    tpl)
                     `cast`
                   (<r
                     -> Control.Monad.Trans.State.Lazy.StateT
                          ExtMap.ExtMap GhcMonad.Ghc b>_R
                    ->_R Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                  <*>_N
                                  <r>_R
                                  <Control.Monad.Trans.State.Lazy.StateT
                                     ExtMap.ExtMap GhcMonad.Ghc>_R
                                  <b>_N))
                   (\ (r1 :: r) ->
                    let {
                      m2 :: Control.Monad.Trans.State.Lazy.StateT
                              (Data.Map.Base.Map
                                 (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                                 [SrcLoc.SrcSpan])
                              GhcMonad.Ghc
                              a
                      = Control.Monad.Trans.Reader.runReaderT
                          @ r
                          @ *
                          @ (Control.Monad.Trans.State.Lazy.StateT
                               ExtMap.ExtMap GhcMonad.Ghc)
                          @ a
                          m1
                          r1
                    } in
                    GHC.Base.$
                      @ 'GHC.Types.PtrRepLifted
                      @ (Data.Map.Base.Map
                           (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                           [SrcLoc.SrcSpan]
                         -> GhcMonad.Ghc
                              (b,
                               Data.Map.Base.Map
                                 (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                                 [SrcLoc.SrcSpan]))
                      @ (Control.Monad.Trans.State.Lazy.StateT
                           (Data.Map.Base.Map
                              (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                              [SrcLoc.SrcSpan])
                           GhcMonad.Ghc
                           b)
                      (\ (tpl :: Data.Map.Base.Map
                                   (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                                   [SrcLoc.SrcSpan]
                                 -> GhcMonad.Ghc
                                      (b,
                                       Data.Map.Base.Map
                                         (ExtMap.LogicalRelation
                                            GHC.LanguageExtensions.Type.Extension)
                                         [SrcLoc.SrcSpan])) ->
                       tpl)
                        `cast`
                      (<Data.Map.Base.Map
                          (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                          [SrcLoc.SrcSpan]
                        -> GhcMonad.Ghc
                             (b,
                              Data.Map.Base.Map
                                (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                                [SrcLoc.SrcSpan])>_R
                       ->_R Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                     <Data.Map.Base.Map
                                        (ExtMap.LogicalRelation
                                           GHC.LanguageExtensions.Type.Extension)
                                        [SrcLoc.SrcSpan]>_N
                                     <GhcMonad.Ghc>_R
                                     <b>_N))
                      (\ (s1 :: Data.Map.Base.Map
                                  (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                                  [SrcLoc.SrcSpan]) ->
                       GhcMonad.$fMonadGhc_$c>>=
                         @ (a,
                            Data.Map.Base.Map
                              (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                              [SrcLoc.SrcSpan])
                         @ (b,
                            Data.Map.Base.Map
                              (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                              [SrcLoc.SrcSpan])
                         (Control.Monad.Trans.State.Lazy.runStateT
                            @ (Data.Map.Base.Map
                                 (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                                 [SrcLoc.SrcSpan])
                            @ GhcMonad.Ghc
                            @ a
                            m2
                            s1)
                         (\ (ds :: (a,
                                    Data.Map.Base.Map
                                      (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                                      [SrcLoc.SrcSpan])) ->
                          Control.Monad.Trans.State.Lazy.runStateT
                            @ (Data.Map.Base.Map
                                 (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                                 [SrcLoc.SrcSpan])
                            @ GhcMonad.Ghc
                            @ b
                            (Control.Monad.Trans.Reader.runReaderT
                               @ r
                               @ *
                               @ (Control.Monad.Trans.State.Lazy.StateT
                                    ExtMap.ExtMap GhcMonad.Ghc)
                               @ b
                               k
                               r1)
                            (case ds of wild { (,) a1 s' -> s' }))))) -}
fac77dbc9cbb86874f7442156ee601d0
  $s$fMonadReaderT_$s$fMonadReaderT_$c>>= ::
    Control.Monad.Trans.Reader.ReaderT
      r
      (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc)
      a
    -> (a
        -> Control.Monad.Trans.Reader.ReaderT
             r
             (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc)
             b)
    -> Control.Monad.Trans.Reader.ReaderT
         r
         (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc)
         b
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*C1(U)><L,C(C1(C1(C1(C1(U)))))><L,U>,
     Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ @ r
                   @ a
                   @ b
                   (m1 :: Control.Monad.Trans.Reader.ReaderT
                            r
                            (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc)
                            a)
                   (k :: a
                         -> Control.Monad.Trans.Reader.ReaderT
                              r
                              (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc)
                              b) ->
                 GHC.Base.$
                   @ 'GHC.Types.PtrRepLifted
                   @ (r
                      -> Control.Monad.Trans.State.Lazy.StateT
                           ExtMap.ExtMap GhcMonad.Ghc b)
                   @ (Control.Monad.Trans.Reader.ReaderT
                        r
                        (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc)
                        b)
                   (\ (tpl :: r
                              -> Control.Monad.Trans.State.Lazy.StateT
                                   ExtMap.ExtMap GhcMonad.Ghc b) ->
                    tpl)
                     `cast`
                   (<r
                     -> Control.Monad.Trans.State.Lazy.StateT
                          ExtMap.ExtMap GhcMonad.Ghc b>_R
                    ->_R Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                  <*>_N
                                  <r>_R
                                  <Control.Monad.Trans.State.Lazy.StateT
                                     ExtMap.ExtMap GhcMonad.Ghc>_R
                                  <b>_N))
                   (\ (r1 :: r) ->
                    let {
                      m2 :: Control.Monad.Trans.State.Lazy.StateT
                              (Data.Map.Base.Map
                                 (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                                 [SrcLoc.SrcSpan])
                              GhcMonad.Ghc
                              a
                      = Control.Monad.Trans.Reader.runReaderT
                          @ r
                          @ *
                          @ (Control.Monad.Trans.State.Lazy.StateT
                               ExtMap.ExtMap GhcMonad.Ghc)
                          @ a
                          m1
                          r1
                    } in
                    GHC.Base.$
                      @ 'GHC.Types.PtrRepLifted
                      @ (Data.Map.Base.Map
                           (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                           [SrcLoc.SrcSpan]
                         -> GhcMonad.Ghc
                              (b,
                               Data.Map.Base.Map
                                 (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                                 [SrcLoc.SrcSpan]))
                      @ (Control.Monad.Trans.State.Lazy.StateT
                           (Data.Map.Base.Map
                              (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                              [SrcLoc.SrcSpan])
                           GhcMonad.Ghc
                           b)
                      (\ (tpl :: Data.Map.Base.Map
                                   (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                                   [SrcLoc.SrcSpan]
                                 -> GhcMonad.Ghc
                                      (b,
                                       Data.Map.Base.Map
                                         (ExtMap.LogicalRelation
                                            GHC.LanguageExtensions.Type.Extension)
                                         [SrcLoc.SrcSpan])) ->
                       tpl)
                        `cast`
                      (<Data.Map.Base.Map
                          (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                          [SrcLoc.SrcSpan]
                        -> GhcMonad.Ghc
                             (b,
                              Data.Map.Base.Map
                                (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                                [SrcLoc.SrcSpan])>_R
                       ->_R Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                     <Data.Map.Base.Map
                                        (ExtMap.LogicalRelation
                                           GHC.LanguageExtensions.Type.Extension)
                                        [SrcLoc.SrcSpan]>_N
                                     <GhcMonad.Ghc>_R
                                     <b>_N))
                      (\ (s1 :: Data.Map.Base.Map
                                  (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                                  [SrcLoc.SrcSpan]) ->
                       GhcMonad.$fMonadGhc_$c>>=
                         @ (a,
                            Data.Map.Base.Map
                              (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                              [SrcLoc.SrcSpan])
                         @ (b,
                            Data.Map.Base.Map
                              (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                              [SrcLoc.SrcSpan])
                         (Control.Monad.Trans.State.Lazy.runStateT
                            @ (Data.Map.Base.Map
                                 (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                                 [SrcLoc.SrcSpan])
                            @ GhcMonad.Ghc
                            @ a
                            m2
                            s1)
                         (\ (ds :: (a,
                                    Data.Map.Base.Map
                                      (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                                      [SrcLoc.SrcSpan])) ->
                          Control.Monad.Trans.State.Lazy.runStateT
                            @ (Data.Map.Base.Map
                                 (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                                 [SrcLoc.SrcSpan])
                            @ GhcMonad.Ghc
                            @ b
                            (Control.Monad.Trans.Reader.runReaderT
                               @ r
                               @ *
                               @ (Control.Monad.Trans.State.Lazy.StateT
                                    ExtMap.ExtMap GhcMonad.Ghc)
                               @ b
                               (k (case ds of wild { (,) a1 s' -> a1 }))
                               r1)
                            (case ds of wild { (,) a1 s' -> s' }))))) -}
b58132c2917f9d41e900e3047eb5af83
  $s$fMonadReaderT_$s$fMonadReaderT_$cfail ::
    GHC.Base.String
    -> Control.Monad.Trans.Reader.ReaderT
         r
         (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc)
         a
  {- Arity: 3, Strictness: <B,U><B,A><B,A>x,
     Inline: INLINE (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ @ r @ a (msg :: GHC.Base.String) ->
                 let {
                   eta :: Control.Monad.Trans.State.Lazy.StateT
                            ExtMap.ExtMap GhcMonad.Ghc a
                   = GHC.Base.$
                       @ 'GHC.Types.PtrRepLifted
                       @ (Data.Map.Base.Map
                            (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                            [SrcLoc.SrcSpan]
                          -> GhcMonad.Ghc
                               (a,
                                Data.Map.Base.Map
                                  (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                                  [SrcLoc.SrcSpan]))
                       @ (Control.Monad.Trans.State.Lazy.StateT
                            (Data.Map.Base.Map
                               (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                               [SrcLoc.SrcSpan])
                            GhcMonad.Ghc
                            a)
                       (\ (tpl :: Data.Map.Base.Map
                                    (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                                    [SrcLoc.SrcSpan]
                                  -> GhcMonad.Ghc
                                       (a,
                                        Data.Map.Base.Map
                                          (ExtMap.LogicalRelation
                                             GHC.LanguageExtensions.Type.Extension)
                                          [SrcLoc.SrcSpan])) ->
                        tpl)
                         `cast`
                       (<Data.Map.Base.Map
                           (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                           [SrcLoc.SrcSpan]
                         -> GhcMonad.Ghc
                              (a,
                               Data.Map.Base.Map
                                 (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                                 [SrcLoc.SrcSpan])>_R
                        ->_R Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                      <Data.Map.Base.Map
                                         (ExtMap.LogicalRelation
                                            GHC.LanguageExtensions.Type.Extension)
                                         [SrcLoc.SrcSpan]>_N
                                      <GhcMonad.Ghc>_R
                                      <a>_N))
                       (\ (ds :: Data.Map.Base.Map
                                   (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                                   [SrcLoc.SrcSpan]) ->
                        GhcMonad.$fMonadGhc_$s$dmfail
                          @ (a,
                             Data.Map.Base.Map
                               (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                               [SrcLoc.SrcSpan])
                          msg)
                 } in
                 (\ (eta1 :: r) ->
                  GHC.Base.const
                    @ (Control.Monad.Trans.State.Lazy.StateT
                         ExtMap.ExtMap GhcMonad.Ghc a)
                    @ r
                    eta
                    eta1)
                   `cast`
                 (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                           <*>_N
                           <r>_R
                           <Control.Monad.Trans.State.Lazy.StateT
                              ExtMap.ExtMap GhcMonad.Ghc>_R
                           <a>_N))) -}
ec14a90cfe6480913ba7bd67ca2e0f1a
  $s$fMonadReaderT_$s$fMonadReaderT_$cp1Monad ::
    GHC.Base.Applicative
      (Control.Monad.Trans.Reader.ReaderT
         r
         (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc))
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                DerivingsChecker.$s$fApplicativeReaderT -}
79440aeec9099e900c251adf95e58da7
  $sannJust1 :: GHC.Base.Maybe a -> Data.Proxy.Proxy a
  {- Arity: 1, HasNoCafRefs, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ @ a (eta :: GHC.Base.Maybe a) -> Data.Proxy.Proxy @ * @ a) -}
b7878a4c73904e6f91f7dc2f9b681351
  $swhen1 ::
    [GHC.LanguageExtensions.Type.Extension]
    -> Data.Map.Base.Map
         (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
         [SrcLoc.SrcSpan]
    -> GhcMonad.Session
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          ((),
           Data.Map.Base.Map
             (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
             [SrcLoc.SrcSpan]) #)
  {- Arity: 4, HasNoCafRefs, Strictness: <L,A><L,U><L,A><S,U>,
     Unfolding: InlineRule (4, True, False)
                (\ (eta1 :: [GHC.LanguageExtensions.Type.Extension])
                   (eta :: Data.Map.Base.Map
                             (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                             [SrcLoc.SrcSpan])
                   (eta2 :: GhcMonad.Session)
                   (eta3 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 (# eta3, (GHC.Tuple.(), eta) #)) -}
552aa8f67c56c3908310de048a14203c
  $tc'ClsBounded :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   8200042950408719026##
                   17710670625897919431##
                   DerivingsChecker.$trModule
                   DerivingsChecker.$tc'ClsBounded1) -}
854daea13d172e6d6444f766f4a2d67e
  $tc'ClsBounded1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'ClsBounded"#) -}
4610a5f669db2c60a30a5f90dfea9e15
  $tc'ClsData :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   12858374075542243739##
                   319426338038252361##
                   DerivingsChecker.$trModule
                   DerivingsChecker.$tc'ClsData1) -}
931ba1b9a19774bfb344d5a2bb737ae7
  $tc'ClsData1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'ClsData"#) -}
d5ccbde81855f6ab0618613fdf008d1d
  $tc'ClsEnum :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   10948080896879565124##
                   2507631543136943479##
                   DerivingsChecker.$trModule
                   DerivingsChecker.$tc'ClsEnum1) -}
723ef2f54a8fea23e6cde1d9b8037bc1
  $tc'ClsEnum1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'ClsEnum"#) -}
c11d20c43d0e5843fd1f568fe4cd37cb
  $tc'ClsEq :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   2012249651594809858##
                   4690057289478497961##
                   DerivingsChecker.$trModule
                   DerivingsChecker.$tc'ClsEq1) -}
08d09a29367ca26a20e011a4035eb2b4
  $tc'ClsEq1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'ClsEq"#) -}
1456d086e48c1e13e7d1aa8fe32da468
  $tc'ClsFoldable :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   9242083705812698090##
                   9476854652964729172##
                   DerivingsChecker.$trModule
                   DerivingsChecker.$tc'ClsFoldable1) -}
b29fb611a5150193b85cf12aa98d13d4
  $tc'ClsFoldable1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'ClsFoldable"#) -}
16ae7b4984bb019c9cadd56cdee88b2a
  $tc'ClsFunctor :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   4419354070696003485##
                   5902209260514495429##
                   DerivingsChecker.$trModule
                   DerivingsChecker.$tc'ClsFunctor1) -}
a830eb7d096dc0a2d6094a0b50f6df2b
  $tc'ClsFunctor1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'ClsFunctor"#) -}
895efdedbf0d6cded3aa4a123eb5ce13
  $tc'ClsGeneric :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   8476291765221138142##
                   16579017837814045022##
                   DerivingsChecker.$trModule
                   DerivingsChecker.$tc'ClsGeneric1) -}
feb124e5278adfe22243723bbbb04169
  $tc'ClsGeneric1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'ClsGeneric"#) -}
82518041a8c215b9c13cd160213bdc7b
  $tc'ClsIx :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   186703298214807150##
                   5125805522393609423##
                   DerivingsChecker.$trModule
                   DerivingsChecker.$tc'ClsIx1) -}
a114c4c545dff92ef6e3e6956a5901c1
  $tc'ClsIx1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'ClsIx"#) -}
7f51845db437ddec9c419763c632dce2
  $tc'ClsOrd :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   6393665394434097553##
                   8386248397137182504##
                   DerivingsChecker.$trModule
                   DerivingsChecker.$tc'ClsOrd1) -}
edc1015ad0f144907562f66c3cbfc836
  $tc'ClsOrd1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'ClsOrd"#) -}
abfef8d5ab18150bb397bd4d15815545
  $tc'ClsRead :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   1911232974213750303##
                   7791768470736602798##
                   DerivingsChecker.$trModule
                   DerivingsChecker.$tc'ClsRead1) -}
382fcc48b6c5b15d8e561d44d17a14b2
  $tc'ClsRead1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'ClsRead"#) -}
fd669eaa2bbca447d98558b61df944fa
  $tc'ClsShow :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   14422992848796025276##
                   4094748977756868785##
                   DerivingsChecker.$trModule
                   DerivingsChecker.$tc'ClsShow1) -}
992aa99855833d732442f741a1c59c91
  $tc'ClsShow1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'ClsShow"#) -}
39f9dde45851a492218ae8991826f6c2
  $tc'ClsTraversable :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   5850727097536339815##
                   15639314971480984867##
                   DerivingsChecker.$trModule
                   DerivingsChecker.$tc'ClsTraversable1) -}
7c129e1085b9de43825a7481ac5c5798
  $tc'ClsTraversable1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'ClsTraversable"#) -}
1c836c4eaf50e984605fe23f7e2bf7f3
  $tc'ClsTypeable :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   12013812983852428351##
                   17869750559783279018##
                   DerivingsChecker.$trModule
                   DerivingsChecker.$tc'ClsTypeable1) -}
3096b70862b2f687526616fd5441c196
  $tc'ClsTypeable1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'ClsTypeable"#) -}
62d5424a5ae7343cd68ab171e2f9023d
  $tcDerivableClass :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   1905826978853782877##
                   14032111859375740235##
                   DerivingsChecker.$trModule
                   DerivingsChecker.$tcDerivableClass1) -}
dbe2041902bb892fa5fbeaa63d591374
  $tcDerivableClass1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "DerivableClass"#) -}
9486605088db193e4f113d46e24cd2dd
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   DerivingsChecker.$trModule2
                   DerivingsChecker.$trModule1) -}
dec3fa58fbeb0b35f5a66459fba7f756
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "DerivingsChecker"#) -}
6d90ff861459d937f29bc4026b5c495c
  $trModule2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   "ht-extension-organizer-0.1.0.0-y3uypH7gCtA60AaWeuyZL"#) -}
022f1fbcf4a5103d33816fe9ef107bcf
  $w$cshowsPrec ::
    DerivingsChecker.DerivableClass
    -> GHC.Base.String -> GHC.Base.String
  {- Arity: 2, Strictness: <S,1*U><L,1*U>, Inline: [0],
     Unfolding: (\ (w :: DerivingsChecker.DerivableClass)
                   (w1 :: GHC.Base.String) ->
                 case w of wild {
                   DerivingsChecker.ClsEq
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        DerivingsChecker.$fReadDerivableClass55
                        w1
                   DerivingsChecker.ClsOrd
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        DerivingsChecker.$fReadDerivableClass52
                        w1
                   DerivingsChecker.ClsIx
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        DerivingsChecker.$fReadDerivableClass49
                        w1
                   DerivingsChecker.ClsShow
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        DerivingsChecker.$fReadDerivableClass46
                        w1
                   DerivingsChecker.ClsRead
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        DerivingsChecker.$fReadDerivableClass43
                        w1
                   DerivingsChecker.ClsEnum
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        DerivingsChecker.$fReadDerivableClass40
                        w1
                   DerivingsChecker.ClsBounded
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        DerivingsChecker.$fReadDerivableClass37
                        w1
                   DerivingsChecker.ClsData
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        DerivingsChecker.$fReadDerivableClass34
                        w1
                   DerivingsChecker.ClsTypeable
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        DerivingsChecker.$fReadDerivableClass31
                        w1
                   DerivingsChecker.ClsGeneric
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        DerivingsChecker.$fReadDerivableClass28
                        w1
                   DerivingsChecker.ClsFunctor
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        DerivingsChecker.$fReadDerivableClass25
                        w1
                   DerivingsChecker.ClsFoldable
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        DerivingsChecker.$fReadDerivableClass22
                        w1
                   DerivingsChecker.ClsTraversable
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        DerivingsChecker.$fReadDerivableClass19
                        w1 }) -}
f1032bdb9ac4334d4b637b0325b25082
  $wchkClassForData ::
    ExtMonad.ExtDomain dom =>
    Language.Haskell.Tools.AST.Ann.NodeInfo
      (Language.Haskell.Tools.AST.Ann.SemanticInfo
         dom Language.Haskell.Tools.AST.Representation.Decls.UInstanceHead)
      (Language.Haskell.Tools.AST.Ann.SpanInfo
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
    -> Language.Haskell.Tools.AST.Representation.Decls.UInstanceHead
         dom Language.Haskell.Tools.AST.Ann.SrcTemplateStage
    -> ExtMonad.ExtMonad
         (Language.Haskell.Tools.AST.ElementTypes.InstanceHead dom)
  {- Arity: 3,
     Strictness: <S(S(LLS(S)LLLLLLLLLL)L),U(U(A,A,U(U),A,A,A,A,A,A,A,A,A,A),C(U))><L,U(U,U(U,U,U,U))><S,U>,
     Inline: [0],
     Unfolding: (\ @ dom
                   (w :: ExtMonad.ExtDomain dom)
                   (ww :: Language.Haskell.Tools.AST.Ann.NodeInfo
                            (Language.Haskell.Tools.AST.Ann.SemanticInfo
                               dom Language.Haskell.Tools.AST.Representation.Decls.UInstanceHead)
                            (Language.Haskell.Tools.AST.Ann.SpanInfo
                               Language.Haskell.Tools.AST.Ann.SrcTemplateStage))
                   (ww7 :: Language.Haskell.Tools.AST.Representation.Decls.UInstanceHead
                             dom Language.Haskell.Tools.AST.Ann.SrcTemplateStage) ->
                 let {
                   lvl35 :: SrcLoc.SrcSpan
                   = case ww of wild1 { Language.Haskell.Tools.AST.Ann.NodeInfo ds1 ds2 ->
                     case ds2
                            `cast`
                          (Language.Haskell.Tools.Transform.SourceTemplate.D:R:SpanInfoSrcTemplateStage0[0]) of wild { Language.Haskell.Tools.Transform.SourceTemplate.SourceTemplateNode ds4 ds5 ds3 ds6 ->
                     ds4 } }
                 } in
                 let {
                   lvl36 :: [SrcLoc.SrcSpan]
                   = GHC.Types.:
                       @ SrcLoc.SrcSpan
                       lvl35
                       (GHC.Types.[] @ SrcLoc.SrcSpan)
                 } in
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Language.Haskell.Tools.AST.Ann.SemanticInfo'
                             dom Language.Haskell.Tools.AST.Ann.SameInfoDefaultCls)
                        @ Language.Haskell.Tools.AST.SemaInfoTypes.NoSemanticInfo
                        (Language.Haskell.Tools.AST.Ann.$p3Domain
                           @ dom
                           (GHC.Classes.$p1(%,%)
                              @ (Language.Haskell.Tools.AST.Ann.Domain dom)
                              @ (Language.Haskell.Tools.AST.SemaInfoClasses.HasNameInfo'
                                   (Language.Haskell.Tools.AST.Ann.SemanticInfo
                                      dom
                                      Language.Haskell.Tools.AST.Representation.Names.UQualifiedName))
                              w))
                          `cast`
                        (Data.Type.Equality.N:~[0]
                             <*>_N <Language.Haskell.Tools.AST.Ann.SemanticInfo'
                                      dom
                                      Language.Haskell.Tools.AST.Ann.SameInfoDefaultCls>_N <Language.Haskell.Tools.AST.SemaInfoTypes.NoSemanticInfo>_N) of cobox0 { DEFAULT ->
                 case DerivingsChecker.$wskipParens
                        @ dom
                        ww
                        ww7 of ww8 { (#,#) ww9 ww10 ->
                 let {
                   eta :: Language.Haskell.Tools.AST.ElementTypes.InstanceHead dom
                   = Language.Haskell.Tools.AST.Ann.Ann
                       @ Language.Haskell.Tools.AST.Representation.Decls.UInstanceHead
                       @ dom
                       @ Language.Haskell.Tools.AST.Ann.SrcTemplateStage
                       ww
                       ww7
                 } in
                 let {
                   $wfail :: ExtMap.ExtMap
                             -> GhcMonad.Ghc
                                  (Language.Haskell.Tools.AST.ElementTypes.InstanceHead dom,
                                   Data.Map.Base.Map
                                     (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                                     [SrcLoc.SrcSpan])
                     {- Arity: 1, Strictness: <L,1*U>, Inline: [0] -}
                   = \ (w1 :: ExtMap.ExtMap) ->
                     let {
                       a1 :: Data.Map.Base.Map
                               (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                               [SrcLoc.SrcSpan]
                       = Data.Map.Strict.insertWithKey
                           @ (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                           @ [SrcLoc.SrcSpan]
                           ExtMonad.$s$fOrdLogicalRelation
                           (ExtMonad.addOccurence_1
                              @ (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension))
                           DerivingsChecker.chkClassForData9
                           lvl36
                           w1
                     } in
                     let {
                       lvl37 :: (Language.Haskell.Tools.AST.ElementTypes.InstanceHead dom,
                                 Data.Map.Base.Map
                                   (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                                   [SrcLoc.SrcSpan])
                       = (eta, a1)
                     } in
                     (\ (s :: GhcMonad.Session)
                        (s1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                      (# s1, lvl37 #))
                       `cast`
                     (Trans
                          (<GhcMonad.Session>_R
                           ->_R Sym (GHC.Types.N:IO[0]
                                         <(Language.Haskell.Tools.AST.ElementTypes.InstanceHead dom,
                                           Data.Map.Base.Map
                                             (ExtMap.LogicalRelation
                                                GHC.LanguageExtensions.Type.Extension)
                                             [SrcLoc.SrcSpan])>_R))
                          (Sym (GhcMonad.N:Ghc[0]
                                    <(Language.Haskell.Tools.AST.ElementTypes.InstanceHead dom,
                                      Data.Map.Base.Map
                                        (ExtMap.LogicalRelation
                                           GHC.LanguageExtensions.Type.Extension)
                                        [SrcLoc.SrcSpan])>_R)))
                 } in
                 case ww10 of wild1 {
                   DEFAULT
                   -> (\ (w1 :: [GHC.LanguageExtensions.Type.Extension])
                         (w2 :: ExtMap.ExtMap) ->
                       $wfail w2)
                        `cast`
                      (Trans
                           (<[GHC.LanguageExtensions.Type.Extension]>_R
                            ->_R Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                          <ExtMap.ExtMap>_N
                                          <GhcMonad.Ghc>_R
                                          <Language.Haskell.Tools.AST.ElementTypes.InstanceHead
                                             dom>_N))
                           (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                     <*>_N
                                     <[GHC.LanguageExtensions.Type.Extension]>_R
                                     <Control.Monad.Trans.State.Lazy.StateT
                                        ExtMap.ExtMap GhcMonad.Ghc>_R
                                     <Language.Haskell.Tools.AST.ElementTypes.InstanceHead dom>_N)))
                   Language.Haskell.Tools.AST.Representation.Decls.UInstanceHeadCon name
                   -> case DerivingsChecker.getSemName @ dom w name of wild {
                        GHC.Base.Nothing
                        -> (\ (w1 :: [GHC.LanguageExtensions.Type.Extension])
                              (w2 :: ExtMap.ExtMap) ->
                            $wfail w2)
                             `cast`
                           (Trans
                                (<[GHC.LanguageExtensions.Type.Extension]>_R
                                 ->_R Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                               <ExtMap.ExtMap>_N
                                               <GhcMonad.Ghc>_R
                                               <Language.Haskell.Tools.AST.ElementTypes.InstanceHead
                                                  dom>_N))
                                (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                          <*>_N
                                          <[GHC.LanguageExtensions.Type.Extension]>_R
                                          <Control.Monad.Trans.State.Lazy.StateT
                                             ExtMap.ExtMap GhcMonad.Ghc>_R
                                          <Language.Haskell.Tools.AST.ElementTypes.InstanceHead
                                             dom>_N)))
                        GHC.Base.Just sname
                        -> case GHC.List.elem
                                  @ Name.Name
                                  Name.$fEqName
                                  sname
                                  DerivingsChecker.wiredInClasses of wild2 {
                             GHC.Types.False
                             -> (\ (w1 :: [GHC.LanguageExtensions.Type.Extension])
                                   (w2 :: ExtMap.ExtMap) ->
                                 $wfail w2)
                                  `cast`
                                (Trans
                                     (<[GHC.LanguageExtensions.Type.Extension]>_R
                                      ->_R Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                                    <ExtMap.ExtMap>_N
                                                    <GhcMonad.Ghc>_R
                                                    <Language.Haskell.Tools.AST.ElementTypes.InstanceHead
                                                       dom>_N))
                                     (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                               <*>_N
                                               <[GHC.LanguageExtensions.Type.Extension]>_R
                                               <Control.Monad.Trans.State.Lazy.StateT
                                                  ExtMap.ExtMap GhcMonad.Ghc>_R
                                               <Language.Haskell.Tools.AST.ElementTypes.InstanceHead
                                                  dom>_N)))
                             GHC.Types.True
                             -> case GHC.List.filter
                                       @ (DerivingsChecker.DerivableClass, [GHC.Types.Char])
                                       DerivingsChecker.chkClassForData8
                                       (Text.ParserCombinators.ReadP.run
                                          @ DerivingsChecker.DerivableClass
                                          DerivingsChecker.chkClassForData7
                                          (GHC.Base.++
                                             @ GHC.Types.Char
                                             DerivingsChecker.chkClassForData6
                                             (case DerivingsChecker.chkClassForData1
                                                     @ dom of wild3 { Control.Reference.Representation.Reference ds ds1 ds2 ds3 ds4 ds5 ->
                                              (ds
                                                 @ GHC.Base.String
                                                 (Data.Functor.Identity.$fApplicativeIdentity2
                                                    @ GHC.Base.String)
                                                   `cast`
                                                 (<GHC.Base.String>_R
                                                  ->_R Sym (Data.Functor.Identity.N:Identity[0]
                                                                <GHC.Base.String>_R))
                                                 name)
                                                `cast`
                                              (Data.Functor.Identity.N:Identity[0]
                                                   <GHC.Base.String>_R) }))) of wild3 {
                                  []
                                  -> (\ (eta1 :: [GHC.LanguageExtensions.Type.Extension])
                                        (eta2 :: Data.Map.Base.Map
                                                   (ExtMap.LogicalRelation
                                                      GHC.LanguageExtensions.Type.Extension)
                                                   [SrcLoc.SrcSpan])
                                        (eta3 :: GhcMonad.Session)
                                        (eta4 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                                      (# eta4, (eta, eta2) #))
                                       `cast`
                                     (Trans
                                          (<[GHC.LanguageExtensions.Type.Extension]>_R
                                           ->_R Trans
                                                    (<Data.Map.Base.Map
                                                        (ExtMap.LogicalRelation
                                                           GHC.LanguageExtensions.Type.Extension)
                                                        [SrcLoc.SrcSpan]>_R
                                                     ->_R Trans
                                                              (<GhcMonad.Session>_R
                                                               ->_R Sym (GHC.Types.N:IO[0]
                                                                             <(Language.Haskell.Tools.AST.ElementTypes.InstanceHead
                                                                                 dom,
                                                                               Data.Map.Base.Map
                                                                                 (ExtMap.LogicalRelation
                                                                                    GHC.LanguageExtensions.Type.Extension)
                                                                                 [SrcLoc.SrcSpan])>_R))
                                                              (Sym (GhcMonad.N:Ghc[0]
                                                                        <(Language.Haskell.Tools.AST.ElementTypes.InstanceHead
                                                                            dom,
                                                                          Data.Map.Base.Map
                                                                            (ExtMap.LogicalRelation
                                                                               GHC.LanguageExtensions.Type.Extension)
                                                                            [SrcLoc.SrcSpan])>_R)))
                                                    (Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                                              <Data.Map.Base.Map
                                                                 (ExtMap.LogicalRelation
                                                                    GHC.LanguageExtensions.Type.Extension)
                                                                 [SrcLoc.SrcSpan]>_N
                                                              <GhcMonad.Ghc>_R
                                                              <Language.Haskell.Tools.AST.ElementTypes.InstanceHead
                                                                 dom>_N)))
                                          (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                                    <*>_N
                                                    <[GHC.LanguageExtensions.Type.Extension]>_R
                                                    <Control.Monad.Trans.State.Lazy.StateT
                                                       ExtMap.ExtMap GhcMonad.Ghc>_R
                                                    <Language.Haskell.Tools.AST.ElementTypes.InstanceHead
                                                       dom>_N)))
                                  : a1 ds1
                                  -> case a1 of wild4 { (,) x ds2 ->
                                     let {
                                       $w$j :: GHC.LanguageExtensions.Type.Extension
                                               -> ExtMap.ExtMap
                                               -> GhcMonad.Ghc
                                                    (Language.Haskell.Tools.AST.ElementTypes.InstanceHead
                                                       dom,
                                                     Data.Map.Base.Map
                                                       (ExtMap.LogicalRelation
                                                          GHC.LanguageExtensions.Type.Extension)
                                                       [SrcLoc.SrcSpan])
                                         {- Arity: 2, Strictness: <L,U><L,1*U>, Inline: [0] -}
                                       = \ (w1 :: GHC.LanguageExtensions.Type.Extension)[OneShot]
                                           (w2 :: ExtMap.ExtMap) ->
                                         let {
                                           a2 :: Data.Map.Base.Map
                                                   (ExtMap.LogicalRelation
                                                      GHC.LanguageExtensions.Type.Extension)
                                                   [SrcLoc.SrcSpan]
                                           = Data.Map.Strict.insertWithKey
                                               @ (ExtMap.LogicalRelation
                                                    GHC.LanguageExtensions.Type.Extension)
                                               @ [SrcLoc.SrcSpan]
                                               ExtMonad.$s$fOrdLogicalRelation
                                               (ExtMonad.addOccurence_1
                                                  @ (ExtMap.LogicalRelation
                                                       GHC.LanguageExtensions.Type.Extension))
                                               (ExtMap.LVar
                                                  @ GHC.LanguageExtensions.Type.Extension
                                                  w1)
                                               lvl36
                                               w2
                                         } in
                                         let {
                                           lvl37 :: (Language.Haskell.Tools.AST.ElementTypes.InstanceHead
                                                       dom,
                                                     Data.Map.Base.Map
                                                       (ExtMap.LogicalRelation
                                                          GHC.LanguageExtensions.Type.Extension)
                                                       [SrcLoc.SrcSpan])
                                           = (eta, a2)
                                         } in
                                         (\ (s :: GhcMonad.Session)
                                            (s1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                                          (# s1, lvl37 #))
                                           `cast`
                                         (Trans
                                              (<GhcMonad.Session>_R
                                               ->_R Sym (GHC.Types.N:IO[0]
                                                             <(Language.Haskell.Tools.AST.ElementTypes.InstanceHead
                                                                 dom,
                                                               Data.Map.Base.Map
                                                                 (ExtMap.LogicalRelation
                                                                    GHC.LanguageExtensions.Type.Extension)
                                                                 [SrcLoc.SrcSpan])>_R))
                                              (Sym (GhcMonad.N:Ghc[0]
                                                        <(Language.Haskell.Tools.AST.ElementTypes.InstanceHead
                                                            dom,
                                                          Data.Map.Base.Map
                                                            (ExtMap.LogicalRelation
                                                               GHC.LanguageExtensions.Type.Extension)
                                                            [SrcLoc.SrcSpan])>_R)))
                                     } in
                                     case x of wild5 {
                                       DEFAULT
                                       -> (\ (eta1 :: [GHC.LanguageExtensions.Type.Extension])
                                             (eta2 :: Data.Map.Base.Map
                                                        (ExtMap.LogicalRelation
                                                           GHC.LanguageExtensions.Type.Extension)
                                                        [SrcLoc.SrcSpan])
                                             (eta3 :: GhcMonad.Session)
                                             (eta4 :: GHC.Prim.State#
                                                        GHC.Prim.RealWorld)[OneShot] ->
                                           (# eta4, (eta, eta2) #))
                                            `cast`
                                          (Trans
                                               (<[GHC.LanguageExtensions.Type.Extension]>_R
                                                ->_R Trans
                                                         (<Data.Map.Base.Map
                                                             (ExtMap.LogicalRelation
                                                                GHC.LanguageExtensions.Type.Extension)
                                                             [SrcLoc.SrcSpan]>_R
                                                          ->_R Trans
                                                                   (<GhcMonad.Session>_R
                                                                    ->_R Sym (GHC.Types.N:IO[0]
                                                                                  <(Language.Haskell.Tools.AST.ElementTypes.InstanceHead
                                                                                      dom,
                                                                                    Data.Map.Base.Map
                                                                                      (ExtMap.LogicalRelation
                                                                                         GHC.LanguageExtensions.Type.Extension)
                                                                                      [SrcLoc.SrcSpan])>_R))
                                                                   (Sym (GhcMonad.N:Ghc[0]
                                                                             <(Language.Haskell.Tools.AST.ElementTypes.InstanceHead
                                                                                 dom,
                                                                               Data.Map.Base.Map
                                                                                 (ExtMap.LogicalRelation
                                                                                    GHC.LanguageExtensions.Type.Extension)
                                                                                 [SrcLoc.SrcSpan])>_R)))
                                                         (Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                                                   <Data.Map.Base.Map
                                                                      (ExtMap.LogicalRelation
                                                                         GHC.LanguageExtensions.Type.Extension)
                                                                      [SrcLoc.SrcSpan]>_N
                                                                   <GhcMonad.Ghc>_R
                                                                   <Language.Haskell.Tools.AST.ElementTypes.InstanceHead
                                                                      dom>_N)))
                                               (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                                         <*>_N
                                                         <[GHC.LanguageExtensions.Type.Extension]>_R
                                                         <Control.Monad.Trans.State.Lazy.StateT
                                                            ExtMap.ExtMap GhcMonad.Ghc>_R
                                                         <Language.Haskell.Tools.AST.ElementTypes.InstanceHead
                                                            dom>_N)))
                                       DerivingsChecker.ClsData
                                       -> (\ (w1 :: [GHC.LanguageExtensions.Type.Extension])
                                             (w2 :: ExtMap.ExtMap) ->
                                           $w$j GHC.LanguageExtensions.Type.DeriveDataTypeable w2)
                                            `cast`
                                          (Trans
                                               (<[GHC.LanguageExtensions.Type.Extension]>_R
                                                ->_R Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                                              <ExtMap.ExtMap>_N
                                                              <GhcMonad.Ghc>_R
                                                              <Language.Haskell.Tools.AST.ElementTypes.InstanceHead
                                                                 dom>_N))
                                               (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                                         <*>_N
                                                         <[GHC.LanguageExtensions.Type.Extension]>_R
                                                         <Control.Monad.Trans.State.Lazy.StateT
                                                            ExtMap.ExtMap GhcMonad.Ghc>_R
                                                         <Language.Haskell.Tools.AST.ElementTypes.InstanceHead
                                                            dom>_N)))
                                       DerivingsChecker.ClsTypeable
                                       -> (\ (w1 :: [GHC.LanguageExtensions.Type.Extension])
                                             (w2 :: ExtMap.ExtMap) ->
                                           $w$j GHC.LanguageExtensions.Type.DeriveDataTypeable w2)
                                            `cast`
                                          (Trans
                                               (<[GHC.LanguageExtensions.Type.Extension]>_R
                                                ->_R Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                                              <ExtMap.ExtMap>_N
                                                              <GhcMonad.Ghc>_R
                                                              <Language.Haskell.Tools.AST.ElementTypes.InstanceHead
                                                                 dom>_N))
                                               (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                                         <*>_N
                                                         <[GHC.LanguageExtensions.Type.Extension]>_R
                                                         <Control.Monad.Trans.State.Lazy.StateT
                                                            ExtMap.ExtMap GhcMonad.Ghc>_R
                                                         <Language.Haskell.Tools.AST.ElementTypes.InstanceHead
                                                            dom>_N)))
                                       DerivingsChecker.ClsGeneric
                                       -> (\ (w1 :: [GHC.LanguageExtensions.Type.Extension])
                                             (w2 :: ExtMap.ExtMap) ->
                                           $w$j GHC.LanguageExtensions.Type.DeriveGeneric w2)
                                            `cast`
                                          (Trans
                                               (<[GHC.LanguageExtensions.Type.Extension]>_R
                                                ->_R Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                                              <ExtMap.ExtMap>_N
                                                              <GhcMonad.Ghc>_R
                                                              <Language.Haskell.Tools.AST.ElementTypes.InstanceHead
                                                                 dom>_N))
                                               (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                                         <*>_N
                                                         <[GHC.LanguageExtensions.Type.Extension]>_R
                                                         <Control.Monad.Trans.State.Lazy.StateT
                                                            ExtMap.ExtMap GhcMonad.Ghc>_R
                                                         <Language.Haskell.Tools.AST.ElementTypes.InstanceHead
                                                            dom>_N)))
                                       DerivingsChecker.ClsFunctor
                                       -> (\ (w1 :: [GHC.LanguageExtensions.Type.Extension])
                                             (w2 :: ExtMap.ExtMap) ->
                                           $w$j GHC.LanguageExtensions.Type.DeriveFunctor w2)
                                            `cast`
                                          (Trans
                                               (<[GHC.LanguageExtensions.Type.Extension]>_R
                                                ->_R Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                                              <ExtMap.ExtMap>_N
                                                              <GhcMonad.Ghc>_R
                                                              <Language.Haskell.Tools.AST.ElementTypes.InstanceHead
                                                                 dom>_N))
                                               (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                                         <*>_N
                                                         <[GHC.LanguageExtensions.Type.Extension]>_R
                                                         <Control.Monad.Trans.State.Lazy.StateT
                                                            ExtMap.ExtMap GhcMonad.Ghc>_R
                                                         <Language.Haskell.Tools.AST.ElementTypes.InstanceHead
                                                            dom>_N)))
                                       DerivingsChecker.ClsFoldable
                                       -> (\ (w1 :: [GHC.LanguageExtensions.Type.Extension])
                                             (w2 :: ExtMap.ExtMap) ->
                                           $w$j GHC.LanguageExtensions.Type.DeriveFoldable w2)
                                            `cast`
                                          (Trans
                                               (<[GHC.LanguageExtensions.Type.Extension]>_R
                                                ->_R Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                                              <ExtMap.ExtMap>_N
                                                              <GhcMonad.Ghc>_R
                                                              <Language.Haskell.Tools.AST.ElementTypes.InstanceHead
                                                                 dom>_N))
                                               (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                                         <*>_N
                                                         <[GHC.LanguageExtensions.Type.Extension]>_R
                                                         <Control.Monad.Trans.State.Lazy.StateT
                                                            ExtMap.ExtMap GhcMonad.Ghc>_R
                                                         <Language.Haskell.Tools.AST.ElementTypes.InstanceHead
                                                            dom>_N)))
                                       DerivingsChecker.ClsTraversable
                                       -> (\ (w1 :: [GHC.LanguageExtensions.Type.Extension])
                                             (w2 :: ExtMap.ExtMap) ->
                                           $w$j GHC.LanguageExtensions.Type.DeriveTraversable w2)
                                            `cast`
                                          (Trans
                                               (<[GHC.LanguageExtensions.Type.Extension]>_R
                                                ->_R Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                                              <ExtMap.ExtMap>_N
                                                              <GhcMonad.Ghc>_R
                                                              <Language.Haskell.Tools.AST.ElementTypes.InstanceHead
                                                                 dom>_N))
                                               (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                                         <*>_N
                                                         <[GHC.LanguageExtensions.Type.Extension]>_R
                                                         <Control.Monad.Trans.State.Lazy.StateT
                                                            ExtMap.ExtMap GhcMonad.Ghc>_R
                                                         <Language.Haskell.Tools.AST.ElementTypes.InstanceHead
                                                            dom>_N))) } } } } } } } }) -}
397323cbf2029653a9722926f2e5acfd
  $wchkClassForNewtype ::
    ExtMonad.ExtDomain dom =>
    Language.Haskell.Tools.AST.Ann.NodeInfo
      (Language.Haskell.Tools.AST.Ann.SemanticInfo
         dom Language.Haskell.Tools.AST.Representation.Decls.UInstanceHead)
      (Language.Haskell.Tools.AST.Ann.SpanInfo
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
    -> Language.Haskell.Tools.AST.Representation.Decls.UInstanceHead
         dom Language.Haskell.Tools.AST.Ann.SrcTemplateStage
    -> ExtMonad.ExtMonad
         (Language.Haskell.Tools.AST.ElementTypes.InstanceHead dom)
  {- Arity: 3,
     Strictness: <S(S(LLS(S)LLLLLLLLLL)L),U(U(A,A,U(U),A,A,A,A,A,A,A,A,A,A),C(U))><L,U(U,U(U,U,U,U))><S,U>,
     Inline: [0] -}
8c4680ac6382afa110d2d4c93f37cd67
  $wchkDataDecl ::
    ExtMonad.ExtDomain dom =>
    Language.Haskell.Tools.AST.Ann.NodeInfo
      (Language.Haskell.Tools.AST.Ann.SemanticInfo
         dom Language.Haskell.Tools.AST.Representation.Decls.UDecl)
      (Language.Haskell.Tools.AST.Ann.SpanInfo
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
    -> Language.Haskell.Tools.AST.Representation.Decls.UDecl
         dom Language.Haskell.Tools.AST.Ann.SrcTemplateStage
    -> ExtMonad.ExtMonad
         (Language.Haskell.Tools.AST.ElementTypes.Decl dom)
  {- Arity: 3,
     Strictness: <S(S(LLS(S)LLLLLLLLLL)L),U(U(A,A,U(U),A,A,A,A,A,A,A,A,A,A),C(U))><L,U><S,U>,
     Inline: [0],
     Unfolding: (\ @ dom
                   (w :: ExtMonad.ExtDomain dom)
                   (ww :: Language.Haskell.Tools.AST.Ann.NodeInfo
                            (Language.Haskell.Tools.AST.Ann.SemanticInfo
                               dom Language.Haskell.Tools.AST.Representation.Decls.UDecl)
                            (Language.Haskell.Tools.AST.Ann.SpanInfo
                               Language.Haskell.Tools.AST.Ann.SrcTemplateStage))
                   (ww7 :: Language.Haskell.Tools.AST.Representation.Decls.UDecl
                             dom Language.Haskell.Tools.AST.Ann.SrcTemplateStage) ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Language.Haskell.Tools.AST.Ann.SemanticInfo'
                             dom Language.Haskell.Tools.AST.Ann.SameInfoDefaultCls)
                        @ Language.Haskell.Tools.AST.SemaInfoTypes.NoSemanticInfo
                        (Language.Haskell.Tools.AST.Ann.$p3Domain
                           @ dom
                           (GHC.Classes.$p1(%,%)
                              @ (Language.Haskell.Tools.AST.Ann.Domain dom)
                              @ (Language.Haskell.Tools.AST.SemaInfoClasses.HasNameInfo'
                                   (Language.Haskell.Tools.AST.Ann.SemanticInfo
                                      dom
                                      Language.Haskell.Tools.AST.Representation.Names.UQualifiedName))
                              w))
                          `cast`
                        (Data.Type.Equality.N:~[0]
                             <*>_N <Language.Haskell.Tools.AST.Ann.SemanticInfo'
                                      dom
                                      Language.Haskell.Tools.AST.Ann.SameInfoDefaultCls>_N <Language.Haskell.Tools.AST.SemaInfoTypes.NoSemanticInfo>_N) of cobox0 { DEFAULT ->
                 let {
                   ww8 :: Language.Haskell.Tools.AST.ElementTypes.Decl dom
                   = Language.Haskell.Tools.AST.Ann.Ann
                       @ Language.Haskell.Tools.AST.Representation.Decls.UDecl
                       @ dom
                       @ Language.Haskell.Tools.AST.Ann.SrcTemplateStage
                       ww
                       ww7
                 } in
                 case ww7 of wild {
                   DEFAULT
                   -> (\ (eta :: [GHC.LanguageExtensions.Type.Extension])
                         (eta1 :: ExtMap.ExtMap)
                         (eta2 :: GhcMonad.Session)
                         (eta3 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                       (# eta3, (ww8, eta1) #))
                        `cast`
                      (Trans
                           (<[GHC.LanguageExtensions.Type.Extension]>_R
                            ->_R Trans
                                     (<ExtMap.ExtMap>_R
                                      ->_R Trans
                                               (<GhcMonad.Session>_R
                                                ->_R Sym (GHC.Types.N:IO[0]
                                                              <(Language.Haskell.Tools.AST.ElementTypes.Decl
                                                                  dom,
                                                                ExtMap.ExtMap)>_R))
                                               (Sym (GhcMonad.N:Ghc[0]
                                                         <(Language.Haskell.Tools.AST.ElementTypes.Decl
                                                             dom,
                                                           ExtMap.ExtMap)>_R)))
                                     (Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                               <ExtMap.ExtMap>_N
                                               <GhcMonad.Ghc>_R
                                               <Language.Haskell.Tools.AST.ElementTypes.Decl
                                                  dom>_N)))
                           (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                     <*>_N
                                     <[GHC.LanguageExtensions.Type.Extension]>_R
                                     <Control.Monad.Trans.State.Lazy.StateT
                                        ExtMap.ExtMap GhcMonad.Ghc>_R
                                     <Language.Haskell.Tools.AST.ElementTypes.Decl dom>_N)))
                   Language.Haskell.Tools.AST.Representation.Decls.UDataDecl keyw ctx dh cons derivs
                   -> let {
                        m1 :: Control.Monad.Trans.Reader.ReaderT
                                [GHC.LanguageExtensions.Type.Extension]
                                (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc)
                                ()
                        = case keyw of ww9 { Language.Haskell.Tools.AST.Ann.Ann ww10 ww11 ->
                          DerivingsChecker.$wseparateByKeyword @ dom w ww11 derivs }
                      } in
                      (\ (r1 :: [GHC.LanguageExtensions.Type.Extension]) ->
                       let {
                         m2 :: Control.Monad.Trans.State.Lazy.StateT
                                 (Data.Map.Base.Map
                                    (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                                    [SrcLoc.SrcSpan])
                                 GhcMonad.Ghc
                                 ()
                         = m1
                             `cast`
                           (Control.Monad.Trans.Reader.N:ReaderT[0]
                                <*>_N
                                <[GHC.LanguageExtensions.Type.Extension]>_R
                                <Control.Monad.Trans.State.Lazy.StateT
                                   ExtMap.ExtMap GhcMonad.Ghc>_R
                                <()>_N)
                             r1
                       } in
                       (\ (s1 :: Data.Map.Base.Map
                                   (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                                   [SrcLoc.SrcSpan]) ->
                        let {
                          m :: GhcMonad.Ghc
                                 ((),
                                  Data.Map.Base.Map
                                    (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                                    [SrcLoc.SrcSpan])
                          = m2
                              `cast`
                            (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                 <Data.Map.Base.Map
                                    (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                                    [SrcLoc.SrcSpan]>_N
                                 <GhcMonad.Ghc>_R
                                 <()>_N)
                              s1
                        } in
                        (\ (s :: GhcMonad.Session)
                           (s2 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                         case (m `cast`
                               (GhcMonad.N:Ghc[0]
                                    <((),
                                      Data.Map.Base.Map
                                        (ExtMap.LogicalRelation
                                           GHC.LanguageExtensions.Type.Extension)
                                        [SrcLoc.SrcSpan])>_R)
                                 s)
                                `cast`
                              (GHC.Types.N:IO[0]
                                   <((),
                                     Data.Map.Base.Map
                                       (ExtMap.LogicalRelation
                                          GHC.LanguageExtensions.Type.Extension)
                                       [SrcLoc.SrcSpan])>_R)
                                s2 of ds1 { (#,#) ipv ipv1 ->
                         (# ipv, (ww8, case ipv1 of wild1 { (,) a1 s' -> s' }) #) })
                          `cast`
                        (Trans
                             (<GhcMonad.Session>_R
                              ->_R Sym (GHC.Types.N:IO[0]
                                            <(Language.Haskell.Tools.AST.ElementTypes.Decl dom,
                                              Data.Map.Base.Map
                                                (ExtMap.LogicalRelation
                                                   GHC.LanguageExtensions.Type.Extension)
                                                [SrcLoc.SrcSpan])>_R))
                             (Sym (GhcMonad.N:Ghc[0]
                                       <(Language.Haskell.Tools.AST.ElementTypes.Decl dom,
                                         Data.Map.Base.Map
                                           (ExtMap.LogicalRelation
                                              GHC.LanguageExtensions.Type.Extension)
                                           [SrcLoc.SrcSpan])>_R))))
                         `cast`
                       (Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                 <Data.Map.Base.Map
                                    (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                                    [SrcLoc.SrcSpan]>_N
                                 <GhcMonad.Ghc>_R
                                 <Language.Haskell.Tools.AST.ElementTypes.Decl dom>_N)))
                        `cast`
                      (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                <*>_N
                                <[GHC.LanguageExtensions.Type.Extension]>_R
                                <Control.Monad.Trans.State.Lazy.StateT
                                   ExtMap.ExtMap GhcMonad.Ghc>_R
                                <Language.Haskell.Tools.AST.ElementTypes.Decl dom>_N)) } }) -}
a2e4e44d367d761bd16eb8e09ea3bb48
  $wchkDataInstance ::
    ExtMonad.ExtDomain dom =>
    Language.Haskell.Tools.AST.Ann.NodeInfo
      (Language.Haskell.Tools.AST.Ann.SemanticInfo
         dom Language.Haskell.Tools.AST.Representation.Decls.UDecl)
      (Language.Haskell.Tools.AST.Ann.SpanInfo
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
    -> Language.Haskell.Tools.AST.Representation.Decls.UDecl
         dom Language.Haskell.Tools.AST.Ann.SrcTemplateStage
    -> ExtMonad.ExtMonad
         (Language.Haskell.Tools.AST.ElementTypes.Decl dom)
  {- Arity: 3,
     Strictness: <S(S(LLS(S)LLLLLLLLLL)L),U(U(A,A,U(U),A,A,A,A,A,A,A,A,A,A),C(U))><L,U(U,U(U,U,U,U))><S,U>,
     Inline: [0],
     Unfolding: (\ @ dom
                   (w :: ExtMonad.ExtDomain dom)
                   (ww :: Language.Haskell.Tools.AST.Ann.NodeInfo
                            (Language.Haskell.Tools.AST.Ann.SemanticInfo
                               dom Language.Haskell.Tools.AST.Representation.Decls.UDecl)
                            (Language.Haskell.Tools.AST.Ann.SpanInfo
                               Language.Haskell.Tools.AST.Ann.SrcTemplateStage))
                   (ww7 :: Language.Haskell.Tools.AST.Representation.Decls.UDecl
                             dom Language.Haskell.Tools.AST.Ann.SrcTemplateStage) ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Language.Haskell.Tools.AST.Ann.SemanticInfo'
                             dom Language.Haskell.Tools.AST.Ann.SameInfoDefaultCls)
                        @ Language.Haskell.Tools.AST.SemaInfoTypes.NoSemanticInfo
                        (Language.Haskell.Tools.AST.Ann.$p3Domain
                           @ dom
                           (GHC.Classes.$p1(%,%)
                              @ (Language.Haskell.Tools.AST.Ann.Domain dom)
                              @ (Language.Haskell.Tools.AST.SemaInfoClasses.HasNameInfo'
                                   (Language.Haskell.Tools.AST.Ann.SemanticInfo
                                      dom
                                      Language.Haskell.Tools.AST.Representation.Names.UQualifiedName))
                              w))
                          `cast`
                        (Data.Type.Equality.N:~[0]
                             <*>_N <Language.Haskell.Tools.AST.Ann.SemanticInfo'
                                      dom
                                      Language.Haskell.Tools.AST.Ann.SameInfoDefaultCls>_N <Language.Haskell.Tools.AST.SemaInfoTypes.NoSemanticInfo>_N) of cobox0 { DEFAULT ->
                 let {
                   wild :: Language.Haskell.Tools.AST.ElementTypes.Decl dom
                   = Language.Haskell.Tools.AST.Ann.Ann
                       @ Language.Haskell.Tools.AST.Representation.Decls.UDecl
                       @ dom
                       @ Language.Haskell.Tools.AST.Ann.SrcTemplateStage
                       ww
                       ww7
                 } in
                 case ww7 of wild1 {
                   DEFAULT
                   -> (\ (eta1 :: [GHC.LanguageExtensions.Type.Extension])
                         (eta :: Data.Map.Base.Map
                                   (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                                   [SrcLoc.SrcSpan])
                         (eta2 :: GhcMonad.Session)
                         (eta3 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                       (# eta3, (wild, eta) #))
                        `cast`
                      (Trans
                           (<[GHC.LanguageExtensions.Type.Extension]>_R
                            ->_R Trans
                                     (<Data.Map.Base.Map
                                         (ExtMap.LogicalRelation
                                            GHC.LanguageExtensions.Type.Extension)
                                         [SrcLoc.SrcSpan]>_R
                                      ->_R Trans
                                               (<GhcMonad.Session>_R
                                                ->_R Sym (GHC.Types.N:IO[0]
                                                              <(Language.Haskell.Tools.AST.ElementTypes.Decl
                                                                  dom,
                                                                Data.Map.Base.Map
                                                                  (ExtMap.LogicalRelation
                                                                     GHC.LanguageExtensions.Type.Extension)
                                                                  [SrcLoc.SrcSpan])>_R))
                                               (Sym (GhcMonad.N:Ghc[0]
                                                         <(Language.Haskell.Tools.AST.ElementTypes.Decl
                                                             dom,
                                                           Data.Map.Base.Map
                                                             (ExtMap.LogicalRelation
                                                                GHC.LanguageExtensions.Type.Extension)
                                                             [SrcLoc.SrcSpan])>_R)))
                                     (Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                               <Data.Map.Base.Map
                                                  (ExtMap.LogicalRelation
                                                     GHC.LanguageExtensions.Type.Extension)
                                                  [SrcLoc.SrcSpan]>_N
                                               <GhcMonad.Ghc>_R
                                               <Language.Haskell.Tools.AST.ElementTypes.Decl
                                                  dom>_N)))
                           (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                     <*>_N
                                     <[GHC.LanguageExtensions.Type.Extension]>_R
                                     <Control.Monad.Trans.State.Lazy.StateT
                                        ExtMap.ExtMap GhcMonad.Ghc>_R
                                     <Language.Haskell.Tools.AST.ElementTypes.Decl dom>_N)))
                   Language.Haskell.Tools.AST.Representation.Decls.UDataInstDecl keyw instRule cons derivs
                   -> let {
                        eta1 :: SrcLoc.SrcSpan
                        = case ww of wild2 { Language.Haskell.Tools.AST.Ann.NodeInfo ds1 ds2 ->
                          case ds2
                                 `cast`
                               (Language.Haskell.Tools.Transform.SourceTemplate.D:R:SpanInfoSrcTemplateStage0[0]) of wild3 { Language.Haskell.Tools.Transform.SourceTemplate.SourceTemplateNode ds4 ds5 ds3 ds6 ->
                          ds4 } }
                      } in
                      let {
                        eta2 :: [SrcLoc.SrcSpan]
                        = GHC.Types.: @ SrcLoc.SrcSpan eta1 (GHC.Types.[] @ SrcLoc.SrcSpan)
                      } in
                      let {
                        m1 :: Control.Monad.Trans.Reader.ReaderT
                                [GHC.LanguageExtensions.Type.Extension]
                                (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc)
                                ()
                        = case keyw of ww8 { Language.Haskell.Tools.AST.Ann.Ann ww9 ww10 ->
                          DerivingsChecker.$wseparateByKeyword @ dom w ww10 derivs }
                      } in
                      (\ (r1 :: [GHC.LanguageExtensions.Type.Extension])
                         (s1 :: Data.Map.Base.Map
                                  (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                                  [SrcLoc.SrcSpan]) ->
                       let {
                         a1 :: Data.Map.Base.Map
                                 (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                                 [SrcLoc.SrcSpan]
                         = Data.Map.Strict.insertWithKey
                             @ (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                             @ [SrcLoc.SrcSpan]
                             ExtMonad.$s$fOrdLogicalRelation
                             (ExtMonad.addOccurence_1
                                @ (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension))
                             DerivingsChecker.chkDataInstance_key
                             eta2
                             s1
                       } in
                       (\ (s :: GhcMonad.Session)
                          (s2 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                        case (((m1
                                  `cast`
                                (Control.Monad.Trans.Reader.N:ReaderT[0]
                                     <*>_N
                                     <[GHC.LanguageExtensions.Type.Extension]>_R
                                     <Control.Monad.Trans.State.Lazy.StateT
                                        ExtMap.ExtMap GhcMonad.Ghc>_R
                                     <()>_N)
                                  r1)
                                 `cast`
                               (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                    <Data.Map.Base.Map
                                       (ExtMap.LogicalRelation
                                          GHC.LanguageExtensions.Type.Extension)
                                       [SrcLoc.SrcSpan]>_N
                                    <GhcMonad.Ghc>_R
                                    <()>_N)
                                 a1)
                                `cast`
                              (GhcMonad.N:Ghc[0]
                                   <((),
                                     Data.Map.Base.Map
                                       (ExtMap.LogicalRelation
                                          GHC.LanguageExtensions.Type.Extension)
                                       [SrcLoc.SrcSpan])>_R)
                                s)
                               `cast`
                             (GHC.Types.N:IO[0]
                                  <((),
                                    Data.Map.Base.Map
                                      (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                                      [SrcLoc.SrcSpan])>_R)
                               s2 of ds1 { (#,#) ipv ipv1 ->
                        (# ipv, (wild, case ipv1 of wild2 { (,) a2 s' -> s' }) #) })
                         `cast`
                       (Trans
                            (<GhcMonad.Session>_R
                             ->_R Sym (GHC.Types.N:IO[0]
                                           <(Language.Haskell.Tools.AST.ElementTypes.Decl dom,
                                             Data.Map.Base.Map
                                               (ExtMap.LogicalRelation
                                                  GHC.LanguageExtensions.Type.Extension)
                                               [SrcLoc.SrcSpan])>_R))
                            (Sym (GhcMonad.N:Ghc[0]
                                      <(Language.Haskell.Tools.AST.ElementTypes.Decl dom,
                                        Data.Map.Base.Map
                                          (ExtMap.LogicalRelation
                                             GHC.LanguageExtensions.Type.Extension)
                                          [SrcLoc.SrcSpan])>_R))))
                        `cast`
                      (Trans
                           (<[GHC.LanguageExtensions.Type.Extension]>_R
                            ->_R Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                          <Data.Map.Base.Map
                                             (ExtMap.LogicalRelation
                                                GHC.LanguageExtensions.Type.Extension)
                                             [SrcLoc.SrcSpan]>_N
                                          <GhcMonad.Ghc>_R
                                          <Language.Haskell.Tools.AST.ElementTypes.Decl dom>_N))
                           (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                     <*>_N
                                     <[GHC.LanguageExtensions.Type.Extension]>_R
                                     <Control.Monad.Trans.State.Lazy.StateT
                                        ExtMap.ExtMap GhcMonad.Ghc>_R
                                     <Language.Haskell.Tools.AST.ElementTypes.Decl dom>_N))) } }) -}
fa3904133ab788323f9840198b2cba6c
  $wchkGADTDataDecl ::
    ExtMonad.ExtDomain dom =>
    Language.Haskell.Tools.AST.Ann.NodeInfo
      (Language.Haskell.Tools.AST.Ann.SemanticInfo
         dom Language.Haskell.Tools.AST.Representation.Decls.UDecl)
      (Language.Haskell.Tools.AST.Ann.SpanInfo
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
    -> Language.Haskell.Tools.AST.Representation.Decls.UDecl
         dom Language.Haskell.Tools.AST.Ann.SrcTemplateStage
    -> ExtMonad.ExtMonad
         (Language.Haskell.Tools.AST.ElementTypes.Decl dom)
  {- Arity: 3,
     Strictness: <S(S(LLS(S)LLLLLLLLLL)L),U(U(A,A,U(U),A,A,A,A,A,A,A,A,A,A),C(U))><L,U(U,U(U,U,U,U))><S,U>,
     Inline: [0],
     Unfolding: (\ @ dom
                   (w :: ExtMonad.ExtDomain dom)
                   (ww :: Language.Haskell.Tools.AST.Ann.NodeInfo
                            (Language.Haskell.Tools.AST.Ann.SemanticInfo
                               dom Language.Haskell.Tools.AST.Representation.Decls.UDecl)
                            (Language.Haskell.Tools.AST.Ann.SpanInfo
                               Language.Haskell.Tools.AST.Ann.SrcTemplateStage))
                   (ww7 :: Language.Haskell.Tools.AST.Representation.Decls.UDecl
                             dom Language.Haskell.Tools.AST.Ann.SrcTemplateStage) ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Language.Haskell.Tools.AST.Ann.SemanticInfo'
                             dom Language.Haskell.Tools.AST.Ann.SameInfoDefaultCls)
                        @ Language.Haskell.Tools.AST.SemaInfoTypes.NoSemanticInfo
                        (Language.Haskell.Tools.AST.Ann.$p3Domain
                           @ dom
                           (GHC.Classes.$p1(%,%)
                              @ (Language.Haskell.Tools.AST.Ann.Domain dom)
                              @ (Language.Haskell.Tools.AST.SemaInfoClasses.HasNameInfo'
                                   (Language.Haskell.Tools.AST.Ann.SemanticInfo
                                      dom
                                      Language.Haskell.Tools.AST.Representation.Names.UQualifiedName))
                              w))
                          `cast`
                        (Data.Type.Equality.N:~[0]
                             <*>_N <Language.Haskell.Tools.AST.Ann.SemanticInfo'
                                      dom
                                      Language.Haskell.Tools.AST.Ann.SameInfoDefaultCls>_N <Language.Haskell.Tools.AST.SemaInfoTypes.NoSemanticInfo>_N) of cobox0 { DEFAULT ->
                 let {
                   ww8 :: Language.Haskell.Tools.AST.ElementTypes.Decl dom
                   = Language.Haskell.Tools.AST.Ann.Ann
                       @ Language.Haskell.Tools.AST.Representation.Decls.UDecl
                       @ dom
                       @ Language.Haskell.Tools.AST.Ann.SrcTemplateStage
                       ww
                       ww7
                 } in
                 case ww7 of wild {
                   DEFAULT
                   -> (\ (eta :: [GHC.LanguageExtensions.Type.Extension])
                         (eta1 :: ExtMap.ExtMap)
                         (eta2 :: GhcMonad.Session)
                         (eta3 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                       (# eta3, (ww8, eta1) #))
                        `cast`
                      (Trans
                           (<[GHC.LanguageExtensions.Type.Extension]>_R
                            ->_R Trans
                                     (<ExtMap.ExtMap>_R
                                      ->_R Trans
                                               (<GhcMonad.Session>_R
                                                ->_R Sym (GHC.Types.N:IO[0]
                                                              <(Language.Haskell.Tools.AST.ElementTypes.Decl
                                                                  dom,
                                                                ExtMap.ExtMap)>_R))
                                               (Sym (GhcMonad.N:Ghc[0]
                                                         <(Language.Haskell.Tools.AST.ElementTypes.Decl
                                                             dom,
                                                           ExtMap.ExtMap)>_R)))
                                     (Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                               <ExtMap.ExtMap>_N
                                               <GhcMonad.Ghc>_R
                                               <Language.Haskell.Tools.AST.ElementTypes.Decl
                                                  dom>_N)))
                           (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                     <*>_N
                                     <[GHC.LanguageExtensions.Type.Extension]>_R
                                     <Control.Monad.Trans.State.Lazy.StateT
                                        ExtMap.ExtMap GhcMonad.Ghc>_R
                                     <Language.Haskell.Tools.AST.ElementTypes.Decl dom>_N)))
                   Language.Haskell.Tools.AST.Representation.Decls.UGDataDecl keyw ctx dh kind cons derivs
                   -> let {
                        eta1 :: SrcLoc.SrcSpan
                        = case ww of wild1 { Language.Haskell.Tools.AST.Ann.NodeInfo ds1 ds2 ->
                          case ds2
                                 `cast`
                               (Language.Haskell.Tools.Transform.SourceTemplate.D:R:SpanInfoSrcTemplateStage0[0]) of wild2 { Language.Haskell.Tools.Transform.SourceTemplate.SourceTemplateNode ds4 ds5 ds3 ds6 ->
                          ds4 } }
                      } in
                      let {
                        eta2 :: [SrcLoc.SrcSpan]
                        = GHC.Types.: @ SrcLoc.SrcSpan eta1 (GHC.Types.[] @ SrcLoc.SrcSpan)
                      } in
                      let {
                        m1 :: Control.Monad.Trans.Reader.ReaderT
                                [GHC.LanguageExtensions.Type.Extension]
                                (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc)
                                ()
                        = case keyw of ww9 { Language.Haskell.Tools.AST.Ann.Ann ww10 ww11 ->
                          DerivingsChecker.$wseparateByKeyword @ dom w ww11 derivs }
                      } in
                      (\ (r1 :: [GHC.LanguageExtensions.Type.Extension])
                         (s1 :: Data.Map.Base.Map
                                  (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                                  [SrcLoc.SrcSpan]) ->
                       let {
                         a1 :: Data.Map.Base.Map
                                 (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                                 [SrcLoc.SrcSpan]
                         = Data.Map.Strict.insertWithKey
                             @ (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                             @ [SrcLoc.SrcSpan]
                             ExtMonad.$s$fOrdLogicalRelation
                             (ExtMonad.addOccurence_1
                                @ (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension))
                             DerivingsChecker.chkDerivings_key
                             eta2
                             s1
                       } in
                       (\ (s :: GhcMonad.Session)
                          (s2 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                        case (((m1
                                  `cast`
                                (Control.Monad.Trans.Reader.N:ReaderT[0]
                                     <*>_N
                                     <[GHC.LanguageExtensions.Type.Extension]>_R
                                     <Control.Monad.Trans.State.Lazy.StateT
                                        ExtMap.ExtMap GhcMonad.Ghc>_R
                                     <()>_N)
                                  r1)
                                 `cast`
                               (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                    <Data.Map.Base.Map
                                       (ExtMap.LogicalRelation
                                          GHC.LanguageExtensions.Type.Extension)
                                       [SrcLoc.SrcSpan]>_N
                                    <GhcMonad.Ghc>_R
                                    <()>_N)
                                 a1)
                                `cast`
                              (GhcMonad.N:Ghc[0]
                                   <((),
                                     Data.Map.Base.Map
                                       (ExtMap.LogicalRelation
                                          GHC.LanguageExtensions.Type.Extension)
                                       [SrcLoc.SrcSpan])>_R)
                                s)
                               `cast`
                             (GHC.Types.N:IO[0]
                                  <((),
                                    Data.Map.Base.Map
                                      (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                                      [SrcLoc.SrcSpan])>_R)
                               s2 of ds1 { (#,#) ipv ipv1 ->
                        (# ipv, (ww8, case ipv1 of wild1 { (,) a2 s' -> s' }) #) })
                         `cast`
                       (Trans
                            (<GhcMonad.Session>_R
                             ->_R Sym (GHC.Types.N:IO[0]
                                           <(Language.Haskell.Tools.AST.ElementTypes.Decl dom,
                                             Data.Map.Base.Map
                                               (ExtMap.LogicalRelation
                                                  GHC.LanguageExtensions.Type.Extension)
                                               [SrcLoc.SrcSpan])>_R))
                            (Sym (GhcMonad.N:Ghc[0]
                                      <(Language.Haskell.Tools.AST.ElementTypes.Decl dom,
                                        Data.Map.Base.Map
                                          (ExtMap.LogicalRelation
                                             GHC.LanguageExtensions.Type.Extension)
                                          [SrcLoc.SrcSpan])>_R))))
                        `cast`
                      (Trans
                           (<[GHC.LanguageExtensions.Type.Extension]>_R
                            ->_R Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                          <Data.Map.Base.Map
                                             (ExtMap.LogicalRelation
                                                GHC.LanguageExtensions.Type.Extension)
                                             [SrcLoc.SrcSpan]>_N
                                          <GhcMonad.Ghc>_R
                                          <Language.Haskell.Tools.AST.ElementTypes.Decl dom>_N))
                           (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                     <*>_N
                                     <[GHC.LanguageExtensions.Type.Extension]>_R
                                     <Control.Monad.Trans.State.Lazy.StateT
                                        ExtMap.ExtMap GhcMonad.Ghc>_R
                                     <Language.Haskell.Tools.AST.ElementTypes.Decl dom>_N))) } }) -}
f2c9e091f928e7dfc95536174251a047
  $wchkStandaloneDeriving ::
    ExtMonad.ExtDomain dom =>
    Language.Haskell.Tools.AST.Ann.NodeInfo
      (Language.Haskell.Tools.AST.Ann.SemanticInfo
         dom Language.Haskell.Tools.AST.Representation.Decls.UDecl)
      (Language.Haskell.Tools.AST.Ann.SpanInfo
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
    -> Language.Haskell.Tools.AST.Representation.Decls.UDecl
         dom Language.Haskell.Tools.AST.Ann.SrcTemplateStage
    -> ExtMonad.ExtMonad
         (Language.Haskell.Tools.AST.ElementTypes.Decl dom)
  {- Arity: 3,
     Strictness: <S(S(LLS(S)LLLLLLLLLL)L),U(U(A,A,U(U),A,A,A,A,A,A,A,A,A,A),C(U))><L,U(U,U(U,U,U,U))><S,U>,
     Inline: [0] -}
bc38a28bc3207389c87f50d478ba4e36
  $wgetClassCon ::
    Language.Haskell.Tools.AST.Ann.NodeInfo
      (Language.Haskell.Tools.AST.Ann.SemanticInfo
         dom Language.Haskell.Tools.AST.Representation.Decls.UInstanceHead)
      (Language.Haskell.Tools.AST.Ann.SpanInfo
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
    -> Language.Haskell.Tools.AST.Representation.Decls.UInstanceHead
         dom Language.Haskell.Tools.AST.Ann.SrcTemplateStage
    -> (# Language.Haskell.Tools.AST.Ann.NodeInfo
            (Language.Haskell.Tools.AST.Ann.SemanticInfo
               dom Language.Haskell.Tools.AST.Representation.Decls.UInstanceHead)
            (Language.Haskell.Tools.AST.Ann.SpanInfo
               Language.Haskell.Tools.AST.Ann.SrcTemplateStage),
          Language.Haskell.Tools.AST.Representation.Decls.UInstanceHead
            dom Language.Haskell.Tools.AST.Ann.SrcTemplateStage #)
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><S,U>, Inline: [0] -}
7b4758bb374feca2bcb31777123620e9
  $wlvl ::
    (Language.Haskell.Tools.AST.ElementTypes.InstanceHead dom
     -> ExtMonad.ExtMonad
          (Language.Haskell.Tools.AST.ElementTypes.InstanceHead dom))
    -> Language.Haskell.Tools.AST.Ann.NodeInfo
         (Language.Haskell.Tools.AST.Ann.SemanticInfo
            dom Language.Haskell.Tools.AST.Representation.Decls.UDeriving)
         (Language.Haskell.Tools.AST.Ann.SpanInfo
            Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
    -> Language.Haskell.Tools.AST.Representation.Decls.UDeriving
         dom Language.Haskell.Tools.AST.Ann.SrcTemplateStage
    -> ExtMonad.ExtMonad
         (Language.Haskell.Tools.AST.ElementTypes.Deriving dom)
  {- Arity: 3, HasNoCafRefs, Strictness: <L,C(U)><L,U><S,U>,
     Inline: [0],
     Unfolding: (\ @ dom
                   (w :: Language.Haskell.Tools.AST.ElementTypes.InstanceHead dom
                         -> ExtMonad.ExtMonad
                              (Language.Haskell.Tools.AST.ElementTypes.InstanceHead dom))
                   (ww :: Language.Haskell.Tools.AST.Ann.NodeInfo
                            (Language.Haskell.Tools.AST.Ann.SemanticInfo
                               dom Language.Haskell.Tools.AST.Representation.Decls.UDeriving)
                            (Language.Haskell.Tools.AST.Ann.SpanInfo
                               Language.Haskell.Tools.AST.Ann.SrcTemplateStage))
                   (ww7 :: Language.Haskell.Tools.AST.Representation.Decls.UDeriving
                             dom Language.Haskell.Tools.AST.Ann.SrcTemplateStage) ->
                 let {
                   wild :: Language.Haskell.Tools.AST.ElementTypes.Deriving dom
                   = Language.Haskell.Tools.AST.Ann.Ann
                       @ Language.Haskell.Tools.AST.Representation.Decls.UDeriving
                       @ dom
                       @ Language.Haskell.Tools.AST.Ann.SrcTemplateStage
                       ww
                       ww7
                 } in
                 case ww7 of wild1 {
                   Language.Haskell.Tools.AST.Representation.Decls.UDerivingOne deriv
                   -> let {
                        m1 :: Control.Monad.Trans.Reader.ReaderT
                                [GHC.LanguageExtensions.Type.Extension]
                                (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc)
                                (Language.Haskell.Tools.AST.ElementTypes.InstanceHead dom)
                        = w deriv
                      } in
                      (\ (r1 :: [GHC.LanguageExtensions.Type.Extension]) ->
                       let {
                         m2 :: Control.Monad.Trans.State.Lazy.StateT
                                 (Data.Map.Base.Map
                                    (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                                    [SrcLoc.SrcSpan])
                                 GhcMonad.Ghc
                                 (Language.Haskell.Tools.AST.ElementTypes.InstanceHead dom)
                         = m1
                             `cast`
                           (Control.Monad.Trans.Reader.N:ReaderT[0]
                                <*>_N
                                <[GHC.LanguageExtensions.Type.Extension]>_R
                                <Control.Monad.Trans.State.Lazy.StateT
                                   ExtMap.ExtMap GhcMonad.Ghc>_R
                                <Language.Haskell.Tools.AST.ElementTypes.InstanceHead dom>_N)
                             r1
                       } in
                       (\ (s1 :: Data.Map.Base.Map
                                   (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                                   [SrcLoc.SrcSpan]) ->
                        let {
                          m :: GhcMonad.Ghc
                                 (Language.Haskell.Tools.AST.ElementTypes.InstanceHead dom,
                                  Data.Map.Base.Map
                                    (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                                    [SrcLoc.SrcSpan])
                          = m2
                              `cast`
                            (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                 <Data.Map.Base.Map
                                    (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                                    [SrcLoc.SrcSpan]>_N
                                 <GhcMonad.Ghc>_R
                                 <Language.Haskell.Tools.AST.ElementTypes.InstanceHead dom>_N)
                              s1
                        } in
                        (\ (s :: GhcMonad.Session)
                           (s2 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                         case (m `cast`
                               (GhcMonad.N:Ghc[0]
                                    <(Language.Haskell.Tools.AST.ElementTypes.InstanceHead dom,
                                      Data.Map.Base.Map
                                        (ExtMap.LogicalRelation
                                           GHC.LanguageExtensions.Type.Extension)
                                        [SrcLoc.SrcSpan])>_R)
                                 s)
                                `cast`
                              (GHC.Types.N:IO[0]
                                   <(Language.Haskell.Tools.AST.ElementTypes.InstanceHead dom,
                                     Data.Map.Base.Map
                                       (ExtMap.LogicalRelation
                                          GHC.LanguageExtensions.Type.Extension)
                                       [SrcLoc.SrcSpan])>_R)
                                s2 of ds1 { (#,#) ipv ipv1 ->
                         (# ipv, (wild, case ipv1 of wild2 { (,) a1 s' -> s' }) #) })
                          `cast`
                        (Trans
                             (<GhcMonad.Session>_R
                              ->_R Sym (GHC.Types.N:IO[0]
                                            <(Language.Haskell.Tools.AST.ElementTypes.Deriving dom,
                                              Data.Map.Base.Map
                                                (ExtMap.LogicalRelation
                                                   GHC.LanguageExtensions.Type.Extension)
                                                [SrcLoc.SrcSpan])>_R))
                             (Sym (GhcMonad.N:Ghc[0]
                                       <(Language.Haskell.Tools.AST.ElementTypes.Deriving dom,
                                         Data.Map.Base.Map
                                           (ExtMap.LogicalRelation
                                              GHC.LanguageExtensions.Type.Extension)
                                           [SrcLoc.SrcSpan])>_R))))
                         `cast`
                       (Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                 <Data.Map.Base.Map
                                    (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                                    [SrcLoc.SrcSpan]>_N
                                 <GhcMonad.Ghc>_R
                                 <Language.Haskell.Tools.AST.ElementTypes.Deriving dom>_N)))
                        `cast`
                      (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                <*>_N
                                <[GHC.LanguageExtensions.Type.Extension]>_R
                                <Control.Monad.Trans.State.Lazy.StateT
                                   ExtMap.ExtMap GhcMonad.Ghc>_R
                                <Language.Haskell.Tools.AST.ElementTypes.Deriving dom>_N))
                   Language.Haskell.Tools.AST.Representation.Decls.UDerivings ipv
                   -> let {
                        m1 :: Control.Monad.Trans.Reader.ReaderT
                                [GHC.LanguageExtensions.Type.Extension]
                                (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc)
                                ()
                        = case ipv of wild2 { Language.Haskell.Tools.AST.Ann.AnnListG ds1 ds2 ->
                          letrec {
                            go :: [Language.Haskell.Tools.AST.ElementTypes.InstanceHead dom]
                                  -> Control.Monad.Trans.Reader.ReaderT
                                       [GHC.LanguageExtensions.Type.Extension]
                                       (Control.Monad.Trans.State.Lazy.StateT
                                          ExtMap.ExtMap GhcMonad.Ghc)
                                       ()
                              {- Arity: 1, Strictness: <S,1*U> -}
                            = \ (ds :: [Language.Haskell.Tools.AST.ElementTypes.InstanceHead
                                          dom]) ->
                              case ds of wild3 {
                                []
                                -> DerivingsChecker.$swhen1
                                     `cast`
                                   (Trans
                                        (<[GHC.LanguageExtensions.Type.Extension]>_R
                                         ->_R Trans
                                                  (<Data.Map.Base.Map
                                                      (ExtMap.LogicalRelation
                                                         GHC.LanguageExtensions.Type.Extension)
                                                      [SrcLoc.SrcSpan]>_R
                                                   ->_R Trans
                                                            (<GhcMonad.Session>_R
                                                             ->_R Sym (GHC.Types.N:IO[0]
                                                                           <((),
                                                                             Data.Map.Base.Map
                                                                               (ExtMap.LogicalRelation
                                                                                  GHC.LanguageExtensions.Type.Extension)
                                                                               [SrcLoc.SrcSpan])>_R))
                                                            (Sym (GhcMonad.N:Ghc[0]
                                                                      <((),
                                                                        Data.Map.Base.Map
                                                                          (ExtMap.LogicalRelation
                                                                             GHC.LanguageExtensions.Type.Extension)
                                                                          [SrcLoc.SrcSpan])>_R)))
                                                  (Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                                            <Data.Map.Base.Map
                                                               (ExtMap.LogicalRelation
                                                                  GHC.LanguageExtensions.Type.Extension)
                                                               [SrcLoc.SrcSpan]>_N
                                                            <GhcMonad.Ghc>_R
                                                            <()>_N)))
                                        (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                                  <*>_N
                                                  <[GHC.LanguageExtensions.Type.Extension]>_R
                                                  <Control.Monad.Trans.State.Lazy.StateT
                                                     ExtMap.ExtMap GhcMonad.Ghc>_R
                                                  <()>_N)))
                                : y ys
                                -> let {
                                     m2 :: Control.Monad.Trans.Reader.ReaderT
                                             [GHC.LanguageExtensions.Type.Extension]
                                             (Control.Monad.Trans.State.Lazy.StateT
                                                ExtMap.ExtMap GhcMonad.Ghc)
                                             (Language.Haskell.Tools.AST.ElementTypes.InstanceHead
                                                dom)
                                     = w y
                                   } in
                                   let {
                                     k :: Control.Monad.Trans.Reader.ReaderT
                                            [GHC.LanguageExtensions.Type.Extension]
                                            (Control.Monad.Trans.State.Lazy.StateT
                                               ExtMap.ExtMap GhcMonad.Ghc)
                                            ()
                                     = go ys
                                   } in
                                   (\ (r1 :: [GHC.LanguageExtensions.Type.Extension]) ->
                                    let {
                                      m3 :: Control.Monad.Trans.State.Lazy.StateT
                                              (Data.Map.Base.Map
                                                 (ExtMap.LogicalRelation
                                                    GHC.LanguageExtensions.Type.Extension)
                                                 [SrcLoc.SrcSpan])
                                              GhcMonad.Ghc
                                              (Language.Haskell.Tools.AST.ElementTypes.InstanceHead
                                                 dom)
                                      = m2
                                          `cast`
                                        (Control.Monad.Trans.Reader.N:ReaderT[0]
                                             <*>_N
                                             <[GHC.LanguageExtensions.Type.Extension]>_R
                                             <Control.Monad.Trans.State.Lazy.StateT
                                                ExtMap.ExtMap GhcMonad.Ghc>_R
                                             <Language.Haskell.Tools.AST.ElementTypes.InstanceHead
                                                dom>_N)
                                          r1
                                    } in
                                    (\ (s1 :: Data.Map.Base.Map
                                                (ExtMap.LogicalRelation
                                                   GHC.LanguageExtensions.Type.Extension)
                                                [SrcLoc.SrcSpan]) ->
                                     let {
                                       m :: GhcMonad.Ghc
                                              (Language.Haskell.Tools.AST.ElementTypes.InstanceHead
                                                 dom,
                                               Data.Map.Base.Map
                                                 (ExtMap.LogicalRelation
                                                    GHC.LanguageExtensions.Type.Extension)
                                                 [SrcLoc.SrcSpan])
                                       = m3
                                           `cast`
                                         (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                              <Data.Map.Base.Map
                                                 (ExtMap.LogicalRelation
                                                    GHC.LanguageExtensions.Type.Extension)
                                                 [SrcLoc.SrcSpan]>_N
                                              <GhcMonad.Ghc>_R
                                              <Language.Haskell.Tools.AST.ElementTypes.InstanceHead
                                                 dom>_N)
                                           s1
                                     } in
                                     (\ (s :: GhcMonad.Session)
                                        (s2 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                                      case (m `cast`
                                            (GhcMonad.N:Ghc[0]
                                                 <(Language.Haskell.Tools.AST.ElementTypes.InstanceHead
                                                     dom,
                                                   Data.Map.Base.Map
                                                     (ExtMap.LogicalRelation
                                                        GHC.LanguageExtensions.Type.Extension)
                                                     [SrcLoc.SrcSpan])>_R)
                                              s)
                                             `cast`
                                           (GHC.Types.N:IO[0]
                                                <(Language.Haskell.Tools.AST.ElementTypes.InstanceHead
                                                    dom,
                                                  Data.Map.Base.Map
                                                    (ExtMap.LogicalRelation
                                                       GHC.LanguageExtensions.Type.Extension)
                                                    [SrcLoc.SrcSpan])>_R)
                                             s2 of ds4 { (#,#) ipv1 ipv2 ->
                                      (((k `cast`
                                         (Control.Monad.Trans.Reader.N:ReaderT[0]
                                              <*>_N
                                              <[GHC.LanguageExtensions.Type.Extension]>_R
                                              <Control.Monad.Trans.State.Lazy.StateT
                                                 ExtMap.ExtMap GhcMonad.Ghc>_R
                                              <()>_N)
                                           r1)
                                          `cast`
                                        (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                             <Data.Map.Base.Map
                                                (ExtMap.LogicalRelation
                                                   GHC.LanguageExtensions.Type.Extension)
                                                [SrcLoc.SrcSpan]>_N
                                             <GhcMonad.Ghc>_R
                                             <()>_N)
                                          (case ipv2 of wild4 { (,) a1 s' -> s' }))
                                         `cast`
                                       (GhcMonad.N:Ghc[0]
                                            <((),
                                              Data.Map.Base.Map
                                                (ExtMap.LogicalRelation
                                                   GHC.LanguageExtensions.Type.Extension)
                                                [SrcLoc.SrcSpan])>_R)
                                         s)
                                        `cast`
                                      (GHC.Types.N:IO[0]
                                           <((),
                                             Data.Map.Base.Map
                                               (ExtMap.LogicalRelation
                                                  GHC.LanguageExtensions.Type.Extension)
                                               [SrcLoc.SrcSpan])>_R)
                                        ipv1 })
                                       `cast`
                                     (Trans
                                          (<GhcMonad.Session>_R
                                           ->_R Sym (GHC.Types.N:IO[0]
                                                         <((),
                                                           Data.Map.Base.Map
                                                             (ExtMap.LogicalRelation
                                                                GHC.LanguageExtensions.Type.Extension)
                                                             [SrcLoc.SrcSpan])>_R))
                                          (Sym (GhcMonad.N:Ghc[0]
                                                    <((),
                                                      Data.Map.Base.Map
                                                        (ExtMap.LogicalRelation
                                                           GHC.LanguageExtensions.Type.Extension)
                                                        [SrcLoc.SrcSpan])>_R))))
                                      `cast`
                                    (Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                              <Data.Map.Base.Map
                                                 (ExtMap.LogicalRelation
                                                    GHC.LanguageExtensions.Type.Extension)
                                                 [SrcLoc.SrcSpan]>_N
                                              <GhcMonad.Ghc>_R
                                              <()>_N)))
                                     `cast`
                                   (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                             <*>_N
                                             <[GHC.LanguageExtensions.Type.Extension]>_R
                                             <Control.Monad.Trans.State.Lazy.StateT
                                                ExtMap.ExtMap GhcMonad.Ghc>_R
                                             <()>_N)) }
                          } in
                          go ds2 }
                      } in
                      (\ (r1 :: [GHC.LanguageExtensions.Type.Extension]) ->
                       let {
                         m2 :: Control.Monad.Trans.State.Lazy.StateT
                                 (Data.Map.Base.Map
                                    (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                                    [SrcLoc.SrcSpan])
                                 GhcMonad.Ghc
                                 ()
                         = m1
                             `cast`
                           (Control.Monad.Trans.Reader.N:ReaderT[0]
                                <*>_N
                                <[GHC.LanguageExtensions.Type.Extension]>_R
                                <Control.Monad.Trans.State.Lazy.StateT
                                   ExtMap.ExtMap GhcMonad.Ghc>_R
                                <()>_N)
                             r1
                       } in
                       (\ (s1 :: Data.Map.Base.Map
                                   (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                                   [SrcLoc.SrcSpan]) ->
                        let {
                          m :: GhcMonad.Ghc
                                 ((),
                                  Data.Map.Base.Map
                                    (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                                    [SrcLoc.SrcSpan])
                          = m2
                              `cast`
                            (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                 <Data.Map.Base.Map
                                    (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                                    [SrcLoc.SrcSpan]>_N
                                 <GhcMonad.Ghc>_R
                                 <()>_N)
                              s1
                        } in
                        (\ (s :: GhcMonad.Session)
                           (s2 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                         case (m `cast`
                               (GhcMonad.N:Ghc[0]
                                    <((),
                                      Data.Map.Base.Map
                                        (ExtMap.LogicalRelation
                                           GHC.LanguageExtensions.Type.Extension)
                                        [SrcLoc.SrcSpan])>_R)
                                 s)
                                `cast`
                              (GHC.Types.N:IO[0]
                                   <((),
                                     Data.Map.Base.Map
                                       (ExtMap.LogicalRelation
                                          GHC.LanguageExtensions.Type.Extension)
                                       [SrcLoc.SrcSpan])>_R)
                                s2 of ds1 { (#,#) ipv1 ipv2 ->
                         (# ipv1, (wild, case ipv2 of wild2 { (,) a1 s' -> s' }) #) })
                          `cast`
                        (Trans
                             (<GhcMonad.Session>_R
                              ->_R Sym (GHC.Types.N:IO[0]
                                            <(Language.Haskell.Tools.AST.ElementTypes.Deriving dom,
                                              Data.Map.Base.Map
                                                (ExtMap.LogicalRelation
                                                   GHC.LanguageExtensions.Type.Extension)
                                                [SrcLoc.SrcSpan])>_R))
                             (Sym (GhcMonad.N:Ghc[0]
                                       <(Language.Haskell.Tools.AST.ElementTypes.Deriving dom,
                                         Data.Map.Base.Map
                                           (ExtMap.LogicalRelation
                                              GHC.LanguageExtensions.Type.Extension)
                                           [SrcLoc.SrcSpan])>_R))))
                         `cast`
                       (Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                 <Data.Map.Base.Map
                                    (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                                    [SrcLoc.SrcSpan]>_N
                                 <GhcMonad.Ghc>_R
                                 <Language.Haskell.Tools.AST.ElementTypes.Deriving dom>_N)))
                        `cast`
                      (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                <*>_N
                                <[GHC.LanguageExtensions.Type.Extension]>_R
                                <Control.Monad.Trans.State.Lazy.StateT
                                   ExtMap.ExtMap GhcMonad.Ghc>_R
                                <Language.Haskell.Tools.AST.ElementTypes.Deriving dom>_N)) }) -}
2268379b3b57265263fef17af48bd1ae
  $wlvl1 ::
    GHC.Prim.Void# -> Language.Haskell.Tools.AST.ElementTypes.Type dom
  {- Arity: 1, Strictness: <L,U>x, Inline: [0] -}
a3aeb260bd83cd55cb3d07fcc8a2e1ea
  $wnameFromType ::
    Language.Haskell.Tools.AST.Representation.Types.UType
      dom Language.Haskell.Tools.AST.Ann.SrcTemplateStage
    -> GHC.Base.Maybe
         (Language.Haskell.Tools.AST.ElementTypes.Name dom)
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>, Inline: [0] -}
4a95f3cda901b4bd32656c3fd9d41bf5
  $wseparateByKeyword ::
    Language.Haskell.Tools.AST.SemaInfoClasses.HasNameInfo dom =>
    Language.Haskell.Tools.AST.Representation.Decls.UDataOrNewtypeKeyword
      dom Language.Haskell.Tools.AST.Ann.SrcTemplateStage
    -> Language.Haskell.Tools.AST.Ann.AnnMaybeG
         Language.Haskell.Tools.AST.Representation.Decls.UDeriving
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage
    -> Control.Monad.Trans.Reader.ReaderT
         [GHC.LanguageExtensions.Type.Extension]
         (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc)
         ()
  {- Arity: 3,
     Strictness: <S(S(LLS(S)LLLLLLLLLL)L),U(U(A,A,U(U),A,A,A,A,A,A,A,A,A,A),C(U))><S,1*U><L,U>,
     Inline: [0],
     Unfolding: (\ @ dom
                   (w :: Language.Haskell.Tools.AST.SemaInfoClasses.HasNameInfo dom)
                   (ww :: Language.Haskell.Tools.AST.Representation.Decls.UDataOrNewtypeKeyword
                            dom Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   (w1 :: Language.Haskell.Tools.AST.Ann.AnnMaybeG
                            Language.Haskell.Tools.AST.Representation.Decls.UDeriving
                            dom
                            Language.Haskell.Tools.AST.Ann.SrcTemplateStage) ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Language.Haskell.Tools.AST.Ann.SemanticInfo'
                             dom Language.Haskell.Tools.AST.Ann.SameInfoDefaultCls)
                        @ Language.Haskell.Tools.AST.SemaInfoTypes.NoSemanticInfo
                        (Language.Haskell.Tools.AST.Ann.$p3Domain
                           @ dom
                           (GHC.Classes.$p1(%,%)
                              @ (Language.Haskell.Tools.AST.Ann.Domain dom)
                              @ (Language.Haskell.Tools.AST.SemaInfoClasses.HasNameInfo'
                                   (Language.Haskell.Tools.AST.Ann.SemanticInfo
                                      dom
                                      Language.Haskell.Tools.AST.Representation.Names.UQualifiedName))
                              w))
                          `cast`
                        (Data.Type.Equality.N:~[0]
                             <*>_N <Language.Haskell.Tools.AST.Ann.SemanticInfo'
                                      dom
                                      Language.Haskell.Tools.AST.Ann.SameInfoDefaultCls>_N <Language.Haskell.Tools.AST.SemaInfoTypes.NoSemanticInfo>_N) of cobox0 { DEFAULT ->
                 let {
                   checkWith :: (Language.Haskell.Tools.AST.ElementTypes.InstanceHead
                                   dom
                                 -> ExtMonad.ExtMonad
                                      (Language.Haskell.Tools.AST.ElementTypes.InstanceHead dom))
                                -> Control.Monad.Trans.Reader.ReaderT
                                     [GHC.LanguageExtensions.Type.Extension]
                                     (Control.Monad.Trans.State.Lazy.StateT
                                        ExtMap.ExtMap GhcMonad.Ghc)
                                     ()
                     {- Arity: 1, Strictness: <L,C(U)> -}
                   = \ (f :: Language.Haskell.Tools.AST.ElementTypes.InstanceHead dom
                             -> ExtMonad.ExtMonad
                                  (Language.Haskell.Tools.AST.ElementTypes.InstanceHead
                                     dom))[OneShot] ->
                     let {
                       m1 :: Control.Monad.Trans.Reader.ReaderT
                               [GHC.LanguageExtensions.Type.Extension]
                               (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc)
                               (Language.Haskell.Tools.AST.Ann.AnnMaybeG
                                  Language.Haskell.Tools.AST.Representation.Decls.UDeriving
                                  dom
                                  Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                       = case DerivingsChecker.chkDataDecl2
                                @ dom of wild { Control.Reference.Representation.Reference ds1 ds2 ds3 ds4 ds5 ds6 ->
                         ds3
                           (\ (eta :: Language.Haskell.Tools.AST.ElementTypes.Deriving dom) ->
                            DerivingsChecker.chkDataDecl1 @ dom f eta)
                           w1 }
                     } in
                     (\ (r1 :: [GHC.LanguageExtensions.Type.Extension]) ->
                      let {
                        m2 :: Control.Monad.Trans.State.Lazy.StateT
                                (Data.Map.Base.Map
                                   (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                                   [SrcLoc.SrcSpan])
                                GhcMonad.Ghc
                                (Language.Haskell.Tools.AST.Ann.AnnMaybeG
                                   Language.Haskell.Tools.AST.Representation.Decls.UDeriving
                                   dom
                                   Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                        = m1
                            `cast`
                          (Control.Monad.Trans.Reader.N:ReaderT[0]
                               <*>_N
                               <[GHC.LanguageExtensions.Type.Extension]>_R
                               <Control.Monad.Trans.State.Lazy.StateT
                                  ExtMap.ExtMap GhcMonad.Ghc>_R
                               <Language.Haskell.Tools.AST.Ann.AnnMaybeG
                                  Language.Haskell.Tools.AST.Representation.Decls.UDeriving
                                  dom
                                  Language.Haskell.Tools.AST.Ann.SrcTemplateStage>_N)
                            r1
                      } in
                      (\ (s1 :: Data.Map.Base.Map
                                  (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                                  [SrcLoc.SrcSpan]) ->
                       let {
                         m :: GhcMonad.Ghc
                                (Language.Haskell.Tools.AST.Ann.AnnMaybeG
                                   Language.Haskell.Tools.AST.Representation.Decls.UDeriving
                                   dom
                                   Language.Haskell.Tools.AST.Ann.SrcTemplateStage,
                                 Data.Map.Base.Map
                                   (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                                   [SrcLoc.SrcSpan])
                         = m2
                             `cast`
                           (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                <Data.Map.Base.Map
                                   (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                                   [SrcLoc.SrcSpan]>_N
                                <GhcMonad.Ghc>_R
                                <Language.Haskell.Tools.AST.Ann.AnnMaybeG
                                   Language.Haskell.Tools.AST.Representation.Decls.UDeriving
                                   dom
                                   Language.Haskell.Tools.AST.Ann.SrcTemplateStage>_N)
                             s1
                       } in
                       (\ (s :: GhcMonad.Session)
                          (s2 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                        case (m `cast`
                              (GhcMonad.N:Ghc[0]
                                   <(Language.Haskell.Tools.AST.Ann.AnnMaybeG
                                       Language.Haskell.Tools.AST.Representation.Decls.UDeriving
                                       dom
                                       Language.Haskell.Tools.AST.Ann.SrcTemplateStage,
                                     Data.Map.Base.Map
                                       (ExtMap.LogicalRelation
                                          GHC.LanguageExtensions.Type.Extension)
                                       [SrcLoc.SrcSpan])>_R)
                                s)
                               `cast`
                             (GHC.Types.N:IO[0]
                                  <(Language.Haskell.Tools.AST.Ann.AnnMaybeG
                                      Language.Haskell.Tools.AST.Representation.Decls.UDeriving
                                      dom
                                      Language.Haskell.Tools.AST.Ann.SrcTemplateStage,
                                    Data.Map.Base.Map
                                      (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                                      [SrcLoc.SrcSpan])>_R)
                               s2 of ds1 { (#,#) ipv ipv1 ->
                        (# ipv, (GHC.Tuple.(), case ipv1 of wild { (,) a1 s' -> s' }) #) })
                         `cast`
                       (Trans
                            (<GhcMonad.Session>_R
                             ->_R Sym (GHC.Types.N:IO[0]
                                           <((),
                                             Data.Map.Base.Map
                                               (ExtMap.LogicalRelation
                                                  GHC.LanguageExtensions.Type.Extension)
                                               [SrcLoc.SrcSpan])>_R))
                            (Sym (GhcMonad.N:Ghc[0]
                                      <((),
                                        Data.Map.Base.Map
                                          (ExtMap.LogicalRelation
                                             GHC.LanguageExtensions.Type.Extension)
                                          [SrcLoc.SrcSpan])>_R))))
                        `cast`
                      (Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                <Data.Map.Base.Map
                                   (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                                   [SrcLoc.SrcSpan]>_N
                                <GhcMonad.Ghc>_R
                                <()>_N)))
                       `cast`
                     (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                               <*>_N
                               <[GHC.LanguageExtensions.Type.Extension]>_R
                               <Control.Monad.Trans.State.Lazy.StateT
                                  ExtMap.ExtMap GhcMonad.Ghc>_R
                               <()>_N))
                 } in
                 case ww of wild {
                   Language.Haskell.Tools.AST.Representation.Decls.UDataKeyword
                   -> checkWith (DerivingsChecker.chkClassForData @ dom w)
                   Language.Haskell.Tools.AST.Representation.Decls.UNewtypeKeyword
                   -> checkWith (DerivingsChecker.chkClassForNewtype @ dom w) } }) -}
52c875757067112384410eb5b55b2a78
  $wskipParens ::
    Language.Haskell.Tools.AST.Ann.NodeInfo
      (Language.Haskell.Tools.AST.Ann.SemanticInfo
         dom Language.Haskell.Tools.AST.Representation.Decls.UInstanceHead)
      (Language.Haskell.Tools.AST.Ann.SpanInfo
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
    -> Language.Haskell.Tools.AST.Representation.Decls.UInstanceHead
         dom Language.Haskell.Tools.AST.Ann.SrcTemplateStage
    -> (# Language.Haskell.Tools.AST.Ann.NodeInfo
            (Language.Haskell.Tools.AST.Ann.SemanticInfo
               dom Language.Haskell.Tools.AST.Representation.Decls.UInstanceHead)
            (Language.Haskell.Tools.AST.Ann.SpanInfo
               Language.Haskell.Tools.AST.Ann.SrcTemplateStage),
          Language.Haskell.Tools.AST.Representation.Decls.UInstanceHead
            dom Language.Haskell.Tools.AST.Ann.SrcTemplateStage #)
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><S,U>, Inline: [0] -}
022f1fbcf4a5103d33816fe9ef107bcf
  data DerivableClass
    = ClsEq
    | ClsOrd
    | ClsIx
    | ClsShow
    | ClsRead
    | ClsEnum
    | ClsBounded
    | ClsData
    | ClsTypeable
    | ClsGeneric
    | ClsFunctor
    | ClsFoldable
    | ClsTraversable
f12cee0ae3ee5cdc3c731e856486a5ff
  canBeGeneralized :: Name.Name -> GHC.Types.Bool
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Name.Name) ->
                 case GHC.List.elem
                        @ Name.Name
                        Name.$fEqName
                        x
                        DerivingsChecker.notGNTD of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
053b7322a7e2ae27aeba89f05b8fde14
  chkClassForData ::
    ExtMonad.CheckNode
      Language.Haskell.Tools.AST.ElementTypes.InstanceHead
  {- Arity: 2,
     Strictness: <S(S(LLS(S)LLLLLLLLLL)L),U(U(A,A,U(U),A,A,A,A,A,A,A,A,A,A),C(U))><S(LS),U(U(U,U(U,U,U,U)),U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ @ dom
                   (w :: ExtMonad.ExtDomain dom)
                   (w1 :: Language.Haskell.Tools.AST.ElementTypes.InstanceHead dom) ->
                 case w1 of ww { Language.Haskell.Tools.AST.Ann.Ann ww7 ww8 ->
                 DerivingsChecker.$wchkClassForData @ dom w ww7 ww8 }) -}
840e54a11e85056e0eab40da666a35d3
  chkClassForData1 ::
    Control.Reference.Representation.Reference
      Control.Reference.Representation.MU
      Data.Functor.Identity.Identity
      Control.Reference.Representation.MU
      Control.Reference.Representation.MU
      (Language.Haskell.Tools.AST.Ann.Ann
         Language.Haskell.Tools.AST.Representation.Names.UName
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
      (Language.Haskell.Tools.AST.Ann.Ann
         Language.Haskell.Tools.AST.Representation.Names.UName
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
      GHC.Base.String
      GHC.Base.String
  {- Unfolding: (\ @ dom ->
                 case Control.Reference.Combinators.$w&
                        @ Control.Reference.Representation.MU
                        @ Data.Functor.Identity.Identity
                        @ Control.Reference.Representation.MU
                        @ Control.Reference.Representation.MU
                        @ (Language.Haskell.Tools.AST.Ann.Ann
                             Language.Haskell.Tools.AST.Representation.Names.UName
                             dom
                             Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                        @ (Language.Haskell.Tools.AST.Ann.Ann
                             Language.Haskell.Tools.AST.Representation.Names.UName
                             dom
                             Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                        @ (Language.Haskell.Tools.AST.Ann.Ann
                             Language.Haskell.Tools.AST.Representation.Names.UNamePart
                             dom
                             Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                        @ (Language.Haskell.Tools.AST.Ann.Ann
                             Language.Haskell.Tools.AST.Representation.Names.UNamePart
                             dom
                             Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                        @ GHC.Base.String
                        @ GHC.Base.String
                        (DerivingsChecker.chkClassForData3 @ dom)
                        (DerivingsChecker.chkClassForData2
                           @ dom) of ww { (#,,,,,#) ww7 ww8 ww9 ww10 ww11 ww12 ->
                 Control.Reference.Representation.Reference
                   @ Control.Reference.Representation.MU
                   @ Data.Functor.Identity.Identity
                   @ Control.Reference.Representation.MU
                   @ Control.Reference.Representation.MU
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        Language.Haskell.Tools.AST.Representation.Names.UName
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        Language.Haskell.Tools.AST.Representation.Names.UName
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   @ GHC.Base.String
                   @ GHC.Base.String
                   ww7
                   ww8
                   ww9
                   ww10
                   ww11
                   ww12 }) -}
4485f65f7ee22ef511e2e84da25b98a2
  chkClassForData2 ::
    Control.Reference.Representation.Reference
      Control.Reference.Representation.MU
      Data.Functor.Identity.Identity
      Control.Reference.Representation.MU
      Control.Reference.Representation.MU
      (Language.Haskell.Tools.AST.Ann.Ann
         Language.Haskell.Tools.AST.Representation.Names.UNamePart
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
      (Language.Haskell.Tools.AST.Ann.Ann
         Language.Haskell.Tools.AST.Representation.Names.UNamePart
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
      GHC.Base.String
      GHC.Base.String
  {- Unfolding: (\ @ dom ->
                 case Language.Haskell.Tools.AST.References.$wsimpleNameStr
                        @ dom
                        @ Language.Haskell.Tools.AST.Ann.SrcTemplateStage
                        @ Control.Reference.Representation.MU
                        @ Data.Functor.Identity.Identity
                        Control.Reference.TH.Records.$s$fRefMonadswr of ww { (#,,,,,#) ww7 ww8 ww9 ww10 ww11 ww12 ->
                 Control.Reference.Representation.Reference
                   @ Control.Reference.Representation.MU
                   @ Data.Functor.Identity.Identity
                   @ Control.Reference.Representation.MU
                   @ Control.Reference.Representation.MU
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        Language.Haskell.Tools.AST.Representation.Names.UNamePart
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        Language.Haskell.Tools.AST.Representation.Names.UNamePart
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   @ GHC.Base.String
                   @ GHC.Base.String
                   ww7
                   ww8
                   ww9
                   ww10
                   ww11
                   ww12 }) -}
f9762b76ecafa48febf2cc69171ff000
  chkClassForData3 ::
    Control.Reference.Representation.Reference
      Control.Reference.Representation.MU
      Data.Functor.Identity.Identity
      Control.Reference.Representation.MU
      Control.Reference.Representation.MU
      (Language.Haskell.Tools.AST.Ann.Ann
         Language.Haskell.Tools.AST.Representation.Names.UName
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
      (Language.Haskell.Tools.AST.Ann.Ann
         Language.Haskell.Tools.AST.Representation.Names.UName
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
      (Language.Haskell.Tools.AST.Ann.Ann
         Language.Haskell.Tools.AST.Representation.Names.UNamePart
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
      (Language.Haskell.Tools.AST.Ann.Ann
         Language.Haskell.Tools.AST.Representation.Names.UNamePart
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
  {- Unfolding: (\ @ dom ->
                 case Control.Reference.Combinators.$w&
                        @ Control.Reference.Representation.MU
                        @ Data.Functor.Identity.Identity
                        @ Control.Reference.Representation.MU
                        @ Control.Reference.Representation.MU
                        @ (Language.Haskell.Tools.AST.Ann.Ann
                             Language.Haskell.Tools.AST.Representation.Names.UName
                             dom
                             Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                        @ (Language.Haskell.Tools.AST.Ann.Ann
                             Language.Haskell.Tools.AST.Representation.Names.UName
                             dom
                             Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                        @ (Language.Haskell.Tools.AST.Ann.Ann
                             Language.Haskell.Tools.AST.Representation.Names.UQualifiedName
                             dom
                             Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                        @ (Language.Haskell.Tools.AST.Ann.Ann
                             Language.Haskell.Tools.AST.Representation.Names.UQualifiedName
                             dom
                             Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                        @ (Language.Haskell.Tools.AST.Ann.Ann
                             Language.Haskell.Tools.AST.Representation.Names.UNamePart
                             dom
                             Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                        @ (Language.Haskell.Tools.AST.Ann.Ann
                             Language.Haskell.Tools.AST.Representation.Names.UNamePart
                             dom
                             Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                        (DerivingsChecker.chkClassForData5 @ dom)
                        (DerivingsChecker.chkClassForData4
                           @ dom) of ww { (#,,,,,#) ww7 ww8 ww9 ww10 ww11 ww12 ->
                 Control.Reference.Representation.Reference
                   @ Control.Reference.Representation.MU
                   @ Data.Functor.Identity.Identity
                   @ Control.Reference.Representation.MU
                   @ Control.Reference.Representation.MU
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        Language.Haskell.Tools.AST.Representation.Names.UName
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        Language.Haskell.Tools.AST.Representation.Names.UName
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        Language.Haskell.Tools.AST.Representation.Names.UNamePart
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        Language.Haskell.Tools.AST.Representation.Names.UNamePart
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   ww7
                   ww8
                   ww9
                   ww10
                   ww11
                   ww12 }) -}
1d97c69f4f4edf32a30dc7b5ee937991
  chkClassForData4 ::
    Control.Reference.Representation.Reference
      Control.Reference.Representation.MU
      Data.Functor.Identity.Identity
      Control.Reference.Representation.MU
      Control.Reference.Representation.MU
      (Language.Haskell.Tools.AST.Ann.Ann
         Language.Haskell.Tools.AST.Representation.Names.UQualifiedName
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
      (Language.Haskell.Tools.AST.Ann.Ann
         Language.Haskell.Tools.AST.Representation.Names.UQualifiedName
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
      (Language.Haskell.Tools.AST.Ann.Ann
         Language.Haskell.Tools.AST.Representation.Names.UNamePart
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
      (Language.Haskell.Tools.AST.Ann.Ann
         Language.Haskell.Tools.AST.Representation.Names.UNamePart
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
  {- Unfolding: (\ @ dom ->
                 case Language.Haskell.Tools.AST.References.$wunqualifiedName
                        @ dom
                        @ Language.Haskell.Tools.AST.Ann.SrcTemplateStage
                        @ Control.Reference.Representation.MU
                        @ Data.Functor.Identity.Identity
                        Control.Reference.TH.Records.$s$fRefMonadswr of ww { (#,,,,,#) ww7 ww8 ww9 ww10 ww11 ww12 ->
                 Control.Reference.Representation.Reference
                   @ Control.Reference.Representation.MU
                   @ Data.Functor.Identity.Identity
                   @ Control.Reference.Representation.MU
                   @ Control.Reference.Representation.MU
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        Language.Haskell.Tools.AST.Representation.Names.UQualifiedName
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        Language.Haskell.Tools.AST.Representation.Names.UQualifiedName
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        Language.Haskell.Tools.AST.Representation.Names.UNamePart
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        Language.Haskell.Tools.AST.Representation.Names.UNamePart
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   ww7
                   ww8
                   ww9
                   ww10
                   ww11
                   ww12 }) -}
e1c260e3acc016e904d84d9ed86bdbdb
  chkClassForData5 ::
    Control.Reference.Representation.Reference
      Control.Reference.Representation.MU
      Data.Functor.Identity.Identity
      Control.Reference.Representation.MU
      Control.Reference.Representation.MU
      (Language.Haskell.Tools.AST.Ann.Ann
         Language.Haskell.Tools.AST.Representation.Names.UName
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
      (Language.Haskell.Tools.AST.Ann.Ann
         Language.Haskell.Tools.AST.Representation.Names.UName
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
      (Language.Haskell.Tools.AST.Ann.Ann
         Language.Haskell.Tools.AST.Representation.Names.UQualifiedName
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
      (Language.Haskell.Tools.AST.Ann.Ann
         Language.Haskell.Tools.AST.Representation.Names.UQualifiedName
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
  {- Unfolding: (\ @ dom ->
                 case Language.Haskell.Tools.AST.References.$wsimpleName
                        @ GHC.Prim.Any
                        @ GHC.Prim.Any
                        @ dom
                        @ Language.Haskell.Tools.AST.Ann.SrcTemplateStage
                        @ Control.Reference.Representation.MU
                        @ Data.Functor.Identity.Identity
                        Control.Reference.TH.Records.$s$fRefMonadswr of ww { (#,,,,,#) ww7 ww8 ww9 ww10 ww11 ww12 ->
                 Control.Reference.Representation.Reference
                   @ Control.Reference.Representation.MU
                   @ Data.Functor.Identity.Identity
                   @ Control.Reference.Representation.MU
                   @ Control.Reference.Representation.MU
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        Language.Haskell.Tools.AST.Representation.Names.UName
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        Language.Haskell.Tools.AST.Representation.Names.UName
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        Language.Haskell.Tools.AST.Representation.Names.UQualifiedName
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        Language.Haskell.Tools.AST.Representation.Names.UQualifiedName
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   ww7
                   ww8
                   ww9
                   ww10
                   ww11
                   ww12 }) -}
9e59291ae0b9ab115b32cd5d22f47537
  chkClassForData6 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Cls"#) -}
d8d63ded6b2aa3549bbf598203794be6
  chkClassForData7 ::
    Text.ParserCombinators.ReadP.P DerivingsChecker.DerivableClass
  {- Unfolding: ((GHC.Read.parens1
                    @ DerivingsChecker.DerivableClass
                    DerivingsChecker.$fReadDerivableClass3
                      `cast`
                    (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                              <DerivingsChecker.DerivableClass>_R))
                    Text.ParserCombinators.ReadPrec.minPrec)
                   `cast`
                 (Text.ParserCombinators.ReadP.N:ReadP[0]
                      <DerivingsChecker.DerivableClass>_R)
                   @ DerivingsChecker.DerivableClass
                   (Text.ParserCombinators.ReadP.$fApplicativeP_$cpure
                      @ DerivingsChecker.DerivableClass)) -}
4534f6ab57531496dce82a2ec3c6702b
  chkClassForData8 ::
    (DerivingsChecker.DerivableClass, [GHC.Types.Char])
    -> GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LS),1*U(A,1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: (DerivingsChecker.DerivableClass, [GHC.Types.Char])) ->
                 case x of wild { (,) ds1 y ->
                 case y of wild1 {
                   [] -> GHC.Types.True : ds2 ds3 -> GHC.Types.False } }) -}
a50dc2da2c4ea219627a11622425fc4e
  chkClassForData9 ::
    ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension
  {- HasNoCafRefs,
     Unfolding: (ExtMap.LVar
                   @ GHC.LanguageExtensions.Type.Extension
                   GHC.LanguageExtensions.Type.DeriveAnyClass) -}
c9d9392bf798bfbf861be963abed78d1
  chkClassForNewtype ::
    ExtMonad.CheckNode
      Language.Haskell.Tools.AST.ElementTypes.InstanceHead
  {- Arity: 2,
     Strictness: <S(S(LLS(S)LLLLLLLLLL)L),U(U(A,A,U(U),A,A,A,A,A,A,A,A,A,A),C(U))><S(LS),U(U(U,U(U,U,U,U)),U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ @ dom
                   (w :: ExtMonad.ExtDomain dom)
                   (w1 :: Language.Haskell.Tools.AST.ElementTypes.InstanceHead dom) ->
                 case w1 of ww { Language.Haskell.Tools.AST.Ann.Ann ww7 ww8 ->
                 DerivingsChecker.$wchkClassForNewtype @ dom w ww7 ww8 }) -}
d27727685eb39eea1abecb9ca83c3fc2
  chkDataDecl ::
    ExtMonad.CheckNode Language.Haskell.Tools.AST.ElementTypes.Decl
  {- Arity: 2,
     Strictness: <S(S(LLS(S)LLLLLLLLLL)L),U(U(A,A,U(U),A,A,A,A,A,A,A,A,A,A),C(U))><S(LS),1*U(U,U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ @ dom
                   (w :: ExtMonad.ExtDomain dom)
                   (w1 :: Language.Haskell.Tools.AST.ElementTypes.Decl dom) ->
                 case w1 of ww { Language.Haskell.Tools.AST.Ann.Ann ww7 ww8 ->
                 DerivingsChecker.$wchkDataDecl @ dom w ww7 ww8 }) -}
ae0fdce968b07f83f8b683fb2d0b8bea
  chkDataDecl1 ::
    (Language.Haskell.Tools.AST.ElementTypes.InstanceHead dom
     -> ExtMonad.ExtMonad
          (Language.Haskell.Tools.AST.ElementTypes.InstanceHead dom))
    -> Language.Haskell.Tools.AST.ElementTypes.Deriving dom
    -> ExtMonad.ExtMonad
         (Language.Haskell.Tools.AST.ElementTypes.Deriving dom)
  {- Arity: 2, HasNoCafRefs, Strictness: <L,C(U)><S(LS),1*U(U,U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ @ dom
                   (w :: Language.Haskell.Tools.AST.ElementTypes.InstanceHead dom
                         -> ExtMonad.ExtMonad
                              (Language.Haskell.Tools.AST.ElementTypes.InstanceHead dom))
                   (w1 :: Language.Haskell.Tools.AST.ElementTypes.Deriving dom) ->
                 case w1 of ww { Language.Haskell.Tools.AST.Ann.Ann ww7 ww8 ->
                 DerivingsChecker.$wlvl @ dom w ww7 ww8 }) -}
40a667298acc24f47533e4bb4e25c25f
  chkDataDecl2 ::
    Control.Reference.Representation.Reference
      (Control.Monad.Trans.Reader.ReaderT
         [GHC.LanguageExtensions.Type.Extension]
         (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc))
      Control.Reference.Representation.MU
      Control.Reference.Representation.MU
      Control.Reference.Representation.MU
      (Language.Haskell.Tools.AST.Ann.AnnMaybeG
         Language.Haskell.Tools.AST.Representation.Decls.UDeriving
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
      (Language.Haskell.Tools.AST.Ann.AnnMaybeG
         Language.Haskell.Tools.AST.Representation.Decls.UDeriving
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
      (Language.Haskell.Tools.AST.Ann.Ann
         Language.Haskell.Tools.AST.Representation.Decls.UDeriving
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
      (Language.Haskell.Tools.AST.Ann.Ann
         Language.Haskell.Tools.AST.Representation.Decls.UDeriving
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
  {- Unfolding: (\ @ dom ->
                 case Language.Haskell.Tools.AST.Ann.$wannJust
                        @ Language.Haskell.Tools.AST.Representation.Decls.UDeriving
                        @ dom
                        @ Language.Haskell.Tools.AST.Ann.SrcTemplateStage
                        @ (Control.Monad.Trans.Reader.ReaderT
                             [GHC.LanguageExtensions.Type.Extension]
                             (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc))
                        @ Control.Reference.Representation.MU
                        (DerivingsChecker.$s$fApplicativeReaderT
                           @ [GHC.LanguageExtensions.Type.Extension])
                        (DerivingsChecker.$s$fMonadReaderT
                           @ [GHC.LanguageExtensions.Type.Extension])
                        Data.Proxy.$fApplicativeProxy
                        Data.Proxy.$fMonadPlusProxy
                        DerivingsChecker.$sannJust1
                          `cast`
                        (Sym (Control.Instances.Morph.N:Morph[0]
                                  <GHC.Base.Maybe>_N
                                  <Data.Proxy.Proxy>_N)) of ww { (#,,,,,#) ww7 ww8 ww9 ww10 ww11 ww12 ->
                 Control.Reference.Representation.Reference
                   @ (Control.Monad.Trans.Reader.ReaderT
                        [GHC.LanguageExtensions.Type.Extension]
                        (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc))
                   @ Control.Reference.Representation.MU
                   @ Control.Reference.Representation.MU
                   @ Control.Reference.Representation.MU
                   @ (Language.Haskell.Tools.AST.Ann.AnnMaybeG
                        Language.Haskell.Tools.AST.Representation.Decls.UDeriving
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   @ (Language.Haskell.Tools.AST.Ann.AnnMaybeG
                        Language.Haskell.Tools.AST.Representation.Decls.UDeriving
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        Language.Haskell.Tools.AST.Representation.Decls.UDeriving
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        Language.Haskell.Tools.AST.Representation.Decls.UDeriving
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   ww7
                   ww8
                   ww9
                   ww10
                   ww11
                   ww12 }) -}
a077bf743ad425d2734be87b597eaa97
  chkDataInstance ::
    ExtMonad.CheckNode Language.Haskell.Tools.AST.ElementTypes.Decl
  {- Arity: 2,
     Strictness: <S(S(LLS(S)LLLLLLLLLL)L),U(U(A,A,U(U),A,A,A,A,A,A,A,A,A,A),C(U))><S(LS),1*U(U(U,U(U,U,U,U)),U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ @ dom
                   (w :: ExtMonad.ExtDomain dom)
                   (w1 :: Language.Haskell.Tools.AST.ElementTypes.Decl dom) ->
                 case w1 of ww { Language.Haskell.Tools.AST.Ann.Ann ww7 ww8 ->
                 DerivingsChecker.$wchkDataInstance @ dom w ww7 ww8 }) -}
474d12e43545eec44e33713a3a07c16f
  chkDataInstance_key ::
    ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension
  {- HasNoCafRefs,
     Unfolding: (ExtMap.LVar
                   @ GHC.LanguageExtensions.Type.Extension
                   GHC.LanguageExtensions.Type.TypeFamilies) -}
38d9de2f72936623bf6353459c5f87cb
  chkDerivingClause ::
    Language.Haskell.Tools.AST.SemaInfoClasses.HasNameInfo dom =>
    (Language.Haskell.Tools.AST.ElementTypes.InstanceHead dom
     -> ExtMonad.ExtMonad
          (Language.Haskell.Tools.AST.ElementTypes.InstanceHead dom))
    -> Language.Haskell.Tools.AST.ElementTypes.Deriving dom
    -> ExtMonad.ExtMonad
         (Language.Haskell.Tools.AST.ElementTypes.Deriving dom)
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(S(LLS(S)LLLLLLLLLL)L),1*U(1*U(A,A,1*U(1*U),A,A,A,A,A,A,A,A,A,A),A)><L,C(U)><S(LS),1*U(U,U)>,
     Unfolding: InlineRule (3, True, False)
                (\ @ dom
                   ($d(%,%) :: Language.Haskell.Tools.AST.SemaInfoClasses.HasNameInfo
                                 dom)
                   (eta :: Language.Haskell.Tools.AST.ElementTypes.InstanceHead dom
                           -> ExtMonad.ExtMonad
                                (Language.Haskell.Tools.AST.ElementTypes.InstanceHead dom))
                   (eta1 :: Language.Haskell.Tools.AST.ElementTypes.Deriving dom) ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Language.Haskell.Tools.AST.Ann.SemanticInfo'
                             dom Language.Haskell.Tools.AST.Ann.SameInfoDefaultCls)
                        @ Language.Haskell.Tools.AST.SemaInfoTypes.NoSemanticInfo
                        (Language.Haskell.Tools.AST.Ann.$p3Domain
                           @ dom
                           (GHC.Classes.$p1(%,%)
                              @ (Language.Haskell.Tools.AST.Ann.Domain dom)
                              @ (Language.Haskell.Tools.AST.SemaInfoClasses.HasNameInfo'
                                   (Language.Haskell.Tools.AST.Ann.SemanticInfo
                                      dom
                                      Language.Haskell.Tools.AST.Representation.Names.UQualifiedName))
                              $d(%,%)))
                          `cast`
                        (Data.Type.Equality.N:~[0]
                             <*>_N <Language.Haskell.Tools.AST.Ann.SemanticInfo'
                                      dom
                                      Language.Haskell.Tools.AST.Ann.SameInfoDefaultCls>_N <Language.Haskell.Tools.AST.SemaInfoTypes.NoSemanticInfo>_N) of cobox0 { DEFAULT ->
                 DerivingsChecker.chkDataDecl1 @ dom eta eta1 }) -}
312dc4ded8018c8b659e198ee893ff28
  chkDerivings ::
    ExtMonad.CheckNode Language.Haskell.Tools.AST.ElementTypes.Decl
  {- Arity: 2,
     Strictness: <S(S(LLS(S)LLLLLLLLLL)L),U(U(A,A,U(U),A,A,A,A,A,A,A,A,A,A),C(U))><L,1*U(U,U)>,
     Unfolding: (\ @ dom
                   ($d(%,%) :: ExtMonad.ExtDomain dom)
                   (eta :: Language.Haskell.Tools.AST.ElementTypes.Decl dom) ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Language.Haskell.Tools.AST.Ann.SemanticInfo'
                             dom Language.Haskell.Tools.AST.Ann.SameInfoDefaultCls)
                        @ Language.Haskell.Tools.AST.SemaInfoTypes.NoSemanticInfo
                        (Language.Haskell.Tools.AST.Ann.$p3Domain
                           @ dom
                           (GHC.Classes.$p1(%,%)
                              @ (Language.Haskell.Tools.AST.Ann.Domain dom)
                              @ (Language.Haskell.Tools.AST.SemaInfoClasses.HasNameInfo'
                                   (Language.Haskell.Tools.AST.Ann.SemanticInfo
                                      dom
                                      Language.Haskell.Tools.AST.Representation.Names.UQualifiedName))
                              $d(%,%)))
                          `cast`
                        (Data.Type.Equality.N:~[0]
                             <*>_N <Language.Haskell.Tools.AST.Ann.SemanticInfo'
                                      dom
                                      Language.Haskell.Tools.AST.Ann.SameInfoDefaultCls>_N <Language.Haskell.Tools.AST.SemaInfoTypes.NoSemanticInfo>_N) of cobox0 { DEFAULT ->
                 let {
                   m1 :: Control.Monad.Trans.Reader.ReaderT
                           [GHC.LanguageExtensions.Type.Extension]
                           (Control.Monad.Trans.State.Lazy.StateT ExtMap.ExtMap GhcMonad.Ghc)
                           (Language.Haskell.Tools.AST.ElementTypes.Decl dom)
                   = case eta of ww { Language.Haskell.Tools.AST.Ann.Ann ww7 ww8 ->
                     DerivingsChecker.$wchkDataDecl @ dom $d(%,%) ww7 ww8 }
                 } in
                 (\ (r1 :: [GHC.LanguageExtensions.Type.Extension]) ->
                  let {
                    m2 :: Control.Monad.Trans.State.Lazy.StateT
                            (Data.Map.Base.Map
                               (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                               [SrcLoc.SrcSpan])
                            GhcMonad.Ghc
                            (Language.Haskell.Tools.AST.ElementTypes.Decl dom)
                    = m1
                        `cast`
                      (Control.Monad.Trans.Reader.N:ReaderT[0]
                           <*>_N
                           <[GHC.LanguageExtensions.Type.Extension]>_R
                           <Control.Monad.Trans.State.Lazy.StateT
                              ExtMap.ExtMap GhcMonad.Ghc>_R
                           <Language.Haskell.Tools.AST.ElementTypes.Decl dom>_N)
                        r1
                  } in
                  (\ (s1 :: Data.Map.Base.Map
                              (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                              [SrcLoc.SrcSpan]) ->
                   let {
                     m :: GhcMonad.Ghc
                            (Language.Haskell.Tools.AST.ElementTypes.Decl dom,
                             Data.Map.Base.Map
                               (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                               [SrcLoc.SrcSpan])
                     = m2
                         `cast`
                       (Control.Monad.Trans.State.Lazy.N:StateT[0]
                            <Data.Map.Base.Map
                               (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                               [SrcLoc.SrcSpan]>_N
                            <GhcMonad.Ghc>_R
                            <Language.Haskell.Tools.AST.ElementTypes.Decl dom>_N)
                         s1
                   } in
                   (\ (s :: GhcMonad.Session)
                      (s2 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                    case (m `cast`
                          (GhcMonad.N:Ghc[0]
                               <(Language.Haskell.Tools.AST.ElementTypes.Decl dom,
                                 Data.Map.Base.Map
                                   (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                                   [SrcLoc.SrcSpan])>_R)
                            s)
                           `cast`
                         (GHC.Types.N:IO[0]
                              <(Language.Haskell.Tools.AST.ElementTypes.Decl dom,
                                Data.Map.Base.Map
                                  (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                                  [SrcLoc.SrcSpan])>_R)
                           s2 of ds1 { (#,#) ipv ipv1 ->
                    case ipv1 of wild { (,) a1 s' ->
                    case a1 of ww { Language.Haskell.Tools.AST.Ann.Ann ww7 ww8 ->
                    case ((((DerivingsChecker.$wchkGADTDataDecl @ dom $d(%,%) ww7 ww8)
                              `cast`
                            (Control.Monad.Trans.Reader.N:ReaderT[0]
                                 <*>_N
                                 <[GHC.LanguageExtensions.Type.Extension]>_R
                                 <Control.Monad.Trans.State.Lazy.StateT
                                    ExtMap.ExtMap GhcMonad.Ghc>_R
                                 <Language.Haskell.Tools.AST.ElementTypes.Decl dom>_N)
                              r1)
                             `cast`
                           (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                <Data.Map.Base.Map
                                   (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                                   [SrcLoc.SrcSpan]>_N
                                <GhcMonad.Ghc>_R
                                <Language.Haskell.Tools.AST.ElementTypes.Decl dom>_N)
                             s')
                            `cast`
                          (GhcMonad.N:Ghc[0]
                               <(Language.Haskell.Tools.AST.ElementTypes.Decl dom,
                                 Data.Map.Base.Map
                                   (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                                   [SrcLoc.SrcSpan])>_R)
                            s)
                           `cast`
                         (GHC.Types.N:IO[0]
                              <(Language.Haskell.Tools.AST.ElementTypes.Decl dom,
                                Data.Map.Base.Map
                                  (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                                  [SrcLoc.SrcSpan])>_R)
                           ipv of ds2 { (#,#) ipv2 ipv3 ->
                    case ipv3 of wild1 { (,) a2 s'1 ->
                    case a2 of ww9 { Language.Haskell.Tools.AST.Ann.Ann ww10 ww11 ->
                    case ((((DerivingsChecker.$wchkDataInstance
                               @ dom
                               $d(%,%)
                               ww10
                               ww11)
                              `cast`
                            (Control.Monad.Trans.Reader.N:ReaderT[0]
                                 <*>_N
                                 <[GHC.LanguageExtensions.Type.Extension]>_R
                                 <Control.Monad.Trans.State.Lazy.StateT
                                    ExtMap.ExtMap GhcMonad.Ghc>_R
                                 <Language.Haskell.Tools.AST.ElementTypes.Decl dom>_N)
                              r1)
                             `cast`
                           (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                <Data.Map.Base.Map
                                   (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                                   [SrcLoc.SrcSpan]>_N
                                <GhcMonad.Ghc>_R
                                <Language.Haskell.Tools.AST.ElementTypes.Decl dom>_N)
                             s'1)
                            `cast`
                          (GhcMonad.N:Ghc[0]
                               <(Language.Haskell.Tools.AST.ElementTypes.Decl dom,
                                 Data.Map.Base.Map
                                   (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                                   [SrcLoc.SrcSpan])>_R)
                            s)
                           `cast`
                         (GHC.Types.N:IO[0]
                              <(Language.Haskell.Tools.AST.ElementTypes.Decl dom,
                                Data.Map.Base.Map
                                  (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                                  [SrcLoc.SrcSpan])>_R)
                           ipv2 of ds3 { (#,#) ipv4 ipv5 ->
                    case ipv5 of wild2 { (,) a3 s'2 ->
                    case a3 of ww12 { Language.Haskell.Tools.AST.Ann.Ann ww13 ww14 ->
                    ((((DerivingsChecker.$wchkStandaloneDeriving
                          @ dom
                          $d(%,%)
                          ww13
                          ww14)
                         `cast`
                       (Control.Monad.Trans.Reader.N:ReaderT[0]
                            <*>_N
                            <[GHC.LanguageExtensions.Type.Extension]>_R
                            <Control.Monad.Trans.State.Lazy.StateT
                               ExtMap.ExtMap GhcMonad.Ghc>_R
                            <Language.Haskell.Tools.AST.ElementTypes.Decl dom>_N)
                         r1)
                        `cast`
                      (Control.Monad.Trans.State.Lazy.N:StateT[0]
                           <Data.Map.Base.Map
                              (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                              [SrcLoc.SrcSpan]>_N
                           <GhcMonad.Ghc>_R
                           <Language.Haskell.Tools.AST.ElementTypes.Decl dom>_N)
                        s'2)
                       `cast`
                     (GhcMonad.N:Ghc[0]
                          <(Language.Haskell.Tools.AST.ElementTypes.Decl dom,
                            Data.Map.Base.Map
                              (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                              [SrcLoc.SrcSpan])>_R)
                       s)
                      `cast`
                    (GHC.Types.N:IO[0]
                         <(Language.Haskell.Tools.AST.ElementTypes.Decl dom,
                           Data.Map.Base.Map
                             (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                             [SrcLoc.SrcSpan])>_R)
                      ipv4 } } } } } } } } })
                     `cast`
                   (Trans
                        (<GhcMonad.Session>_R
                         ->_R Sym (GHC.Types.N:IO[0]
                                       <(Language.Haskell.Tools.AST.ElementTypes.Decl dom,
                                         Data.Map.Base.Map
                                           (ExtMap.LogicalRelation
                                              GHC.LanguageExtensions.Type.Extension)
                                           [SrcLoc.SrcSpan])>_R))
                        (Sym (GhcMonad.N:Ghc[0]
                                  <(Language.Haskell.Tools.AST.ElementTypes.Decl dom,
                                    Data.Map.Base.Map
                                      (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                                      [SrcLoc.SrcSpan])>_R))))
                    `cast`
                  (Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                            <Data.Map.Base.Map
                               (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                               [SrcLoc.SrcSpan]>_N
                            <GhcMonad.Ghc>_R
                            <Language.Haskell.Tools.AST.ElementTypes.Decl dom>_N)))
                   `cast`
                 (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                           <*>_N
                           <[GHC.LanguageExtensions.Type.Extension]>_R
                           <Control.Monad.Trans.State.Lazy.StateT
                              ExtMap.ExtMap GhcMonad.Ghc>_R
                           <Language.Haskell.Tools.AST.ElementTypes.Decl dom>_N)) }) -}
6bb25a43cf2cee7e386b5748694ba13d
  chkDerivings_key ::
    ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension
  {- HasNoCafRefs,
     Unfolding: (ExtMap.LVar
                   @ GHC.LanguageExtensions.Type.Extension
                   GHC.LanguageExtensions.Type.GADTs) -}
ca36debdd0afc557f476184fdffb2c6a
  chkGADTDataDecl ::
    ExtMonad.CheckNode Language.Haskell.Tools.AST.ElementTypes.Decl
  {- Arity: 2,
     Strictness: <S(S(LLS(S)LLLLLLLLLL)L),U(U(A,A,U(U),A,A,A,A,A,A,A,A,A,A),C(U))><S(LS),1*U(U(U,U(U,U,U,U)),U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ @ dom
                   (w :: ExtMonad.ExtDomain dom)
                   (w1 :: Language.Haskell.Tools.AST.ElementTypes.Decl dom) ->
                 case w1 of ww { Language.Haskell.Tools.AST.Ann.Ann ww7 ww8 ->
                 DerivingsChecker.$wchkGADTDataDecl @ dom w ww7 ww8 }) -}
941fade4fe00ab9e118102c5e5ae4ea4
  chkStandaloneDeriving ::
    ExtMonad.CheckNode Language.Haskell.Tools.AST.ElementTypes.Decl
  {- Arity: 2,
     Strictness: <S(S(LLS(S)LLLLLLLLLL)L),U(U(A,A,U(U),A,A,A,A,A,A,A,A,A,A),C(U))><S(LS),1*U(U(U,U(U,U,U,U)),U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ @ dom
                   (w :: ExtMonad.ExtDomain dom)
                   (w1 :: Language.Haskell.Tools.AST.ElementTypes.Decl dom) ->
                 case w1 of ww { Language.Haskell.Tools.AST.Ann.Ann ww7 ww8 ->
                 DerivingsChecker.$wchkStandaloneDeriving @ dom w ww7 ww8 }) -}
e38ca33413161e3d4e7c10e40d5e70cd
  getClassCon ::
    Language.Haskell.Tools.AST.ElementTypes.InstanceHead dom
    -> Language.Haskell.Tools.AST.ElementTypes.InstanceHead dom
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LS),1*U(U,U)>m,
     Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ @ dom
                   (w :: Language.Haskell.Tools.AST.ElementTypes.InstanceHead dom) ->
                 case w of ww { Language.Haskell.Tools.AST.Ann.Ann ww7 ww8 ->
                 case DerivingsChecker.$wgetClassCon
                        @ dom
                        ww7
                        ww8 of ww9 { (#,#) ww10 ww11 ->
                 Language.Haskell.Tools.AST.Ann.Ann
                   @ Language.Haskell.Tools.AST.Representation.Decls.UInstanceHead
                   @ dom
                   @ Language.Haskell.Tools.AST.Ann.SrcTemplateStage
                   ww10
                   ww11 } }) -}
62575ee3ac437e036627a2c2beac7e38
  getSemName ::
    Language.Haskell.Tools.AST.SemaInfoClasses.HasNameInfo dom =>
    Language.Haskell.Tools.AST.ElementTypes.Name dom
    -> GHC.Base.Maybe Name.Name
  {- Arity: 2,
     Strictness: <S(S(LLS(S)LLLLLLLLLL)C(S)),U(U(A,A,U(U),A,A,A,A,A,A,A,A,A,A),C(U))><L,U>,
     Unfolding: (\ @ dom
                   ($d(%,%) :: Language.Haskell.Tools.AST.SemaInfoClasses.HasNameInfo
                                 dom)
                   (eta :: Language.Haskell.Tools.AST.ElementTypes.Name dom) ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Language.Haskell.Tools.AST.Ann.SemanticInfo'
                             dom Language.Haskell.Tools.AST.Ann.SameInfoDefaultCls)
                        @ Language.Haskell.Tools.AST.SemaInfoTypes.NoSemanticInfo
                        (Language.Haskell.Tools.AST.Ann.$p3Domain
                           @ dom
                           (GHC.Classes.$p1(%,%)
                              @ (Language.Haskell.Tools.AST.Ann.Domain dom)
                              @ (Language.Haskell.Tools.AST.SemaInfoClasses.HasNameInfo'
                                   (Language.Haskell.Tools.AST.Ann.SemanticInfo
                                      dom
                                      Language.Haskell.Tools.AST.Representation.Names.UQualifiedName))
                              $d(%,%)))
                          `cast`
                        (Data.Type.Equality.N:~[0]
                             <*>_N <Language.Haskell.Tools.AST.Ann.SemanticInfo'
                                      dom
                                      Language.Haskell.Tools.AST.Ann.SameInfoDefaultCls>_N <Language.Haskell.Tools.AST.SemaInfoTypes.NoSemanticInfo>_N) of cobox0 { DEFAULT ->
                 Language.Haskell.Tools.AST.SemaInfoClasses.$fHasNameInfo'Ann_$csemanticsName
                   @ dom
                   @ Language.Haskell.Tools.AST.Ann.SrcTemplateStage
                   $d(%,%)
                   (case DerivingsChecker.chkClassForData5
                           @ dom of wild { Control.Reference.Representation.Reference ds ds1 ds2 ds3 ds4 ds5 ->
                    (ds
                       @ (Language.Haskell.Tools.AST.Ann.Ann
                            Language.Haskell.Tools.AST.Representation.Names.UQualifiedName
                            dom
                            Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                       (Data.Functor.Identity.$fApplicativeIdentity2
                          @ (Language.Haskell.Tools.AST.Ann.Ann
                               Language.Haskell.Tools.AST.Representation.Names.UQualifiedName
                               dom
                               Language.Haskell.Tools.AST.Ann.SrcTemplateStage))
                         `cast`
                       (<Language.Haskell.Tools.AST.Ann.Ann
                           Language.Haskell.Tools.AST.Representation.Names.UQualifiedName
                           dom
                           Language.Haskell.Tools.AST.Ann.SrcTemplateStage>_R
                        ->_R Sym (Data.Functor.Identity.N:Identity[0]
                                      <Language.Haskell.Tools.AST.Ann.Ann
                                         Language.Haskell.Tools.AST.Representation.Names.UQualifiedName
                                         dom
                                         Language.Haskell.Tools.AST.Ann.SrcTemplateStage>_R))
                       eta)
                      `cast`
                    (Data.Functor.Identity.N:Identity[0]
                         <Language.Haskell.Tools.AST.Ann.Ann
                            Language.Haskell.Tools.AST.Representation.Names.UQualifiedName
                            dom
                            Language.Haskell.Tools.AST.Ann.SrcTemplateStage>_R) }) }) -}
8d10010dcaea07ec754da1fdf3d2b9c2
  isNewtype ::
    Language.Haskell.Tools.AST.SemaInfoClasses.HasNameInfo dom =>
    Language.Haskell.Tools.AST.ElementTypes.Type dom
    -> ExtMonad.ExtMonad GHC.Types.Bool
  {- Arity: 2,
     Strictness: <S(S(LLS(S)LLLLLLLLLL)L),U(U(A,A,U(U),A,A,A,A,A,A,A,A,A,A),C(U))><L,1*U(A,1*U)>,
     Unfolding: (\ @ dom
                   ($d(%,%) :: Language.Haskell.Tools.AST.SemaInfoClasses.HasNameInfo
                                 dom)
                   (eta :: Language.Haskell.Tools.AST.ElementTypes.Type dom) ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Language.Haskell.Tools.AST.Ann.SemanticInfo'
                             dom Language.Haskell.Tools.AST.Ann.SameInfoDefaultCls)
                        @ Language.Haskell.Tools.AST.SemaInfoTypes.NoSemanticInfo
                        (Language.Haskell.Tools.AST.Ann.$p3Domain
                           @ dom
                           (GHC.Classes.$p1(%,%)
                              @ (Language.Haskell.Tools.AST.Ann.Domain dom)
                              @ (Language.Haskell.Tools.AST.SemaInfoClasses.HasNameInfo'
                                   (Language.Haskell.Tools.AST.Ann.SemanticInfo
                                      dom
                                      Language.Haskell.Tools.AST.Representation.Names.UQualifiedName))
                              $d(%,%)))
                          `cast`
                        (Data.Type.Equality.N:~[0]
                             <*>_N <Language.Haskell.Tools.AST.Ann.SemanticInfo'
                                      dom
                                      Language.Haskell.Tools.AST.Ann.SameInfoDefaultCls>_N <Language.Haskell.Tools.AST.SemaInfoTypes.NoSemanticInfo>_N) of cobox0 { DEFAULT ->
                 let {
                   m1 :: Control.Monad.Trans.Maybe.MaybeT
                           ExtMonad.ExtMonad TyCoRep.TyThing
                   = DerivingsChecker.lookupType @ dom $d(%,%) eta
                 } in
                 (\ (r1 :: [GHC.LanguageExtensions.Type.Extension]) ->
                  let {
                    m2 :: Control.Monad.Trans.State.Lazy.StateT
                            (Data.Map.Base.Map
                               (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                               [SrcLoc.SrcSpan])
                            GhcMonad.Ghc
                            (GHC.Base.Maybe TyCoRep.TyThing)
                    = m1
                        `cast`
                      (Trans
                           (Control.Monad.Trans.Maybe.N:MaybeT[0]
                                <ExtMonad.ExtMonad>_R <TyCoRep.TyThing>_N)
                           (Control.Monad.Trans.Reader.N:ReaderT[0]
                                <*>_N
                                <[GHC.LanguageExtensions.Type.Extension]>_R
                                <Control.Monad.Trans.State.Lazy.StateT
                                   ExtMap.ExtMap GhcMonad.Ghc>_R
                                <GHC.Base.Maybe TyCoRep.TyThing>_N))
                        r1
                  } in
                  (\ (s1 :: Data.Map.Base.Map
                              (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                              [SrcLoc.SrcSpan]) ->
                   let {
                     m :: GhcMonad.Ghc
                            (GHC.Base.Maybe TyCoRep.TyThing,
                             Data.Map.Base.Map
                               (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                               [SrcLoc.SrcSpan])
                     = m2
                         `cast`
                       (Control.Monad.Trans.State.Lazy.N:StateT[0]
                            <Data.Map.Base.Map
                               (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                               [SrcLoc.SrcSpan]>_N
                            <GhcMonad.Ghc>_R
                            <GHC.Base.Maybe TyCoRep.TyThing>_N)
                         s1
                   } in
                   (\ (s :: GhcMonad.Session)
                      (s2 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                    case (m `cast`
                          (GhcMonad.N:Ghc[0]
                               <(GHC.Base.Maybe TyCoRep.TyThing,
                                 Data.Map.Base.Map
                                   (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                                   [SrcLoc.SrcSpan])>_R)
                            s)
                           `cast`
                         (GHC.Types.N:IO[0]
                              <(GHC.Base.Maybe TyCoRep.TyThing,
                                Data.Map.Base.Map
                                  (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                                  [SrcLoc.SrcSpan])>_R)
                           s2 of ds1 { (#,#) ipv ipv1 ->
                    case ipv1 of wild { (,) a1 s' ->
                    case case a1 of wild1 {
                           GHC.Base.Nothing -> GHC.Types.True
                           GHC.Base.Just x
                           -> DerivingsChecker.isNewtypeTyCon x } of vx { DEFAULT ->
                    (# ipv, (vx, s') #) } } })
                     `cast`
                   (Trans
                        (<GhcMonad.Session>_R
                         ->_R Sym (GHC.Types.N:IO[0]
                                       <(GHC.Types.Bool,
                                         Data.Map.Base.Map
                                           (ExtMap.LogicalRelation
                                              GHC.LanguageExtensions.Type.Extension)
                                           [SrcLoc.SrcSpan])>_R))
                        (Sym (GhcMonad.N:Ghc[0]
                                  <(GHC.Types.Bool,
                                    Data.Map.Base.Map
                                      (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                                      [SrcLoc.SrcSpan])>_R))))
                    `cast`
                  (Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                            <Data.Map.Base.Map
                               (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                               [SrcLoc.SrcSpan]>_N
                            <GhcMonad.Ghc>_R
                            <GHC.Types.Bool>_N)))
                   `cast`
                 (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                           <*>_N
                           <[GHC.LanguageExtensions.Type.Extension]>_R
                           <Control.Monad.Trans.State.Lazy.StateT
                              ExtMap.ExtMap GhcMonad.Ghc>_R
                           <GHC.Types.Bool>_N)) }) -}
e5b347efa71f69e4fc8a46541268a9fb
  isNewtypeTyCon :: TyCoRep.TyThing -> GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: TyCoRep.TyThing) ->
                 case ds of wild {
                   DEFAULT -> GHC.Types.False
                   TyCoRep.ATyCon tycon -> TyCon.isNewTyCon tycon }) -}
018c38b73ee66b9b6b0abfcf0e5bf99e
  isSynNewType ::
    Language.Haskell.Tools.AST.SemaInfoClasses.HasNameInfo dom =>
    Language.Haskell.Tools.AST.ElementTypes.Type dom
    -> ExtMonad.ExtMonad GHC.Types.Bool
  {- Arity: 2,
     Strictness: <S(S(LLS(S)LLLLLLLLLL)L),U(U(A,A,U(U),A,A,A,A,A,A,A,A,A,A),C(U))><L,U(1*U(A,1*U(1*U,A,A,A)),1*U)>,
     Unfolding: (\ @ dom
                   ($d(%,%) :: Language.Haskell.Tools.AST.SemaInfoClasses.HasNameInfo
                                 dom)
                   (eta :: Language.Haskell.Tools.AST.ElementTypes.Type dom) ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Language.Haskell.Tools.AST.Ann.SemanticInfo'
                             dom Language.Haskell.Tools.AST.Ann.SameInfoDefaultCls)
                        @ Language.Haskell.Tools.AST.SemaInfoTypes.NoSemanticInfo
                        (Language.Haskell.Tools.AST.Ann.$p3Domain
                           @ dom
                           (GHC.Classes.$p1(%,%)
                              @ (Language.Haskell.Tools.AST.Ann.Domain dom)
                              @ (Language.Haskell.Tools.AST.SemaInfoClasses.HasNameInfo'
                                   (Language.Haskell.Tools.AST.Ann.SemanticInfo
                                      dom
                                      Language.Haskell.Tools.AST.Representation.Names.UQualifiedName))
                              $d(%,%)))
                          `cast`
                        (Data.Type.Equality.N:~[0]
                             <*>_N <Language.Haskell.Tools.AST.Ann.SemanticInfo'
                                      dom
                                      Language.Haskell.Tools.AST.Ann.SameInfoDefaultCls>_N <Language.Haskell.Tools.AST.SemaInfoTypes.NoSemanticInfo>_N) of cobox0 { DEFAULT ->
                 let {
                   eta1 :: SrcLoc.SrcSpan
                   = case eta of wild { Language.Haskell.Tools.AST.Ann.Ann a ds ->
                     case a of wild1 { Language.Haskell.Tools.AST.Ann.NodeInfo ds1 ds2 ->
                     case ds2
                            `cast`
                          (Language.Haskell.Tools.Transform.SourceTemplate.D:R:SpanInfoSrcTemplateStage0[0]) of wild2 { Language.Haskell.Tools.Transform.SourceTemplate.SourceTemplateNode ds4 ds5 ds3 ds6 ->
                     ds4 } } }
                 } in
                 let {
                   eta2 :: [SrcLoc.SrcSpan]
                   = GHC.Types.: @ SrcLoc.SrcSpan eta1 (GHC.Types.[] @ SrcLoc.SrcSpan)
                 } in
                 let {
                   m1 :: Control.Monad.Trans.Maybe.MaybeT
                           ExtMonad.ExtMonad TyCoRep.TyThing
                   = DerivingsChecker.lookupType @ dom $d(%,%) eta
                 } in
                 (\ (r1 :: [GHC.LanguageExtensions.Type.Extension]) ->
                  let {
                    m2 :: Control.Monad.Trans.State.Lazy.StateT
                            (Data.Map.Base.Map
                               (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                               [SrcLoc.SrcSpan])
                            GhcMonad.Ghc
                            (GHC.Base.Maybe TyCoRep.TyThing)
                    = m1
                        `cast`
                      (Trans
                           (Control.Monad.Trans.Maybe.N:MaybeT[0]
                                <ExtMonad.ExtMonad>_R <TyCoRep.TyThing>_N)
                           (Control.Monad.Trans.Reader.N:ReaderT[0]
                                <*>_N
                                <[GHC.LanguageExtensions.Type.Extension]>_R
                                <Control.Monad.Trans.State.Lazy.StateT
                                   ExtMap.ExtMap GhcMonad.Ghc>_R
                                <GHC.Base.Maybe TyCoRep.TyThing>_N))
                        r1
                  } in
                  (\ (s1 :: Data.Map.Base.Map
                              (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                              [SrcLoc.SrcSpan]) ->
                   let {
                     m :: GhcMonad.Ghc
                            (GHC.Base.Maybe TyCoRep.TyThing,
                             Data.Map.Base.Map
                               (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                               [SrcLoc.SrcSpan])
                     = m2
                         `cast`
                       (Control.Monad.Trans.State.Lazy.N:StateT[0]
                            <Data.Map.Base.Map
                               (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                               [SrcLoc.SrcSpan]>_N
                            <GhcMonad.Ghc>_R
                            <GHC.Base.Maybe TyCoRep.TyThing>_N)
                         s1
                   } in
                   (\ (s :: GhcMonad.Session)
                      (s2 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                    case (m `cast`
                          (GhcMonad.N:Ghc[0]
                               <(GHC.Base.Maybe TyCoRep.TyThing,
                                 Data.Map.Base.Map
                                   (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                                   [SrcLoc.SrcSpan])>_R)
                            s)
                           `cast`
                         (GHC.Types.N:IO[0]
                              <(GHC.Base.Maybe TyCoRep.TyThing,
                                Data.Map.Base.Map
                                  (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                                  [SrcLoc.SrcSpan])>_R)
                           s2 of ds1 { (#,#) ipv ipv1 ->
                    case ipv1 of wild { (,) a1 s' ->
                    case a1 of wild1 {
                      GHC.Base.Nothing -> (# ipv, (GHC.Types.True, s') #)
                      GHC.Base.Just tycon
                      -> case tycon of wild2 {
                           DEFAULT -> (# ipv, (GHC.Types.False, s') #)
                           TyCoRep.ATyCon tycon1
                           -> case tycon1 of wild3 {
                                DEFAULT -> (# ipv, (GHC.Types.False, s') #)
                                TyCon.SynonymTyCon ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10
                                -> case DerivingsChecker.tyconFromGHCType ds10 of wild4 {
                                     GHC.Base.Nothing -> (# ipv, (GHC.Types.False, s') #)
                                     GHC.Base.Just def
                                     -> (# ipv,
                                           (case def of wild5 {
                                              DEFAULT -> GHC.Types.False
                                              TyCon.AlgTyCon ds11 ds12 ds13 ds14 ds15 ds16 ds17 ds18 ds19 ds20 ds21 ds22 ds23 ds24 ds25
                                              -> case ds22 of wild6 {
                                                   DEFAULT -> GHC.Types.False
                                                   TyCon.NewTyCon ds26 ds27 ds28 ds29
                                                   -> GHC.Types.True } },
                                            Data.Map.Strict.insertWithKey
                                              @ (ExtMap.LogicalRelation
                                                   GHC.LanguageExtensions.Type.Extension)
                                              @ [SrcLoc.SrcSpan]
                                              ExtMonad.$s$fOrdLogicalRelation
                                              (ExtMonad.addOccurence_1
                                                 @ (ExtMap.LogicalRelation
                                                      GHC.LanguageExtensions.Type.Extension))
                                              DerivingsChecker.isSynNewType_key
                                              eta2
                                              s') #) } } } } } })
                     `cast`
                   (Trans
                        (<GhcMonad.Session>_R
                         ->_R Sym (GHC.Types.N:IO[0]
                                       <(GHC.Types.Bool,
                                         Data.Map.Base.Map
                                           (ExtMap.LogicalRelation
                                              GHC.LanguageExtensions.Type.Extension)
                                           [SrcLoc.SrcSpan])>_R))
                        (Sym (GhcMonad.N:Ghc[0]
                                  <(GHC.Types.Bool,
                                    Data.Map.Base.Map
                                      (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                                      [SrcLoc.SrcSpan])>_R))))
                    `cast`
                  (Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                            <Data.Map.Base.Map
                               (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                               [SrcLoc.SrcSpan]>_N
                            <GhcMonad.Ghc>_R
                            <GHC.Types.Bool>_N)))
                   `cast`
                 (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                           <*>_N
                           <[GHC.LanguageExtensions.Type.Extension]>_R
                           <Control.Monad.Trans.State.Lazy.StateT
                              ExtMap.ExtMap GhcMonad.Ghc>_R
                           <GHC.Types.Bool>_N)) }) -}
614f5ff3e4938501f0d868a67ea2d056
  isSynNewType_key ::
    ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension
  {- HasNoCafRefs,
     Unfolding: (ExtMap.LVar
                   @ GHC.LanguageExtensions.Type.Extension
                   GHC.LanguageExtensions.Type.TypeSynonymInstances) -}
3cf84156a95562f0eb8c4a9c545072b1
  isWiredInClass :: Name.Name -> GHC.Types.Bool
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (y :: Name.Name) ->
                 GHC.List.elem
                   @ Name.Name
                   Name.$fEqName
                   y
                   DerivingsChecker.wiredInClasses) -}
867fd784053223ba4278a0ce75c6edab
  lookupSynDef :: TyCoRep.TyThing -> GHC.Base.Maybe TyCon.TyCon
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (syn :: TyCoRep.TyThing) ->
                 case syn of wild {
                   DEFAULT -> GHC.Base.Nothing @ TyCon.TyCon
                   TyCoRep.ATyCon tycon
                   -> case tycon of wild1 {
                        DEFAULT -> GHC.Base.Nothing @ TyCon.TyCon
                        TyCon.SynonymTyCon ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9
                        -> DerivingsChecker.tyconFromGHCType ds9 } }) -}
0c4abf1bf6f127d9aa792f37e9f8c02f
  lookupType ::
    Language.Haskell.Tools.AST.SemaInfoClasses.HasNameInfo dom =>
    Language.Haskell.Tools.AST.ElementTypes.Type dom
    -> Control.Monad.Trans.Maybe.MaybeT
         ExtMonad.ExtMonad TyCoRep.TyThing
  {- Arity: 2,
     Strictness: <S(S(LLS(S)LLLLLLLLLL)L),U(U(A,A,U(U),A,A,A,A,A,A,A,A,A,A),C(U))><L,1*U(A,1*U)>,
     Unfolding: (\ @ dom
                   ($d(%,%) :: Language.Haskell.Tools.AST.SemaInfoClasses.HasNameInfo
                                 dom)
                   (eta :: Language.Haskell.Tools.AST.ElementTypes.Type dom) ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Language.Haskell.Tools.AST.Ann.SemanticInfo'
                             dom Language.Haskell.Tools.AST.Ann.SameInfoDefaultCls)
                        @ Language.Haskell.Tools.AST.SemaInfoTypes.NoSemanticInfo
                        (Language.Haskell.Tools.AST.Ann.$p3Domain
                           @ dom
                           (GHC.Classes.$p1(%,%)
                              @ (Language.Haskell.Tools.AST.Ann.Domain dom)
                              @ (Language.Haskell.Tools.AST.SemaInfoClasses.HasNameInfo'
                                   (Language.Haskell.Tools.AST.Ann.SemanticInfo
                                      dom
                                      Language.Haskell.Tools.AST.Representation.Names.UQualifiedName))
                              $d(%,%)))
                          `cast`
                        (Data.Type.Equality.N:~[0]
                             <*>_N <Language.Haskell.Tools.AST.Ann.SemanticInfo'
                                      dom
                                      Language.Haskell.Tools.AST.Ann.SameInfoDefaultCls>_N <Language.Haskell.Tools.AST.SemaInfoTypes.NoSemanticInfo>_N) of cobox0 { DEFAULT ->
                 let {
                   m1 :: GHC.Base.Maybe
                           (Language.Haskell.Tools.AST.ElementTypes.Name dom)
                   = case eta of ww { Language.Haskell.Tools.AST.Ann.Ann ww7 ww8 ->
                     DerivingsChecker.$wnameFromType @ dom ww8 }
                 } in
                 (\ (r1 :: [GHC.LanguageExtensions.Type.Extension])
                    (eta1 :: Data.Map.Base.Map
                               (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                               [SrcLoc.SrcSpan])
                    (eta2 :: GhcMonad.Session)
                    (eta3 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                  case m1 of wild {
                    GHC.Base.Nothing
                    -> (# eta3, (GHC.Base.Nothing @ TyCoRep.TyThing, eta1) #)
                    GHC.Base.Just y
                    -> case DerivingsChecker.getSemName @ dom $d(%,%) y of wild1 {
                         GHC.Base.Nothing
                         -> (# eta3, (GHC.Base.Nothing @ TyCoRep.TyThing, eta1) #)
                         GHC.Base.Just y1
                         -> ((((GHC.lookupName
                                  @ ExtMonad.ExtMonad
                                  (DerivingsChecker.$s$fGhcMonadReaderT
                                     @ [GHC.LanguageExtensions.Type.Extension])
                                  y1)
                                 `cast`
                               (Control.Monad.Trans.Reader.N:ReaderT[0]
                                    <*>_N
                                    <[GHC.LanguageExtensions.Type.Extension]>_R
                                    <Control.Monad.Trans.State.Lazy.StateT
                                       ExtMap.ExtMap GhcMonad.Ghc>_R
                                    <GHC.Base.Maybe TyCoRep.TyThing>_N)
                                 r1)
                                `cast`
                              (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                   <Data.Map.Base.Map
                                      (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                                      [SrcLoc.SrcSpan]>_N
                                   <GhcMonad.Ghc>_R
                                   <GHC.Base.Maybe TyCoRep.TyThing>_N)
                                eta1)
                               `cast`
                             (GhcMonad.N:Ghc[0]
                                  <(GHC.Base.Maybe TyCoRep.TyThing,
                                    Data.Map.Base.Map
                                      (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                                      [SrcLoc.SrcSpan])>_R)
                               eta2)
                              `cast`
                            (GHC.Types.N:IO[0]
                                 <(GHC.Base.Maybe TyCoRep.TyThing,
                                   Data.Map.Base.Map
                                     (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                                     [SrcLoc.SrcSpan])>_R)
                              eta3 } })
                   `cast`
                 (Trans
                      (<[GHC.LanguageExtensions.Type.Extension]>_R
                       ->_R Trans
                                (<Data.Map.Base.Map
                                    (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                                    [SrcLoc.SrcSpan]>_R
                                 ->_R Trans
                                          (<GhcMonad.Session>_R
                                           ->_R Sym (GHC.Types.N:IO[0]
                                                         <(GHC.Base.Maybe TyCoRep.TyThing,
                                                           Data.Map.Base.Map
                                                             (ExtMap.LogicalRelation
                                                                GHC.LanguageExtensions.Type.Extension)
                                                             [SrcLoc.SrcSpan])>_R))
                                          (Sym (GhcMonad.N:Ghc[0]
                                                    <(GHC.Base.Maybe TyCoRep.TyThing,
                                                      Data.Map.Base.Map
                                                        (ExtMap.LogicalRelation
                                                           GHC.LanguageExtensions.Type.Extension)
                                                        [SrcLoc.SrcSpan])>_R)))
                                (Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                          <Data.Map.Base.Map
                                             (ExtMap.LogicalRelation
                                                GHC.LanguageExtensions.Type.Extension)
                                             [SrcLoc.SrcSpan]>_N
                                          <GhcMonad.Ghc>_R
                                          <GHC.Base.Maybe TyCoRep.TyThing>_N)))
                      (Trans
                           (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                     <*>_N
                                     <[GHC.LanguageExtensions.Type.Extension]>_R
                                     <Control.Monad.Trans.State.Lazy.StateT
                                        ExtMap.ExtMap GhcMonad.Ghc>_R
                                     <GHC.Base.Maybe TyCoRep.TyThing>_N))
                           (Sym (Control.Monad.Trans.Maybe.N:MaybeT[0]
                                     <Control.Monad.Trans.Reader.ReaderT
                                        [GHC.LanguageExtensions.Type.Extension]
                                        (Control.Monad.Trans.State.Lazy.StateT
                                           ExtMap.ExtMap GhcMonad.Ghc)>_R
                                     <TyCoRep.TyThing>_N)))) }) -}
8a969d0592269c2b3a7b0d18975ab630
  nameFromType ::
    Language.Haskell.Tools.AST.ElementTypes.Type dom
    -> GHC.Base.Maybe
         (Language.Haskell.Tools.AST.ElementTypes.Name dom)
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LS),1*U(A,1*U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ @ dom (w :: Language.Haskell.Tools.AST.ElementTypes.Type dom) ->
                 case w of ww { Language.Haskell.Tools.AST.Ann.Ann ww7 ww8 ->
                 DerivingsChecker.$wnameFromType @ dom ww8 }) -}
1306a38fb3149c4eac1c23d3943d3268
  notGNTD :: [Name.Name]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Name.Name
                   PrelNames.dataClassName
                   DerivingsChecker.notGNTD1) -}
6207d3e1d80d5edc51c0fba91abeae96
  notGNTD1 :: [Name.Name]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Name.Name
                   PrelNames.typeableClassName
                   DerivingsChecker.notGNTD2) -}
cb73d5c29ca83af288611726747638a7
  notGNTD2 :: [Name.Name]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Name.Name
                   PrelNames.showClassName
                   DerivingsChecker.notGNTD3) -}
6209b67c703347e35bc4934a805ece4a
  notGNTD3 :: [Name.Name]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Name.Name
                   PrelNames.readClassName
                   (GHC.Types.[] @ Name.Name)) -}
6e77e70e8acb245ee124fa57f31573ed
  readClass ::
    GHC.Base.String -> GHC.Base.Maybe DerivingsChecker.DerivableClass
  {- Arity: 1, Strictness: <L,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: [GHC.Types.Char]) ->
                 case DerivingsChecker.readClass1 x of wild {
                   [] -> GHC.Base.Nothing @ DerivingsChecker.DerivableClass
                   : a1 ds1
                   -> GHC.Base.Just
                        @ DerivingsChecker.DerivableClass
                        (Data.Tuple.fst
                           @ DerivingsChecker.DerivableClass
                           @ [GHC.Types.Char]
                           a1) }) -}
40492661a070895b73ee2c8f0cfe2d99
  readClass1 ::
    [GHC.Types.Char]
    -> [(DerivingsChecker.DerivableClass, [GHC.Types.Char])]
  {- Arity: 1, Strictness: <L,1*U>,
     Unfolding: (\ (x :: [GHC.Types.Char]) ->
                 GHC.List.filter
                   @ (DerivingsChecker.DerivableClass, [GHC.Types.Char])
                   DerivingsChecker.chkClassForData8
                   (Text.ParserCombinators.ReadP.run
                      @ DerivingsChecker.DerivableClass
                      DerivingsChecker.chkClassForData7
                      (GHC.Base.++
                         @ GHC.Types.Char
                         DerivingsChecker.chkClassForData6
                         x))) -}
d4d3814b8d91ad310fa2f6f04a9db8fd
  readIntoExt ::
    GHC.Base.String
    -> GHC.Base.Maybe GHC.LanguageExtensions.Type.Extension
  {- Arity: 1, Strictness: <L,1*U>,
     Unfolding: (\ (s :: GHC.Base.String) ->
                 case DerivingsChecker.readClass1 s of wild {
                   [] -> GHC.Base.Nothing @ GHC.LanguageExtensions.Type.Extension
                   : a1 ds1
                   -> case a1 of wild1 { (,) x ds2 ->
                      case x of wild2 {
                        DEFAULT -> GHC.Base.Nothing @ GHC.LanguageExtensions.Type.Extension
                        DerivingsChecker.ClsData -> DerivingsChecker.readIntoExt5
                        DerivingsChecker.ClsTypeable -> DerivingsChecker.readIntoExt5
                        DerivingsChecker.ClsGeneric -> DerivingsChecker.readIntoExt4
                        DerivingsChecker.ClsFunctor -> DerivingsChecker.readIntoExt3
                        DerivingsChecker.ClsFoldable -> DerivingsChecker.readIntoExt2
                        DerivingsChecker.ClsTraversable
                        -> DerivingsChecker.readIntoExt1 } } }) -}
b6c6486347e2aef0f5c79644a5bf1a0a
  readIntoExt1 ::
    GHC.Base.Maybe GHC.LanguageExtensions.Type.Extension
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Base.Just
                   @ GHC.LanguageExtensions.Type.Extension
                   GHC.LanguageExtensions.Type.DeriveTraversable) -}
3a06c404fe7bb43f9489855528a6d920
  readIntoExt2 ::
    GHC.Base.Maybe GHC.LanguageExtensions.Type.Extension
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Base.Just
                   @ GHC.LanguageExtensions.Type.Extension
                   GHC.LanguageExtensions.Type.DeriveFoldable) -}
9a593d65a54ce188de45090df6dc75f0
  readIntoExt3 ::
    GHC.Base.Maybe GHC.LanguageExtensions.Type.Extension
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Base.Just
                   @ GHC.LanguageExtensions.Type.Extension
                   GHC.LanguageExtensions.Type.DeriveFunctor) -}
4f33b57392eeab40f37b0a65d7a0debe
  readIntoExt4 ::
    GHC.Base.Maybe GHC.LanguageExtensions.Type.Extension
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Base.Just
                   @ GHC.LanguageExtensions.Type.Extension
                   GHC.LanguageExtensions.Type.DeriveGeneric) -}
e2236e5575364e6d48377a7dd368b6ba
  readIntoExt5 ::
    GHC.Base.Maybe GHC.LanguageExtensions.Type.Extension
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Base.Just
                   @ GHC.LanguageExtensions.Type.Extension
                   GHC.LanguageExtensions.Type.DeriveDataTypeable) -}
5bc1ddccf48831b311a9ca4adb94b3f8
  rightmostType ::
    Language.Haskell.Tools.AST.ElementTypes.InstanceHead dom
    -> Language.Haskell.Tools.AST.ElementTypes.Type dom
  {- Arity: 1, Strictness: <S(LS),1*U(U,U)>,
     Unfolding: InlineRule (1, True, False)
                (\ @ dom
                   (ihead :: Language.Haskell.Tools.AST.ElementTypes.InstanceHead
                               dom) ->
                 case DerivingsChecker.skipParens
                        @ dom
                        ihead of wild { Language.Haskell.Tools.AST.Ann.Ann ds ds1 ->
                 case ds1 of wild1 {
                   DEFAULT -> DerivingsChecker.rightmostType1 @ dom GHC.Prim.void#
                   Language.Haskell.Tools.AST.Representation.Decls.UInstanceHeadApp fun arg
                   -> arg } }) -}
2c8d38e61b37208fc924715d9b058efa
  rightmostType1 ::
    GHC.Prim.Void# -> Language.Haskell.Tools.AST.ElementTypes.Type dom
  {- Arity: 1, Strictness: <B,A>x, Inline: INLINE[0],
     Unfolding: InlineRule (1, True, True)
                (\ @ dom (w :: GHC.Prim.Void#)[OneShot] ->
                 DerivingsChecker.$wlvl1 @ dom GHC.Prim.void#) -}
897867c60502a46f8ca4639ac679215e
  separateByKeyword ::
    Language.Haskell.Tools.AST.SemaInfoClasses.HasNameInfo dom =>
    Language.Haskell.Tools.AST.ElementTypes.DataOrNewtypeKeyword dom
    -> Language.Haskell.Tools.AST.Ann.AnnMaybeG
         Language.Haskell.Tools.AST.Representation.Decls.UDeriving
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage
    -> ExtMonad.ExtMonad ()
  {- Arity: 3,
     Strictness: <S(S(LLS(S)LLLLLLLLLL)L),U(U(A,A,U(U),A,A,A,A,A,A,A,A,A,A),C(U))><S(LS),1*U(A,1*U)><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ @ dom
                   (w :: Language.Haskell.Tools.AST.SemaInfoClasses.HasNameInfo dom)
                   (w1 :: Language.Haskell.Tools.AST.ElementTypes.DataOrNewtypeKeyword
                            dom)
                   (w2 :: Language.Haskell.Tools.AST.Ann.AnnMaybeG
                            Language.Haskell.Tools.AST.Representation.Decls.UDeriving
                            dom
                            Language.Haskell.Tools.AST.Ann.SrcTemplateStage) ->
                 case w1 of ww { Language.Haskell.Tools.AST.Ann.Ann ww7 ww8 ->
                 DerivingsChecker.$wseparateByKeyword @ dom w ww8 w2 }) -}
a6fbc59b9ccbe1490a73ceb729cd99db
  skipParens ::
    Language.Haskell.Tools.AST.ElementTypes.InstanceHead dom
    -> Language.Haskell.Tools.AST.ElementTypes.InstanceHead dom
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LS),1*U(U,U)>m,
     Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ @ dom
                   (w :: Language.Haskell.Tools.AST.ElementTypes.InstanceHead dom) ->
                 case w of ww { Language.Haskell.Tools.AST.Ann.Ann ww7 ww8 ->
                 case DerivingsChecker.$wskipParens
                        @ dom
                        ww7
                        ww8 of ww9 { (#,#) ww10 ww11 ->
                 Language.Haskell.Tools.AST.Ann.Ann
                   @ Language.Haskell.Tools.AST.Representation.Decls.UInstanceHead
                   @ dom
                   @ Language.Haskell.Tools.AST.Ann.SrcTemplateStage
                   ww10
                   ww11 } }) -}
96ad931d443ce95831a313d810e2d4de
  tyconFromGHCType :: TyCoRep.Type -> GHC.Base.Maybe TyCon.TyCon
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U> -}
8f3ae9bc3441683bdfa25c8150450a78
  tyconFromTyThing :: TyCoRep.TyThing -> GHC.Base.Maybe TyCon.TyCon
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: TyCoRep.TyThing) ->
                 case ds of wild {
                   DEFAULT -> GHC.Base.Nothing @ TyCon.TyCon
                   TyCoRep.ATyCon tycon -> GHC.Base.Just @ TyCon.TyCon tycon }) -}
750c5bb74e6e126a404b6abb00111408
  whichExtension ::
    DerivingsChecker.DerivableClass
    -> GHC.Base.Maybe GHC.LanguageExtensions.Type.Extension
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: DerivingsChecker.DerivableClass) ->
                 case ds of wild {
                   DEFAULT -> GHC.Base.Nothing @ GHC.LanguageExtensions.Type.Extension
                   DerivingsChecker.ClsData -> DerivingsChecker.readIntoExt5
                   DerivingsChecker.ClsTypeable -> DerivingsChecker.readIntoExt5
                   DerivingsChecker.ClsGeneric -> DerivingsChecker.readIntoExt4
                   DerivingsChecker.ClsFunctor -> DerivingsChecker.readIntoExt3
                   DerivingsChecker.ClsFoldable -> DerivingsChecker.readIntoExt2
                   DerivingsChecker.ClsTraversable
                   -> DerivingsChecker.readIntoExt1 }) -}
291ef7fff116a94359280ba55e6a0eff
  wiredInClasses :: [Name.Name]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Name.Name
                   PrelNames.eqClassName
                   DerivingsChecker.wiredInClasses1) -}
9843aadad965436fbcbe4f4326cc49b3
  wiredInClasses1 :: [Name.Name]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Name.Name
                   PrelNames.ordClassName
                   DerivingsChecker.wiredInClasses2) -}
f9fdcae7e8675d831aad077a14326811
  wiredInClasses10 :: [Name.Name]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Name.Name
                   PrelNames.functorClassName
                   DerivingsChecker.wiredInClasses11) -}
19b22a3411472fd7527af719f811a46a
  wiredInClasses11 :: [Name.Name]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Name.Name
                   PrelNames.foldableClassName
                   DerivingsChecker.wiredInClasses12) -}
8d00c0205823f1ef8bb5076ff0efff14
  wiredInClasses12 :: [Name.Name]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Name.Name
                   PrelNames.traversableClassName
                   (GHC.Types.[] @ Name.Name)) -}
410e5fb3da47830c52eaa06352c1cc71
  wiredInClasses2 :: [Name.Name]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Name.Name
                   PrelNames.ixClassName
                   DerivingsChecker.wiredInClasses3) -}
22d54b06047b59722ae9bd298e036548
  wiredInClasses3 :: [Name.Name]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Name.Name
                   PrelNames.showClassName
                   DerivingsChecker.wiredInClasses4) -}
d85b41b2acf2227ac7faa3211d201705
  wiredInClasses4 :: [Name.Name]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Name.Name
                   PrelNames.readClassName
                   DerivingsChecker.wiredInClasses5) -}
16caeac433e9269b2994c9d7ac8f3b91
  wiredInClasses5 :: [Name.Name]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Name.Name
                   PrelNames.enumClassName
                   DerivingsChecker.wiredInClasses6) -}
bad47a837d3f56ad955ede821656ee58
  wiredInClasses6 :: [Name.Name]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Name.Name
                   PrelNames.boundedClassName
                   DerivingsChecker.wiredInClasses7) -}
ecd1479b281be1b96d946c1adbc9156f
  wiredInClasses7 :: [Name.Name]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Name.Name
                   PrelNames.dataClassName
                   DerivingsChecker.wiredInClasses8) -}
fff64e9d2ed1599501f8a6a75c5a65f6
  wiredInClasses8 :: [Name.Name]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Name.Name
                   PrelNames.typeableClassName
                   DerivingsChecker.wiredInClasses9) -}
01fa03fb6829b16373f9e04cf5164211
  wiredInClasses9 :: [Name.Name]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Name.Name
                   PrelNames.genClassName
                   DerivingsChecker.wiredInClasses10) -}
instance GHC.Classes.Eq [DerivingsChecker.DerivableClass]
  = DerivingsChecker.$fEqDerivableClass
instance GHC.Classes.Ord [DerivingsChecker.DerivableClass]
  = DerivingsChecker.$fOrdDerivableClass
instance GHC.Read.Read [DerivingsChecker.DerivableClass]
  = DerivingsChecker.$fReadDerivableClass
instance GHC.Show.Show [DerivingsChecker.DerivableClass]
  = DerivingsChecker.$fShowDerivableClass
"SPEC/DerivingsChecker $fApplicativeReaderT @ (StateT ExtMap Ghc) _" [ALWAYS] forall @ r
                                                                                     ($dApplicative :: GHC.Base.Applicative
                                                                                                         (Control.Monad.Trans.State.Lazy.StateT
                                                                                                            ExtMap.ExtMap
                                                                                                            GhcMonad.Ghc))
  Control.Monad.Trans.Reader.$fApplicativeReaderT @ (Control.Monad.Trans.State.Lazy.StateT
                                                       ExtMap.ExtMap GhcMonad.Ghc)
                                                  @ r
                                                  $dApplicative
  = DerivingsChecker.$s$fApplicativeReaderT @ r
"SPEC/DerivingsChecker $fApplicativeStateT @ Ghc _" [ALWAYS] forall @ s
                                                                    ($dMonad :: GHC.Base.Monad
                                                                                  GhcMonad.Ghc)
                                                                    ($dFunctor :: GHC.Base.Functor
                                                                                    GhcMonad.Ghc)
  Control.Monad.Trans.State.Lazy.$fApplicativeStateT @ GhcMonad.Ghc
                                                     @ s
                                                     $dFunctor
                                                     $dMonad
  = DerivingsChecker.$s$fApplicativeReaderT_$s$fApplicativeStateT @ s
"SPEC/DerivingsChecker $fApplicativeStateT_$c<*> @ Ghc _" [ALWAYS] forall @ s
                                                                          ($dMonad :: GHC.Base.Monad
                                                                                        GhcMonad.Ghc)
                                                                          ($dFunctor :: GHC.Base.Functor
                                                                                          GhcMonad.Ghc)
  Control.Monad.Trans.State.Lazy.$fApplicativeStateT_$c<*> @ GhcMonad.Ghc
                                                           @ s
                                                           $dFunctor
                                                           $dMonad
  = DerivingsChecker.$s$fApplicativeReaderT_$s$fApplicativeStateT_$c<*>
      @ s
"SPEC/DerivingsChecker $fApplicativeStateT_$cp1Applicative @ Ghc _" [ALWAYS] forall @ s
                                                                                    ($dMonad :: GHC.Base.Monad
                                                                                                  GhcMonad.Ghc)
                                                                                    ($dFunctor :: GHC.Base.Functor
                                                                                                    GhcMonad.Ghc)
  Control.Monad.Trans.State.Lazy.$fApplicativeStateT_$cp1Applicative @ GhcMonad.Ghc
                                                                     @ s
                                                                     $dFunctor
                                                                     $dMonad
  = DerivingsChecker.$s$fApplicativeReaderT_$s$fApplicativeStateT_$cp1Applicative
      @ s
"SPEC/DerivingsChecker $fApplicativeStateT_$cpure @ Ghc _" [ALWAYS] forall @ s
                                                                           ($dMonad :: GHC.Base.Monad
                                                                                         GhcMonad.Ghc)
                                                                           ($dFunctor :: GHC.Base.Functor
                                                                                           GhcMonad.Ghc)
  Control.Monad.Trans.State.Lazy.$fApplicativeStateT_$cpure @ GhcMonad.Ghc
                                                            @ s
                                                            $dFunctor
                                                            $dMonad
  = DerivingsChecker.$s$fApplicativeReaderT_$s$fApplicativeStateT_$cpure
      @ s
"SPEC/DerivingsChecker $fExceptionMonadStateT @ Ghc _" [ALWAYS] forall @ s
                                                                       ($dExceptionMonad :: Exception.ExceptionMonad
                                                                                              GhcMonad.Ghc)
  Language.Haskell.Tools.Refactor.RefactorBase.$fExceptionMonadStateT @ GhcMonad.Ghc
                                                                      @ s
                                                                      $dExceptionMonad
  = DerivingsChecker.$s$fExceptionMonadStateT @ s
"SPEC/DerivingsChecker $fFunctorReaderT @ (StateT ExtMap Ghc) _" [ALWAYS] forall @ r
                                                                                 ($dFunctor :: GHC.Base.Functor
                                                                                                 (Control.Monad.Trans.State.Lazy.StateT
                                                                                                    ExtMap.ExtMap
                                                                                                    GhcMonad.Ghc))
  Control.Monad.Trans.Reader.$fFunctorReaderT @ (Control.Monad.Trans.State.Lazy.StateT
                                                   ExtMap.ExtMap GhcMonad.Ghc)
                                              @ r
                                              $dFunctor
  = DerivingsChecker.$s$fFunctorReaderT @ r
"SPEC/DerivingsChecker $fFunctorStateT @ Ghc _" [ALWAYS] forall @ s
                                                                ($dFunctor :: GHC.Base.Functor
                                                                                GhcMonad.Ghc)
  Control.Monad.Trans.State.Lazy.$fFunctorStateT @ GhcMonad.Ghc
                                                 @ s
                                                 $dFunctor
  = DerivingsChecker.$s$fApplicativeReaderT_$s$fFunctorStateT @ s
"SPEC/DerivingsChecker $fFunctorStateT_$cfmap @ Ghc _" [ALWAYS] forall @ s
                                                                       ($dFunctor :: GHC.Base.Functor
                                                                                       GhcMonad.Ghc)
  Control.Monad.Trans.State.Lazy.$fFunctorStateT_$cfmap @ GhcMonad.Ghc
                                                        @ s
                                                        $dFunctor
  = DerivingsChecker.$s$fApplicativeReaderT_$s$fFunctorStateT_$cfmap
      @ s
"SPEC/DerivingsChecker $fGhcMonadReaderT @ (StateT ExtMap Ghc) _" [ALWAYS] forall @ s
                                                                                  ($dGhcMonad :: GhcMonad.GhcMonad
                                                                                                   (Control.Monad.Trans.State.Lazy.StateT
                                                                                                      ExtMap.ExtMap
                                                                                                      GhcMonad.Ghc))
  Language.Haskell.Tools.Refactor.RefactorBase.$fGhcMonadReaderT @ (Control.Monad.Trans.State.Lazy.StateT
                                                                      ExtMap.ExtMap GhcMonad.Ghc)
                                                                 @ s
                                                                 $dGhcMonad
  = DerivingsChecker.$s$fGhcMonadReaderT @ s
"SPEC/DerivingsChecker $fGhcMonadStateT @ Ghc _" [ALWAYS] forall @ s
                                                                 ($dGhcMonad :: GhcMonad.GhcMonad
                                                                                  GhcMonad.Ghc)
  Language.Haskell.Tools.Refactor.RefactorBase.$fGhcMonadStateT @ GhcMonad.Ghc
                                                                @ s
                                                                $dGhcMonad
  = DerivingsChecker.$s$fGhcMonadReaderT_$s$fGhcMonadStateT @ s
"SPEC/DerivingsChecker $fGhcMonadStateT_$cp2GhcMonad @ Ghc _" [ALWAYS] forall @ s
                                                                              ($dGhcMonad :: GhcMonad.GhcMonad
                                                                                               GhcMonad.Ghc)
  Language.Haskell.Tools.Refactor.RefactorBase.$fGhcMonadStateT_$cp2GhcMonad @ GhcMonad.Ghc
                                                                             @ s
                                                                             $dGhcMonad
  = DerivingsChecker.$s$fExceptionMonadStateT_$s$fGhcMonadStateT_$cp2GhcMonad
      @ s
"SPEC/DerivingsChecker $fGhcMonadStateT_$cp3GhcMonad @ Ghc _" [ALWAYS] forall @ s
                                                                              ($dGhcMonad :: GhcMonad.GhcMonad
                                                                                               GhcMonad.Ghc)
  Language.Haskell.Tools.Refactor.RefactorBase.$fGhcMonadStateT_$cp3GhcMonad @ GhcMonad.Ghc
                                                                             @ s
                                                                             $dGhcMonad
  = DerivingsChecker.$s$fGhcMonadReaderT_$s$fGhcMonadStateT_$cp3GhcMonad
      @ s
"SPEC/DerivingsChecker $fMonadIOStateT @ Ghc _" [ALWAYS] forall @ s
                                                                ($dMonadIO :: Control.Monad.IO.Class.MonadIO
                                                                                GhcMonad.Ghc)
  Control.Monad.Trans.State.Lazy.$fMonadIOStateT @ GhcMonad.Ghc
                                                 @ s
                                                 $dMonadIO
  = DerivingsChecker.$s$fExceptionMonadStateT_$s$fMonadIOStateT @ s
"SPEC/DerivingsChecker $fMonadIOStateT_$cp1MonadIO @ Ghc _" [ALWAYS] forall @ s
                                                                            ($dMonadIO :: Control.Monad.IO.Class.MonadIO
                                                                                            GhcMonad.Ghc)
  Control.Monad.Trans.State.Lazy.$fMonadIOStateT_$cp1MonadIO @ GhcMonad.Ghc
                                                             @ s
                                                             $dMonadIO
  = DerivingsChecker.$s$fExceptionMonadStateT_$s$fMonadIOStateT_$cp1MonadIO
      @ s
"SPEC/DerivingsChecker $fMonadReaderT @ (StateT ExtMap Ghc) _" [ALWAYS] forall @ r
                                                                               ($dMonad :: GHC.Base.Monad
                                                                                             (Control.Monad.Trans.State.Lazy.StateT
                                                                                                ExtMap.ExtMap
                                                                                                GhcMonad.Ghc))
  Control.Monad.Trans.Reader.$fMonadReaderT @ (Control.Monad.Trans.State.Lazy.StateT
                                                 ExtMap.ExtMap GhcMonad.Ghc)
                                            @ r
                                            $dMonad
  = DerivingsChecker.$s$fMonadReaderT @ r
"SPEC/DerivingsChecker $fMonadReaderT_$c>> @ (StateT ExtMap Ghc) _" [ALWAYS] forall @ r
                                                                                    ($dMonad :: GHC.Base.Monad
                                                                                                  (Control.Monad.Trans.State.Lazy.StateT
                                                                                                     ExtMap.ExtMap
                                                                                                     GhcMonad.Ghc))
  Control.Monad.Trans.Reader.$fMonadReaderT_$c>> @ (Control.Monad.Trans.State.Lazy.StateT
                                                      ExtMap.ExtMap GhcMonad.Ghc)
                                                 @ r
                                                 $dMonad
  = DerivingsChecker.$s$fMonadReaderT_$s$fMonadReaderT_$c>> @ r
"SPEC/DerivingsChecker $fMonadReaderT_$c>>= @ (StateT ExtMap Ghc) _" [ALWAYS] forall @ r
                                                                                     ($dMonad :: GHC.Base.Monad
                                                                                                   (Control.Monad.Trans.State.Lazy.StateT
                                                                                                      ExtMap.ExtMap
                                                                                                      GhcMonad.Ghc))
  Control.Monad.Trans.Reader.$fMonadReaderT_$c>>= @ (Control.Monad.Trans.State.Lazy.StateT
                                                       ExtMap.ExtMap GhcMonad.Ghc)
                                                  @ r
                                                  $dMonad
  = DerivingsChecker.$s$fMonadReaderT_$s$fMonadReaderT_$c>>= @ r
"SPEC/DerivingsChecker $fMonadReaderT_$cfail @ (StateT ExtMap Ghc) _" [ALWAYS] forall @ r
                                                                                      ($dMonad :: GHC.Base.Monad
                                                                                                    (Control.Monad.Trans.State.Lazy.StateT
                                                                                                       ExtMap.ExtMap
                                                                                                       GhcMonad.Ghc))
  Control.Monad.Trans.Reader.$fMonadReaderT_$cfail @ (Control.Monad.Trans.State.Lazy.StateT
                                                        ExtMap.ExtMap GhcMonad.Ghc)
                                                   @ r
                                                   $dMonad
  = DerivingsChecker.$s$fMonadReaderT_$s$fMonadReaderT_$cfail @ r
"SPEC/DerivingsChecker $fMonadReaderT_$cp1Monad @ (StateT
                                                    ExtMap Ghc) _" [ALWAYS] forall @ r
                                                                                                                                             ($dMonad :: GHC.Base.Monad
                                                                                                                                                           (Control.Monad.Trans.State.Lazy.StateT
                                                                                                                                                              ExtMap.ExtMap
                                                                                                                                                              GhcMonad.Ghc))
  Control.Monad.Trans.Reader.$fMonadReaderT_$cp1Monad @ (Control.Monad.Trans.State.Lazy.StateT
                                                           ExtMap.ExtMap GhcMonad.Ghc)
                                                      @ r
                                                      $dMonad
  = DerivingsChecker.$s$fMonadReaderT_$s$fMonadReaderT_$cp1Monad @ r
"SPEC/DerivingsChecker $fMonadReaderT_$creturn @ (StateT
                                                   ExtMap Ghc) _" [ALWAYS] forall @ r
                                                                                                                                           ($dMonad :: GHC.Base.Monad
                                                                                                                                                         (Control.Monad.Trans.State.Lazy.StateT
                                                                                                                                                            ExtMap.ExtMap
                                                                                                                                                            GhcMonad.Ghc))
  Control.Monad.Trans.Reader.$fMonadReaderT_$creturn @ (Control.Monad.Trans.State.Lazy.StateT
                                                          ExtMap.ExtMap GhcMonad.Ghc)
                                                     @ r
                                                     $dMonad
  = DerivingsChecker.$s$fMonadMaybeT_$c>>=_$s$fMonadReaderT_$creturn
      @ r
"SPEC/DerivingsChecker $fMonadStateT @ Ghc _" [ALWAYS] forall @ s
                                                              ($dMonad :: GHC.Base.Monad
                                                                            GhcMonad.Ghc)
  Control.Monad.Trans.State.Lazy.$fMonadStateT @ GhcMonad.Ghc
                                               @ s
                                               $dMonad
  = DerivingsChecker.$s$fExceptionMonadStateT_$s$fMonadStateT @ s
"SPEC/DerivingsChecker $fMonadStateT_$c>> @ Ghc _" [ALWAYS] forall @ s
                                                                   ($dMonad :: GHC.Base.Monad
                                                                                 GhcMonad.Ghc)
  Control.Monad.Trans.State.Lazy.$fMonadStateT_$c>> @ GhcMonad.Ghc
                                                    @ s
                                                    $dMonad
  = DerivingsChecker.$s$fExceptionMonadStateT_$s$fMonadStateT_$c>>
      @ s
"SPEC/DerivingsChecker $fMonadStateT_$c>>= @ Ghc _" [ALWAYS] forall @ s
                                                                    ($dMonad :: GHC.Base.Monad
                                                                                  GhcMonad.Ghc)
  Control.Monad.Trans.State.Lazy.$fMonadStateT_$c>>= @ GhcMonad.Ghc
                                                     @ s
                                                     $dMonad
  = DerivingsChecker.$s$fExceptionMonadStateT_$s$fMonadStateT_$c>>=
      @ s
"SPEC/DerivingsChecker $fMonadStateT_$cfail @ Ghc _" [ALWAYS] forall @ s
                                                                     ($dMonad :: GHC.Base.Monad
                                                                                   GhcMonad.Ghc)
  Control.Monad.Trans.State.Lazy.$fMonadStateT_$cfail @ GhcMonad.Ghc
                                                      @ s
                                                      $dMonad
  = DerivingsChecker.$s$fExceptionMonadStateT_$s$fMonadStateT_$cfail
      @ s
"SPEC/DerivingsChecker $fMonadStateT_$cp1Monad @ Ghc _" [ALWAYS] forall @ s
                                                                        ($dMonad :: GHC.Base.Monad
                                                                                      GhcMonad.Ghc)
  Control.Monad.Trans.State.Lazy.$fMonadStateT_$cp1Monad @ GhcMonad.Ghc
                                                         @ s
                                                         $dMonad
  = DerivingsChecker.$s$fExceptionMonadStateT_$s$fMonadStateT_$cp1Monad
      @ s
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

