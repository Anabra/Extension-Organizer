
==================== FINAL INTERFACE ====================
2017-09-04 19:25:26.277261 UTC

interface ht-extension-organizer-0.1.0.0-1NgBbe619AH4JExLErEUCI:DerivingsChecker 8002
  interface hash: be763201b28bcf94ecdbef49ae43646a
  ABI hash: 181dff829ccf9783a809f45a09f136cb
  export-list hash: 7107769a0700dc60bd2de915d80cd0cd
  orphan hash: 19c8a5d82a63d3dee57cfb7c1af5ee19
  flag hash: b9906d2540618787e7f54f03a9dc4390
  sig of: Nothing
  used TH splices: False
  where
exports:
  DerivingsChecker.canBeGeneralized
  DerivingsChecker.chkClassForData
  DerivingsChecker.chkClassForNewtype
  DerivingsChecker.chkDataDecl
  DerivingsChecker.chkDataInstance
  DerivingsChecker.chkDerivingClause
  DerivingsChecker.chkDerivings
  DerivingsChecker.chkGADTDataDecl
  DerivingsChecker.chkStandaloneDeriving
  DerivingsChecker.getClassCon
  DerivingsChecker.getSemName
  DerivingsChecker.isNewtype
  DerivingsChecker.isNewtypeTyCon
  DerivingsChecker.isSynNewType
  DerivingsChecker.isWiredInClass
  DerivingsChecker.lookupSynDef
  DerivingsChecker.lookupType
  DerivingsChecker.nameFromType
  DerivingsChecker.notGNTD
  DerivingsChecker.readClass
  DerivingsChecker.readIntoExt
  DerivingsChecker.rightmostType
  DerivingsChecker.separateByKeyword
  DerivingsChecker.skipParens
  DerivingsChecker.tyconFromGHCType
  DerivingsChecker.tyconFromTyThing
  DerivingsChecker.whichExtension
  DerivingsChecker.wiredInClasses
  DerivingsChecker.DerivableClass{DerivingsChecker.ClsBounded DerivingsChecker.ClsData DerivingsChecker.ClsEnum DerivingsChecker.ClsEq DerivingsChecker.ClsFoldable DerivingsChecker.ClsFunctor DerivingsChecker.ClsGeneric DerivingsChecker.ClsIx DerivingsChecker.ClsOrd DerivingsChecker.ClsRead DerivingsChecker.ClsShow DerivingsChecker.ClsTraversable DerivingsChecker.ClsTypeable}
module dependencies: ExtMonad
package dependencies: array-0.5.1.1@array-0.5.1.1 base-4.9.1.0
                      binary-0.8.3.0@binary-0.8.3.0
                      bytestring-0.10.8.1@bytestring-0.10.8.1
                      containers-0.5.7.1@containers-0.5.7.1
                      deepseq-1.4.2.0@deepseq-1.4.2.0 directory-1.3.0.0@directory-1.3.0.0
                      either-4.4.1.1@either-4.4.1.1-6PiwKYkn4v6B4KO2R2Fu1b
                      filepath-1.4.1.1@filepath-1.4.1.1 ghc-8.0.2
                      ghc-boot-8.0.2@ghc-boot-8.0.2 ghc-boot-th-8.0.2@ghc-boot-th-8.0.2
                      ghc-paths-0.1.0.9@ghc-paths-0.1.0.9-AhaDlGOsRAepox069XzG
                      ghc-prim-0.5.0.0 ghci-8.0.2@ghci-8.0.2
                      hashable-1.2.6.1@hashable-1.2.6.1-2ZLNuHq395GGIHwEHuqZol
                      haskell-tools-ast-0.8.1.0@haskell-tools-ast-0.8.1.0-I9ZMaCkuuwT3FoQkwMjyW6
                      haskell-tools-backend-ghc-0.8.1.0@haskell-tools-backend-ghc-0.8.1.0-DqHnbK8OPi6CBD5cIPITWq
                      haskell-tools-prettyprint-0.8.1.0@haskell-tools-prettyprint-0.8.1.0-F9iWkGq5ppnLH6whHm0DlC
                      haskell-tools-refactor-0.8.1.0@haskell-tools-refactor-0.8.1.0-AF8Q4cA8mAnLNwu5t0Icw8
                      haskell-tools-rewrite-0.8.1.0@haskell-tools-rewrite-0.8.1.0-85A6q9dMQgvKEKG9I8fxVU
                      hoopl-3.10.2.1@hoopl-3.10.2.1 hpc-0.6.0.3@hpc-0.6.0.3
                      instance-control-0.1.1.1@instance-control-0.1.1.1-1defRS82vAAEmZKRhe67aa
                      integer-gmp-1.0.0.1 mtl-2.2.1@mtl-2.2.1-BLKBelFsPB3BoFeSWSOYj6
                      pretty-1.1.3.3@pretty-1.1.3.3 process-1.4.3.0@process-1.4.3.0
                      references-0.3.2.2@references-0.3.2.2-y362bKYomIKNQKMTfOWVo
                      safe-0.3.15@safe-0.3.15-2Yd45VWFfdcKqKyispOifY
                      split-0.2.3.2@split-0.2.3.2-CJl40zTyCIV16Pr60nb7CT
                      syb-0.7@syb-0.7-4OKdCpwGutyB1rNRmoa0ya template-haskell-2.11.1.0
                      text-1.2.2.2@text-1.2.2.2-9UQZjEJZQFSGMffj1Z5g00
                      time-1.6.0.1@time-1.6.0.1 transformers-0.5.2.0@transformers-0.5.2.0
                      uniplate-1.6.12@uniplate-1.6.12-4PyZX21trQJ5lfk0CDvC7U
                      unix-2.7.2.1@unix-2.7.2.1
                      unordered-containers-0.2.8.0@unordered-containers-0.2.8.0-Bp9XgxjuHxcI4tFehVMDGC
orphans: base-4.9.1.0:GHC.Base base-4.9.1.0:GHC.Float
         binary-0.8.3.0@binary-0.8.3.0:Data.Binary.Generic
         bytestring-0.10.8.1@bytestring-0.10.8.1:Data.ByteString.Builder
         ghc-8.0.2:BlockId ghc-8.0.2:DsMonad ghc-8.0.2:LoadIface
         ghc-8.0.2:PPC.Ppr ghc-8.0.2:PprCmm ghc-8.0.2:PprCmmDecl
         ghc-8.0.2:PprCmmExpr ghc-8.0.2:PprCore ghc-8.0.2:SPARC.Ppr
         ghc-8.0.2:TcEnv ghc-8.0.2:TcRnMonad ghc-8.0.2:X86.Ppr
         ghc-boot-8.0.2@ghc-boot-8.0.2:GHC.LanguageExtensions
         ghci-8.0.2@ghci-8.0.2:GHCi.Message
         ghci-8.0.2@ghci-8.0.2:GHCi.TH.Binary
         hashable-1.2.6.1@hashable-1.2.6.1-2ZLNuHq395GGIHwEHuqZol:Data.Hashable.Generic
         haskell-tools-ast-0.8.1.0@haskell-tools-ast-0.8.1.0-I9ZMaCkuuwT3FoQkwMjyW6:Language.Haskell.Tools.AST.Instances.Data
         haskell-tools-ast-0.8.1.0@haskell-tools-ast-0.8.1.0-I9ZMaCkuuwT3FoQkwMjyW6:Language.Haskell.Tools.AST.Instances.Eq
         haskell-tools-ast-0.8.1.0@haskell-tools-ast-0.8.1.0-I9ZMaCkuuwT3FoQkwMjyW6:Language.Haskell.Tools.AST.Instances.Generic
         haskell-tools-ast-0.8.1.0@haskell-tools-ast-0.8.1.0-I9ZMaCkuuwT3FoQkwMjyW6:Language.Haskell.Tools.AST.Instances.SemanticTraversal
         haskell-tools-ast-0.8.1.0@haskell-tools-ast-0.8.1.0-I9ZMaCkuuwT3FoQkwMjyW6:Language.Haskell.Tools.AST.Instances.Show
         haskell-tools-ast-0.8.1.0@haskell-tools-ast-0.8.1.0-I9ZMaCkuuwT3FoQkwMjyW6:Language.Haskell.Tools.AST.Instances.SourceInfoTraversal
         haskell-tools-ast-0.8.1.0@haskell-tools-ast-0.8.1.0-I9ZMaCkuuwT3FoQkwMjyW6:Language.Haskell.Tools.AST.SemaInfoTypes
         haskell-tools-ast-0.8.1.0@haskell-tools-ast-0.8.1.0-I9ZMaCkuuwT3FoQkwMjyW6:Language.Haskell.Tools.AST.Utils.GHCInstances
         haskell-tools-backend-ghc-0.8.1.0@haskell-tools-backend-ghc-0.8.1.0-DqHnbK8OPi6CBD5cIPITWq:Language.Haskell.Tools.AST.FromGHC.Utils
         haskell-tools-prettyprint-0.8.1.0@haskell-tools-prettyprint-0.8.1.0-F9iWkGq5ppnLH6whHm0DlC:Language.Haskell.Tools.Transform.RangeTemplate
         haskell-tools-prettyprint-0.8.1.0@haskell-tools-prettyprint-0.8.1.0-F9iWkGq5ppnLH6whHm0DlC:Language.Haskell.Tools.Transform.SourceTemplate
         haskell-tools-prettyprint-0.8.1.0@haskell-tools-prettyprint-0.8.1.0-F9iWkGq5ppnLH6whHm0DlC:Language.Haskell.Tools.Transform.SourceTemplateHelpers
         haskell-tools-refactor-0.8.1.0@haskell-tools-refactor-0.8.1.0-AF8Q4cA8mAnLNwu5t0Icw8:Language.Haskell.Tools.Refactor.RefactorBase
         ht-extension-organizer-0.1.0.0-1NgBbe619AH4JExLErEUCI:ExtMonad
         references-0.3.2.2@references-0.3.2.2-y362bKYomIKNQKMTfOWVo:Control.Reference.Predefined.Containers.Tree
         references-0.3.2.2@references-0.3.2.2-y362bKYomIKNQKMTfOWVo:Control.Reference.TH.Records
         syb-0.7@syb-0.7-4OKdCpwGutyB1rNRmoa0ya:Data.Generics.Instances
         text-1.2.2.2@text-1.2.2.2-9UQZjEJZQFSGMffj1Z5g00:Data.Text
         text-1.2.2.2@text-1.2.2.2-9UQZjEJZQFSGMffj1Z5g00:Data.Text.Lazy
         text-1.2.2.2@text-1.2.2.2-9UQZjEJZQFSGMffj1Z5g00:Data.Text.Show
         time-1.6.0.1@time-1.6.0.1:Data.Time.Calendar.Gregorian
         time-1.6.0.1@time-1.6.0.1:Data.Time.Format.Parse
         time-1.6.0.1@time-1.6.0.1:Data.Time.LocalTime.LocalTime
         transformers-0.5.2.0@transformers-0.5.2.0:Control.Monad.Trans.Error
         uniplate-1.6.12@uniplate-1.6.12-4PyZX21trQJ5lfk0CDvC7U:Data.Generics.Uniplate.Data
family instance modules: base-4.9.1.0:Control.Applicative
                         base-4.9.1.0:Data.Complex base-4.9.1.0:Data.Either
                         base-4.9.1.0:Data.Functor.Compose base-4.9.1.0:Data.Functor.Const
                         base-4.9.1.0:Data.Functor.Identity
                         base-4.9.1.0:Data.Functor.Product base-4.9.1.0:Data.Functor.Sum
                         base-4.9.1.0:Data.List.NonEmpty base-4.9.1.0:Data.Monoid
                         base-4.9.1.0:Data.Semigroup base-4.9.1.0:Data.Type.Equality
                         base-4.9.1.0:Data.Version base-4.9.1.0:Data.Void
                         base-4.9.1.0:GHC.Exts base-4.9.1.0:GHC.Generics
                         base-4.9.1.0:GHC.IO.Exception base-4.9.1.0:GHC.TypeLits
                         containers-0.5.7.1@containers-0.5.7.1:Data.IntMap.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.IntSet.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.Map.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.Sequence
                         containers-0.5.7.1@containers-0.5.7.1:Data.Set.Base
                         ghc-8.0.2:PlaceHolder ghc-8.0.2:TrieMap
                         ghc-boot-th-8.0.2@ghc-boot-th-8.0.2:GHC.LanguageExtensions.Type
                         ghci-8.0.2@ghci-8.0.2:GHCi.FFI ghci-8.0.2@ghci-8.0.2:GHCi.Message
                         ghci-8.0.2@ghci-8.0.2:GHCi.ResolvedBCO
                         ghci-8.0.2@ghci-8.0.2:SizedSeq
                         haskell-tools-ast-0.8.1.0@haskell-tools-ast-0.8.1.0-I9ZMaCkuuwT3FoQkwMjyW6:Language.Haskell.Tools.AST.Ann
                         haskell-tools-ast-0.8.1.0@haskell-tools-ast-0.8.1.0-I9ZMaCkuuwT3FoQkwMjyW6:Language.Haskell.Tools.AST.Instances.Generic
                         haskell-tools-prettyprint-0.8.1.0@haskell-tools-prettyprint-0.8.1.0-F9iWkGq5ppnLH6whHm0DlC:Language.Haskell.Tools.Transform.RangeTemplate
                         haskell-tools-prettyprint-0.8.1.0@haskell-tools-prettyprint-0.8.1.0-F9iWkGq5ppnLH6whHm0DlC:Language.Haskell.Tools.Transform.SourceTemplate
                         hoopl-3.10.2.1@hoopl-3.10.2.1:Compiler.Hoopl.Block
                         hoopl-3.10.2.1@hoopl-3.10.2.1:Compiler.Hoopl.Dataflow
                         hoopl-3.10.2.1@hoopl-3.10.2.1:Compiler.Hoopl.Fuel
                         hoopl-3.10.2.1@hoopl-3.10.2.1:Compiler.Hoopl.Label
                         hoopl-3.10.2.1@hoopl-3.10.2.1:Compiler.Hoopl.Unique
                         pretty-1.1.3.3@pretty-1.1.3.3:Text.PrettyPrint.Annotated.HughesPJ
                         pretty-1.1.3.3@pretty-1.1.3.3:Text.PrettyPrint.HughesPJ
                         references-0.3.2.2@references-0.3.2.2-y362bKYomIKNQKMTfOWVo:Control.Reference.Predefined.Containers
                         references-0.3.2.2@references-0.3.2.2-y362bKYomIKNQKMTfOWVo:Control.Reference.Predefined.Containers.Tree
                         references-0.3.2.2@references-0.3.2.2-y362bKYomIKNQKMTfOWVo:Control.Reference.Types
                         template-haskell-2.11.1.0:Language.Haskell.TH.Syntax
                         text-1.2.2.2@text-1.2.2.2-9UQZjEJZQFSGMffj1Z5g00:Data.Text
                         text-1.2.2.2@text-1.2.2.2-9UQZjEJZQFSGMffj1Z5g00:Data.Text.Lazy
                         unordered-containers-0.2.8.0@unordered-containers-0.2.8.0-Bp9XgxjuHxcI4tFehVMDGC:Data.HashMap.Base
                         unordered-containers-0.2.8.0@unordered-containers-0.2.8.0-Bp9XgxjuHxcI4tFehVMDGC:Data.HashSet
import  -/  base-4.9.1.0:Control.Monad a6784c5dab0d75c63dabec5a37843f98
import  -/  base-4.9.1.0:Data.Foldable 3e0b6967a1da89945d0e2d47266337a2
import  -/  base-4.9.1.0:Data.Maybe d876c4ffe4b3c43755a781e8ad860d88
import  -/  base-4.9.1.0:Data.Tuple 7dc4bbb45d2e69c991ffac438beeca11
import  -/  base-4.9.1.0:Debug.Trace a9edf3aec504f4423d8ba829ab373a25
import  -/  base-4.9.1.0:GHC.Base c4231c43c07e46080a26bf94094c7aa1
import  -/  base-4.9.1.0:GHC.List ab8c4e523e6c479c549d3bcd5fc4a439
import  -/  base-4.9.1.0:GHC.Read b6821365d2d5fa2155c9e910160e7f57
import  -/  base-4.9.1.0:GHC.Show a027f5ac24879eaba752f44aa90fe511
import  -/  base-4.9.1.0:Prelude 22dd289b8469a8fa8dc81cab7b237771
import  -/  base-4.9.1.0:Text.Read 75c59863e882ebaec4532e9465e2ee9b
import  -/  ghc-8.0.2:GHC 2331686350095b94008a49ce7901eaa2
import  -/  ghc-8.0.2:Name 3840150d8ea7eb12e36901129df6e8d4
import  -/  ghc-8.0.2:PrelNames e475dbf7aa171f7a72ba07b4af803f2e
import  -/  ghc-8.0.2:SrcLoc ae8e460a2b77026f9c6a4d6cdcc5d57e
import  -/  ghc-8.0.2:TyCoRep d6aa9725262ca0e96d64a06015f6829c
import  -/  ghc-8.0.2:TyCon 1b42b6416cd55b60ff926f4b4f655bfd
import  -/  ghc-boot-th-8.0.2@ghc-boot-th-8.0.2:GHC.LanguageExtensions.Type 92441ea50916fa3940e20fae60f255d7
import  -/  ghc-prim-0.5.0.0:GHC.Classes 0bdf3d057a415ec1b84a7b1994efbe47
import  -/  ghc-prim-0.5.0.0:GHC.Types 89f8de4f08018c9177c98d979eae0e45
import  -/  haskell-tools-ast-0.8.1.0@haskell-tools-ast-0.8.1.0-I9ZMaCkuuwT3FoQkwMjyW6:Language.Haskell.Tools.AST 3560a1061fd66e2c7888fe18991ca1cc
import  -/  haskell-tools-ast-0.8.1.0@haskell-tools-ast-0.8.1.0-I9ZMaCkuuwT3FoQkwMjyW6:Language.Haskell.Tools.AST.Ann 07e8f66a2b6d7f18951fb774264c8644
import  -/  haskell-tools-ast-0.8.1.0@haskell-tools-ast-0.8.1.0-I9ZMaCkuuwT3FoQkwMjyW6:Language.Haskell.Tools.AST.References 46cb31a69f53297ab865876852473aa3
import  -/  haskell-tools-ast-0.8.1.0@haskell-tools-ast-0.8.1.0-I9ZMaCkuuwT3FoQkwMjyW6:Language.Haskell.Tools.AST.Representation.Decls 60721f1e250af626bb8375487132cd66
import  -/  haskell-tools-ast-0.8.1.0@haskell-tools-ast-0.8.1.0-I9ZMaCkuuwT3FoQkwMjyW6:Language.Haskell.Tools.AST.SemaInfoClasses c2ef5a6a7a968ca08e3bc3c3b14a4a2f
import  -/  haskell-tools-prettyprint-0.8.1.0@haskell-tools-prettyprint-0.8.1.0-F9iWkGq5ppnLH6whHm0DlC:Language.Haskell.Tools.PrettyPrint da7dea6ac299ef1620d7160216fb97b0
import  -/  haskell-tools-refactor-0.8.1.0@haskell-tools-refactor-0.8.1.0-AF8Q4cA8mAnLNwu5t0Icw8:Language.Haskell.Tools.Refactor 84acc8d60e278de91351468f26f90e1c
import  -/  haskell-tools-rewrite-0.8.1.0@haskell-tools-rewrite-0.8.1.0-85A6q9dMQgvKEKG9I8fxVU:Language.Haskell.Tools.AST.ElementTypes df954b524d036aee274d8ad0f571417a
import  -/  haskell-tools-rewrite-0.8.1.0@haskell-tools-rewrite-0.8.1.0-85A6q9dMQgvKEKG9I8fxVU:Language.Haskell.Tools.AST.Match.Decls b84d56450f5735caccd2c24b62b5f303
import  -/  haskell-tools-rewrite-0.8.1.0@haskell-tools-rewrite-0.8.1.0-85A6q9dMQgvKEKG9I8fxVU:Language.Haskell.Tools.AST.Match.Types 85da168b886fc25a3bfd49c2d6ecd710
import  -/  ExtMonad 6efef839e8084e4944c989299f7e8b99
  exports: 78fe3d4ca4f10930e37e7961f002463e
  ExtMonad 9082366c14e6863467573cd95104adfa
  addOccurenceM 8a455580ad51ae9a9f7b605e075194b3
import  -/  references-0.3.2.2@references-0.3.2.2-y362bKYomIKNQKMTfOWVo:Control.Reference d89ee82346f6e25c55a8a19dbf84658e
import  -/  references-0.3.2.2@references-0.3.2.2-y362bKYomIKNQKMTfOWVo:Control.Reference.Combinators ab836299cfb9898d02f637bc65b3765a
import  -/  references-0.3.2.2@references-0.3.2.2-y362bKYomIKNQKMTfOWVo:Control.Reference.Operators 55e717f4df077a71cb70a96f85f6a393
import  -/  transformers-0.5.2.0@transformers-0.5.2.0:Control.Monad.Trans.Maybe fb717b7ffb317f01e5849d6be7e862b4
83758a95a1ab76ef96e79635d6cc2313
  $fEqDerivableClass ::
    GHC.Classes.Eq DerivingsChecker.DerivableClass
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ DerivingsChecker.DerivableClass
                  DerivingsChecker.$fEqDerivableClass_$c==
                  DerivingsChecker.$fEqDerivableClass_$c/= -}
83758a95a1ab76ef96e79635d6cc2313
  $fEqDerivableClass_$c/= ::
    DerivingsChecker.DerivableClass
    -> DerivingsChecker.DerivableClass -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (a :: DerivingsChecker.DerivableClass)
                   (b :: DerivingsChecker.DerivableClass) ->
                 case a of x1 { DEFAULT ->
                 case b of x2 { DEFAULT ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.==#
                           (GHC.Prim.dataToTag# @ DerivingsChecker.DerivableClass x1)
                           (GHC.Prim.dataToTag#
                              @ DerivingsChecker.DerivableClass
                              x2)) of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False } } }) -}
83758a95a1ab76ef96e79635d6cc2313
  $fEqDerivableClass_$c== ::
    DerivingsChecker.DerivableClass
    -> DerivingsChecker.DerivableClass -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (a :: DerivingsChecker.DerivableClass)
                   (b :: DerivingsChecker.DerivableClass) ->
                 case a of x1 { DEFAULT ->
                 case b of x2 { DEFAULT ->
                 GHC.Prim.tagToEnum#
                   @ GHC.Types.Bool
                   (GHC.Prim.==#
                      (GHC.Prim.dataToTag# @ DerivingsChecker.DerivableClass x1)
                      (GHC.Prim.dataToTag# @ DerivingsChecker.DerivableClass x2)) } }) -}
83758a95a1ab76ef96e79635d6cc2313
  $fOrdDerivableClass ::
    GHC.Classes.Ord DerivingsChecker.DerivableClass
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ DerivingsChecker.DerivableClass
                  DerivingsChecker.$fEqDerivableClass
                  DerivingsChecker.$fOrdDerivableClass_$ccompare
                  DerivingsChecker.$fOrdDerivableClass_$c<
                  DerivingsChecker.$fOrdDerivableClass_$c<=
                  DerivingsChecker.$fOrdDerivableClass_$c>
                  DerivingsChecker.$fOrdDerivableClass_$c>=
                  DerivingsChecker.$fOrdDerivableClass_$cmax
                  DerivingsChecker.$fOrdDerivableClass_$cmin -}
83758a95a1ab76ef96e79635d6cc2313
  $fOrdDerivableClass_$c< ::
    DerivingsChecker.DerivableClass
    -> DerivingsChecker.DerivableClass -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (a :: DerivingsChecker.DerivableClass)
                   (b :: DerivingsChecker.DerivableClass) ->
                 case a of x1 { DEFAULT ->
                 case b of x2 { DEFAULT ->
                 GHC.Prim.tagToEnum#
                   @ GHC.Types.Bool
                   (GHC.Prim.<#
                      (GHC.Prim.dataToTag# @ DerivingsChecker.DerivableClass x1)
                      (GHC.Prim.dataToTag# @ DerivingsChecker.DerivableClass x2)) } }) -}
83758a95a1ab76ef96e79635d6cc2313
  $fOrdDerivableClass_$c<= ::
    DerivingsChecker.DerivableClass
    -> DerivingsChecker.DerivableClass -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (a :: DerivingsChecker.DerivableClass)
                   (b :: DerivingsChecker.DerivableClass) ->
                 case a of x1 { DEFAULT ->
                 case b of x2 { DEFAULT ->
                 GHC.Prim.tagToEnum#
                   @ GHC.Types.Bool
                   (GHC.Prim.<=#
                      (GHC.Prim.dataToTag# @ DerivingsChecker.DerivableClass x1)
                      (GHC.Prim.dataToTag# @ DerivingsChecker.DerivableClass x2)) } }) -}
83758a95a1ab76ef96e79635d6cc2313
  $fOrdDerivableClass_$c> ::
    DerivingsChecker.DerivableClass
    -> DerivingsChecker.DerivableClass -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (a :: DerivingsChecker.DerivableClass)
                   (b :: DerivingsChecker.DerivableClass) ->
                 case a of x1 { DEFAULT ->
                 case b of x2 { DEFAULT ->
                 GHC.Prim.tagToEnum#
                   @ GHC.Types.Bool
                   (GHC.Prim.>#
                      (GHC.Prim.dataToTag# @ DerivingsChecker.DerivableClass x1)
                      (GHC.Prim.dataToTag# @ DerivingsChecker.DerivableClass x2)) } }) -}
83758a95a1ab76ef96e79635d6cc2313
  $fOrdDerivableClass_$c>= ::
    DerivingsChecker.DerivableClass
    -> DerivingsChecker.DerivableClass -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (a :: DerivingsChecker.DerivableClass)
                   (b :: DerivingsChecker.DerivableClass) ->
                 case a of x1 { DEFAULT ->
                 case b of x2 { DEFAULT ->
                 GHC.Prim.tagToEnum#
                   @ GHC.Types.Bool
                   (GHC.Prim.>=#
                      (GHC.Prim.dataToTag# @ DerivingsChecker.DerivableClass x1)
                      (GHC.Prim.dataToTag# @ DerivingsChecker.DerivableClass x2)) } }) -}
83758a95a1ab76ef96e79635d6cc2313
  $fOrdDerivableClass_$ccompare ::
    DerivingsChecker.DerivableClass
    -> DerivingsChecker.DerivableClass -> GHC.Types.Ordering
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (a :: DerivingsChecker.DerivableClass)
                   (b :: DerivingsChecker.DerivableClass) ->
                 case a of x1 { DEFAULT ->
                 case b of x2 { DEFAULT ->
                 let {
                   b# :: GHC.Prim.Int#
                   = GHC.Prim.dataToTag# @ DerivingsChecker.DerivableClass x2
                 } in
                 let {
                   a# :: GHC.Prim.Int#
                   = GHC.Prim.dataToTag# @ DerivingsChecker.DerivableClass x1
                 } in
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.<# a# b#) of wild {
                   GHC.Types.False
                   -> case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.==# a# b#) of wild1 {
                        GHC.Types.False -> GHC.Types.GT GHC.Types.True -> GHC.Types.EQ }
                   GHC.Types.True -> GHC.Types.LT } } }) -}
83758a95a1ab76ef96e79635d6cc2313
  $fOrdDerivableClass_$cmax ::
    DerivingsChecker.DerivableClass
    -> DerivingsChecker.DerivableClass
    -> DerivingsChecker.DerivableClass
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: DerivingsChecker.DerivableClass)
                   (y :: DerivingsChecker.DerivableClass) ->
                 case x of x1 { DEFAULT ->
                 case y of x2 { DEFAULT ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.<=#
                           (GHC.Prim.dataToTag# @ DerivingsChecker.DerivableClass x1)
                           (GHC.Prim.dataToTag#
                              @ DerivingsChecker.DerivableClass
                              x2)) of wild {
                   GHC.Types.False -> x1 GHC.Types.True -> x2 } } }) -}
83758a95a1ab76ef96e79635d6cc2313
  $fOrdDerivableClass_$cmin ::
    DerivingsChecker.DerivableClass
    -> DerivingsChecker.DerivableClass
    -> DerivingsChecker.DerivableClass
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: DerivingsChecker.DerivableClass)
                   (y :: DerivingsChecker.DerivableClass) ->
                 case x of x1 { DEFAULT ->
                 case y of x2 { DEFAULT ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.<=#
                           (GHC.Prim.dataToTag# @ DerivingsChecker.DerivableClass x1)
                           (GHC.Prim.dataToTag#
                              @ DerivingsChecker.DerivableClass
                              x2)) of wild {
                   GHC.Types.False -> x2 GHC.Types.True -> x1 } } }) -}
83758a95a1ab76ef96e79635d6cc2313
  $fReadDerivableClass ::
    GHC.Read.Read DerivingsChecker.DerivableClass
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ DerivingsChecker.DerivableClass
                  DerivingsChecker.$fReadDerivableClass_$creadsPrec
                  DerivingsChecker.$fReadDerivableClass_$creadList
                  DerivingsChecker.$fReadDerivableClass_$creadPrec
                  DerivingsChecker.$fReadDerivableClass_$creadListPrec -}
83758a95a1ab76ef96e79635d6cc2313
  $fReadDerivableClass1 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       ([DerivingsChecker.DerivableClass]
        -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (eta :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta1 :: [DerivingsChecker.DerivableClass]
                            -> Text.ParserCombinators.ReadP.P b) ->
                 GHC.Read.list1
                   @ DerivingsChecker.DerivableClass
                   DerivingsChecker.$fReadDerivableClass2
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                             <DerivingsChecker.DerivableClass>_R))
                   eta
                   @ b
                   eta1) -}
83758a95a1ab76ef96e79635d6cc2313
  $fReadDerivableClass10 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec
        DerivingsChecker.DerivableClass)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec
                        DerivingsChecker.DerivableClass)
                   DerivingsChecker.$fReadDerivableClass35
                   DerivingsChecker.$fReadDerivableClass11) -}
83758a95a1ab76ef96e79635d6cc2313
  $fReadDerivableClass11 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec
        DerivingsChecker.DerivableClass)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec
                        DerivingsChecker.DerivableClass)
                   DerivingsChecker.$fReadDerivableClass32
                   DerivingsChecker.$fReadDerivableClass12) -}
83758a95a1ab76ef96e79635d6cc2313
  $fReadDerivableClass12 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec
        DerivingsChecker.DerivableClass)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec
                        DerivingsChecker.DerivableClass)
                   DerivingsChecker.$fReadDerivableClass29
                   DerivingsChecker.$fReadDerivableClass13) -}
83758a95a1ab76ef96e79635d6cc2313
  $fReadDerivableClass13 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec
        DerivingsChecker.DerivableClass)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec
                        DerivingsChecker.DerivableClass)
                   DerivingsChecker.$fReadDerivableClass26
                   DerivingsChecker.$fReadDerivableClass14) -}
83758a95a1ab76ef96e79635d6cc2313
  $fReadDerivableClass14 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec
        DerivingsChecker.DerivableClass)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec
                        DerivingsChecker.DerivableClass)
                   DerivingsChecker.$fReadDerivableClass23
                   DerivingsChecker.$fReadDerivableClass15) -}
83758a95a1ab76ef96e79635d6cc2313
  $fReadDerivableClass15 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec
        DerivingsChecker.DerivableClass)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec
                        DerivingsChecker.DerivableClass)
                   DerivingsChecker.$fReadDerivableClass20
                   DerivingsChecker.$fReadDerivableClass16) -}
83758a95a1ab76ef96e79635d6cc2313
  $fReadDerivableClass16 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec
        DerivingsChecker.DerivableClass)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec
                        DerivingsChecker.DerivableClass)
                   DerivingsChecker.$fReadDerivableClass17
                   (GHC.Types.[]
                      @ (GHC.Base.String,
                         Text.ParserCombinators.ReadPrec.ReadPrec
                           DerivingsChecker.DerivableClass))) -}
83758a95a1ab76ef96e79635d6cc2313
  $fReadDerivableClass17 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec
       DerivingsChecker.DerivableClass)
  {- Strictness: m,
     Unfolding: ((DerivingsChecker.$fReadDerivableClass19,
                  DerivingsChecker.$fReadDerivableClass18
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                      <DerivingsChecker.DerivableClass>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                 <DerivingsChecker.DerivableClass>_R))))) -}
83758a95a1ab76ef96e79635d6cc2313
  $fReadDerivableClass18 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (DerivingsChecker.DerivableClass
        -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (ds :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta :: DerivingsChecker.DerivableClass
                           -> Text.ParserCombinators.ReadP.P b) ->
                 eta DerivingsChecker.ClsTraversable) -}
b603f3b946b130705bbc89b548c04d1d
  $fReadDerivableClass19 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "ClsTraversable"#) -}
83758a95a1ab76ef96e79635d6cc2313
  $fReadDerivableClass2 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> Text.ParserCombinators.ReadP.ReadP
         DerivingsChecker.DerivableClass
  {- Arity: 1,
     Unfolding: (GHC.Read.parens1
                   @ DerivingsChecker.DerivableClass
                   DerivingsChecker.$fReadDerivableClass3
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                             <DerivingsChecker.DerivableClass>_R))) -}
83758a95a1ab76ef96e79635d6cc2313
  $fReadDerivableClass20 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec
       DerivingsChecker.DerivableClass)
  {- Strictness: m,
     Unfolding: ((DerivingsChecker.$fReadDerivableClass22,
                  DerivingsChecker.$fReadDerivableClass21
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                      <DerivingsChecker.DerivableClass>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                 <DerivingsChecker.DerivableClass>_R))))) -}
83758a95a1ab76ef96e79635d6cc2313
  $fReadDerivableClass21 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (DerivingsChecker.DerivableClass
        -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (ds :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta :: DerivingsChecker.DerivableClass
                           -> Text.ParserCombinators.ReadP.P b) ->
                 eta DerivingsChecker.ClsFoldable) -}
5e9fff90046b551011de407b6d323c4d
  $fReadDerivableClass22 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "ClsFoldable"#) -}
83758a95a1ab76ef96e79635d6cc2313
  $fReadDerivableClass23 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec
       DerivingsChecker.DerivableClass)
  {- Strictness: m,
     Unfolding: ((DerivingsChecker.$fReadDerivableClass25,
                  DerivingsChecker.$fReadDerivableClass24
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                      <DerivingsChecker.DerivableClass>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                 <DerivingsChecker.DerivableClass>_R))))) -}
83758a95a1ab76ef96e79635d6cc2313
  $fReadDerivableClass24 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (DerivingsChecker.DerivableClass
        -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (ds :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta :: DerivingsChecker.DerivableClass
                           -> Text.ParserCombinators.ReadP.P b) ->
                 eta DerivingsChecker.ClsFunctor) -}
096da3ed45ecd92fb99e464e43b5d0d9
  $fReadDerivableClass25 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "ClsFunctor"#) -}
83758a95a1ab76ef96e79635d6cc2313
  $fReadDerivableClass26 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec
       DerivingsChecker.DerivableClass)
  {- Strictness: m,
     Unfolding: ((DerivingsChecker.$fReadDerivableClass28,
                  DerivingsChecker.$fReadDerivableClass27
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                      <DerivingsChecker.DerivableClass>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                 <DerivingsChecker.DerivableClass>_R))))) -}
83758a95a1ab76ef96e79635d6cc2313
  $fReadDerivableClass27 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (DerivingsChecker.DerivableClass
        -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (ds :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta :: DerivingsChecker.DerivableClass
                           -> Text.ParserCombinators.ReadP.P b) ->
                 eta DerivingsChecker.ClsGeneric) -}
418ba79e9c7e964dd143dc6d72356090
  $fReadDerivableClass28 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "ClsGeneric"#) -}
83758a95a1ab76ef96e79635d6cc2313
  $fReadDerivableClass29 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec
       DerivingsChecker.DerivableClass)
  {- Strictness: m,
     Unfolding: ((DerivingsChecker.$fReadDerivableClass31,
                  DerivingsChecker.$fReadDerivableClass30
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                      <DerivingsChecker.DerivableClass>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                 <DerivingsChecker.DerivableClass>_R))))) -}
83758a95a1ab76ef96e79635d6cc2313
  $fReadDerivableClass3 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> Text.ParserCombinators.ReadP.ReadP
         DerivingsChecker.DerivableClass
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (eta :: Text.ParserCombinators.ReadPrec.Prec) ->
                 GHC.Read.choose2
                   @ DerivingsChecker.DerivableClass
                   DerivingsChecker.$fReadDerivableClass4
                   eta) -}
83758a95a1ab76ef96e79635d6cc2313
  $fReadDerivableClass30 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (DerivingsChecker.DerivableClass
        -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (ds :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta :: DerivingsChecker.DerivableClass
                           -> Text.ParserCombinators.ReadP.P b) ->
                 eta DerivingsChecker.ClsTypeable) -}
049dd708bf82216872f05803d85933ef
  $fReadDerivableClass31 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "ClsTypeable"#) -}
83758a95a1ab76ef96e79635d6cc2313
  $fReadDerivableClass32 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec
       DerivingsChecker.DerivableClass)
  {- Strictness: m,
     Unfolding: ((DerivingsChecker.$fReadDerivableClass34,
                  DerivingsChecker.$fReadDerivableClass33
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                      <DerivingsChecker.DerivableClass>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                 <DerivingsChecker.DerivableClass>_R))))) -}
83758a95a1ab76ef96e79635d6cc2313
  $fReadDerivableClass33 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (DerivingsChecker.DerivableClass
        -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (ds :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta :: DerivingsChecker.DerivableClass
                           -> Text.ParserCombinators.ReadP.P b) ->
                 eta DerivingsChecker.ClsData) -}
dd2dc0ad81552f4a411cbaf8858b5827
  $fReadDerivableClass34 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "ClsData"#) -}
83758a95a1ab76ef96e79635d6cc2313
  $fReadDerivableClass35 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec
       DerivingsChecker.DerivableClass)
  {- Strictness: m,
     Unfolding: ((DerivingsChecker.$fReadDerivableClass37,
                  DerivingsChecker.$fReadDerivableClass36
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                      <DerivingsChecker.DerivableClass>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                 <DerivingsChecker.DerivableClass>_R))))) -}
83758a95a1ab76ef96e79635d6cc2313
  $fReadDerivableClass36 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (DerivingsChecker.DerivableClass
        -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (ds :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta :: DerivingsChecker.DerivableClass
                           -> Text.ParserCombinators.ReadP.P b) ->
                 eta DerivingsChecker.ClsBounded) -}
15763adab51c35c20bb03a7911b44e9b
  $fReadDerivableClass37 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "ClsBounded"#) -}
83758a95a1ab76ef96e79635d6cc2313
  $fReadDerivableClass38 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec
       DerivingsChecker.DerivableClass)
  {- Strictness: m,
     Unfolding: ((DerivingsChecker.$fReadDerivableClass40,
                  DerivingsChecker.$fReadDerivableClass39
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                      <DerivingsChecker.DerivableClass>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                 <DerivingsChecker.DerivableClass>_R))))) -}
83758a95a1ab76ef96e79635d6cc2313
  $fReadDerivableClass39 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (DerivingsChecker.DerivableClass
        -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (ds :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta :: DerivingsChecker.DerivableClass
                           -> Text.ParserCombinators.ReadP.P b) ->
                 eta DerivingsChecker.ClsEnum) -}
83758a95a1ab76ef96e79635d6cc2313
  $fReadDerivableClass4 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec
        DerivingsChecker.DerivableClass)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec
                        DerivingsChecker.DerivableClass)
                   DerivingsChecker.$fReadDerivableClass53
                   DerivingsChecker.$fReadDerivableClass5) -}
8a9261d43a265c5bd6ae5bee432c23a3
  $fReadDerivableClass40 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "ClsEnum"#) -}
83758a95a1ab76ef96e79635d6cc2313
  $fReadDerivableClass41 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec
       DerivingsChecker.DerivableClass)
  {- Strictness: m,
     Unfolding: ((DerivingsChecker.$fReadDerivableClass43,
                  DerivingsChecker.$fReadDerivableClass42
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                      <DerivingsChecker.DerivableClass>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                 <DerivingsChecker.DerivableClass>_R))))) -}
83758a95a1ab76ef96e79635d6cc2313
  $fReadDerivableClass42 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (DerivingsChecker.DerivableClass
        -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (ds :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta :: DerivingsChecker.DerivableClass
                           -> Text.ParserCombinators.ReadP.P b) ->
                 eta DerivingsChecker.ClsRead) -}
07d0d3420620887098ac78e4aff2af15
  $fReadDerivableClass43 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "ClsRead"#) -}
83758a95a1ab76ef96e79635d6cc2313
  $fReadDerivableClass44 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec
       DerivingsChecker.DerivableClass)
  {- Strictness: m,
     Unfolding: ((DerivingsChecker.$fReadDerivableClass46,
                  DerivingsChecker.$fReadDerivableClass45
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                      <DerivingsChecker.DerivableClass>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                 <DerivingsChecker.DerivableClass>_R))))) -}
83758a95a1ab76ef96e79635d6cc2313
  $fReadDerivableClass45 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (DerivingsChecker.DerivableClass
        -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (ds :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta :: DerivingsChecker.DerivableClass
                           -> Text.ParserCombinators.ReadP.P b) ->
                 eta DerivingsChecker.ClsShow) -}
f2aeee6e696bfbbbf148c30066f5d2e4
  $fReadDerivableClass46 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "ClsShow"#) -}
83758a95a1ab76ef96e79635d6cc2313
  $fReadDerivableClass47 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec
       DerivingsChecker.DerivableClass)
  {- Strictness: m,
     Unfolding: ((DerivingsChecker.$fReadDerivableClass49,
                  DerivingsChecker.$fReadDerivableClass48
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                      <DerivingsChecker.DerivableClass>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                 <DerivingsChecker.DerivableClass>_R))))) -}
83758a95a1ab76ef96e79635d6cc2313
  $fReadDerivableClass48 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (DerivingsChecker.DerivableClass
        -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (ds :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta :: DerivingsChecker.DerivableClass
                           -> Text.ParserCombinators.ReadP.P b) ->
                 eta DerivingsChecker.ClsIx) -}
f4a247cc5b37d11ad10156fd44460bc4
  $fReadDerivableClass49 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "ClsIx"#) -}
83758a95a1ab76ef96e79635d6cc2313
  $fReadDerivableClass5 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec
        DerivingsChecker.DerivableClass)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec
                        DerivingsChecker.DerivableClass)
                   DerivingsChecker.$fReadDerivableClass50
                   DerivingsChecker.$fReadDerivableClass6) -}
83758a95a1ab76ef96e79635d6cc2313
  $fReadDerivableClass50 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec
       DerivingsChecker.DerivableClass)
  {- Strictness: m,
     Unfolding: ((DerivingsChecker.$fReadDerivableClass52,
                  DerivingsChecker.$fReadDerivableClass51
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                      <DerivingsChecker.DerivableClass>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                 <DerivingsChecker.DerivableClass>_R))))) -}
83758a95a1ab76ef96e79635d6cc2313
  $fReadDerivableClass51 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (DerivingsChecker.DerivableClass
        -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (ds :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta :: DerivingsChecker.DerivableClass
                           -> Text.ParserCombinators.ReadP.P b) ->
                 eta DerivingsChecker.ClsOrd) -}
5f3d420bbe05ab4ba9fea04dbae3d316
  $fReadDerivableClass52 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "ClsOrd"#) -}
83758a95a1ab76ef96e79635d6cc2313
  $fReadDerivableClass53 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec
       DerivingsChecker.DerivableClass)
  {- Strictness: m,
     Unfolding: ((DerivingsChecker.$fReadDerivableClass55,
                  DerivingsChecker.$fReadDerivableClass54
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                      <DerivingsChecker.DerivableClass>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                 <DerivingsChecker.DerivableClass>_R))))) -}
83758a95a1ab76ef96e79635d6cc2313
  $fReadDerivableClass54 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (DerivingsChecker.DerivableClass
        -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (ds :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta :: DerivingsChecker.DerivableClass
                           -> Text.ParserCombinators.ReadP.P b) ->
                 eta DerivingsChecker.ClsEq) -}
8b9b098947310ffbde9839bc433d63a3
  $fReadDerivableClass55 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "ClsEq"#) -}
83758a95a1ab76ef96e79635d6cc2313
  $fReadDerivableClass56 ::
    Text.ParserCombinators.ReadP.P [DerivingsChecker.DerivableClass]
  {- Unfolding: (GHC.Read.list1
                   @ DerivingsChecker.DerivableClass
                   DerivingsChecker.$fReadDerivableClass2
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                             <DerivingsChecker.DerivableClass>_R))
                   GHC.Read.$fRead()5
                   @ [DerivingsChecker.DerivableClass]
                   (Text.ParserCombinators.ReadP.$fApplicativeP_$cpure
                      @ [DerivingsChecker.DerivableClass])) -}
83758a95a1ab76ef96e79635d6cc2313
  $fReadDerivableClass6 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec
        DerivingsChecker.DerivableClass)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec
                        DerivingsChecker.DerivableClass)
                   DerivingsChecker.$fReadDerivableClass47
                   DerivingsChecker.$fReadDerivableClass7) -}
83758a95a1ab76ef96e79635d6cc2313
  $fReadDerivableClass7 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec
        DerivingsChecker.DerivableClass)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec
                        DerivingsChecker.DerivableClass)
                   DerivingsChecker.$fReadDerivableClass44
                   DerivingsChecker.$fReadDerivableClass8) -}
83758a95a1ab76ef96e79635d6cc2313
  $fReadDerivableClass8 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec
        DerivingsChecker.DerivableClass)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec
                        DerivingsChecker.DerivableClass)
                   DerivingsChecker.$fReadDerivableClass41
                   DerivingsChecker.$fReadDerivableClass9) -}
83758a95a1ab76ef96e79635d6cc2313
  $fReadDerivableClass9 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec
        DerivingsChecker.DerivableClass)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec
                        DerivingsChecker.DerivableClass)
                   DerivingsChecker.$fReadDerivableClass38
                   DerivingsChecker.$fReadDerivableClass10) -}
83758a95a1ab76ef96e79635d6cc2313
  $fReadDerivableClass_$creadList ::
    Text.ParserCombinators.ReadP.ReadS
      [DerivingsChecker.DerivableClass]
  {- Arity: 1,
     Unfolding: (Text.ParserCombinators.ReadP.run
                   @ [DerivingsChecker.DerivableClass]
                   DerivingsChecker.$fReadDerivableClass56) -}
83758a95a1ab76ef96e79635d6cc2313
  $fReadDerivableClass_$creadListPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec
      [DerivingsChecker.DerivableClass]
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (0, True, True)
                DerivingsChecker.$fReadDerivableClass1
                  `cast`
                (Trans
                     (<Text.ParserCombinators.ReadPrec.Prec>_R
                      ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                    <[DerivingsChecker.DerivableClass]>_R))
                     (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                               <[DerivingsChecker.DerivableClass]>_R))) -}
83758a95a1ab76ef96e79635d6cc2313
  $fReadDerivableClass_$creadPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec
      DerivingsChecker.DerivableClass
  {- Arity: 1,
     Unfolding: InlineRule (0, True, True)
                DerivingsChecker.$fReadDerivableClass2
                  `cast`
                (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                          <DerivingsChecker.DerivableClass>_R)) -}
83758a95a1ab76ef96e79635d6cc2313
  $fReadDerivableClass_$creadsPrec ::
    GHC.Types.Int
    -> Text.ParserCombinators.ReadP.ReadS
         DerivingsChecker.DerivableClass
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (eta :: GHC.Types.Int) ->
                 Text.ParserCombinators.ReadP.run
                   @ DerivingsChecker.DerivableClass
                   ((GHC.Read.parens1
                       @ DerivingsChecker.DerivableClass
                       DerivingsChecker.$fReadDerivableClass3
                         `cast`
                       (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                 <DerivingsChecker.DerivableClass>_R))
                       eta)
                      `cast`
                    (Text.ParserCombinators.ReadP.N:ReadP[0]
                         <DerivingsChecker.DerivableClass>_R)
                      @ DerivingsChecker.DerivableClass
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$cpure
                         @ DerivingsChecker.DerivableClass))) -}
83758a95a1ab76ef96e79635d6cc2313
  $fShowDerivableClass ::
    GHC.Show.Show DerivingsChecker.DerivableClass
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ DerivingsChecker.DerivableClass
                  DerivingsChecker.$fShowDerivableClass_$cshowsPrec
                  DerivingsChecker.$fShowDerivableClass_$cshow
                  DerivingsChecker.$fShowDerivableClass_$cshowList -}
83758a95a1ab76ef96e79635d6cc2313
  $fShowDerivableClass_$cshow ::
    DerivingsChecker.DerivableClass -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: DerivingsChecker.DerivableClass) ->
                 DerivingsChecker.$fShowDerivableClass_$cshowsPrec
                   GHC.Show.shows22
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
83758a95a1ab76ef96e79635d6cc2313
  $fShowDerivableClass_$cshowList ::
    [DerivingsChecker.DerivableClass] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ DerivingsChecker.DerivableClass
                   DerivingsChecker.$w$cshowsPrec) -}
83758a95a1ab76ef96e79635d6cc2313
  $fShowDerivableClass_$cshowsPrec ::
    GHC.Types.Int -> DerivingsChecker.DerivableClass -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,A><S,1*U><L,1*U>, Inline: INLINE[0],
     Unfolding: InlineRule (3, True, True)
                (\ (w :: GHC.Types.Int)
                   (w1 :: DerivingsChecker.DerivableClass)
                   (w2 :: GHC.Base.String) ->
                 DerivingsChecker.$w$cshowsPrec w1 w2) -}
78fe25440d25dd7a3297e2e57f585966
  $s$fApplicativeStateT ::
    GHC.Base.Applicative
      (Control.Monad.Trans.State.Lazy.StateT s GhcMonad.Ghc)
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ s.
                  @ (Control.Monad.Trans.State.Lazy.StateT s GhcMonad.Ghc)
                  (DerivingsChecker.$s$fApplicativeStateT_$s$fApplicativeStateT_$cp1Applicative
                     @ s)
                  (DerivingsChecker.$s$fApplicativeStateT_$s$fApplicativeStateT_$cpure
                     @ s)
                  (DerivingsChecker.$s$fApplicativeStateT_$s$fApplicativeStateT_$c<*>
                     @ s)
                  (Control.Monad.Trans.State.Lazy.$fApplicativeStateT_$c*>
                     @ GhcMonad.Ghc
                     @ s
                     GhcMonad.$fFunctorGhc
                     GhcMonad.$fMonadGhc)
                  (Control.Monad.Trans.State.Lazy.$fApplicativeStateT_$c<*
                     @ GhcMonad.Ghc
                     @ s
                     GhcMonad.$fFunctorGhc
                     GhcMonad.$fMonadGhc) -}
9fe2e8e9a300085cb34420732429a524
  $s$fApplicativeStateT_$s$fApplicativeStateT_$c<*> ::
    Control.Monad.Trans.State.Lazy.StateT s GhcMonad.Ghc (a -> b)
    -> Control.Monad.Trans.State.Lazy.StateT s GhcMonad.Ghc a
    -> Control.Monad.Trans.State.Lazy.StateT s GhcMonad.Ghc b
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*C1(U)><L,C(C1(C1(U(U,U(1*U,1*U)))))><L,U>,
     Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ @ s
                   @ a
                   @ b
                   (ds :: Control.Monad.Trans.State.Lazy.StateT
                            s GhcMonad.Ghc (a -> b))
                   (ds1 :: Control.Monad.Trans.State.Lazy.StateT s GhcMonad.Ghc a) ->
                 GHC.Base.$
                   @ 'GHC.Types.PtrRepLifted
                   @ (s -> GhcMonad.Ghc (b, s))
                   @ (Control.Monad.Trans.State.Lazy.StateT s GhcMonad.Ghc b)
                   (\ (tpl :: s -> GhcMonad.Ghc (b, s)) -> tpl)
                     `cast`
                   (<s -> GhcMonad.Ghc (b, s)>_R
                    ->_R Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                  <s>_N <GhcMonad.Ghc>_R <b>_N))
                   (\ (s1 :: s) ->
                    GhcMonad.$fMonadGhc_$c>>=
                      @ (a -> b, s)
                      @ (b, s)
                      (ds
                         `cast`
                       (Control.Monad.Trans.State.Lazy.N:StateT[0]
                            <s>_N <GhcMonad.Ghc>_R <a -> b>_N)
                         s1)
                      (\ (ds2 :: (a -> b, s)) ->
                       GhcMonad.$fMonadGhc_$c>>=
                         @ (a, s)
                         @ (b, s)
                         (ds1
                            `cast`
                          (Control.Monad.Trans.State.Lazy.N:StateT[0]
                               <s>_N <GhcMonad.Ghc>_R <a>_N)
                            (case ds2 of wild { (,) f s' -> s' }))
                         (\ (ds3 :: (a, s)) ->
                          GhcMonad.$fApplicativeGhc_$cpure
                            @ (b, s)
                            (case ds2 of wild { (,) f s' ->
                             f (case ds3 of wild1 { (,) x s'' -> x }) },
                             case ds3 of wild { (,) x s'' -> s'' }))))) -}
697e818f73060e0fdcb5eaae9dc429c6
  $s$fApplicativeStateT_$s$fApplicativeStateT_$cp1Applicative ::
    GHC.Base.Functor
      (Control.Monad.Trans.State.Lazy.StateT s GhcMonad.Ghc)
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                DerivingsChecker.$s$fApplicativeStateT_$s$fFunctorStateT -}
157cb813ae10d898f60a099814c93082
  $s$fApplicativeStateT_$s$fApplicativeStateT_$cpure ::
    a -> Control.Monad.Trans.State.Lazy.StateT s GhcMonad.Ghc a
  {- Arity: 4, HasNoCafRefs, Strictness: <L,U><L,U><L,A><S,U>,
     Inline: INLINE (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ @ s @ a (a1 :: a) ->
                 GHC.Base.$
                   @ 'GHC.Types.PtrRepLifted
                   @ (s -> GhcMonad.Ghc (a, s))
                   @ (Control.Monad.Trans.State.Lazy.StateT s GhcMonad.Ghc a)
                   (\ (tpl :: s -> GhcMonad.Ghc (a, s)) -> tpl)
                     `cast`
                   (<s -> GhcMonad.Ghc (a, s)>_R
                    ->_R Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                  <s>_N <GhcMonad.Ghc>_R <a>_N))
                   (\ (s1 :: s)
                      (eta :: GhcMonad.Session)
                      (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                    ((GhcMonad.$fApplicativeGhc_$cpure @ (a, s) (a1, s1))
                       `cast`
                     (GhcMonad.N:Ghc[0] <(a, s)>_R)
                       eta)
                      `cast`
                    (GHC.Types.N:IO[0] <(a, s)>_R)
                      eta1)
                     `cast`
                   (<s>_R
                    ->_R Trans
                             (<GhcMonad.Session>_R ->_R Sym (GHC.Types.N:IO[0] <(a, s)>_R))
                             (Sym (GhcMonad.N:Ghc[0] <(a, s)>_R)))) -}
dfd796d92a0bcc22615d45524f65ef77
  $s$fApplicativeStateT_$s$fFunctorStateT ::
    GHC.Base.Functor
      (Control.Monad.Trans.State.Lazy.StateT s GhcMonad.Ghc)
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ s.
                  @ (Control.Monad.Trans.State.Lazy.StateT s GhcMonad.Ghc)
                  (DerivingsChecker.$s$fApplicativeStateT_$s$fFunctorStateT_$cfmap
                     @ s)
                  (Control.Monad.Trans.State.Lazy.$fFunctorStateT_$c<$
                     @ GhcMonad.Ghc
                     @ s
                     GhcMonad.$fFunctorGhc) -}
5c697e63004426dc02c66542d16f6376
  $s$fApplicativeStateT_$s$fFunctorStateT_$cfmap ::
    (a -> b)
    -> Control.Monad.Trans.State.Lazy.StateT s GhcMonad.Ghc a
    -> Control.Monad.Trans.State.Lazy.StateT s GhcMonad.Ghc b
  {- Arity: 3, HasNoCafRefs, Strictness: <L,C(U)><L,1*C1(U)><L,U>,
     Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ @ s
                   @ a
                   @ b
                   (f :: a -> b)
                   (m1 :: Control.Monad.Trans.State.Lazy.StateT s GhcMonad.Ghc a) ->
                 GHC.Base.$
                   @ 'GHC.Types.PtrRepLifted
                   @ (s -> GhcMonad.Ghc (b, s))
                   @ (Control.Monad.Trans.State.Lazy.StateT s GhcMonad.Ghc b)
                   (\ (tpl :: s -> GhcMonad.Ghc (b, s)) -> tpl)
                     `cast`
                   (<s -> GhcMonad.Ghc (b, s)>_R
                    ->_R Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                  <s>_N <GhcMonad.Ghc>_R <b>_N))
                   (\ (s1 :: s) ->
                    GHC.Base.$
                      @ 'GHC.Types.PtrRepLifted
                      @ (GhcMonad.Ghc (a, s))
                      @ (GhcMonad.Ghc (b, s))
                      (GhcMonad.$fFunctorGhc_$cfmap
                         @ (a, s)
                         @ (b, s)
                         (\ (ds :: (a, s)) ->
                          (f (case ds of wild { (,) a1 s' -> a1 }),
                           case ds of wild { (,) a1 s' -> s' })))
                      (Control.Monad.Trans.State.Lazy.runStateT
                         @ s
                         @ GhcMonad.Ghc
                         @ a
                         m1
                         s1))) -}
d85821295252b51dd8c081367cdcea6f
  $s$fExceptionMonadStateT ::
    Exception.ExceptionMonad
      (Control.Monad.Trans.State.Lazy.StateT s GhcMonad.Ghc)
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ s.
                  @ (Control.Monad.Trans.State.Lazy.StateT s GhcMonad.Ghc)
                  (Language.Haskell.Tools.Refactor.RefactorBase.$fExceptionMonadStateT_$cp1ExceptionMonad
                     @ GhcMonad.Ghc
                     @ s
                     DerivingsChecker.$s$fExceptionMonadStateT_$dExceptionMonad)
                  (DerivingsChecker.$s$fExceptionMonadStateT_$s$fGhcMonadStateT_$cp2GhcMonad
                     @ s)
                  (Language.Haskell.Tools.Refactor.RefactorBase.$fExceptionMonadStateT_$cgcatch
                     @ GhcMonad.Ghc
                     @ s
                     DerivingsChecker.$s$fExceptionMonadStateT_$dExceptionMonad)
                  (Language.Haskell.Tools.Refactor.RefactorBase.$fExceptionMonadStateT_$cgmask
                     @ GhcMonad.Ghc
                     @ s
                     DerivingsChecker.$s$fExceptionMonadStateT_$dExceptionMonad)
                  (Language.Haskell.Tools.Refactor.RefactorBase.$fExceptionMonadStateT_$cgbracket
                     @ GhcMonad.Ghc
                     @ s
                     DerivingsChecker.$s$fExceptionMonadStateT_$dExceptionMonad)
                  (Language.Haskell.Tools.Refactor.RefactorBase.$fExceptionMonadStateT_$cgfinally
                     @ GhcMonad.Ghc
                     @ s
                     DerivingsChecker.$s$fExceptionMonadStateT_$dExceptionMonad) -}
452be4a15619974be5b5d01360ac19a4
  $s$fExceptionMonadStateT_$dExceptionMonad ::
    Exception.ExceptionMonad GhcMonad.Ghc
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                GhcMonad.$fExceptionMonadGhc -}
539dbda795cbd4c6b61c2954e5479b8b
  $s$fExceptionMonadStateT_$s$fGhcMonadStateT_$cp2GhcMonad ::
    Control.Monad.IO.Class.MonadIO
      (Control.Monad.Trans.State.Lazy.StateT s GhcMonad.Ghc)
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                DerivingsChecker.$s$fExceptionMonadStateT_$s$fMonadIOStateT -}
1deec92656520e3779d4177e3836d577
  $s$fExceptionMonadStateT_$s$fMonadIOStateT ::
    Control.Monad.IO.Class.MonadIO
      (Control.Monad.Trans.State.Lazy.StateT s GhcMonad.Ghc)
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ s.
                  @ (Control.Monad.Trans.State.Lazy.StateT s GhcMonad.Ghc)
                  (DerivingsChecker.$s$fExceptionMonadStateT_$s$fMonadIOStateT_$cp1MonadIO
                     @ s)
                  (\ @ a (eta :: GHC.Types.IO a) ->
                   let {
                     m1 :: GhcMonad.Ghc a {- Arity: 1 -}
                     = GhcMonad.$fMonadIOGhc_$cliftIO @ a eta
                   } in
                   GHC.Base.$
                     @ 'GHC.Types.PtrRepLifted
                     @ (s -> GhcMonad.Ghc (a, s))
                     @ (Control.Monad.Trans.State.Lazy.StateT s GhcMonad.Ghc a)
                     (\ (tpl :: s -> GhcMonad.Ghc (a, s)) -> tpl)
                       `cast`
                     (<s -> GhcMonad.Ghc (a, s)>_R
                      ->_R Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                    <s>_N <GhcMonad.Ghc>_R <a>_N))
                     (\ (s1 :: s)
                        (eta1 :: GhcMonad.Session)
                        (eta2 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                      ((GhcMonad.$fMonadGhc_$c>>=
                          @ a
                          @ (a, s)
                          m1
                          (\ (a1 :: a)
                             (eta3 :: GhcMonad.Session)
                             (eta4 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                           ((GhcMonad.$fApplicativeGhc_$cpure @ (a, s) (a1, s1))
                              `cast`
                            (GhcMonad.N:Ghc[0] <(a, s)>_R)
                              eta3)
                             `cast`
                           (GHC.Types.N:IO[0] <(a, s)>_R)
                             eta4)
                            `cast`
                          (<a>_R
                           ->_R Trans
                                    (<GhcMonad.Session>_R ->_R Sym (GHC.Types.N:IO[0] <(a, s)>_R))
                                    (Sym (GhcMonad.N:Ghc[0] <(a, s)>_R))))
                         `cast`
                       (GhcMonad.N:Ghc[0] <(a, s)>_R)
                         eta1)
                        `cast`
                      (GHC.Types.N:IO[0] <(a, s)>_R)
                        eta2)
                       `cast`
                     (<s>_R
                      ->_R Trans
                               (<GhcMonad.Session>_R ->_R Sym (GHC.Types.N:IO[0] <(a, s)>_R))
                               (Sym (GhcMonad.N:Ghc[0] <(a, s)>_R)))) -}
5aae8d0af366927704d125d78fb92cfe
  $s$fExceptionMonadStateT_$s$fMonadIOStateT_$cp1MonadIO ::
    GHC.Base.Monad
      (Control.Monad.Trans.State.Lazy.StateT s GhcMonad.Ghc)
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                DerivingsChecker.$s$fExceptionMonadStateT_$s$fMonadStateT -}
bc368353c6fd3d2096ee74dee0ccd763
  $s$fExceptionMonadStateT_$s$fMonadStateT ::
    GHC.Base.Monad
      (Control.Monad.Trans.State.Lazy.StateT s GhcMonad.Ghc)
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ s.
                  @ (Control.Monad.Trans.State.Lazy.StateT s GhcMonad.Ghc)
                  (DerivingsChecker.$s$fExceptionMonadStateT_$s$fMonadStateT_$cp1Monad
                     @ s)
                  (DerivingsChecker.$s$fExceptionMonadStateT_$s$fMonadStateT_$c>>=
                     @ s)
                  (DerivingsChecker.$s$fExceptionMonadStateT_$s$fMonadStateT_$c>>
                     @ s)
                  (Control.Monad.Trans.State.Lazy.$fMonadStateT_$creturn
                     @ GhcMonad.Ghc
                     @ s
                     GhcMonad.$fMonadGhc)
                  (DerivingsChecker.$s$fExceptionMonadStateT_$s$fMonadStateT_$cfail
                     @ s) -}
c801cab51e6d5adc47c29c6aad65c978
  $s$fExceptionMonadStateT_$s$fMonadStateT_$c>> ::
    Control.Monad.Trans.State.Lazy.StateT s GhcMonad.Ghc a
    -> Control.Monad.Trans.State.Lazy.StateT s GhcMonad.Ghc b
    -> Control.Monad.Trans.State.Lazy.StateT s GhcMonad.Ghc b
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*C1(U)><L,C(C1(C1(U)))><L,U>,
     Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ @ s
                   @ a
                   @ b
                   (m1 :: Control.Monad.Trans.State.Lazy.StateT s GhcMonad.Ghc a)
                   (k :: Control.Monad.Trans.State.Lazy.StateT s GhcMonad.Ghc b) ->
                 GHC.Base.$
                   @ 'GHC.Types.PtrRepLifted
                   @ (s -> GhcMonad.Ghc (b, s))
                   @ (Control.Monad.Trans.State.Lazy.StateT s GhcMonad.Ghc b)
                   (\ (tpl :: s -> GhcMonad.Ghc (b, s)) -> tpl)
                     `cast`
                   (<s -> GhcMonad.Ghc (b, s)>_R
                    ->_R Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                  <s>_N <GhcMonad.Ghc>_R <b>_N))
                   (\ (s1 :: s) ->
                    GhcMonad.$fMonadGhc_$c>>=
                      @ (a, s)
                      @ (b, s)
                      (Control.Monad.Trans.State.Lazy.runStateT
                         @ s
                         @ GhcMonad.Ghc
                         @ a
                         m1
                         s1)
                      (\ (ds :: (a, s)) ->
                       Control.Monad.Trans.State.Lazy.runStateT
                         @ s
                         @ GhcMonad.Ghc
                         @ b
                         k
                         (case ds of wild { (,) a1 s' -> s' })))) -}
3ab7ce4d4779dd33c8784c9866e6c52b
  $s$fExceptionMonadStateT_$s$fMonadStateT_$c>>= ::
    Control.Monad.Trans.State.Lazy.StateT s GhcMonad.Ghc a
    -> (a -> Control.Monad.Trans.State.Lazy.StateT s GhcMonad.Ghc b)
    -> Control.Monad.Trans.State.Lazy.StateT s GhcMonad.Ghc b
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*C1(U)><L,C(C1(C1(C1(U))))><L,U>,
     Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ @ s
                   @ a
                   @ b
                   (m1 :: Control.Monad.Trans.State.Lazy.StateT s GhcMonad.Ghc a)
                   (k :: a
                         -> Control.Monad.Trans.State.Lazy.StateT s GhcMonad.Ghc b) ->
                 GHC.Base.$
                   @ 'GHC.Types.PtrRepLifted
                   @ (s -> GhcMonad.Ghc (b, s))
                   @ (Control.Monad.Trans.State.Lazy.StateT s GhcMonad.Ghc b)
                   (\ (tpl :: s -> GhcMonad.Ghc (b, s)) -> tpl)
                     `cast`
                   (<s -> GhcMonad.Ghc (b, s)>_R
                    ->_R Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                  <s>_N <GhcMonad.Ghc>_R <b>_N))
                   (\ (s1 :: s) ->
                    GhcMonad.$fMonadGhc_$c>>=
                      @ (a, s)
                      @ (b, s)
                      (Control.Monad.Trans.State.Lazy.runStateT
                         @ s
                         @ GhcMonad.Ghc
                         @ a
                         m1
                         s1)
                      (\ (ds :: (a, s)) ->
                       Control.Monad.Trans.State.Lazy.runStateT
                         @ s
                         @ GhcMonad.Ghc
                         @ b
                         (k (case ds of wild { (,) a1 s' -> a1 }))
                         (case ds of wild { (,) a1 s' -> s' })))) -}
0dd4eff1b1f7ed9ade5ae9225b8db8ba
  $s$fExceptionMonadStateT_$s$fMonadStateT_$cfail ::
    GHC.Base.String
    -> Control.Monad.Trans.State.Lazy.StateT s GhcMonad.Ghc a
  {- Arity: 2, Strictness: <B,U><B,A>x, Inline: INLINE (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ @ s @ a (str :: GHC.Base.String) ->
                 GHC.Base.$
                   @ 'GHC.Types.PtrRepLifted
                   @ (s -> GhcMonad.Ghc (a, s))
                   @ (Control.Monad.Trans.State.Lazy.StateT s GhcMonad.Ghc a)
                   (\ (tpl :: s -> GhcMonad.Ghc (a, s)) -> tpl)
                     `cast`
                   (<s -> GhcMonad.Ghc (a, s)>_R
                    ->_R Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                  <s>_N <GhcMonad.Ghc>_R <a>_N))
                   (\ (ds :: s) -> GhcMonad.$fMonadGhc_$s$dmfail @ (a, s) str)) -}
abdb00ac9adb9c35946cc69ac16d142b
  $s$fExceptionMonadStateT_$s$fMonadStateT_$cp1Monad ::
    GHC.Base.Applicative
      (Control.Monad.Trans.State.Lazy.StateT s GhcMonad.Ghc)
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                DerivingsChecker.$s$fApplicativeStateT -}
97e604069036d8d20027cf2f95565b59
  $s$fGhcMonadStateT ::
    GhcMonad.GhcMonad
      (Control.Monad.Trans.State.Lazy.StateT s GhcMonad.Ghc)
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ s.
                  @ (Control.Monad.Trans.State.Lazy.StateT s GhcMonad.Ghc)
                  (DerivingsChecker.$s$fApplicativeStateT_$s$fApplicativeStateT_$cp1Applicative
                     @ s)
                  (DerivingsChecker.$s$fExceptionMonadStateT_$s$fGhcMonadStateT_$cp2GhcMonad
                     @ s)
                  (DerivingsChecker.$s$fGhcMonadStateT_$s$fGhcMonadStateT_$cp3GhcMonad
                     @ s)
                  (Language.Haskell.Tools.Refactor.RefactorBase.$fGhcMonadStateT_$cp4GhcMonad
                     @ GhcMonad.Ghc
                     @ s
                     GhcMonad.$fGhcMonadGhc)
                  (Language.Haskell.Tools.Refactor.RefactorBase.$fGhcMonadStateT_$cgetSession
                     @ GhcMonad.Ghc
                     @ s
                     GhcMonad.$fGhcMonadGhc)
                  (Language.Haskell.Tools.Refactor.RefactorBase.$fGhcMonadStateT_$csetSession
                     @ GhcMonad.Ghc
                     @ s
                     GhcMonad.$fGhcMonadGhc) -}
3bf0fc2a0b0fd755dacea714b9c6407f
  $s$fGhcMonadStateT_$s$fGhcMonadStateT_$cp3GhcMonad ::
    Exception.ExceptionMonad
      (Control.Monad.Trans.State.Lazy.StateT s GhcMonad.Ghc)
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                DerivingsChecker.$s$fExceptionMonadStateT -}
10e7acd20e1a459dc89f2d3068464796
  $sannJust1 :: GHC.Base.Maybe a -> Data.Proxy.Proxy a
  {- Arity: 1, HasNoCafRefs, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ @ a (eta :: GHC.Base.Maybe a) -> Data.Proxy.Proxy @ * @ a) -}
a7752c914c27bf54886d97b3239485cd
  $swhen1 ::
    Data.Map.Base.Map
      GHC.LanguageExtensions.Type.Extension [SrcLoc.SrcSpan]
    -> GhcMonad.Session
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          ((),
           Data.Map.Base.Map
             GHC.LanguageExtensions.Type.Extension [SrcLoc.SrcSpan]) #)
  {- Arity: 3, HasNoCafRefs, Strictness: <L,U><L,A><S,U>,
     Unfolding: InlineRule (3, True, False)
                (\ (s1 :: Data.Map.Base.Map
                            GHC.LanguageExtensions.Type.Extension [SrcLoc.SrcSpan])
                   (eta :: GhcMonad.Session)
                   (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 (# eta1, (GHC.Tuple.(), s1) #)) -}
3602ba300adffeec38bd5012dbcf67df
  $tc'ClsBounded :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   832568197885054184##
                   7768869270352141861##
                   DerivingsChecker.$trModule
                   DerivingsChecker.$tc'ClsBounded1) -}
064de135d5837c9dbf6aa4c905013e64
  $tc'ClsBounded1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'ClsBounded"#) -}
2cf1b29b222708a85c4165248c8cbdce
  $tc'ClsData :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   16017888209616898181##
                   7224801752694504161##
                   DerivingsChecker.$trModule
                   DerivingsChecker.$tc'ClsData1) -}
5f43a7f2af710088c029748886c79027
  $tc'ClsData1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'ClsData"#) -}
199fd51de6c180214a6b8f48334ed5b6
  $tc'ClsEnum :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   10826881512317883184##
                   14074117787337651208##
                   DerivingsChecker.$trModule
                   DerivingsChecker.$tc'ClsEnum1) -}
9aabf47a1582cbe6dd52cee1d2b499a3
  $tc'ClsEnum1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'ClsEnum"#) -}
3ce75bc9af1f512dd9a91caacd737371
  $tc'ClsEq :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   17179748756568701548##
                   11852171280693776828##
                   DerivingsChecker.$trModule
                   DerivingsChecker.$tc'ClsEq1) -}
3cacc976175078548f61d9f0dd6b5827
  $tc'ClsEq1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'ClsEq"#) -}
4c82d5b257a9d68d66472209a252a727
  $tc'ClsFoldable :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   9009090021449308751##
                   2355609973951154510##
                   DerivingsChecker.$trModule
                   DerivingsChecker.$tc'ClsFoldable1) -}
1f699b5931a98276443ea6cbdd46a011
  $tc'ClsFoldable1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'ClsFoldable"#) -}
2e43d062d15b6eba2c6d6b6a10b13e5f
  $tc'ClsFunctor :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   607116527314759860##
                   14650802341905518382##
                   DerivingsChecker.$trModule
                   DerivingsChecker.$tc'ClsFunctor1) -}
8d7e00bc51bda669774f093d9c0c9c13
  $tc'ClsFunctor1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'ClsFunctor"#) -}
3a1b51ed0f05d2fbba32ce6924ad1ecc
  $tc'ClsGeneric :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   15553324578222477781##
                   4478358195037626632##
                   DerivingsChecker.$trModule
                   DerivingsChecker.$tc'ClsGeneric1) -}
349fabeeb0b2e1c066cf4ae01d7dce28
  $tc'ClsGeneric1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'ClsGeneric"#) -}
e0202b674b0ab660f69a02f7d4f78173
  $tc'ClsIx :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   1647526220139965202##
                   8752681188826557491##
                   DerivingsChecker.$trModule
                   DerivingsChecker.$tc'ClsIx1) -}
cff7fceffd2462fc38245c359dc9c383
  $tc'ClsIx1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'ClsIx"#) -}
8047af578fd87c8f64d5b44da812acef
  $tc'ClsOrd :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   1219120835636620083##
                   9358546908147243881##
                   DerivingsChecker.$trModule
                   DerivingsChecker.$tc'ClsOrd1) -}
6d1e1a5baa5a5972d06570dd68f64e1b
  $tc'ClsOrd1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'ClsOrd"#) -}
eeb7db52ce41ab2e5d90eb590158b113
  $tc'ClsRead :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   2228919460156359683##
                   8321466782452388214##
                   DerivingsChecker.$trModule
                   DerivingsChecker.$tc'ClsRead1) -}
66e4c8b6d7b1e9c5c086359ef8321ee2
  $tc'ClsRead1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'ClsRead"#) -}
d9784b27ce4a1a9b7eb40d06e5b68b57
  $tc'ClsShow :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   15273643303357756240##
                   11222952678098633173##
                   DerivingsChecker.$trModule
                   DerivingsChecker.$tc'ClsShow1) -}
2f550de37f1f2575f1086552e3cc4e86
  $tc'ClsShow1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'ClsShow"#) -}
e714c725d64b8499ce57310b9b8d3883
  $tc'ClsTraversable :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   16984476363997782823##
                   10913536837418696564##
                   DerivingsChecker.$trModule
                   DerivingsChecker.$tc'ClsTraversable1) -}
3b6a1f6c6b07c1bcfc0d6e239e70c9cf
  $tc'ClsTraversable1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'ClsTraversable"#) -}
0b8e3f88be50cbd2380cbfb215e37e1a
  $tc'ClsTypeable :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   16694489955197017780##
                   487277437552760383##
                   DerivingsChecker.$trModule
                   DerivingsChecker.$tc'ClsTypeable1) -}
18fc022e65168f1f314078b26fa4d5c2
  $tc'ClsTypeable1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'ClsTypeable"#) -}
f6ed321a94fe039527553133da72d3da
  $tcDerivableClass :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   1532148250533399243##
                   1071695914903314507##
                   DerivingsChecker.$trModule
                   DerivingsChecker.$tcDerivableClass1) -}
1dab07b1536b7e1a57643c6eaa7e2057
  $tcDerivableClass1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "DerivableClass"#) -}
5dcc0740fb03bc4d4a89838ffa797c22
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   DerivingsChecker.$trModule2
                   DerivingsChecker.$trModule1) -}
dbf79fedd311bb6fb526580060fdf123
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "DerivingsChecker"#) -}
aeb19843650a46f98bf795098d85f6cd
  $trModule2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   "ht-extension-organizer-0.1.0.0-1NgBbe619AH4JExLErEUCI"#) -}
83758a95a1ab76ef96e79635d6cc2313
  $w$cshowsPrec ::
    DerivingsChecker.DerivableClass
    -> GHC.Base.String -> GHC.Base.String
  {- Arity: 2, Strictness: <S,1*U><L,1*U>, Inline: [0],
     Unfolding: (\ (w :: DerivingsChecker.DerivableClass)
                   (w1 :: GHC.Base.String) ->
                 case w of wild {
                   DerivingsChecker.ClsEq
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        DerivingsChecker.$fReadDerivableClass55
                        w1
                   DerivingsChecker.ClsOrd
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        DerivingsChecker.$fReadDerivableClass52
                        w1
                   DerivingsChecker.ClsIx
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        DerivingsChecker.$fReadDerivableClass49
                        w1
                   DerivingsChecker.ClsShow
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        DerivingsChecker.$fReadDerivableClass46
                        w1
                   DerivingsChecker.ClsRead
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        DerivingsChecker.$fReadDerivableClass43
                        w1
                   DerivingsChecker.ClsEnum
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        DerivingsChecker.$fReadDerivableClass40
                        w1
                   DerivingsChecker.ClsBounded
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        DerivingsChecker.$fReadDerivableClass37
                        w1
                   DerivingsChecker.ClsData
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        DerivingsChecker.$fReadDerivableClass34
                        w1
                   DerivingsChecker.ClsTypeable
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        DerivingsChecker.$fReadDerivableClass31
                        w1
                   DerivingsChecker.ClsGeneric
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        DerivingsChecker.$fReadDerivableClass28
                        w1
                   DerivingsChecker.ClsFunctor
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        DerivingsChecker.$fReadDerivableClass25
                        w1
                   DerivingsChecker.ClsFoldable
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        DerivingsChecker.$fReadDerivableClass22
                        w1
                   DerivingsChecker.ClsTraversable
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        DerivingsChecker.$fReadDerivableClass19
                        w1 }) -}
e4fcfafb4fe002b77368afe54ae3b0be
  $wchkClassForData ::
    Language.Haskell.Tools.AST.SemaInfoClasses.HasNameInfo dom =>
    Language.Haskell.Tools.AST.Ann.NodeInfo
      (Language.Haskell.Tools.AST.Ann.SemanticInfo
         dom Language.Haskell.Tools.AST.Representation.Decls.UInstanceHead)
      (Language.Haskell.Tools.AST.Ann.SpanInfo
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
    -> Language.Haskell.Tools.AST.Representation.Decls.UInstanceHead
         dom Language.Haskell.Tools.AST.Ann.SrcTemplateStage
    -> ExtMonad.ExtMonad
         dom (Language.Haskell.Tools.AST.ElementTypes.InstanceHead dom)
  {- Arity: 3,
     Strictness: <S(S(LLS(S)LLLLLLLLLL)L),U(U(A,A,U(U),A,A,A,A,A,A,A,A,A,A),C(U))><L,U(U,U(U,U,U,U))><S,U>,
     Inline: [0],
     Unfolding: (\ @ dom
                   (w :: Language.Haskell.Tools.AST.SemaInfoClasses.HasNameInfo dom)
                   (ww :: Language.Haskell.Tools.AST.Ann.NodeInfo
                            (Language.Haskell.Tools.AST.Ann.SemanticInfo
                               dom Language.Haskell.Tools.AST.Representation.Decls.UInstanceHead)
                            (Language.Haskell.Tools.AST.Ann.SpanInfo
                               Language.Haskell.Tools.AST.Ann.SrcTemplateStage))
                   (ww7 :: Language.Haskell.Tools.AST.Representation.Decls.UInstanceHead
                             dom Language.Haskell.Tools.AST.Ann.SrcTemplateStage) ->
                 let {
                   lvl16 :: SrcLoc.SrcSpan
                   = case ww of wild1 { Language.Haskell.Tools.AST.Ann.NodeInfo ds1 ds2 ->
                     case ds2
                            `cast`
                          (Language.Haskell.Tools.Transform.SourceTemplate.D:R:SpanInfoSrcTemplateStage0[0]) of wild { Language.Haskell.Tools.Transform.SourceTemplate.SourceTemplateNode ds4 ds5 ds3 ds6 ->
                     ds4 } }
                 } in
                 let {
                   lvl17 :: [SrcLoc.SrcSpan]
                   = GHC.Types.:
                       @ SrcLoc.SrcSpan
                       lvl16
                       (GHC.Types.[] @ SrcLoc.SrcSpan)
                 } in
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Language.Haskell.Tools.AST.Ann.SemanticInfo'
                             dom Language.Haskell.Tools.AST.Ann.SameInfoDefaultCls)
                        @ Language.Haskell.Tools.AST.SemaInfoTypes.NoSemanticInfo
                        (Language.Haskell.Tools.AST.Ann.$p3Domain
                           @ dom
                           (GHC.Classes.$p1(%,%)
                              @ (Language.Haskell.Tools.AST.Ann.Domain dom)
                              @ (Language.Haskell.Tools.AST.SemaInfoClasses.HasNameInfo'
                                   (Language.Haskell.Tools.AST.Ann.SemanticInfo
                                      dom
                                      Language.Haskell.Tools.AST.Representation.Names.UQualifiedName))
                              w))
                          `cast`
                        (Data.Type.Equality.N:~[0]
                             <*>_N <Language.Haskell.Tools.AST.Ann.SemanticInfo'
                                      dom
                                      Language.Haskell.Tools.AST.Ann.SameInfoDefaultCls>_N <Language.Haskell.Tools.AST.SemaInfoTypes.NoSemanticInfo>_N) of cobox0 { DEFAULT ->
                 case DerivingsChecker.$wskipParens
                        @ dom
                        ww
                        ww7 of ww8 { (#,#) ww9 ww10 ->
                 let {
                   eta :: Language.Haskell.Tools.AST.ElementTypes.InstanceHead dom
                   = Language.Haskell.Tools.AST.Ann.Ann
                       @ Language.Haskell.Tools.AST.Representation.Decls.UInstanceHead
                       @ dom
                       @ Language.Haskell.Tools.AST.Ann.SrcTemplateStage
                       ww
                       ww7
                 } in
                 let {
                   $wfail :: Data.Map.Base.Map
                               GHC.LanguageExtensions.Type.Extension [SrcLoc.SrcSpan]
                             -> GhcMonad.Ghc
                                  (Language.Haskell.Tools.AST.ElementTypes.InstanceHead dom,
                                   Data.Map.Base.Map
                                     GHC.LanguageExtensions.Type.Extension [SrcLoc.SrcSpan])
                     {- Arity: 1, Strictness: <L,1*U>, Inline: [0] -}
                   = \ (w1 :: Data.Map.Base.Map
                                GHC.LanguageExtensions.Type.Extension [SrcLoc.SrcSpan]) ->
                     let {
                       a1 :: Data.Map.Base.Map
                               GHC.LanguageExtensions.Type.Extension [SrcLoc.SrcSpan]
                       = Data.Map.Strict.insertWithKey
                           @ GHC.LanguageExtensions.Type.Extension
                           @ [SrcLoc.SrcSpan]
                           ExtMonad.$fOrdExtension
                           (ExtMonad.addOccurence1 @ GHC.LanguageExtensions.Type.Extension)
                           GHC.LanguageExtensions.Type.DeriveAnyClass
                           lvl17
                           w1
                     } in
                     let {
                       lvl18 :: (Language.Haskell.Tools.AST.ElementTypes.InstanceHead dom,
                                 Data.Map.Base.Map
                                   GHC.LanguageExtensions.Type.Extension [SrcLoc.SrcSpan])
                       = (eta, a1)
                     } in
                     (\ (s :: GhcMonad.Session)
                        (s1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                      (# s1, lvl18 #))
                       `cast`
                     (Trans
                          (<GhcMonad.Session>_R
                           ->_R Sym (GHC.Types.N:IO[0]
                                         <(Language.Haskell.Tools.AST.ElementTypes.InstanceHead dom,
                                           Data.Map.Base.Map
                                             GHC.LanguageExtensions.Type.Extension
                                             [SrcLoc.SrcSpan])>_R))
                          (Sym (GhcMonad.N:Ghc[0]
                                    <(Language.Haskell.Tools.AST.ElementTypes.InstanceHead dom,
                                      Data.Map.Base.Map
                                        GHC.LanguageExtensions.Type.Extension
                                        [SrcLoc.SrcSpan])>_R)))
                 } in
                 case ww10 of wild1 {
                   DEFAULT
                   -> $wfail
                        `cast`
                      (Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                <Data.Map.Base.Map
                                   GHC.LanguageExtensions.Type.Extension [SrcLoc.SrcSpan]>_N
                                <GhcMonad.Ghc>_R
                                <Language.Haskell.Tools.AST.ElementTypes.InstanceHead dom>_N))
                   Language.Haskell.Tools.AST.Representation.Decls.UInstanceHeadCon name
                   -> case DerivingsChecker.getSemName @ dom w name of wild {
                        GHC.Base.Nothing
                        -> $wfail
                             `cast`
                           (Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                     <Data.Map.Base.Map
                                        GHC.LanguageExtensions.Type.Extension [SrcLoc.SrcSpan]>_N
                                     <GhcMonad.Ghc>_R
                                     <Language.Haskell.Tools.AST.ElementTypes.InstanceHead dom>_N))
                        GHC.Base.Just sname
                        -> case GHC.List.elem
                                  @ Name.Name
                                  Name.$fEqName
                                  sname
                                  DerivingsChecker.wiredInClasses of wild2 {
                             GHC.Types.False
                             -> $wfail
                                  `cast`
                                (Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                          <Data.Map.Base.Map
                                             GHC.LanguageExtensions.Type.Extension
                                             [SrcLoc.SrcSpan]>_N
                                          <GhcMonad.Ghc>_R
                                          <Language.Haskell.Tools.AST.ElementTypes.InstanceHead
                                             dom>_N))
                             GHC.Types.True
                             -> case GHC.List.filter
                                       @ (DerivingsChecker.DerivableClass, [GHC.Types.Char])
                                       DerivingsChecker.chkClassForData8
                                       (Text.ParserCombinators.ReadP.run
                                          @ DerivingsChecker.DerivableClass
                                          DerivingsChecker.chkClassForData7
                                          (GHC.Base.++
                                             @ GHC.Types.Char
                                             DerivingsChecker.chkClassForData6
                                             (case DerivingsChecker.chkClassForData1
                                                     @ dom of wild3 { Control.Reference.Representation.Reference ds ds1 ds2 ds3 ds4 ds5 ->
                                              (ds
                                                 @ GHC.Base.String
                                                 (Data.Functor.Identity.$fApplicativeIdentity2
                                                    @ GHC.Base.String)
                                                   `cast`
                                                 (<GHC.Base.String>_R
                                                  ->_R Sym (Data.Functor.Identity.N:Identity[0]
                                                                <GHC.Base.String>_R))
                                                 name)
                                                `cast`
                                              (Data.Functor.Identity.N:Identity[0]
                                                   <GHC.Base.String>_R) }))) of wild3 {
                                  []
                                  -> (\ (eta1 :: Data.Map.Base.Map
                                                   GHC.LanguageExtensions.Type.Extension
                                                   [SrcLoc.SrcSpan])
                                        (eta2 :: GhcMonad.Session)
                                        (eta3 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                                      (# eta3, (eta, eta1) #))
                                       `cast`
                                     (Trans
                                          (<Data.Map.Base.Map
                                              GHC.LanguageExtensions.Type.Extension
                                              [SrcLoc.SrcSpan]>_R
                                           ->_R Trans
                                                    (<GhcMonad.Session>_R
                                                     ->_R Sym (GHC.Types.N:IO[0]
                                                                   <(Language.Haskell.Tools.AST.ElementTypes.InstanceHead
                                                                       dom,
                                                                     Data.Map.Base.Map
                                                                       GHC.LanguageExtensions.Type.Extension
                                                                       [SrcLoc.SrcSpan])>_R))
                                                    (Sym (GhcMonad.N:Ghc[0]
                                                              <(Language.Haskell.Tools.AST.ElementTypes.InstanceHead
                                                                  dom,
                                                                Data.Map.Base.Map
                                                                  GHC.LanguageExtensions.Type.Extension
                                                                  [SrcLoc.SrcSpan])>_R)))
                                          (Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                                    <Data.Map.Base.Map
                                                       GHC.LanguageExtensions.Type.Extension
                                                       [SrcLoc.SrcSpan]>_N
                                                    <GhcMonad.Ghc>_R
                                                    <Language.Haskell.Tools.AST.ElementTypes.InstanceHead
                                                       dom>_N)))
                                  : a1 ds1
                                  -> case a1 of wild4 { (,) x ds2 ->
                                     let {
                                       $j :: GHC.LanguageExtensions.Type.Extension
                                             -> Data.Map.Base.Map
                                                  GHC.LanguageExtensions.Type.Extension
                                                  [SrcLoc.SrcSpan]
                                             -> GhcMonad.Ghc
                                                  (Language.Haskell.Tools.AST.ElementTypes.InstanceHead
                                                     dom,
                                                   Data.Map.Base.Map
                                                     GHC.LanguageExtensions.Type.Extension
                                                     [SrcLoc.SrcSpan])
                                         {- Arity: 2, Strictness: <L,1*U><L,1*U> -}
                                       = \ (ext :: GHC.LanguageExtensions.Type.Extension)[OneShot]
                                           (eta1 :: Data.Map.Base.Map
                                                      GHC.LanguageExtensions.Type.Extension
                                                      [SrcLoc.SrcSpan]) ->
                                         let {
                                           a2 :: Data.Map.Base.Map
                                                   GHC.LanguageExtensions.Type.Extension
                                                   [SrcLoc.SrcSpan]
                                           = Data.Map.Strict.insertWithKey
                                               @ GHC.LanguageExtensions.Type.Extension
                                               @ [SrcLoc.SrcSpan]
                                               ExtMonad.$fOrdExtension
                                               (ExtMonad.addOccurence1
                                                  @ GHC.LanguageExtensions.Type.Extension)
                                               ext
                                               lvl17
                                               eta1
                                         } in
                                         let {
                                           lvl18 :: (Language.Haskell.Tools.AST.ElementTypes.InstanceHead
                                                       dom,
                                                     Data.Map.Base.Map
                                                       GHC.LanguageExtensions.Type.Extension
                                                       [SrcLoc.SrcSpan])
                                           = (eta, a2)
                                         } in
                                         (\ (s :: GhcMonad.Session)
                                            (s1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                                          (# s1, lvl18 #))
                                           `cast`
                                         (Trans
                                              (<GhcMonad.Session>_R
                                               ->_R Sym (GHC.Types.N:IO[0]
                                                             <(Language.Haskell.Tools.AST.ElementTypes.InstanceHead
                                                                 dom,
                                                               Data.Map.Base.Map
                                                                 GHC.LanguageExtensions.Type.Extension
                                                                 [SrcLoc.SrcSpan])>_R))
                                              (Sym (GhcMonad.N:Ghc[0]
                                                        <(Language.Haskell.Tools.AST.ElementTypes.InstanceHead
                                                            dom,
                                                          Data.Map.Base.Map
                                                            GHC.LanguageExtensions.Type.Extension
                                                            [SrcLoc.SrcSpan])>_R)))
                                     } in
                                     case x of wild5 {
                                       DEFAULT
                                       -> (\ (eta1 :: Data.Map.Base.Map
                                                        GHC.LanguageExtensions.Type.Extension
                                                        [SrcLoc.SrcSpan])
                                             (eta2 :: GhcMonad.Session)
                                             (eta3 :: GHC.Prim.State#
                                                        GHC.Prim.RealWorld)[OneShot] ->
                                           (# eta3, (eta, eta1) #))
                                            `cast`
                                          (Trans
                                               (<Data.Map.Base.Map
                                                   GHC.LanguageExtensions.Type.Extension
                                                   [SrcLoc.SrcSpan]>_R
                                                ->_R Trans
                                                         (<GhcMonad.Session>_R
                                                          ->_R Sym (GHC.Types.N:IO[0]
                                                                        <(Language.Haskell.Tools.AST.ElementTypes.InstanceHead
                                                                            dom,
                                                                          Data.Map.Base.Map
                                                                            GHC.LanguageExtensions.Type.Extension
                                                                            [SrcLoc.SrcSpan])>_R))
                                                         (Sym (GhcMonad.N:Ghc[0]
                                                                   <(Language.Haskell.Tools.AST.ElementTypes.InstanceHead
                                                                       dom,
                                                                     Data.Map.Base.Map
                                                                       GHC.LanguageExtensions.Type.Extension
                                                                       [SrcLoc.SrcSpan])>_R)))
                                               (Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                                         <Data.Map.Base.Map
                                                            GHC.LanguageExtensions.Type.Extension
                                                            [SrcLoc.SrcSpan]>_N
                                                         <GhcMonad.Ghc>_R
                                                         <Language.Haskell.Tools.AST.ElementTypes.InstanceHead
                                                            dom>_N)))
                                       DerivingsChecker.ClsData
                                       -> ($j GHC.LanguageExtensions.Type.DeriveDataTypeable)
                                            `cast`
                                          (Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                                    <Data.Map.Base.Map
                                                       GHC.LanguageExtensions.Type.Extension
                                                       [SrcLoc.SrcSpan]>_N
                                                    <GhcMonad.Ghc>_R
                                                    <Language.Haskell.Tools.AST.ElementTypes.InstanceHead
                                                       dom>_N))
                                       DerivingsChecker.ClsTypeable
                                       -> ($j GHC.LanguageExtensions.Type.DeriveDataTypeable)
                                            `cast`
                                          (Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                                    <Data.Map.Base.Map
                                                       GHC.LanguageExtensions.Type.Extension
                                                       [SrcLoc.SrcSpan]>_N
                                                    <GhcMonad.Ghc>_R
                                                    <Language.Haskell.Tools.AST.ElementTypes.InstanceHead
                                                       dom>_N))
                                       DerivingsChecker.ClsGeneric
                                       -> ($j GHC.LanguageExtensions.Type.DeriveGeneric)
                                            `cast`
                                          (Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                                    <Data.Map.Base.Map
                                                       GHC.LanguageExtensions.Type.Extension
                                                       [SrcLoc.SrcSpan]>_N
                                                    <GhcMonad.Ghc>_R
                                                    <Language.Haskell.Tools.AST.ElementTypes.InstanceHead
                                                       dom>_N))
                                       DerivingsChecker.ClsFunctor
                                       -> ($j GHC.LanguageExtensions.Type.DeriveFunctor)
                                            `cast`
                                          (Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                                    <Data.Map.Base.Map
                                                       GHC.LanguageExtensions.Type.Extension
                                                       [SrcLoc.SrcSpan]>_N
                                                    <GhcMonad.Ghc>_R
                                                    <Language.Haskell.Tools.AST.ElementTypes.InstanceHead
                                                       dom>_N))
                                       DerivingsChecker.ClsFoldable
                                       -> ($j GHC.LanguageExtensions.Type.DeriveFoldable)
                                            `cast`
                                          (Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                                    <Data.Map.Base.Map
                                                       GHC.LanguageExtensions.Type.Extension
                                                       [SrcLoc.SrcSpan]>_N
                                                    <GhcMonad.Ghc>_R
                                                    <Language.Haskell.Tools.AST.ElementTypes.InstanceHead
                                                       dom>_N))
                                       DerivingsChecker.ClsTraversable
                                       -> ($j GHC.LanguageExtensions.Type.DeriveTraversable)
                                            `cast`
                                          (Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                                    <Data.Map.Base.Map
                                                       GHC.LanguageExtensions.Type.Extension
                                                       [SrcLoc.SrcSpan]>_N
                                                    <GhcMonad.Ghc>_R
                                                    <Language.Haskell.Tools.AST.ElementTypes.InstanceHead
                                                       dom>_N)) } } } } } } } }) -}
321a2b7e7bd564fe21b1bd3337bfe98b
  $wchkClassForNewtype ::
    Language.Haskell.Tools.AST.SemaInfoClasses.HasNameInfo dom =>
    Language.Haskell.Tools.AST.Ann.NodeInfo
      (Language.Haskell.Tools.AST.Ann.SemanticInfo
         dom Language.Haskell.Tools.AST.Representation.Decls.UInstanceHead)
      (Language.Haskell.Tools.AST.Ann.SpanInfo
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
    -> Language.Haskell.Tools.AST.Representation.Decls.UInstanceHead
         dom Language.Haskell.Tools.AST.Ann.SrcTemplateStage
    -> ExtMonad.ExtMonad
         dom (Language.Haskell.Tools.AST.ElementTypes.InstanceHead dom)
  {- Arity: 3,
     Strictness: <S(S(LLS(S)LLLLLLLLLL)L),U(U(A,A,U(U),A,A,A,A,A,A,A,A,A,A),C(U))><L,U(U,U(U,U,U,U))><S,U>,
     Inline: [0] -}
56597c74bd2e256cde4714fa2807bf50
  $wchkDataDecl ::
    Language.Haskell.Tools.AST.SemaInfoClasses.HasNameInfo dom =>
    Language.Haskell.Tools.AST.Ann.NodeInfo
      (Language.Haskell.Tools.AST.Ann.SemanticInfo
         dom Language.Haskell.Tools.AST.Representation.Decls.UDecl)
      (Language.Haskell.Tools.AST.Ann.SpanInfo
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
    -> Language.Haskell.Tools.AST.Representation.Decls.UDecl
         dom Language.Haskell.Tools.AST.Ann.SrcTemplateStage
    -> ExtMonad.ExtMonad
         dom (Language.Haskell.Tools.AST.ElementTypes.Decl dom)
  {- Arity: 3,
     Strictness: <S(S(LLS(S)LLLLLLLLLL)L),U(U(A,A,U(U),A,A,A,A,A,A,A,A,A,A),C(U))><L,U><S,U>,
     Inline: [0],
     Unfolding: (\ @ dom
                   (w :: Language.Haskell.Tools.AST.SemaInfoClasses.HasNameInfo dom)
                   (ww :: Language.Haskell.Tools.AST.Ann.NodeInfo
                            (Language.Haskell.Tools.AST.Ann.SemanticInfo
                               dom Language.Haskell.Tools.AST.Representation.Decls.UDecl)
                            (Language.Haskell.Tools.AST.Ann.SpanInfo
                               Language.Haskell.Tools.AST.Ann.SrcTemplateStage))
                   (ww7 :: Language.Haskell.Tools.AST.Representation.Decls.UDecl
                             dom Language.Haskell.Tools.AST.Ann.SrcTemplateStage) ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Language.Haskell.Tools.AST.Ann.SemanticInfo'
                             dom Language.Haskell.Tools.AST.Ann.SameInfoDefaultCls)
                        @ Language.Haskell.Tools.AST.SemaInfoTypes.NoSemanticInfo
                        (Language.Haskell.Tools.AST.Ann.$p3Domain
                           @ dom
                           (GHC.Classes.$p1(%,%)
                              @ (Language.Haskell.Tools.AST.Ann.Domain dom)
                              @ (Language.Haskell.Tools.AST.SemaInfoClasses.HasNameInfo'
                                   (Language.Haskell.Tools.AST.Ann.SemanticInfo
                                      dom
                                      Language.Haskell.Tools.AST.Representation.Names.UQualifiedName))
                              w))
                          `cast`
                        (Data.Type.Equality.N:~[0]
                             <*>_N <Language.Haskell.Tools.AST.Ann.SemanticInfo'
                                      dom
                                      Language.Haskell.Tools.AST.Ann.SameInfoDefaultCls>_N <Language.Haskell.Tools.AST.SemaInfoTypes.NoSemanticInfo>_N) of cobox0 { DEFAULT ->
                 let {
                   ww8 :: Language.Haskell.Tools.AST.ElementTypes.Decl dom
                   = Language.Haskell.Tools.AST.Ann.Ann
                       @ Language.Haskell.Tools.AST.Representation.Decls.UDecl
                       @ dom
                       @ Language.Haskell.Tools.AST.Ann.SrcTemplateStage
                       ww
                       ww7
                 } in
                 case ww7 of wild {
                   DEFAULT
                   -> (\ (eta :: Data.Map.Base.Map
                                   GHC.LanguageExtensions.Type.Extension [SrcLoc.SrcSpan])
                         (eta1 :: GhcMonad.Session)
                         (eta2 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                       (# eta2, (ww8, eta) #))
                        `cast`
                      (Trans
                           (<Data.Map.Base.Map
                               GHC.LanguageExtensions.Type.Extension [SrcLoc.SrcSpan]>_R
                            ->_R Trans
                                     (<GhcMonad.Session>_R
                                      ->_R Sym (GHC.Types.N:IO[0]
                                                    <(Language.Haskell.Tools.AST.ElementTypes.Decl
                                                        dom,
                                                      Data.Map.Base.Map
                                                        GHC.LanguageExtensions.Type.Extension
                                                        [SrcLoc.SrcSpan])>_R))
                                     (Sym (GhcMonad.N:Ghc[0]
                                               <(Language.Haskell.Tools.AST.ElementTypes.Decl dom,
                                                 Data.Map.Base.Map
                                                   GHC.LanguageExtensions.Type.Extension
                                                   [SrcLoc.SrcSpan])>_R)))
                           (Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                     <Data.Map.Base.Map
                                        GHC.LanguageExtensions.Type.Extension [SrcLoc.SrcSpan]>_N
                                     <GhcMonad.Ghc>_R
                                     <Language.Haskell.Tools.AST.ElementTypes.Decl dom>_N)))
                   Language.Haskell.Tools.AST.Representation.Decls.UDataDecl keyw ctx dh cons derivs
                   -> let {
                        m1 :: Control.Monad.Trans.State.Lazy.StateT
                                (Data.Map.Base.Map
                                   GHC.LanguageExtensions.Type.Extension [SrcLoc.SrcSpan])
                                GhcMonad.Ghc
                                ()
                        = case keyw of ww9 { Language.Haskell.Tools.AST.Ann.Ann ww10 ww11 ->
                          DerivingsChecker.$wseparateByKeyword @ dom w ww11 derivs }
                      } in
                      (\ (s1 :: Data.Map.Base.Map
                                  GHC.LanguageExtensions.Type.Extension [SrcLoc.SrcSpan]) ->
                       let {
                         m :: GhcMonad.Ghc
                                ((),
                                 Data.Map.Base.Map
                                   GHC.LanguageExtensions.Type.Extension [SrcLoc.SrcSpan])
                         = m1
                             `cast`
                           (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                <Data.Map.Base.Map
                                   GHC.LanguageExtensions.Type.Extension [SrcLoc.SrcSpan]>_N
                                <GhcMonad.Ghc>_R
                                <()>_N)
                             s1
                       } in
                       (\ (s :: GhcMonad.Session)
                          (s2 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                        case (m `cast`
                              (GhcMonad.N:Ghc[0]
                                   <((),
                                     Data.Map.Base.Map
                                       GHC.LanguageExtensions.Type.Extension [SrcLoc.SrcSpan])>_R)
                                s)
                               `cast`
                             (GHC.Types.N:IO[0]
                                  <((),
                                    Data.Map.Base.Map
                                      GHC.LanguageExtensions.Type.Extension [SrcLoc.SrcSpan])>_R)
                               s2 of ds1 { (#,#) ipv ipv1 ->
                        (# ipv, (ww8, case ipv1 of wild1 { (,) a1 s' -> s' }) #) })
                         `cast`
                       (Trans
                            (<GhcMonad.Session>_R
                             ->_R Sym (GHC.Types.N:IO[0]
                                           <(Language.Haskell.Tools.AST.ElementTypes.Decl dom,
                                             Data.Map.Base.Map
                                               GHC.LanguageExtensions.Type.Extension
                                               [SrcLoc.SrcSpan])>_R))
                            (Sym (GhcMonad.N:Ghc[0]
                                      <(Language.Haskell.Tools.AST.ElementTypes.Decl dom,
                                        Data.Map.Base.Map
                                          GHC.LanguageExtensions.Type.Extension
                                          [SrcLoc.SrcSpan])>_R))))
                        `cast`
                      (Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                <Data.Map.Base.Map
                                   GHC.LanguageExtensions.Type.Extension [SrcLoc.SrcSpan]>_N
                                <GhcMonad.Ghc>_R
                                <Language.Haskell.Tools.AST.ElementTypes.Decl dom>_N)) } }) -}
8769e7410031bd91d00df06cba257b89
  $wchkDataInstance ::
    Language.Haskell.Tools.AST.SemaInfoClasses.HasNameInfo dom =>
    Language.Haskell.Tools.AST.Ann.NodeInfo
      (Language.Haskell.Tools.AST.Ann.SemanticInfo
         dom Language.Haskell.Tools.AST.Representation.Decls.UDecl)
      (Language.Haskell.Tools.AST.Ann.SpanInfo
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
    -> Language.Haskell.Tools.AST.Representation.Decls.UDecl
         dom Language.Haskell.Tools.AST.Ann.SrcTemplateStage
    -> ExtMonad.ExtMonad
         dom (Language.Haskell.Tools.AST.ElementTypes.Decl dom)
  {- Arity: 3,
     Strictness: <S(S(LLS(S)LLLLLLLLLL)L),U(U(A,A,U(U),A,A,A,A,A,A,A,A,A,A),C(U))><L,U(U,U(U,U,U,U))><S,U>,
     Inline: [0],
     Unfolding: (\ @ dom
                   (w :: Language.Haskell.Tools.AST.SemaInfoClasses.HasNameInfo dom)
                   (ww :: Language.Haskell.Tools.AST.Ann.NodeInfo
                            (Language.Haskell.Tools.AST.Ann.SemanticInfo
                               dom Language.Haskell.Tools.AST.Representation.Decls.UDecl)
                            (Language.Haskell.Tools.AST.Ann.SpanInfo
                               Language.Haskell.Tools.AST.Ann.SrcTemplateStage))
                   (ww7 :: Language.Haskell.Tools.AST.Representation.Decls.UDecl
                             dom Language.Haskell.Tools.AST.Ann.SrcTemplateStage) ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Language.Haskell.Tools.AST.Ann.SemanticInfo'
                             dom Language.Haskell.Tools.AST.Ann.SameInfoDefaultCls)
                        @ Language.Haskell.Tools.AST.SemaInfoTypes.NoSemanticInfo
                        (Language.Haskell.Tools.AST.Ann.$p3Domain
                           @ dom
                           (GHC.Classes.$p1(%,%)
                              @ (Language.Haskell.Tools.AST.Ann.Domain dom)
                              @ (Language.Haskell.Tools.AST.SemaInfoClasses.HasNameInfo'
                                   (Language.Haskell.Tools.AST.Ann.SemanticInfo
                                      dom
                                      Language.Haskell.Tools.AST.Representation.Names.UQualifiedName))
                              w))
                          `cast`
                        (Data.Type.Equality.N:~[0]
                             <*>_N <Language.Haskell.Tools.AST.Ann.SemanticInfo'
                                      dom
                                      Language.Haskell.Tools.AST.Ann.SameInfoDefaultCls>_N <Language.Haskell.Tools.AST.SemaInfoTypes.NoSemanticInfo>_N) of cobox0 { DEFAULT ->
                 let {
                   wild :: Language.Haskell.Tools.AST.ElementTypes.Decl dom
                   = Language.Haskell.Tools.AST.Ann.Ann
                       @ Language.Haskell.Tools.AST.Representation.Decls.UDecl
                       @ dom
                       @ Language.Haskell.Tools.AST.Ann.SrcTemplateStage
                       ww
                       ww7
                 } in
                 case ww7 of wild1 {
                   DEFAULT
                   -> (\ (eta :: Data.Map.Base.Map
                                   GHC.LanguageExtensions.Type.Extension [SrcLoc.SrcSpan])
                         (eta1 :: GhcMonad.Session)
                         (eta2 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                       (# eta2, (wild, eta) #))
                        `cast`
                      (Trans
                           (<Data.Map.Base.Map
                               GHC.LanguageExtensions.Type.Extension [SrcLoc.SrcSpan]>_R
                            ->_R Trans
                                     (<GhcMonad.Session>_R
                                      ->_R Sym (GHC.Types.N:IO[0]
                                                    <(Language.Haskell.Tools.AST.ElementTypes.Decl
                                                        dom,
                                                      Data.Map.Base.Map
                                                        GHC.LanguageExtensions.Type.Extension
                                                        [SrcLoc.SrcSpan])>_R))
                                     (Sym (GhcMonad.N:Ghc[0]
                                               <(Language.Haskell.Tools.AST.ElementTypes.Decl dom,
                                                 Data.Map.Base.Map
                                                   GHC.LanguageExtensions.Type.Extension
                                                   [SrcLoc.SrcSpan])>_R)))
                           (Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                     <Data.Map.Base.Map
                                        GHC.LanguageExtensions.Type.Extension [SrcLoc.SrcSpan]>_N
                                     <GhcMonad.Ghc>_R
                                     <Language.Haskell.Tools.AST.ElementTypes.Decl dom>_N)))
                   Language.Haskell.Tools.AST.Representation.Decls.UDataInstDecl keyw instRule cons derivs
                   -> let {
                        eta1 :: SrcLoc.SrcSpan
                        = case ww of wild2 { Language.Haskell.Tools.AST.Ann.NodeInfo ds1 ds2 ->
                          case ds2
                                 `cast`
                               (Language.Haskell.Tools.Transform.SourceTemplate.D:R:SpanInfoSrcTemplateStage0[0]) of wild3 { Language.Haskell.Tools.Transform.SourceTemplate.SourceTemplateNode ds4 ds5 ds3 ds6 ->
                          ds4 } }
                      } in
                      let {
                        eta2 :: [SrcLoc.SrcSpan]
                        = GHC.Types.: @ SrcLoc.SrcSpan eta1 (GHC.Types.[] @ SrcLoc.SrcSpan)
                      } in
                      let {
                        m1 :: Control.Monad.Trans.State.Lazy.StateT
                                (Data.Map.Base.Map
                                   GHC.LanguageExtensions.Type.Extension [SrcLoc.SrcSpan])
                                GhcMonad.Ghc
                                ()
                        = case keyw of ww8 { Language.Haskell.Tools.AST.Ann.Ann ww9 ww10 ->
                          DerivingsChecker.$wseparateByKeyword @ dom w ww10 derivs }
                      } in
                      (\ (s1 :: Data.Map.Base.Map
                                  GHC.LanguageExtensions.Type.Extension [SrcLoc.SrcSpan]) ->
                       let {
                         a1 :: Data.Map.Base.Map
                                 GHC.LanguageExtensions.Type.Extension [SrcLoc.SrcSpan]
                         = Data.Map.Strict.insertWithKey
                             @ GHC.LanguageExtensions.Type.Extension
                             @ [SrcLoc.SrcSpan]
                             ExtMonad.$fOrdExtension
                             (ExtMonad.addOccurence1 @ GHC.LanguageExtensions.Type.Extension)
                             GHC.LanguageExtensions.Type.TypeFamilies
                             eta2
                             s1
                       } in
                       (\ (s :: GhcMonad.Session)
                          (s2 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                        case ((m1
                                 `cast`
                               (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                    <Data.Map.Base.Map
                                       GHC.LanguageExtensions.Type.Extension [SrcLoc.SrcSpan]>_N
                                    <GhcMonad.Ghc>_R
                                    <()>_N)
                                 a1)
                                `cast`
                              (GhcMonad.N:Ghc[0]
                                   <((),
                                     Data.Map.Base.Map
                                       GHC.LanguageExtensions.Type.Extension [SrcLoc.SrcSpan])>_R)
                                s)
                               `cast`
                             (GHC.Types.N:IO[0]
                                  <((),
                                    Data.Map.Base.Map
                                      GHC.LanguageExtensions.Type.Extension [SrcLoc.SrcSpan])>_R)
                               s2 of ds1 { (#,#) ipv ipv1 ->
                        (# ipv, (wild, case ipv1 of wild2 { (,) a2 s' -> s' }) #) })
                         `cast`
                       (Trans
                            (<GhcMonad.Session>_R
                             ->_R Sym (GHC.Types.N:IO[0]
                                           <(Language.Haskell.Tools.AST.ElementTypes.Decl dom,
                                             Data.Map.Base.Map
                                               GHC.LanguageExtensions.Type.Extension
                                               [SrcLoc.SrcSpan])>_R))
                            (Sym (GhcMonad.N:Ghc[0]
                                      <(Language.Haskell.Tools.AST.ElementTypes.Decl dom,
                                        Data.Map.Base.Map
                                          GHC.LanguageExtensions.Type.Extension
                                          [SrcLoc.SrcSpan])>_R))))
                        `cast`
                      (Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                <Data.Map.Base.Map
                                   GHC.LanguageExtensions.Type.Extension [SrcLoc.SrcSpan]>_N
                                <GhcMonad.Ghc>_R
                                <Language.Haskell.Tools.AST.ElementTypes.Decl dom>_N)) } }) -}
eaceb40652e8b9d012b4efd2129722ad
  $wchkDerivingClause ::
    Language.Haskell.Tools.AST.SemaInfoClasses.HasNameInfo dom =>
    (Language.Haskell.Tools.AST.ElementTypes.InstanceHead dom
     -> ExtMonad.ExtMonad
          dom (Language.Haskell.Tools.AST.ElementTypes.InstanceHead dom))
    -> Language.Haskell.Tools.AST.Ann.NodeInfo
         (Language.Haskell.Tools.AST.Ann.SemanticInfo
            dom Language.Haskell.Tools.AST.Representation.Decls.UDeriving)
         (Language.Haskell.Tools.AST.Ann.SpanInfo
            Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
    -> Language.Haskell.Tools.AST.Representation.Decls.UDeriving
         dom Language.Haskell.Tools.AST.Ann.SrcTemplateStage
    -> ExtMonad.ExtMonad
         dom (Language.Haskell.Tools.AST.ElementTypes.Deriving dom)
  {- Arity: 4, HasNoCafRefs,
     Strictness: <S(S(LLS(S)LLLLLLLLLL)L),1*U(1*U(A,A,1*U(1*U),A,A,A,A,A,A,A,A,A,A),A)><L,C(U)><L,U><S,U>,
     Inline: [0],
     Unfolding: (\ @ dom
                   (w :: Language.Haskell.Tools.AST.SemaInfoClasses.HasNameInfo dom)
                   (w1 :: Language.Haskell.Tools.AST.ElementTypes.InstanceHead dom
                          -> ExtMonad.ExtMonad
                               dom (Language.Haskell.Tools.AST.ElementTypes.InstanceHead dom))
                   (ww :: Language.Haskell.Tools.AST.Ann.NodeInfo
                            (Language.Haskell.Tools.AST.Ann.SemanticInfo
                               dom Language.Haskell.Tools.AST.Representation.Decls.UDeriving)
                            (Language.Haskell.Tools.AST.Ann.SpanInfo
                               Language.Haskell.Tools.AST.Ann.SrcTemplateStage))
                   (ww7 :: Language.Haskell.Tools.AST.Representation.Decls.UDeriving
                             dom Language.Haskell.Tools.AST.Ann.SrcTemplateStage) ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Language.Haskell.Tools.AST.Ann.SemanticInfo'
                             dom Language.Haskell.Tools.AST.Ann.SameInfoDefaultCls)
                        @ Language.Haskell.Tools.AST.SemaInfoTypes.NoSemanticInfo
                        (Language.Haskell.Tools.AST.Ann.$p3Domain
                           @ dom
                           (GHC.Classes.$p1(%,%)
                              @ (Language.Haskell.Tools.AST.Ann.Domain dom)
                              @ (Language.Haskell.Tools.AST.SemaInfoClasses.HasNameInfo'
                                   (Language.Haskell.Tools.AST.Ann.SemanticInfo
                                      dom
                                      Language.Haskell.Tools.AST.Representation.Names.UQualifiedName))
                              w))
                          `cast`
                        (Data.Type.Equality.N:~[0]
                             <*>_N <Language.Haskell.Tools.AST.Ann.SemanticInfo'
                                      dom
                                      Language.Haskell.Tools.AST.Ann.SameInfoDefaultCls>_N <Language.Haskell.Tools.AST.SemaInfoTypes.NoSemanticInfo>_N) of cobox0 { DEFAULT ->
                 let {
                   wild :: Language.Haskell.Tools.AST.ElementTypes.Deriving dom
                   = Language.Haskell.Tools.AST.Ann.Ann
                       @ Language.Haskell.Tools.AST.Representation.Decls.UDeriving
                       @ dom
                       @ Language.Haskell.Tools.AST.Ann.SrcTemplateStage
                       ww
                       ww7
                 } in
                 case ww7 of wild1 {
                   Language.Haskell.Tools.AST.Representation.Decls.UDerivingOne deriv
                   -> let {
                        m1 :: Control.Monad.Trans.State.Lazy.StateT
                                (Data.Map.Base.Map
                                   GHC.LanguageExtensions.Type.Extension [SrcLoc.SrcSpan])
                                GhcMonad.Ghc
                                (Language.Haskell.Tools.AST.ElementTypes.InstanceHead dom)
                        = w1 deriv
                      } in
                      (\ (s1 :: Data.Map.Base.Map
                                  GHC.LanguageExtensions.Type.Extension [SrcLoc.SrcSpan]) ->
                       let {
                         m :: GhcMonad.Ghc
                                (Language.Haskell.Tools.AST.ElementTypes.InstanceHead dom,
                                 Data.Map.Base.Map
                                   GHC.LanguageExtensions.Type.Extension [SrcLoc.SrcSpan])
                         = m1
                             `cast`
                           (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                <Data.Map.Base.Map
                                   GHC.LanguageExtensions.Type.Extension [SrcLoc.SrcSpan]>_N
                                <GhcMonad.Ghc>_R
                                <Language.Haskell.Tools.AST.ElementTypes.InstanceHead dom>_N)
                             s1
                       } in
                       (\ (s :: GhcMonad.Session)
                          (s2 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                        case (m `cast`
                              (GhcMonad.N:Ghc[0]
                                   <(Language.Haskell.Tools.AST.ElementTypes.InstanceHead dom,
                                     Data.Map.Base.Map
                                       GHC.LanguageExtensions.Type.Extension [SrcLoc.SrcSpan])>_R)
                                s)
                               `cast`
                             (GHC.Types.N:IO[0]
                                  <(Language.Haskell.Tools.AST.ElementTypes.InstanceHead dom,
                                    Data.Map.Base.Map
                                      GHC.LanguageExtensions.Type.Extension [SrcLoc.SrcSpan])>_R)
                               s2 of ds1 { (#,#) ipv ipv1 ->
                        (# ipv, (wild, case ipv1 of wild2 { (,) a1 s' -> s' }) #) })
                         `cast`
                       (Trans
                            (<GhcMonad.Session>_R
                             ->_R Sym (GHC.Types.N:IO[0]
                                           <(Language.Haskell.Tools.AST.ElementTypes.Deriving dom,
                                             Data.Map.Base.Map
                                               GHC.LanguageExtensions.Type.Extension
                                               [SrcLoc.SrcSpan])>_R))
                            (Sym (GhcMonad.N:Ghc[0]
                                      <(Language.Haskell.Tools.AST.ElementTypes.Deriving dom,
                                        Data.Map.Base.Map
                                          GHC.LanguageExtensions.Type.Extension
                                          [SrcLoc.SrcSpan])>_R))))
                        `cast`
                      (Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                <Data.Map.Base.Map
                                   GHC.LanguageExtensions.Type.Extension [SrcLoc.SrcSpan]>_N
                                <GhcMonad.Ghc>_R
                                <Language.Haskell.Tools.AST.ElementTypes.Deriving dom>_N))
                   Language.Haskell.Tools.AST.Representation.Decls.UDerivings ipv
                   -> let {
                        m1 :: Control.Monad.Trans.State.Lazy.StateT
                                (Data.Map.Base.Map
                                   GHC.LanguageExtensions.Type.Extension [SrcLoc.SrcSpan])
                                GhcMonad.Ghc
                                ()
                        = case ipv of wild2 { Language.Haskell.Tools.AST.Ann.AnnListG ds1 ds2 ->
                          letrec {
                            go :: [Language.Haskell.Tools.AST.ElementTypes.InstanceHead dom]
                                  -> Control.Monad.Trans.State.Lazy.StateT
                                       (Data.Map.Base.Map
                                          GHC.LanguageExtensions.Type.Extension [SrcLoc.SrcSpan])
                                       GhcMonad.Ghc
                                       ()
                              {- Arity: 1, Strictness: <S,1*U> -}
                            = \ (ds :: [Language.Haskell.Tools.AST.ElementTypes.InstanceHead
                                          dom]) ->
                              case ds of wild3 {
                                []
                                -> DerivingsChecker.$swhen1
                                     `cast`
                                   (Trans
                                        (<Data.Map.Base.Map
                                            GHC.LanguageExtensions.Type.Extension
                                            [SrcLoc.SrcSpan]>_R
                                         ->_R Trans
                                                  (<GhcMonad.Session>_R
                                                   ->_R Sym (GHC.Types.N:IO[0]
                                                                 <((),
                                                                   Data.Map.Base.Map
                                                                     GHC.LanguageExtensions.Type.Extension
                                                                     [SrcLoc.SrcSpan])>_R))
                                                  (Sym (GhcMonad.N:Ghc[0]
                                                            <((),
                                                              Data.Map.Base.Map
                                                                GHC.LanguageExtensions.Type.Extension
                                                                [SrcLoc.SrcSpan])>_R)))
                                        (Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                                  <Data.Map.Base.Map
                                                     GHC.LanguageExtensions.Type.Extension
                                                     [SrcLoc.SrcSpan]>_N
                                                  <GhcMonad.Ghc>_R
                                                  <()>_N)))
                                : y ys
                                -> let {
                                     m2 :: Control.Monad.Trans.State.Lazy.StateT
                                             (Data.Map.Base.Map
                                                GHC.LanguageExtensions.Type.Extension
                                                [SrcLoc.SrcSpan])
                                             GhcMonad.Ghc
                                             (Language.Haskell.Tools.AST.ElementTypes.InstanceHead
                                                dom)
                                     = w1 y
                                   } in
                                   let {
                                     k :: Control.Monad.Trans.State.Lazy.StateT
                                            (Data.Map.Base.Map
                                               GHC.LanguageExtensions.Type.Extension
                                               [SrcLoc.SrcSpan])
                                            GhcMonad.Ghc
                                            ()
                                     = go ys
                                   } in
                                   (\ (s1 :: Data.Map.Base.Map
                                               GHC.LanguageExtensions.Type.Extension
                                               [SrcLoc.SrcSpan]) ->
                                    let {
                                      m :: GhcMonad.Ghc
                                             (Language.Haskell.Tools.AST.ElementTypes.InstanceHead
                                                dom,
                                              Data.Map.Base.Map
                                                GHC.LanguageExtensions.Type.Extension
                                                [SrcLoc.SrcSpan])
                                      = m2
                                          `cast`
                                        (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                             <Data.Map.Base.Map
                                                GHC.LanguageExtensions.Type.Extension
                                                [SrcLoc.SrcSpan]>_N
                                             <GhcMonad.Ghc>_R
                                             <Language.Haskell.Tools.AST.ElementTypes.InstanceHead
                                                dom>_N)
                                          s1
                                    } in
                                    (\ (s :: GhcMonad.Session)
                                       (s2 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                                     case (m `cast`
                                           (GhcMonad.N:Ghc[0]
                                                <(Language.Haskell.Tools.AST.ElementTypes.InstanceHead
                                                    dom,
                                                  Data.Map.Base.Map
                                                    GHC.LanguageExtensions.Type.Extension
                                                    [SrcLoc.SrcSpan])>_R)
                                             s)
                                            `cast`
                                          (GHC.Types.N:IO[0]
                                               <(Language.Haskell.Tools.AST.ElementTypes.InstanceHead
                                                   dom,
                                                 Data.Map.Base.Map
                                                   GHC.LanguageExtensions.Type.Extension
                                                   [SrcLoc.SrcSpan])>_R)
                                            s2 of ds4 { (#,#) ipv1 ipv2 ->
                                     ((k `cast`
                                       (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                            <Data.Map.Base.Map
                                               GHC.LanguageExtensions.Type.Extension
                                               [SrcLoc.SrcSpan]>_N
                                            <GhcMonad.Ghc>_R
                                            <()>_N)
                                         (case ipv2 of wild4 { (,) a1 s' -> s' }))
                                        `cast`
                                      (GhcMonad.N:Ghc[0]
                                           <((),
                                             Data.Map.Base.Map
                                               GHC.LanguageExtensions.Type.Extension
                                               [SrcLoc.SrcSpan])>_R)
                                        s)
                                       `cast`
                                     (GHC.Types.N:IO[0]
                                          <((),
                                            Data.Map.Base.Map
                                              GHC.LanguageExtensions.Type.Extension
                                              [SrcLoc.SrcSpan])>_R)
                                       ipv1 })
                                      `cast`
                                    (Trans
                                         (<GhcMonad.Session>_R
                                          ->_R Sym (GHC.Types.N:IO[0]
                                                        <((),
                                                          Data.Map.Base.Map
                                                            GHC.LanguageExtensions.Type.Extension
                                                            [SrcLoc.SrcSpan])>_R))
                                         (Sym (GhcMonad.N:Ghc[0]
                                                   <((),
                                                     Data.Map.Base.Map
                                                       GHC.LanguageExtensions.Type.Extension
                                                       [SrcLoc.SrcSpan])>_R))))
                                     `cast`
                                   (Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                             <Data.Map.Base.Map
                                                GHC.LanguageExtensions.Type.Extension
                                                [SrcLoc.SrcSpan]>_N
                                             <GhcMonad.Ghc>_R
                                             <()>_N)) }
                          } in
                          go ds2 }
                      } in
                      (\ (s1 :: Data.Map.Base.Map
                                  GHC.LanguageExtensions.Type.Extension [SrcLoc.SrcSpan]) ->
                       let {
                         m :: GhcMonad.Ghc
                                ((),
                                 Data.Map.Base.Map
                                   GHC.LanguageExtensions.Type.Extension [SrcLoc.SrcSpan])
                         = m1
                             `cast`
                           (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                <Data.Map.Base.Map
                                   GHC.LanguageExtensions.Type.Extension [SrcLoc.SrcSpan]>_N
                                <GhcMonad.Ghc>_R
                                <()>_N)
                             s1
                       } in
                       (\ (s :: GhcMonad.Session)
                          (s2 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                        case (m `cast`
                              (GhcMonad.N:Ghc[0]
                                   <((),
                                     Data.Map.Base.Map
                                       GHC.LanguageExtensions.Type.Extension [SrcLoc.SrcSpan])>_R)
                                s)
                               `cast`
                             (GHC.Types.N:IO[0]
                                  <((),
                                    Data.Map.Base.Map
                                      GHC.LanguageExtensions.Type.Extension [SrcLoc.SrcSpan])>_R)
                               s2 of ds1 { (#,#) ipv1 ipv2 ->
                        (# ipv1, (wild, case ipv2 of wild2 { (,) a1 s' -> s' }) #) })
                         `cast`
                       (Trans
                            (<GhcMonad.Session>_R
                             ->_R Sym (GHC.Types.N:IO[0]
                                           <(Language.Haskell.Tools.AST.ElementTypes.Deriving dom,
                                             Data.Map.Base.Map
                                               GHC.LanguageExtensions.Type.Extension
                                               [SrcLoc.SrcSpan])>_R))
                            (Sym (GhcMonad.N:Ghc[0]
                                      <(Language.Haskell.Tools.AST.ElementTypes.Deriving dom,
                                        Data.Map.Base.Map
                                          GHC.LanguageExtensions.Type.Extension
                                          [SrcLoc.SrcSpan])>_R))))
                        `cast`
                      (Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                <Data.Map.Base.Map
                                   GHC.LanguageExtensions.Type.Extension [SrcLoc.SrcSpan]>_N
                                <GhcMonad.Ghc>_R
                                <Language.Haskell.Tools.AST.ElementTypes.Deriving dom>_N)) } }) -}
749d21ddbfb6c874b358652e95976881
  $wchkGADTDataDecl ::
    Language.Haskell.Tools.AST.SemaInfoClasses.HasNameInfo dom =>
    Language.Haskell.Tools.AST.Ann.NodeInfo
      (Language.Haskell.Tools.AST.Ann.SemanticInfo
         dom Language.Haskell.Tools.AST.Representation.Decls.UDecl)
      (Language.Haskell.Tools.AST.Ann.SpanInfo
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
    -> Language.Haskell.Tools.AST.Representation.Decls.UDecl
         dom Language.Haskell.Tools.AST.Ann.SrcTemplateStage
    -> ExtMonad.ExtMonad
         dom (Language.Haskell.Tools.AST.ElementTypes.Decl dom)
  {- Arity: 3,
     Strictness: <S(S(LLS(S)LLLLLLLLLL)L),U(U(A,A,U(U),A,A,A,A,A,A,A,A,A,A),C(U))><L,U(U,U(U,U,U,U))><S,U>,
     Inline: [0],
     Unfolding: (\ @ dom
                   (w :: Language.Haskell.Tools.AST.SemaInfoClasses.HasNameInfo dom)
                   (ww :: Language.Haskell.Tools.AST.Ann.NodeInfo
                            (Language.Haskell.Tools.AST.Ann.SemanticInfo
                               dom Language.Haskell.Tools.AST.Representation.Decls.UDecl)
                            (Language.Haskell.Tools.AST.Ann.SpanInfo
                               Language.Haskell.Tools.AST.Ann.SrcTemplateStage))
                   (ww7 :: Language.Haskell.Tools.AST.Representation.Decls.UDecl
                             dom Language.Haskell.Tools.AST.Ann.SrcTemplateStage) ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Language.Haskell.Tools.AST.Ann.SemanticInfo'
                             dom Language.Haskell.Tools.AST.Ann.SameInfoDefaultCls)
                        @ Language.Haskell.Tools.AST.SemaInfoTypes.NoSemanticInfo
                        (Language.Haskell.Tools.AST.Ann.$p3Domain
                           @ dom
                           (GHC.Classes.$p1(%,%)
                              @ (Language.Haskell.Tools.AST.Ann.Domain dom)
                              @ (Language.Haskell.Tools.AST.SemaInfoClasses.HasNameInfo'
                                   (Language.Haskell.Tools.AST.Ann.SemanticInfo
                                      dom
                                      Language.Haskell.Tools.AST.Representation.Names.UQualifiedName))
                              w))
                          `cast`
                        (Data.Type.Equality.N:~[0]
                             <*>_N <Language.Haskell.Tools.AST.Ann.SemanticInfo'
                                      dom
                                      Language.Haskell.Tools.AST.Ann.SameInfoDefaultCls>_N <Language.Haskell.Tools.AST.SemaInfoTypes.NoSemanticInfo>_N) of cobox0 { DEFAULT ->
                 let {
                   ww8 :: Language.Haskell.Tools.AST.ElementTypes.Decl dom
                   = Language.Haskell.Tools.AST.Ann.Ann
                       @ Language.Haskell.Tools.AST.Representation.Decls.UDecl
                       @ dom
                       @ Language.Haskell.Tools.AST.Ann.SrcTemplateStage
                       ww
                       ww7
                 } in
                 case ww7 of wild {
                   DEFAULT
                   -> (\ (eta :: Data.Map.Base.Map
                                   GHC.LanguageExtensions.Type.Extension [SrcLoc.SrcSpan])
                         (eta1 :: GhcMonad.Session)
                         (eta2 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                       (# eta2, (ww8, eta) #))
                        `cast`
                      (Trans
                           (<Data.Map.Base.Map
                               GHC.LanguageExtensions.Type.Extension [SrcLoc.SrcSpan]>_R
                            ->_R Trans
                                     (<GhcMonad.Session>_R
                                      ->_R Sym (GHC.Types.N:IO[0]
                                                    <(Language.Haskell.Tools.AST.ElementTypes.Decl
                                                        dom,
                                                      Data.Map.Base.Map
                                                        GHC.LanguageExtensions.Type.Extension
                                                        [SrcLoc.SrcSpan])>_R))
                                     (Sym (GhcMonad.N:Ghc[0]
                                               <(Language.Haskell.Tools.AST.ElementTypes.Decl dom,
                                                 Data.Map.Base.Map
                                                   GHC.LanguageExtensions.Type.Extension
                                                   [SrcLoc.SrcSpan])>_R)))
                           (Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                     <Data.Map.Base.Map
                                        GHC.LanguageExtensions.Type.Extension [SrcLoc.SrcSpan]>_N
                                     <GhcMonad.Ghc>_R
                                     <Language.Haskell.Tools.AST.ElementTypes.Decl dom>_N)))
                   Language.Haskell.Tools.AST.Representation.Decls.UGDataDecl keyw ctx dh kind cons derivs
                   -> let {
                        eta1 :: SrcLoc.SrcSpan
                        = case ww of wild1 { Language.Haskell.Tools.AST.Ann.NodeInfo ds1 ds2 ->
                          case ds2
                                 `cast`
                               (Language.Haskell.Tools.Transform.SourceTemplate.D:R:SpanInfoSrcTemplateStage0[0]) of wild2 { Language.Haskell.Tools.Transform.SourceTemplate.SourceTemplateNode ds4 ds5 ds3 ds6 ->
                          ds4 } }
                      } in
                      let {
                        eta2 :: [SrcLoc.SrcSpan]
                        = GHC.Types.: @ SrcLoc.SrcSpan eta1 (GHC.Types.[] @ SrcLoc.SrcSpan)
                      } in
                      let {
                        m1 :: Control.Monad.Trans.State.Lazy.StateT
                                (Data.Map.Base.Map
                                   GHC.LanguageExtensions.Type.Extension [SrcLoc.SrcSpan])
                                GhcMonad.Ghc
                                ()
                        = case keyw of ww9 { Language.Haskell.Tools.AST.Ann.Ann ww10 ww11 ->
                          DerivingsChecker.$wseparateByKeyword @ dom w ww11 derivs }
                      } in
                      (\ (s1 :: Data.Map.Base.Map
                                  GHC.LanguageExtensions.Type.Extension [SrcLoc.SrcSpan]) ->
                       let {
                         a1 :: Data.Map.Base.Map
                                 GHC.LanguageExtensions.Type.Extension [SrcLoc.SrcSpan]
                         = Data.Map.Strict.insertWithKey
                             @ GHC.LanguageExtensions.Type.Extension
                             @ [SrcLoc.SrcSpan]
                             ExtMonad.$fOrdExtension
                             (ExtMonad.addOccurence1 @ GHC.LanguageExtensions.Type.Extension)
                             GHC.LanguageExtensions.Type.GADTs
                             eta2
                             s1
                       } in
                       (\ (s :: GhcMonad.Session)
                          (s2 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                        case ((m1
                                 `cast`
                               (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                    <Data.Map.Base.Map
                                       GHC.LanguageExtensions.Type.Extension [SrcLoc.SrcSpan]>_N
                                    <GhcMonad.Ghc>_R
                                    <()>_N)
                                 a1)
                                `cast`
                              (GhcMonad.N:Ghc[0]
                                   <((),
                                     Data.Map.Base.Map
                                       GHC.LanguageExtensions.Type.Extension [SrcLoc.SrcSpan])>_R)
                                s)
                               `cast`
                             (GHC.Types.N:IO[0]
                                  <((),
                                    Data.Map.Base.Map
                                      GHC.LanguageExtensions.Type.Extension [SrcLoc.SrcSpan])>_R)
                               s2 of ds1 { (#,#) ipv ipv1 ->
                        (# ipv, (ww8, case ipv1 of wild1 { (,) a2 s' -> s' }) #) })
                         `cast`
                       (Trans
                            (<GhcMonad.Session>_R
                             ->_R Sym (GHC.Types.N:IO[0]
                                           <(Language.Haskell.Tools.AST.ElementTypes.Decl dom,
                                             Data.Map.Base.Map
                                               GHC.LanguageExtensions.Type.Extension
                                               [SrcLoc.SrcSpan])>_R))
                            (Sym (GhcMonad.N:Ghc[0]
                                      <(Language.Haskell.Tools.AST.ElementTypes.Decl dom,
                                        Data.Map.Base.Map
                                          GHC.LanguageExtensions.Type.Extension
                                          [SrcLoc.SrcSpan])>_R))))
                        `cast`
                      (Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                <Data.Map.Base.Map
                                   GHC.LanguageExtensions.Type.Extension [SrcLoc.SrcSpan]>_N
                                <GhcMonad.Ghc>_R
                                <Language.Haskell.Tools.AST.ElementTypes.Decl dom>_N)) } }) -}
d6401583d4ec5efb0f9587da8de979d7
  $wchkStandaloneDeriving ::
    Language.Haskell.Tools.AST.SemaInfoClasses.HasNameInfo dom =>
    Language.Haskell.Tools.AST.Ann.NodeInfo
      (Language.Haskell.Tools.AST.Ann.SemanticInfo
         dom Language.Haskell.Tools.AST.Representation.Decls.UDecl)
      (Language.Haskell.Tools.AST.Ann.SpanInfo
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
    -> Language.Haskell.Tools.AST.Representation.Decls.UDecl
         dom Language.Haskell.Tools.AST.Ann.SrcTemplateStage
    -> ExtMonad.ExtMonad
         dom (Language.Haskell.Tools.AST.ElementTypes.Decl dom)
  {- Arity: 3,
     Strictness: <S(S(LLS(S)LLLLLLLLLL)L),U(U(A,A,U(U),A,A,A,A,A,A,A,A,A,A),C(U))><L,U(U,U(U,U,U,U))><S,U>,
     Inline: [0] -}
8862047793b00ec89b599ebd4eb5b6e4
  $wgetClassCon ::
    Language.Haskell.Tools.AST.Ann.NodeInfo
      (Language.Haskell.Tools.AST.Ann.SemanticInfo
         dom Language.Haskell.Tools.AST.Representation.Decls.UInstanceHead)
      (Language.Haskell.Tools.AST.Ann.SpanInfo
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
    -> Language.Haskell.Tools.AST.Representation.Decls.UInstanceHead
         dom Language.Haskell.Tools.AST.Ann.SrcTemplateStage
    -> (# Language.Haskell.Tools.AST.Ann.NodeInfo
            (Language.Haskell.Tools.AST.Ann.SemanticInfo
               dom Language.Haskell.Tools.AST.Representation.Decls.UInstanceHead)
            (Language.Haskell.Tools.AST.Ann.SpanInfo
               Language.Haskell.Tools.AST.Ann.SrcTemplateStage),
          Language.Haskell.Tools.AST.Representation.Decls.UInstanceHead
            dom Language.Haskell.Tools.AST.Ann.SrcTemplateStage #)
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><S,U>, Inline: [0] -}
ecc3871855602e3a7c36c1bf7881c96f
  $wlvl ::
    GHC.Prim.Void# -> Language.Haskell.Tools.AST.ElementTypes.Type dom
  {- Arity: 1, Strictness: <L,U>x, Inline: [0] -}
93be3c376a1634b2cd16a245d5faa592
  $wnameFromType ::
    Language.Haskell.Tools.AST.Representation.Types.UType
      dom Language.Haskell.Tools.AST.Ann.SrcTemplateStage
    -> GHC.Base.Maybe
         (Language.Haskell.Tools.AST.ElementTypes.Name dom)
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>, Inline: [0] -}
14816c8edffe30498593238b1cde5000
  $wseparateByKeyword ::
    Language.Haskell.Tools.AST.SemaInfoClasses.HasNameInfo dom =>
    Language.Haskell.Tools.AST.Representation.Decls.UDataOrNewtypeKeyword
      dom Language.Haskell.Tools.AST.Ann.SrcTemplateStage
    -> Language.Haskell.Tools.AST.Ann.AnnMaybeG
         Language.Haskell.Tools.AST.Representation.Decls.UDeriving
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage
    -> Control.Monad.Trans.State.Lazy.StateT
         (Data.Map.Base.Map
            GHC.LanguageExtensions.Type.Extension [SrcLoc.SrcSpan])
         GhcMonad.Ghc
         ()
  {- Arity: 3,
     Strictness: <S(S(LLS(S)LLLLLLLLLL)L),U(U(A,A,U(U),A,A,A,A,A,A,A,A,A,A),C(U))><S,1*U><L,U>,
     Inline: [0],
     Unfolding: (\ @ dom
                   (w :: Language.Haskell.Tools.AST.SemaInfoClasses.HasNameInfo dom)
                   (ww :: Language.Haskell.Tools.AST.Representation.Decls.UDataOrNewtypeKeyword
                            dom Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   (w1 :: Language.Haskell.Tools.AST.Ann.AnnMaybeG
                            Language.Haskell.Tools.AST.Representation.Decls.UDeriving
                            dom
                            Language.Haskell.Tools.AST.Ann.SrcTemplateStage) ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Language.Haskell.Tools.AST.Ann.SemanticInfo'
                             dom Language.Haskell.Tools.AST.Ann.SameInfoDefaultCls)
                        @ Language.Haskell.Tools.AST.SemaInfoTypes.NoSemanticInfo
                        (Language.Haskell.Tools.AST.Ann.$p3Domain
                           @ dom
                           (GHC.Classes.$p1(%,%)
                              @ (Language.Haskell.Tools.AST.Ann.Domain dom)
                              @ (Language.Haskell.Tools.AST.SemaInfoClasses.HasNameInfo'
                                   (Language.Haskell.Tools.AST.Ann.SemanticInfo
                                      dom
                                      Language.Haskell.Tools.AST.Representation.Names.UQualifiedName))
                              w))
                          `cast`
                        (Data.Type.Equality.N:~[0]
                             <*>_N <Language.Haskell.Tools.AST.Ann.SemanticInfo'
                                      dom
                                      Language.Haskell.Tools.AST.Ann.SameInfoDefaultCls>_N <Language.Haskell.Tools.AST.SemaInfoTypes.NoSemanticInfo>_N) of cobox0 { DEFAULT ->
                 let {
                   checkWith :: (Language.Haskell.Tools.AST.ElementTypes.InstanceHead
                                   dom
                                 -> ExtMonad.ExtMonad
                                      dom
                                      (Language.Haskell.Tools.AST.ElementTypes.InstanceHead dom))
                                -> Control.Monad.Trans.State.Lazy.StateT
                                     (Data.Map.Base.Map
                                        GHC.LanguageExtensions.Type.Extension [SrcLoc.SrcSpan])
                                     GhcMonad.Ghc
                                     ()
                     {- Arity: 1, Strictness: <L,C(U)> -}
                   = \ (f :: Language.Haskell.Tools.AST.ElementTypes.InstanceHead dom
                             -> ExtMonad.ExtMonad
                                  dom
                                  (Language.Haskell.Tools.AST.ElementTypes.InstanceHead
                                     dom))[OneShot] ->
                     let {
                       m1 :: Control.Monad.Trans.State.Lazy.StateT
                               (Data.Map.Base.Map
                                  GHC.LanguageExtensions.Type.Extension [SrcLoc.SrcSpan])
                               GhcMonad.Ghc
                               (Language.Haskell.Tools.AST.Ann.AnnMaybeG
                                  Language.Haskell.Tools.AST.Representation.Decls.UDeriving
                                  dom
                                  Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                       = case DerivingsChecker.chkDataDecl1
                                @ dom of wild { Control.Reference.Representation.Reference ds1 ds2 ds3 ds4 ds5 ds6 ->
                         ds3 (DerivingsChecker.chkDerivingClause @ dom w f) w1 }
                     } in
                     (\ (s1 :: Data.Map.Base.Map
                                 GHC.LanguageExtensions.Type.Extension [SrcLoc.SrcSpan]) ->
                      let {
                        m :: GhcMonad.Ghc
                               (Language.Haskell.Tools.AST.Ann.AnnMaybeG
                                  Language.Haskell.Tools.AST.Representation.Decls.UDeriving
                                  dom
                                  Language.Haskell.Tools.AST.Ann.SrcTemplateStage,
                                Data.Map.Base.Map
                                  GHC.LanguageExtensions.Type.Extension [SrcLoc.SrcSpan])
                        = m1
                            `cast`
                          (Control.Monad.Trans.State.Lazy.N:StateT[0]
                               <Data.Map.Base.Map
                                  GHC.LanguageExtensions.Type.Extension [SrcLoc.SrcSpan]>_N
                               <GhcMonad.Ghc>_R
                               <Language.Haskell.Tools.AST.Ann.AnnMaybeG
                                  Language.Haskell.Tools.AST.Representation.Decls.UDeriving
                                  dom
                                  Language.Haskell.Tools.AST.Ann.SrcTemplateStage>_N)
                            s1
                      } in
                      (\ (s :: GhcMonad.Session)
                         (s2 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                       case (m `cast`
                             (GhcMonad.N:Ghc[0]
                                  <(Language.Haskell.Tools.AST.Ann.AnnMaybeG
                                      Language.Haskell.Tools.AST.Representation.Decls.UDeriving
                                      dom
                                      Language.Haskell.Tools.AST.Ann.SrcTemplateStage,
                                    Data.Map.Base.Map
                                      GHC.LanguageExtensions.Type.Extension [SrcLoc.SrcSpan])>_R)
                               s)
                              `cast`
                            (GHC.Types.N:IO[0]
                                 <(Language.Haskell.Tools.AST.Ann.AnnMaybeG
                                     Language.Haskell.Tools.AST.Representation.Decls.UDeriving
                                     dom
                                     Language.Haskell.Tools.AST.Ann.SrcTemplateStage,
                                   Data.Map.Base.Map
                                     GHC.LanguageExtensions.Type.Extension [SrcLoc.SrcSpan])>_R)
                              s2 of ds1 { (#,#) ipv ipv1 ->
                       (# ipv, (GHC.Tuple.(), case ipv1 of wild { (,) a1 s' -> s' }) #) })
                        `cast`
                      (Trans
                           (<GhcMonad.Session>_R
                            ->_R Sym (GHC.Types.N:IO[0]
                                          <((),
                                            Data.Map.Base.Map
                                              GHC.LanguageExtensions.Type.Extension
                                              [SrcLoc.SrcSpan])>_R))
                           (Sym (GhcMonad.N:Ghc[0]
                                     <((),
                                       Data.Map.Base.Map
                                         GHC.LanguageExtensions.Type.Extension
                                         [SrcLoc.SrcSpan])>_R))))
                       `cast`
                     (Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                               <Data.Map.Base.Map
                                  GHC.LanguageExtensions.Type.Extension [SrcLoc.SrcSpan]>_N
                               <GhcMonad.Ghc>_R
                               <()>_N))
                 } in
                 case ww of wild {
                   Language.Haskell.Tools.AST.Representation.Decls.UDataKeyword
                   -> checkWith (DerivingsChecker.chkClassForData @ dom w)
                   Language.Haskell.Tools.AST.Representation.Decls.UNewtypeKeyword
                   -> checkWith (DerivingsChecker.chkClassForNewtype @ dom w) } }) -}
191f81476e7e5e24ecec9624ddea1161
  $wskipParens ::
    Language.Haskell.Tools.AST.Ann.NodeInfo
      (Language.Haskell.Tools.AST.Ann.SemanticInfo
         dom Language.Haskell.Tools.AST.Representation.Decls.UInstanceHead)
      (Language.Haskell.Tools.AST.Ann.SpanInfo
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
    -> Language.Haskell.Tools.AST.Representation.Decls.UInstanceHead
         dom Language.Haskell.Tools.AST.Ann.SrcTemplateStage
    -> (# Language.Haskell.Tools.AST.Ann.NodeInfo
            (Language.Haskell.Tools.AST.Ann.SemanticInfo
               dom Language.Haskell.Tools.AST.Representation.Decls.UInstanceHead)
            (Language.Haskell.Tools.AST.Ann.SpanInfo
               Language.Haskell.Tools.AST.Ann.SrcTemplateStage),
          Language.Haskell.Tools.AST.Representation.Decls.UInstanceHead
            dom Language.Haskell.Tools.AST.Ann.SrcTemplateStage #)
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><S,U>, Inline: [0] -}
83758a95a1ab76ef96e79635d6cc2313
  data DerivableClass
    = ClsEq
    | ClsOrd
    | ClsIx
    | ClsShow
    | ClsRead
    | ClsEnum
    | ClsBounded
    | ClsData
    | ClsTypeable
    | ClsGeneric
    | ClsFunctor
    | ClsFoldable
    | ClsTraversable
7f96ac2f46f6bf7ba8ba099def415e9b
  canBeGeneralized :: Name.Name -> GHC.Types.Bool
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Name.Name) ->
                 case GHC.List.elem
                        @ Name.Name
                        Name.$fEqName
                        x
                        DerivingsChecker.notGNTD of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
34c091e2aef9c05f6f918af12af8f5d4
  chkClassForData ::
    Language.Haskell.Tools.AST.SemaInfoClasses.HasNameInfo dom =>
    Language.Haskell.Tools.AST.ElementTypes.InstanceHead dom
    -> ExtMonad.ExtMonad
         dom (Language.Haskell.Tools.AST.ElementTypes.InstanceHead dom)
  {- Arity: 2,
     Strictness: <S(S(LLS(S)LLLLLLLLLL)L),U(U(A,A,U(U),A,A,A,A,A,A,A,A,A,A),C(U))><S(LS),U(U(U,U(U,U,U,U)),U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ @ dom
                   (w :: Language.Haskell.Tools.AST.SemaInfoClasses.HasNameInfo dom)
                   (w1 :: Language.Haskell.Tools.AST.ElementTypes.InstanceHead dom) ->
                 case w1 of ww { Language.Haskell.Tools.AST.Ann.Ann ww7 ww8 ->
                 DerivingsChecker.$wchkClassForData @ dom w ww7 ww8 }) -}
3c3d2cd1b75bad4f6c67a6879eca2a1c
  chkClassForData1 ::
    Control.Reference.Representation.Reference
      Control.Reference.Representation.MU
      Data.Functor.Identity.Identity
      Control.Reference.Representation.MU
      Control.Reference.Representation.MU
      (Language.Haskell.Tools.AST.Ann.Ann
         Language.Haskell.Tools.AST.Representation.Names.UName
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
      (Language.Haskell.Tools.AST.Ann.Ann
         Language.Haskell.Tools.AST.Representation.Names.UName
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
      GHC.Base.String
      GHC.Base.String
  {- Unfolding: (\ @ dom ->
                 case Control.Reference.Combinators.$w&
                        @ Control.Reference.Representation.MU
                        @ Data.Functor.Identity.Identity
                        @ Control.Reference.Representation.MU
                        @ Control.Reference.Representation.MU
                        @ (Language.Haskell.Tools.AST.Ann.Ann
                             Language.Haskell.Tools.AST.Representation.Names.UName
                             dom
                             Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                        @ (Language.Haskell.Tools.AST.Ann.Ann
                             Language.Haskell.Tools.AST.Representation.Names.UName
                             dom
                             Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                        @ (Language.Haskell.Tools.AST.Ann.Ann
                             Language.Haskell.Tools.AST.Representation.Names.UNamePart
                             dom
                             Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                        @ (Language.Haskell.Tools.AST.Ann.Ann
                             Language.Haskell.Tools.AST.Representation.Names.UNamePart
                             dom
                             Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                        @ GHC.Base.String
                        @ GHC.Base.String
                        (DerivingsChecker.chkClassForData3 @ dom)
                        (DerivingsChecker.chkClassForData2
                           @ dom) of ww { (#,,,,,#) ww7 ww8 ww9 ww10 ww11 ww12 ->
                 Control.Reference.Representation.Reference
                   @ Control.Reference.Representation.MU
                   @ Data.Functor.Identity.Identity
                   @ Control.Reference.Representation.MU
                   @ Control.Reference.Representation.MU
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        Language.Haskell.Tools.AST.Representation.Names.UName
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        Language.Haskell.Tools.AST.Representation.Names.UName
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   @ GHC.Base.String
                   @ GHC.Base.String
                   ww7
                   ww8
                   ww9
                   ww10
                   ww11
                   ww12 }) -}
5dd325afc6d3d59a6e5e2b03626902dd
  chkClassForData2 ::
    Control.Reference.Representation.Reference
      Control.Reference.Representation.MU
      Data.Functor.Identity.Identity
      Control.Reference.Representation.MU
      Control.Reference.Representation.MU
      (Language.Haskell.Tools.AST.Ann.Ann
         Language.Haskell.Tools.AST.Representation.Names.UNamePart
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
      (Language.Haskell.Tools.AST.Ann.Ann
         Language.Haskell.Tools.AST.Representation.Names.UNamePart
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
      GHC.Base.String
      GHC.Base.String
  {- Unfolding: (\ @ dom ->
                 case Language.Haskell.Tools.AST.References.$wsimpleNameStr
                        @ dom
                        @ Language.Haskell.Tools.AST.Ann.SrcTemplateStage
                        @ Control.Reference.Representation.MU
                        @ Data.Functor.Identity.Identity
                        Control.Reference.TH.Records.$s$fRefMonadswr of ww { (#,,,,,#) ww7 ww8 ww9 ww10 ww11 ww12 ->
                 Control.Reference.Representation.Reference
                   @ Control.Reference.Representation.MU
                   @ Data.Functor.Identity.Identity
                   @ Control.Reference.Representation.MU
                   @ Control.Reference.Representation.MU
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        Language.Haskell.Tools.AST.Representation.Names.UNamePart
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        Language.Haskell.Tools.AST.Representation.Names.UNamePart
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   @ GHC.Base.String
                   @ GHC.Base.String
                   ww7
                   ww8
                   ww9
                   ww10
                   ww11
                   ww12 }) -}
cfe08ec19d6e8e256ce80c3dc54f0770
  chkClassForData3 ::
    Control.Reference.Representation.Reference
      Control.Reference.Representation.MU
      Data.Functor.Identity.Identity
      Control.Reference.Representation.MU
      Control.Reference.Representation.MU
      (Language.Haskell.Tools.AST.Ann.Ann
         Language.Haskell.Tools.AST.Representation.Names.UName
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
      (Language.Haskell.Tools.AST.Ann.Ann
         Language.Haskell.Tools.AST.Representation.Names.UName
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
      (Language.Haskell.Tools.AST.Ann.Ann
         Language.Haskell.Tools.AST.Representation.Names.UNamePart
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
      (Language.Haskell.Tools.AST.Ann.Ann
         Language.Haskell.Tools.AST.Representation.Names.UNamePart
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
  {- Unfolding: (\ @ dom ->
                 case Control.Reference.Combinators.$w&
                        @ Control.Reference.Representation.MU
                        @ Data.Functor.Identity.Identity
                        @ Control.Reference.Representation.MU
                        @ Control.Reference.Representation.MU
                        @ (Language.Haskell.Tools.AST.Ann.Ann
                             Language.Haskell.Tools.AST.Representation.Names.UName
                             dom
                             Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                        @ (Language.Haskell.Tools.AST.Ann.Ann
                             Language.Haskell.Tools.AST.Representation.Names.UName
                             dom
                             Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                        @ (Language.Haskell.Tools.AST.Ann.Ann
                             Language.Haskell.Tools.AST.Representation.Names.UQualifiedName
                             dom
                             Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                        @ (Language.Haskell.Tools.AST.Ann.Ann
                             Language.Haskell.Tools.AST.Representation.Names.UQualifiedName
                             dom
                             Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                        @ (Language.Haskell.Tools.AST.Ann.Ann
                             Language.Haskell.Tools.AST.Representation.Names.UNamePart
                             dom
                             Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                        @ (Language.Haskell.Tools.AST.Ann.Ann
                             Language.Haskell.Tools.AST.Representation.Names.UNamePart
                             dom
                             Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                        (DerivingsChecker.chkClassForData5 @ dom)
                        (DerivingsChecker.chkClassForData4
                           @ dom) of ww { (#,,,,,#) ww7 ww8 ww9 ww10 ww11 ww12 ->
                 Control.Reference.Representation.Reference
                   @ Control.Reference.Representation.MU
                   @ Data.Functor.Identity.Identity
                   @ Control.Reference.Representation.MU
                   @ Control.Reference.Representation.MU
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        Language.Haskell.Tools.AST.Representation.Names.UName
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        Language.Haskell.Tools.AST.Representation.Names.UName
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        Language.Haskell.Tools.AST.Representation.Names.UNamePart
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        Language.Haskell.Tools.AST.Representation.Names.UNamePart
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   ww7
                   ww8
                   ww9
                   ww10
                   ww11
                   ww12 }) -}
ccc760363ee41522284667349ca5f75b
  chkClassForData4 ::
    Control.Reference.Representation.Reference
      Control.Reference.Representation.MU
      Data.Functor.Identity.Identity
      Control.Reference.Representation.MU
      Control.Reference.Representation.MU
      (Language.Haskell.Tools.AST.Ann.Ann
         Language.Haskell.Tools.AST.Representation.Names.UQualifiedName
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
      (Language.Haskell.Tools.AST.Ann.Ann
         Language.Haskell.Tools.AST.Representation.Names.UQualifiedName
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
      (Language.Haskell.Tools.AST.Ann.Ann
         Language.Haskell.Tools.AST.Representation.Names.UNamePart
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
      (Language.Haskell.Tools.AST.Ann.Ann
         Language.Haskell.Tools.AST.Representation.Names.UNamePart
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
  {- Unfolding: (\ @ dom ->
                 case Language.Haskell.Tools.AST.References.$wunqualifiedName
                        @ dom
                        @ Language.Haskell.Tools.AST.Ann.SrcTemplateStage
                        @ Control.Reference.Representation.MU
                        @ Data.Functor.Identity.Identity
                        Control.Reference.TH.Records.$s$fRefMonadswr of ww { (#,,,,,#) ww7 ww8 ww9 ww10 ww11 ww12 ->
                 Control.Reference.Representation.Reference
                   @ Control.Reference.Representation.MU
                   @ Data.Functor.Identity.Identity
                   @ Control.Reference.Representation.MU
                   @ Control.Reference.Representation.MU
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        Language.Haskell.Tools.AST.Representation.Names.UQualifiedName
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        Language.Haskell.Tools.AST.Representation.Names.UQualifiedName
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        Language.Haskell.Tools.AST.Representation.Names.UNamePart
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        Language.Haskell.Tools.AST.Representation.Names.UNamePart
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   ww7
                   ww8
                   ww9
                   ww10
                   ww11
                   ww12 }) -}
8237d6b348589f30c452e9a111e31f7b
  chkClassForData5 ::
    Control.Reference.Representation.Reference
      Control.Reference.Representation.MU
      Data.Functor.Identity.Identity
      Control.Reference.Representation.MU
      Control.Reference.Representation.MU
      (Language.Haskell.Tools.AST.Ann.Ann
         Language.Haskell.Tools.AST.Representation.Names.UName
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
      (Language.Haskell.Tools.AST.Ann.Ann
         Language.Haskell.Tools.AST.Representation.Names.UName
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
      (Language.Haskell.Tools.AST.Ann.Ann
         Language.Haskell.Tools.AST.Representation.Names.UQualifiedName
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
      (Language.Haskell.Tools.AST.Ann.Ann
         Language.Haskell.Tools.AST.Representation.Names.UQualifiedName
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
  {- Unfolding: (\ @ dom ->
                 case Language.Haskell.Tools.AST.References.$wsimpleName
                        @ GHC.Prim.Any
                        @ GHC.Prim.Any
                        @ dom
                        @ Language.Haskell.Tools.AST.Ann.SrcTemplateStage
                        @ Control.Reference.Representation.MU
                        @ Data.Functor.Identity.Identity
                        Control.Reference.TH.Records.$s$fRefMonadswr of ww { (#,,,,,#) ww7 ww8 ww9 ww10 ww11 ww12 ->
                 Control.Reference.Representation.Reference
                   @ Control.Reference.Representation.MU
                   @ Data.Functor.Identity.Identity
                   @ Control.Reference.Representation.MU
                   @ Control.Reference.Representation.MU
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        Language.Haskell.Tools.AST.Representation.Names.UName
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        Language.Haskell.Tools.AST.Representation.Names.UName
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        Language.Haskell.Tools.AST.Representation.Names.UQualifiedName
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        Language.Haskell.Tools.AST.Representation.Names.UQualifiedName
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   ww7
                   ww8
                   ww9
                   ww10
                   ww11
                   ww12 }) -}
be301cf6da7423fb00f8bbb027890fa0
  chkClassForData6 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Cls"#) -}
aaf48e3021c458033cf1f1285eefe208
  chkClassForData7 ::
    Text.ParserCombinators.ReadP.P DerivingsChecker.DerivableClass
  {- Unfolding: ((GHC.Read.parens1
                    @ DerivingsChecker.DerivableClass
                    DerivingsChecker.$fReadDerivableClass3
                      `cast`
                    (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                              <DerivingsChecker.DerivableClass>_R))
                    Text.ParserCombinators.ReadPrec.minPrec)
                   `cast`
                 (Text.ParserCombinators.ReadP.N:ReadP[0]
                      <DerivingsChecker.DerivableClass>_R)
                   @ DerivingsChecker.DerivableClass
                   (Text.ParserCombinators.ReadP.$fApplicativeP_$cpure
                      @ DerivingsChecker.DerivableClass)) -}
dd1b1179d6bca9866cf1b301f9efcf89
  chkClassForData8 ::
    (DerivingsChecker.DerivableClass, [GHC.Types.Char])
    -> GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LS),1*U(A,1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: (DerivingsChecker.DerivableClass, [GHC.Types.Char])) ->
                 case x of wild { (,) ds1 y ->
                 case y of wild1 {
                   [] -> GHC.Types.True : ds2 ds3 -> GHC.Types.False } }) -}
669dcd6596761f2b2c3033a78dcc47fa
  chkClassForNewtype ::
    Language.Haskell.Tools.AST.SemaInfoClasses.HasNameInfo dom =>
    Language.Haskell.Tools.AST.ElementTypes.InstanceHead dom
    -> ExtMonad.ExtMonad
         dom (Language.Haskell.Tools.AST.ElementTypes.InstanceHead dom)
  {- Arity: 2,
     Strictness: <S(S(LLS(S)LLLLLLLLLL)L),U(U(A,A,U(U),A,A,A,A,A,A,A,A,A,A),C(U))><S(LS),U(U(U,U(U,U,U,U)),U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ @ dom
                   (w :: Language.Haskell.Tools.AST.SemaInfoClasses.HasNameInfo dom)
                   (w1 :: Language.Haskell.Tools.AST.ElementTypes.InstanceHead dom) ->
                 case w1 of ww { Language.Haskell.Tools.AST.Ann.Ann ww7 ww8 ->
                 DerivingsChecker.$wchkClassForNewtype @ dom w ww7 ww8 }) -}
60d687dc9320bbf7dbd87b66f101863f
  chkDataDecl ::
    Language.Haskell.Tools.AST.SemaInfoClasses.HasNameInfo dom =>
    Language.Haskell.Tools.AST.ElementTypes.Decl dom
    -> ExtMonad.ExtMonad
         dom (Language.Haskell.Tools.AST.ElementTypes.Decl dom)
  {- Arity: 2,
     Strictness: <S(S(LLS(S)LLLLLLLLLL)L),U(U(A,A,U(U),A,A,A,A,A,A,A,A,A,A),C(U))><S(LS),1*U(U,U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ @ dom
                   (w :: Language.Haskell.Tools.AST.SemaInfoClasses.HasNameInfo dom)
                   (w1 :: Language.Haskell.Tools.AST.ElementTypes.Decl dom) ->
                 case w1 of ww { Language.Haskell.Tools.AST.Ann.Ann ww7 ww8 ->
                 DerivingsChecker.$wchkDataDecl @ dom w ww7 ww8 }) -}
3f87fcc1071aedc90c798c8aee4de1a6
  chkDataDecl1 ::
    Control.Reference.Representation.Reference
      (Control.Monad.Trans.State.Lazy.StateT
         (Data.Map.Base.Map
            GHC.LanguageExtensions.Type.Extension [SrcLoc.SrcSpan])
         GhcMonad.Ghc)
      Control.Reference.Representation.MU
      Control.Reference.Representation.MU
      Control.Reference.Representation.MU
      (Language.Haskell.Tools.AST.Ann.AnnMaybeG
         Language.Haskell.Tools.AST.Representation.Decls.UDeriving
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
      (Language.Haskell.Tools.AST.Ann.AnnMaybeG
         Language.Haskell.Tools.AST.Representation.Decls.UDeriving
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
      (Language.Haskell.Tools.AST.Ann.Ann
         Language.Haskell.Tools.AST.Representation.Decls.UDeriving
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
      (Language.Haskell.Tools.AST.Ann.Ann
         Language.Haskell.Tools.AST.Representation.Decls.UDeriving
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
  {- Unfolding: (\ @ dom ->
                 case Language.Haskell.Tools.AST.Ann.$wannJust
                        @ Language.Haskell.Tools.AST.Representation.Decls.UDeriving
                        @ dom
                        @ Language.Haskell.Tools.AST.Ann.SrcTemplateStage
                        @ (Control.Monad.Trans.State.Lazy.StateT
                             (Data.Map.Base.Map
                                GHC.LanguageExtensions.Type.Extension [SrcLoc.SrcSpan])
                             GhcMonad.Ghc)
                        @ Control.Reference.Representation.MU
                        (DerivingsChecker.$s$fApplicativeStateT
                           @ (Data.Map.Base.Map
                                GHC.LanguageExtensions.Type.Extension [SrcLoc.SrcSpan]))
                        (DerivingsChecker.$s$fExceptionMonadStateT_$s$fMonadStateT
                           @ (Data.Map.Base.Map
                                GHC.LanguageExtensions.Type.Extension [SrcLoc.SrcSpan]))
                        Data.Proxy.$fApplicativeProxy
                        Data.Proxy.$fMonadPlusProxy
                        DerivingsChecker.$sannJust1
                          `cast`
                        (Sym (Control.Instances.Morph.N:Morph[0]
                                  <GHC.Base.Maybe>_N
                                  <Data.Proxy.Proxy>_N)) of ww { (#,,,,,#) ww7 ww8 ww9 ww10 ww11 ww12 ->
                 Control.Reference.Representation.Reference
                   @ (Control.Monad.Trans.State.Lazy.StateT
                        (Data.Map.Base.Map
                           GHC.LanguageExtensions.Type.Extension [SrcLoc.SrcSpan])
                        GhcMonad.Ghc)
                   @ Control.Reference.Representation.MU
                   @ Control.Reference.Representation.MU
                   @ Control.Reference.Representation.MU
                   @ (Language.Haskell.Tools.AST.Ann.AnnMaybeG
                        Language.Haskell.Tools.AST.Representation.Decls.UDeriving
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   @ (Language.Haskell.Tools.AST.Ann.AnnMaybeG
                        Language.Haskell.Tools.AST.Representation.Decls.UDeriving
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        Language.Haskell.Tools.AST.Representation.Decls.UDeriving
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   @ (Language.Haskell.Tools.AST.Ann.Ann
                        Language.Haskell.Tools.AST.Representation.Decls.UDeriving
                        dom
                        Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                   ww7
                   ww8
                   ww9
                   ww10
                   ww11
                   ww12 }) -}
9e0b866964aeccf9759ea62e8a8ccf00
  chkDataInstance ::
    Language.Haskell.Tools.AST.SemaInfoClasses.HasNameInfo dom =>
    Language.Haskell.Tools.AST.ElementTypes.Decl dom
    -> ExtMonad.ExtMonad
         dom (Language.Haskell.Tools.AST.ElementTypes.Decl dom)
  {- Arity: 2,
     Strictness: <S(S(LLS(S)LLLLLLLLLL)L),U(U(A,A,U(U),A,A,A,A,A,A,A,A,A,A),C(U))><S(LS),1*U(U(U,U(U,U,U,U)),U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ @ dom
                   (w :: Language.Haskell.Tools.AST.SemaInfoClasses.HasNameInfo dom)
                   (w1 :: Language.Haskell.Tools.AST.ElementTypes.Decl dom) ->
                 case w1 of ww { Language.Haskell.Tools.AST.Ann.Ann ww7 ww8 ->
                 DerivingsChecker.$wchkDataInstance @ dom w ww7 ww8 }) -}
d3b66e032d4dc092fb0a52d92ba17df8
  chkDerivingClause ::
    Language.Haskell.Tools.AST.SemaInfoClasses.HasNameInfo dom =>
    (Language.Haskell.Tools.AST.ElementTypes.InstanceHead dom
     -> ExtMonad.ExtMonad
          dom (Language.Haskell.Tools.AST.ElementTypes.InstanceHead dom))
    -> Language.Haskell.Tools.AST.ElementTypes.Deriving dom
    -> ExtMonad.ExtMonad
         dom (Language.Haskell.Tools.AST.ElementTypes.Deriving dom)
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(S(LLS(S)LLLLLLLLLL)L),1*U(1*U(A,A,1*U(1*U),A,A,A,A,A,A,A,A,A,A),A)><L,C(U)><S(LS),1*U(U,U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ @ dom
                   (w :: Language.Haskell.Tools.AST.SemaInfoClasses.HasNameInfo dom)
                   (w1 :: Language.Haskell.Tools.AST.ElementTypes.InstanceHead dom
                          -> ExtMonad.ExtMonad
                               dom (Language.Haskell.Tools.AST.ElementTypes.InstanceHead dom))
                   (w2 :: Language.Haskell.Tools.AST.ElementTypes.Deriving dom) ->
                 case w2 of ww { Language.Haskell.Tools.AST.Ann.Ann ww7 ww8 ->
                 DerivingsChecker.$wchkDerivingClause @ dom w w1 ww7 ww8 }) -}
4b61a1dd8af45174549972bf9da76d39
  chkDerivings ::
    Language.Haskell.Tools.AST.SemaInfoClasses.HasNameInfo dom =>
    Language.Haskell.Tools.AST.ElementTypes.Decl dom
    -> ExtMonad.ExtMonad
         dom (Language.Haskell.Tools.AST.ElementTypes.Decl dom)
  {- Arity: 2,
     Strictness: <S(S(LLS(S)LLLLLLLLLL)L),U(U(A,A,U(U),A,A,A,A,A,A,A,A,A,A),C(U))><L,1*U(U,U)>,
     Unfolding: (\ @ dom
                   ($d(%,%) :: Language.Haskell.Tools.AST.SemaInfoClasses.HasNameInfo
                                 dom)
                   (eta :: Language.Haskell.Tools.AST.ElementTypes.Decl dom) ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Language.Haskell.Tools.AST.Ann.SemanticInfo'
                             dom Language.Haskell.Tools.AST.Ann.SameInfoDefaultCls)
                        @ Language.Haskell.Tools.AST.SemaInfoTypes.NoSemanticInfo
                        (Language.Haskell.Tools.AST.Ann.$p3Domain
                           @ dom
                           (GHC.Classes.$p1(%,%)
                              @ (Language.Haskell.Tools.AST.Ann.Domain dom)
                              @ (Language.Haskell.Tools.AST.SemaInfoClasses.HasNameInfo'
                                   (Language.Haskell.Tools.AST.Ann.SemanticInfo
                                      dom
                                      Language.Haskell.Tools.AST.Representation.Names.UQualifiedName))
                              $d(%,%)))
                          `cast`
                        (Data.Type.Equality.N:~[0]
                             <*>_N <Language.Haskell.Tools.AST.Ann.SemanticInfo'
                                      dom
                                      Language.Haskell.Tools.AST.Ann.SameInfoDefaultCls>_N <Language.Haskell.Tools.AST.SemaInfoTypes.NoSemanticInfo>_N) of cobox0 { DEFAULT ->
                 let {
                   m1 :: Control.Monad.Trans.State.Lazy.StateT
                           (Data.Map.Base.Map
                              GHC.LanguageExtensions.Type.Extension [SrcLoc.SrcSpan])
                           GhcMonad.Ghc
                           (Language.Haskell.Tools.AST.ElementTypes.Decl dom)
                   = case eta of ww { Language.Haskell.Tools.AST.Ann.Ann ww7 ww8 ->
                     DerivingsChecker.$wchkDataDecl @ dom $d(%,%) ww7 ww8 }
                 } in
                 (\ (s1 :: Data.Map.Base.Map
                             GHC.LanguageExtensions.Type.Extension [SrcLoc.SrcSpan]) ->
                  let {
                    m :: GhcMonad.Ghc
                           (Language.Haskell.Tools.AST.ElementTypes.Decl dom,
                            Data.Map.Base.Map
                              GHC.LanguageExtensions.Type.Extension [SrcLoc.SrcSpan])
                    = m1
                        `cast`
                      (Control.Monad.Trans.State.Lazy.N:StateT[0]
                           <Data.Map.Base.Map
                              GHC.LanguageExtensions.Type.Extension [SrcLoc.SrcSpan]>_N
                           <GhcMonad.Ghc>_R
                           <Language.Haskell.Tools.AST.ElementTypes.Decl dom>_N)
                        s1
                  } in
                  (\ (s :: GhcMonad.Session)
                     (s2 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                   case (m `cast`
                         (GhcMonad.N:Ghc[0]
                              <(Language.Haskell.Tools.AST.ElementTypes.Decl dom,
                                Data.Map.Base.Map
                                  GHC.LanguageExtensions.Type.Extension [SrcLoc.SrcSpan])>_R)
                           s)
                          `cast`
                        (GHC.Types.N:IO[0]
                             <(Language.Haskell.Tools.AST.ElementTypes.Decl dom,
                               Data.Map.Base.Map
                                 GHC.LanguageExtensions.Type.Extension [SrcLoc.SrcSpan])>_R)
                          s2 of ds1 { (#,#) ipv ipv1 ->
                   case ipv1 of wild { (,) a1 s' ->
                   case a1 of ww { Language.Haskell.Tools.AST.Ann.Ann ww7 ww8 ->
                   case (((DerivingsChecker.$wchkGADTDataDecl @ dom $d(%,%) ww7 ww8)
                            `cast`
                          (Control.Monad.Trans.State.Lazy.N:StateT[0]
                               <Data.Map.Base.Map
                                  GHC.LanguageExtensions.Type.Extension [SrcLoc.SrcSpan]>_N
                               <GhcMonad.Ghc>_R
                               <Language.Haskell.Tools.AST.ElementTypes.Decl dom>_N)
                            s')
                           `cast`
                         (GhcMonad.N:Ghc[0]
                              <(Language.Haskell.Tools.AST.ElementTypes.Decl dom,
                                Data.Map.Base.Map
                                  GHC.LanguageExtensions.Type.Extension [SrcLoc.SrcSpan])>_R)
                           s)
                          `cast`
                        (GHC.Types.N:IO[0]
                             <(Language.Haskell.Tools.AST.ElementTypes.Decl dom,
                               Data.Map.Base.Map
                                 GHC.LanguageExtensions.Type.Extension [SrcLoc.SrcSpan])>_R)
                          ipv of ds2 { (#,#) ipv2 ipv3 ->
                   case ipv3 of wild1 { (,) a2 s'1 ->
                   case a2 of ww9 { Language.Haskell.Tools.AST.Ann.Ann ww10 ww11 ->
                   case (((DerivingsChecker.$wchkDataInstance @ dom $d(%,%) ww10 ww11)
                            `cast`
                          (Control.Monad.Trans.State.Lazy.N:StateT[0]
                               <Data.Map.Base.Map
                                  GHC.LanguageExtensions.Type.Extension [SrcLoc.SrcSpan]>_N
                               <GhcMonad.Ghc>_R
                               <Language.Haskell.Tools.AST.ElementTypes.Decl dom>_N)
                            s'1)
                           `cast`
                         (GhcMonad.N:Ghc[0]
                              <(Language.Haskell.Tools.AST.ElementTypes.Decl dom,
                                Data.Map.Base.Map
                                  GHC.LanguageExtensions.Type.Extension [SrcLoc.SrcSpan])>_R)
                           s)
                          `cast`
                        (GHC.Types.N:IO[0]
                             <(Language.Haskell.Tools.AST.ElementTypes.Decl dom,
                               Data.Map.Base.Map
                                 GHC.LanguageExtensions.Type.Extension [SrcLoc.SrcSpan])>_R)
                          ipv2 of ds3 { (#,#) ipv4 ipv5 ->
                   case ipv5 of wild2 { (,) a3 s'2 ->
                   case a3 of ww12 { Language.Haskell.Tools.AST.Ann.Ann ww13 ww14 ->
                   (((DerivingsChecker.$wchkStandaloneDeriving
                        @ dom
                        $d(%,%)
                        ww13
                        ww14)
                       `cast`
                     (Control.Monad.Trans.State.Lazy.N:StateT[0]
                          <Data.Map.Base.Map
                             GHC.LanguageExtensions.Type.Extension [SrcLoc.SrcSpan]>_N
                          <GhcMonad.Ghc>_R
                          <Language.Haskell.Tools.AST.ElementTypes.Decl dom>_N)
                       s'2)
                      `cast`
                    (GhcMonad.N:Ghc[0]
                         <(Language.Haskell.Tools.AST.ElementTypes.Decl dom,
                           Data.Map.Base.Map
                             GHC.LanguageExtensions.Type.Extension [SrcLoc.SrcSpan])>_R)
                      s)
                     `cast`
                   (GHC.Types.N:IO[0]
                        <(Language.Haskell.Tools.AST.ElementTypes.Decl dom,
                          Data.Map.Base.Map
                            GHC.LanguageExtensions.Type.Extension [SrcLoc.SrcSpan])>_R)
                     ipv4 } } } } } } } } })
                    `cast`
                  (Trans
                       (<GhcMonad.Session>_R
                        ->_R Sym (GHC.Types.N:IO[0]
                                      <(Language.Haskell.Tools.AST.ElementTypes.Decl dom,
                                        Data.Map.Base.Map
                                          GHC.LanguageExtensions.Type.Extension
                                          [SrcLoc.SrcSpan])>_R))
                       (Sym (GhcMonad.N:Ghc[0]
                                 <(Language.Haskell.Tools.AST.ElementTypes.Decl dom,
                                   Data.Map.Base.Map
                                     GHC.LanguageExtensions.Type.Extension [SrcLoc.SrcSpan])>_R))))
                   `cast`
                 (Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                           <Data.Map.Base.Map
                              GHC.LanguageExtensions.Type.Extension [SrcLoc.SrcSpan]>_N
                           <GhcMonad.Ghc>_R
                           <Language.Haskell.Tools.AST.ElementTypes.Decl dom>_N)) }) -}
5cfba0b985fc0eadbc47e0594588b079
  chkGADTDataDecl ::
    Language.Haskell.Tools.AST.SemaInfoClasses.HasNameInfo dom =>
    Language.Haskell.Tools.AST.ElementTypes.Decl dom
    -> ExtMonad.ExtMonad
         dom (Language.Haskell.Tools.AST.ElementTypes.Decl dom)
  {- Arity: 2,
     Strictness: <S(S(LLS(S)LLLLLLLLLL)L),U(U(A,A,U(U),A,A,A,A,A,A,A,A,A,A),C(U))><S(LS),1*U(U(U,U(U,U,U,U)),U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ @ dom
                   (w :: Language.Haskell.Tools.AST.SemaInfoClasses.HasNameInfo dom)
                   (w1 :: Language.Haskell.Tools.AST.ElementTypes.Decl dom) ->
                 case w1 of ww { Language.Haskell.Tools.AST.Ann.Ann ww7 ww8 ->
                 DerivingsChecker.$wchkGADTDataDecl @ dom w ww7 ww8 }) -}
440b20ee4092c15e3f82fd5f2a8d2071
  chkStandaloneDeriving ::
    Language.Haskell.Tools.AST.SemaInfoClasses.HasNameInfo dom =>
    Language.Haskell.Tools.AST.ElementTypes.Decl dom
    -> ExtMonad.ExtMonad
         dom (Language.Haskell.Tools.AST.ElementTypes.Decl dom)
  {- Arity: 2,
     Strictness: <S(S(LLS(S)LLLLLLLLLL)L),U(U(A,A,U(U),A,A,A,A,A,A,A,A,A,A),C(U))><S(LS),1*U(U(U,U(U,U,U,U)),U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ @ dom
                   (w :: Language.Haskell.Tools.AST.SemaInfoClasses.HasNameInfo dom)
                   (w1 :: Language.Haskell.Tools.AST.ElementTypes.Decl dom) ->
                 case w1 of ww { Language.Haskell.Tools.AST.Ann.Ann ww7 ww8 ->
                 DerivingsChecker.$wchkStandaloneDeriving @ dom w ww7 ww8 }) -}
50af550e6c435707bfa5e7a2e401852b
  getClassCon ::
    Language.Haskell.Tools.AST.ElementTypes.InstanceHead dom
    -> Language.Haskell.Tools.AST.ElementTypes.InstanceHead dom
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LS),1*U(U,U)>m,
     Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ @ dom
                   (w :: Language.Haskell.Tools.AST.ElementTypes.InstanceHead dom) ->
                 case w of ww { Language.Haskell.Tools.AST.Ann.Ann ww7 ww8 ->
                 case DerivingsChecker.$wgetClassCon
                        @ dom
                        ww7
                        ww8 of ww9 { (#,#) ww10 ww11 ->
                 Language.Haskell.Tools.AST.Ann.Ann
                   @ Language.Haskell.Tools.AST.Representation.Decls.UInstanceHead
                   @ dom
                   @ Language.Haskell.Tools.AST.Ann.SrcTemplateStage
                   ww10
                   ww11 } }) -}
8fa94291639e946a2d7397042fdde4da
  getSemName ::
    Language.Haskell.Tools.AST.SemaInfoClasses.HasNameInfo dom =>
    Language.Haskell.Tools.AST.ElementTypes.Name dom
    -> GHC.Base.Maybe Name.Name
  {- Arity: 2,
     Strictness: <S(S(LLS(S)LLLLLLLLLL)C(S)),U(U(A,A,U(U),A,A,A,A,A,A,A,A,A,A),C(U))><L,U>,
     Unfolding: (\ @ dom
                   ($d(%,%) :: Language.Haskell.Tools.AST.SemaInfoClasses.HasNameInfo
                                 dom)
                   (eta :: Language.Haskell.Tools.AST.ElementTypes.Name dom) ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Language.Haskell.Tools.AST.Ann.SemanticInfo'
                             dom Language.Haskell.Tools.AST.Ann.SameInfoDefaultCls)
                        @ Language.Haskell.Tools.AST.SemaInfoTypes.NoSemanticInfo
                        (Language.Haskell.Tools.AST.Ann.$p3Domain
                           @ dom
                           (GHC.Classes.$p1(%,%)
                              @ (Language.Haskell.Tools.AST.Ann.Domain dom)
                              @ (Language.Haskell.Tools.AST.SemaInfoClasses.HasNameInfo'
                                   (Language.Haskell.Tools.AST.Ann.SemanticInfo
                                      dom
                                      Language.Haskell.Tools.AST.Representation.Names.UQualifiedName))
                              $d(%,%)))
                          `cast`
                        (Data.Type.Equality.N:~[0]
                             <*>_N <Language.Haskell.Tools.AST.Ann.SemanticInfo'
                                      dom
                                      Language.Haskell.Tools.AST.Ann.SameInfoDefaultCls>_N <Language.Haskell.Tools.AST.SemaInfoTypes.NoSemanticInfo>_N) of cobox0 { DEFAULT ->
                 Language.Haskell.Tools.AST.SemaInfoClasses.$fHasNameInfo'Ann_$csemanticsName
                   @ dom
                   @ Language.Haskell.Tools.AST.Ann.SrcTemplateStage
                   $d(%,%)
                   (case DerivingsChecker.chkClassForData5
                           @ dom of wild { Control.Reference.Representation.Reference ds ds1 ds2 ds3 ds4 ds5 ->
                    (ds
                       @ (Language.Haskell.Tools.AST.Ann.Ann
                            Language.Haskell.Tools.AST.Representation.Names.UQualifiedName
                            dom
                            Language.Haskell.Tools.AST.Ann.SrcTemplateStage)
                       (Data.Functor.Identity.$fApplicativeIdentity2
                          @ (Language.Haskell.Tools.AST.Ann.Ann
                               Language.Haskell.Tools.AST.Representation.Names.UQualifiedName
                               dom
                               Language.Haskell.Tools.AST.Ann.SrcTemplateStage))
                         `cast`
                       (<Language.Haskell.Tools.AST.Ann.Ann
                           Language.Haskell.Tools.AST.Representation.Names.UQualifiedName
                           dom
                           Language.Haskell.Tools.AST.Ann.SrcTemplateStage>_R
                        ->_R Sym (Data.Functor.Identity.N:Identity[0]
                                      <Language.Haskell.Tools.AST.Ann.Ann
                                         Language.Haskell.Tools.AST.Representation.Names.UQualifiedName
                                         dom
                                         Language.Haskell.Tools.AST.Ann.SrcTemplateStage>_R))
                       eta)
                      `cast`
                    (Data.Functor.Identity.N:Identity[0]
                         <Language.Haskell.Tools.AST.Ann.Ann
                            Language.Haskell.Tools.AST.Representation.Names.UQualifiedName
                            dom
                            Language.Haskell.Tools.AST.Ann.SrcTemplateStage>_R) }) }) -}
2875275864a2de9575bfd222d5aa99b6
  isNewtype ::
    Language.Haskell.Tools.AST.SemaInfoClasses.HasNameInfo dom =>
    Language.Haskell.Tools.AST.ElementTypes.Type dom
    -> ExtMonad.ExtMonad dom GHC.Types.Bool
  {- Arity: 2,
     Strictness: <S(S(LLS(S)LLLLLLLLLL)L),U(U(A,A,U(U),A,A,A,A,A,A,A,A,A,A),C(U))><L,1*U(A,1*U)>,
     Unfolding: (\ @ dom
                   ($d(%,%) :: Language.Haskell.Tools.AST.SemaInfoClasses.HasNameInfo
                                 dom)
                   (eta :: Language.Haskell.Tools.AST.ElementTypes.Type dom) ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Language.Haskell.Tools.AST.Ann.SemanticInfo'
                             dom Language.Haskell.Tools.AST.Ann.SameInfoDefaultCls)
                        @ Language.Haskell.Tools.AST.SemaInfoTypes.NoSemanticInfo
                        (Language.Haskell.Tools.AST.Ann.$p3Domain
                           @ dom
                           (GHC.Classes.$p1(%,%)
                              @ (Language.Haskell.Tools.AST.Ann.Domain dom)
                              @ (Language.Haskell.Tools.AST.SemaInfoClasses.HasNameInfo'
                                   (Language.Haskell.Tools.AST.Ann.SemanticInfo
                                      dom
                                      Language.Haskell.Tools.AST.Representation.Names.UQualifiedName))
                              $d(%,%)))
                          `cast`
                        (Data.Type.Equality.N:~[0]
                             <*>_N <Language.Haskell.Tools.AST.Ann.SemanticInfo'
                                      dom
                                      Language.Haskell.Tools.AST.Ann.SameInfoDefaultCls>_N <Language.Haskell.Tools.AST.SemaInfoTypes.NoSemanticInfo>_N) of cobox0 { DEFAULT ->
                 let {
                   m1 :: Control.Monad.Trans.Maybe.MaybeT
                           (ExtMonad.ExtMonad dom) TyCoRep.TyThing
                   = DerivingsChecker.lookupType @ dom $d(%,%) eta
                 } in
                 (\ (s1 :: Data.Map.Base.Map
                             GHC.LanguageExtensions.Type.Extension [SrcLoc.SrcSpan]) ->
                  let {
                    m :: GhcMonad.Ghc
                           (GHC.Base.Maybe TyCoRep.TyThing,
                            Data.Map.Base.Map
                              GHC.LanguageExtensions.Type.Extension [SrcLoc.SrcSpan])
                    = m1
                        `cast`
                      (Trans
                           (Control.Monad.Trans.Maybe.N:MaybeT[0]
                                <ExtMonad.ExtMonad dom>_R <TyCoRep.TyThing>_N)
                           (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                <Data.Map.Base.Map
                                   GHC.LanguageExtensions.Type.Extension [SrcLoc.SrcSpan]>_N
                                <GhcMonad.Ghc>_R
                                <GHC.Base.Maybe TyCoRep.TyThing>_N))
                        s1
                  } in
                  (\ (s :: GhcMonad.Session)
                     (s2 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                   case (m `cast`
                         (GhcMonad.N:Ghc[0]
                              <(GHC.Base.Maybe TyCoRep.TyThing,
                                Data.Map.Base.Map
                                  GHC.LanguageExtensions.Type.Extension [SrcLoc.SrcSpan])>_R)
                           s)
                          `cast`
                        (GHC.Types.N:IO[0]
                             <(GHC.Base.Maybe TyCoRep.TyThing,
                               Data.Map.Base.Map
                                 GHC.LanguageExtensions.Type.Extension [SrcLoc.SrcSpan])>_R)
                          s2 of ds1 { (#,#) ipv ipv1 ->
                   case ipv1 of wild { (,) a1 s' ->
                   case case a1 of wild1 {
                          GHC.Base.Nothing -> GHC.Types.True
                          GHC.Base.Just x
                          -> DerivingsChecker.isNewtypeTyCon x } of vx { DEFAULT ->
                   (# ipv, (vx, s') #) } } })
                    `cast`
                  (Trans
                       (<GhcMonad.Session>_R
                        ->_R Sym (GHC.Types.N:IO[0]
                                      <(GHC.Types.Bool,
                                        Data.Map.Base.Map
                                          GHC.LanguageExtensions.Type.Extension
                                          [SrcLoc.SrcSpan])>_R))
                       (Sym (GhcMonad.N:Ghc[0]
                                 <(GHC.Types.Bool,
                                   Data.Map.Base.Map
                                     GHC.LanguageExtensions.Type.Extension [SrcLoc.SrcSpan])>_R))))
                   `cast`
                 (Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                           <Data.Map.Base.Map
                              GHC.LanguageExtensions.Type.Extension [SrcLoc.SrcSpan]>_N
                           <GhcMonad.Ghc>_R
                           <GHC.Types.Bool>_N)) }) -}
3c32cd7b402f2777d996d429f4bbbe82
  isNewtypeTyCon :: TyCoRep.TyThing -> GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: TyCoRep.TyThing) ->
                 case ds of wild {
                   DEFAULT -> GHC.Types.False
                   TyCoRep.ATyCon tycon -> TyCon.isNewTyCon tycon }) -}
077e9becdb613f8078c8a614ebd07e46
  isSynNewType ::
    Language.Haskell.Tools.AST.SemaInfoClasses.HasNameInfo dom =>
    Language.Haskell.Tools.AST.ElementTypes.Type dom
    -> ExtMonad.ExtMonad dom GHC.Types.Bool
  {- Arity: 2,
     Strictness: <S(S(LLS(S)LLLLLLLLLL)L),U(U(A,A,U(U),A,A,A,A,A,A,A,A,A,A),C(U))><L,U(1*U(A,1*U(1*U,A,A,A)),1*U)>,
     Unfolding: (\ @ dom
                   ($d(%,%) :: Language.Haskell.Tools.AST.SemaInfoClasses.HasNameInfo
                                 dom)
                   (eta :: Language.Haskell.Tools.AST.ElementTypes.Type dom) ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Language.Haskell.Tools.AST.Ann.SemanticInfo'
                             dom Language.Haskell.Tools.AST.Ann.SameInfoDefaultCls)
                        @ Language.Haskell.Tools.AST.SemaInfoTypes.NoSemanticInfo
                        (Language.Haskell.Tools.AST.Ann.$p3Domain
                           @ dom
                           (GHC.Classes.$p1(%,%)
                              @ (Language.Haskell.Tools.AST.Ann.Domain dom)
                              @ (Language.Haskell.Tools.AST.SemaInfoClasses.HasNameInfo'
                                   (Language.Haskell.Tools.AST.Ann.SemanticInfo
                                      dom
                                      Language.Haskell.Tools.AST.Representation.Names.UQualifiedName))
                              $d(%,%)))
                          `cast`
                        (Data.Type.Equality.N:~[0]
                             <*>_N <Language.Haskell.Tools.AST.Ann.SemanticInfo'
                                      dom
                                      Language.Haskell.Tools.AST.Ann.SameInfoDefaultCls>_N <Language.Haskell.Tools.AST.SemaInfoTypes.NoSemanticInfo>_N) of cobox0 { DEFAULT ->
                 let {
                   eta1 :: SrcLoc.SrcSpan
                   = case eta of wild { Language.Haskell.Tools.AST.Ann.Ann a ds ->
                     case a of wild1 { Language.Haskell.Tools.AST.Ann.NodeInfo ds1 ds2 ->
                     case ds2
                            `cast`
                          (Language.Haskell.Tools.Transform.SourceTemplate.D:R:SpanInfoSrcTemplateStage0[0]) of wild2 { Language.Haskell.Tools.Transform.SourceTemplate.SourceTemplateNode ds4 ds5 ds3 ds6 ->
                     ds4 } } }
                 } in
                 let {
                   eta2 :: [SrcLoc.SrcSpan]
                   = GHC.Types.: @ SrcLoc.SrcSpan eta1 (GHC.Types.[] @ SrcLoc.SrcSpan)
                 } in
                 let {
                   m1 :: Control.Monad.Trans.Maybe.MaybeT
                           (ExtMonad.ExtMonad dom) TyCoRep.TyThing
                   = DerivingsChecker.lookupType @ dom $d(%,%) eta
                 } in
                 (\ (s1 :: Data.Map.Base.Map
                             GHC.LanguageExtensions.Type.Extension [SrcLoc.SrcSpan]) ->
                  let {
                    m :: GhcMonad.Ghc
                           (GHC.Base.Maybe TyCoRep.TyThing,
                            Data.Map.Base.Map
                              GHC.LanguageExtensions.Type.Extension [SrcLoc.SrcSpan])
                    = m1
                        `cast`
                      (Trans
                           (Control.Monad.Trans.Maybe.N:MaybeT[0]
                                <ExtMonad.ExtMonad dom>_R <TyCoRep.TyThing>_N)
                           (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                <Data.Map.Base.Map
                                   GHC.LanguageExtensions.Type.Extension [SrcLoc.SrcSpan]>_N
                                <GhcMonad.Ghc>_R
                                <GHC.Base.Maybe TyCoRep.TyThing>_N))
                        s1
                  } in
                  (\ (s :: GhcMonad.Session)
                     (s2 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                   case (m `cast`
                         (GhcMonad.N:Ghc[0]
                              <(GHC.Base.Maybe TyCoRep.TyThing,
                                Data.Map.Base.Map
                                  GHC.LanguageExtensions.Type.Extension [SrcLoc.SrcSpan])>_R)
                           s)
                          `cast`
                        (GHC.Types.N:IO[0]
                             <(GHC.Base.Maybe TyCoRep.TyThing,
                               Data.Map.Base.Map
                                 GHC.LanguageExtensions.Type.Extension [SrcLoc.SrcSpan])>_R)
                          s2 of ds1 { (#,#) ipv ipv1 ->
                   case ipv1 of wild { (,) a1 s' ->
                   case a1 of wild1 {
                     GHC.Base.Nothing -> (# ipv, (GHC.Types.True, s') #)
                     GHC.Base.Just tycon
                     -> case tycon of wild2 {
                          DEFAULT -> (# ipv, (GHC.Types.False, s') #)
                          TyCoRep.ATyCon tycon1
                          -> case tycon1 of wild3 {
                               DEFAULT -> (# ipv, (GHC.Types.False, s') #)
                               TyCon.SynonymTyCon ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10
                               -> case DerivingsChecker.tyconFromGHCType ds10 of wild4 {
                                    GHC.Base.Nothing -> (# ipv, (GHC.Types.False, s') #)
                                    GHC.Base.Just def
                                    -> (# ipv,
                                          (case def of wild5 {
                                             DEFAULT -> GHC.Types.False
                                             TyCon.AlgTyCon ds11 ds12 ds13 ds14 ds15 ds16 ds17 ds18 ds19 ds20 ds21 ds22 ds23 ds24 ds25
                                             -> case ds22 of wild6 {
                                                  DEFAULT -> GHC.Types.False
                                                  TyCon.NewTyCon ds26 ds27 ds28 ds29
                                                  -> GHC.Types.True } },
                                           Data.Map.Strict.insertWithKey
                                             @ GHC.LanguageExtensions.Type.Extension
                                             @ [SrcLoc.SrcSpan]
                                             ExtMonad.$fOrdExtension
                                             (ExtMonad.addOccurence1
                                                @ GHC.LanguageExtensions.Type.Extension)
                                             GHC.LanguageExtensions.Type.TypeSynonymInstances
                                             eta2
                                             s') #) } } } } } })
                    `cast`
                  (Trans
                       (<GhcMonad.Session>_R
                        ->_R Sym (GHC.Types.N:IO[0]
                                      <(GHC.Types.Bool,
                                        Data.Map.Base.Map
                                          GHC.LanguageExtensions.Type.Extension
                                          [SrcLoc.SrcSpan])>_R))
                       (Sym (GhcMonad.N:Ghc[0]
                                 <(GHC.Types.Bool,
                                   Data.Map.Base.Map
                                     GHC.LanguageExtensions.Type.Extension [SrcLoc.SrcSpan])>_R))))
                   `cast`
                 (Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                           <Data.Map.Base.Map
                              GHC.LanguageExtensions.Type.Extension [SrcLoc.SrcSpan]>_N
                           <GhcMonad.Ghc>_R
                           <GHC.Types.Bool>_N)) }) -}
a50b40c802318b8c31d24ced37ed7de3
  isWiredInClass :: Name.Name -> GHC.Types.Bool
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (y :: Name.Name) ->
                 GHC.List.elem
                   @ Name.Name
                   Name.$fEqName
                   y
                   DerivingsChecker.wiredInClasses) -}
932ba2decf13836db9f29b6f8436610b
  lookupSynDef :: TyCoRep.TyThing -> GHC.Base.Maybe TyCon.TyCon
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (syn :: TyCoRep.TyThing) ->
                 case syn of wild {
                   DEFAULT -> GHC.Base.Nothing @ TyCon.TyCon
                   TyCoRep.ATyCon tycon
                   -> case tycon of wild1 {
                        DEFAULT -> GHC.Base.Nothing @ TyCon.TyCon
                        TyCon.SynonymTyCon ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9
                        -> DerivingsChecker.tyconFromGHCType ds9 } }) -}
419d5ca6fac4937f7f2cb21b4f1e058d
  lookupType ::
    Language.Haskell.Tools.AST.SemaInfoClasses.HasNameInfo dom =>
    Language.Haskell.Tools.AST.ElementTypes.Type dom
    -> Control.Monad.Trans.Maybe.MaybeT
         (ExtMonad.ExtMonad dom) TyCoRep.TyThing
  {- Arity: 2,
     Strictness: <S(S(LLS(S)LLLLLLLLLL)L),U(U(A,A,U(U),A,A,A,A,A,A,A,A,A,A),C(U))><L,1*U(A,1*U)>,
     Unfolding: (\ @ dom
                   ($d(%,%) :: Language.Haskell.Tools.AST.SemaInfoClasses.HasNameInfo
                                 dom)
                   (eta :: Language.Haskell.Tools.AST.ElementTypes.Type dom) ->
                 case GHC.Types.HEq_sc
                        @ *
                        @ *
                        @ (Language.Haskell.Tools.AST.Ann.SemanticInfo'
                             dom Language.Haskell.Tools.AST.Ann.SameInfoDefaultCls)
                        @ Language.Haskell.Tools.AST.SemaInfoTypes.NoSemanticInfo
                        (Language.Haskell.Tools.AST.Ann.$p3Domain
                           @ dom
                           (GHC.Classes.$p1(%,%)
                              @ (Language.Haskell.Tools.AST.Ann.Domain dom)
                              @ (Language.Haskell.Tools.AST.SemaInfoClasses.HasNameInfo'
                                   (Language.Haskell.Tools.AST.Ann.SemanticInfo
                                      dom
                                      Language.Haskell.Tools.AST.Representation.Names.UQualifiedName))
                              $d(%,%)))
                          `cast`
                        (Data.Type.Equality.N:~[0]
                             <*>_N <Language.Haskell.Tools.AST.Ann.SemanticInfo'
                                      dom
                                      Language.Haskell.Tools.AST.Ann.SameInfoDefaultCls>_N <Language.Haskell.Tools.AST.SemaInfoTypes.NoSemanticInfo>_N) of cobox0 { DEFAULT ->
                 let {
                   eta1 :: GHC.Base.Maybe
                             (Language.Haskell.Tools.AST.ElementTypes.Name dom)
                   = case eta of ww { Language.Haskell.Tools.AST.Ann.Ann ww7 ww8 ->
                     DerivingsChecker.$wnameFromType @ dom ww8 }
                 } in
                 (\ (s1 :: Data.Map.Base.Map
                             GHC.LanguageExtensions.Type.Extension [SrcLoc.SrcSpan])
                    (eta2 :: GhcMonad.Session)
                    (eta3 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                  case eta1 of wild {
                    GHC.Base.Nothing
                    -> (# eta3, (GHC.Base.Nothing @ TyCoRep.TyThing, s1) #)
                    GHC.Base.Just y
                    -> case DerivingsChecker.getSemName @ dom $d(%,%) y of wild1 {
                         GHC.Base.Nothing
                         -> (# eta3, (GHC.Base.Nothing @ TyCoRep.TyThing, s1) #)
                         GHC.Base.Just y1
                         -> (((GHC.lookupName
                                 @ (ExtMonad.ExtMonad dom)
                                 (DerivingsChecker.$s$fGhcMonadStateT
                                    @ (Data.Map.Base.Map
                                         GHC.LanguageExtensions.Type.Extension [SrcLoc.SrcSpan]))
                                 y1)
                                `cast`
                              (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                   <Data.Map.Base.Map
                                      GHC.LanguageExtensions.Type.Extension [SrcLoc.SrcSpan]>_N
                                   <GhcMonad.Ghc>_R
                                   <GHC.Base.Maybe TyCoRep.TyThing>_N)
                                s1)
                               `cast`
                             (GhcMonad.N:Ghc[0]
                                  <(GHC.Base.Maybe TyCoRep.TyThing,
                                    Data.Map.Base.Map
                                      GHC.LanguageExtensions.Type.Extension [SrcLoc.SrcSpan])>_R)
                               eta2)
                              `cast`
                            (GHC.Types.N:IO[0]
                                 <(GHC.Base.Maybe TyCoRep.TyThing,
                                   Data.Map.Base.Map
                                     GHC.LanguageExtensions.Type.Extension [SrcLoc.SrcSpan])>_R)
                              eta3 } })
                   `cast`
                 (Trans
                      (<Data.Map.Base.Map
                          GHC.LanguageExtensions.Type.Extension [SrcLoc.SrcSpan]>_R
                       ->_R Trans
                                (<GhcMonad.Session>_R
                                 ->_R Sym (GHC.Types.N:IO[0]
                                               <(GHC.Base.Maybe TyCoRep.TyThing,
                                                 Data.Map.Base.Map
                                                   GHC.LanguageExtensions.Type.Extension
                                                   [SrcLoc.SrcSpan])>_R))
                                (Sym (GhcMonad.N:Ghc[0]
                                          <(GHC.Base.Maybe TyCoRep.TyThing,
                                            Data.Map.Base.Map
                                              GHC.LanguageExtensions.Type.Extension
                                              [SrcLoc.SrcSpan])>_R)))
                      (Trans
                           (Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                     <Data.Map.Base.Map
                                        GHC.LanguageExtensions.Type.Extension [SrcLoc.SrcSpan]>_N
                                     <GhcMonad.Ghc>_R
                                     <GHC.Base.Maybe TyCoRep.TyThing>_N))
                           (Sym (Control.Monad.Trans.Maybe.N:MaybeT[0]
                                     <Control.Monad.Trans.State.Lazy.StateT
                                        (Data.Map.Base.Map
                                           GHC.LanguageExtensions.Type.Extension [SrcLoc.SrcSpan])
                                        GhcMonad.Ghc>_R
                                     <TyCoRep.TyThing>_N)))) }) -}
a36058c8c993d83b956d9d7b2bb8fce4
  nameFromType ::
    Language.Haskell.Tools.AST.ElementTypes.Type dom
    -> GHC.Base.Maybe
         (Language.Haskell.Tools.AST.ElementTypes.Name dom)
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LS),1*U(A,1*U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ @ dom (w :: Language.Haskell.Tools.AST.ElementTypes.Type dom) ->
                 case w of ww { Language.Haskell.Tools.AST.Ann.Ann ww7 ww8 ->
                 DerivingsChecker.$wnameFromType @ dom ww8 }) -}
a1847423bcbdc3c39d2cdf50eee60e24
  notGNTD :: [Name.Name]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Name.Name
                   PrelNames.dataClassName
                   DerivingsChecker.notGNTD1) -}
39ebfd9ed8d873bcb267d8635a06c336
  notGNTD1 :: [Name.Name]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Name.Name
                   PrelNames.typeableClassName
                   DerivingsChecker.notGNTD2) -}
ac05ba520441e8f24f610a066e8c1df5
  notGNTD2 :: [Name.Name]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Name.Name
                   PrelNames.showClassName
                   DerivingsChecker.notGNTD3) -}
a7b5f2223aef7340760530325589005a
  notGNTD3 :: [Name.Name]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Name.Name
                   PrelNames.readClassName
                   (GHC.Types.[] @ Name.Name)) -}
46e18b06155b73a90d7f47ea69f61303
  readClass ::
    GHC.Base.String -> GHC.Base.Maybe DerivingsChecker.DerivableClass
  {- Arity: 1, Strictness: <L,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: [GHC.Types.Char]) ->
                 case DerivingsChecker.readClass1 x of wild {
                   [] -> GHC.Base.Nothing @ DerivingsChecker.DerivableClass
                   : a1 ds1
                   -> GHC.Base.Just
                        @ DerivingsChecker.DerivableClass
                        (Data.Tuple.fst
                           @ DerivingsChecker.DerivableClass
                           @ [GHC.Types.Char]
                           a1) }) -}
9a9f404bb242f53eb251090ddf7dd086
  readClass1 ::
    [GHC.Types.Char]
    -> [(DerivingsChecker.DerivableClass, [GHC.Types.Char])]
  {- Arity: 1, Strictness: <L,1*U>,
     Unfolding: (\ (x :: [GHC.Types.Char]) ->
                 GHC.List.filter
                   @ (DerivingsChecker.DerivableClass, [GHC.Types.Char])
                   DerivingsChecker.chkClassForData8
                   (Text.ParserCombinators.ReadP.run
                      @ DerivingsChecker.DerivableClass
                      DerivingsChecker.chkClassForData7
                      (GHC.Base.++
                         @ GHC.Types.Char
                         DerivingsChecker.chkClassForData6
                         x))) -}
860e19bd19169061139e4e5ccd454d99
  readIntoExt ::
    GHC.Base.String
    -> GHC.Base.Maybe GHC.LanguageExtensions.Type.Extension
  {- Arity: 1, Strictness: <L,1*U>,
     Unfolding: (\ (s :: GHC.Base.String) ->
                 case DerivingsChecker.readClass1 s of wild {
                   [] -> GHC.Base.Nothing @ GHC.LanguageExtensions.Type.Extension
                   : a1 ds1
                   -> case a1 of wild1 { (,) x ds2 ->
                      case x of wild2 {
                        DEFAULT -> GHC.Base.Nothing @ GHC.LanguageExtensions.Type.Extension
                        DerivingsChecker.ClsData -> DerivingsChecker.readIntoExt5
                        DerivingsChecker.ClsTypeable -> DerivingsChecker.readIntoExt5
                        DerivingsChecker.ClsGeneric -> DerivingsChecker.readIntoExt4
                        DerivingsChecker.ClsFunctor -> DerivingsChecker.readIntoExt3
                        DerivingsChecker.ClsFoldable -> DerivingsChecker.readIntoExt2
                        DerivingsChecker.ClsTraversable
                        -> DerivingsChecker.readIntoExt1 } } }) -}
fb0432689acb9ea4866a2f621e702dcf
  readIntoExt1 ::
    GHC.Base.Maybe GHC.LanguageExtensions.Type.Extension
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Base.Just
                   @ GHC.LanguageExtensions.Type.Extension
                   GHC.LanguageExtensions.Type.DeriveTraversable) -}
cdb8b4a6e0982d725e3956a6aea647e7
  readIntoExt2 ::
    GHC.Base.Maybe GHC.LanguageExtensions.Type.Extension
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Base.Just
                   @ GHC.LanguageExtensions.Type.Extension
                   GHC.LanguageExtensions.Type.DeriveFoldable) -}
276d7400aa77219ea12f8e0b3402bac0
  readIntoExt3 ::
    GHC.Base.Maybe GHC.LanguageExtensions.Type.Extension
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Base.Just
                   @ GHC.LanguageExtensions.Type.Extension
                   GHC.LanguageExtensions.Type.DeriveFunctor) -}
86ae34d5f912cde62613b323e2472cf8
  readIntoExt4 ::
    GHC.Base.Maybe GHC.LanguageExtensions.Type.Extension
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Base.Just
                   @ GHC.LanguageExtensions.Type.Extension
                   GHC.LanguageExtensions.Type.DeriveGeneric) -}
58bbfd3906cab95e83fafb0c1301d49d
  readIntoExt5 ::
    GHC.Base.Maybe GHC.LanguageExtensions.Type.Extension
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Base.Just
                   @ GHC.LanguageExtensions.Type.Extension
                   GHC.LanguageExtensions.Type.DeriveDataTypeable) -}
d4df81f4d9dc1a070a5f3322d7984ee7
  rightmostType ::
    Language.Haskell.Tools.AST.ElementTypes.InstanceHead dom
    -> Language.Haskell.Tools.AST.ElementTypes.Type dom
  {- Arity: 1, Strictness: <S(LS),1*U(U,U)>,
     Unfolding: InlineRule (1, True, False)
                (\ @ dom
                   (ihead :: Language.Haskell.Tools.AST.ElementTypes.InstanceHead
                               dom) ->
                 case DerivingsChecker.skipParens
                        @ dom
                        ihead of wild { Language.Haskell.Tools.AST.Ann.Ann ds ds1 ->
                 case ds1 of wild1 {
                   DEFAULT -> DerivingsChecker.rightmostType1 @ dom GHC.Prim.void#
                   Language.Haskell.Tools.AST.Representation.Decls.UInstanceHeadApp fun arg
                   -> arg } }) -}
ed1cd1dbd956fb3cf6c536f42db8f4d1
  rightmostType1 ::
    GHC.Prim.Void# -> Language.Haskell.Tools.AST.ElementTypes.Type dom
  {- Arity: 1, Strictness: <B,A>x, Inline: INLINE[0],
     Unfolding: InlineRule (1, True, True)
                (\ @ dom (w :: GHC.Prim.Void#)[OneShot] ->
                 DerivingsChecker.$wlvl @ dom GHC.Prim.void#) -}
96a615baa7cf57aec1735d44aa1ea855
  separateByKeyword ::
    Language.Haskell.Tools.AST.SemaInfoClasses.HasNameInfo dom =>
    Language.Haskell.Tools.AST.ElementTypes.DataOrNewtypeKeyword dom
    -> Language.Haskell.Tools.AST.Ann.AnnMaybeG
         Language.Haskell.Tools.AST.Representation.Decls.UDeriving
         dom
         Language.Haskell.Tools.AST.Ann.SrcTemplateStage
    -> ExtMonad.ExtMonad dom ()
  {- Arity: 3,
     Strictness: <S(S(LLS(S)LLLLLLLLLL)L),U(U(A,A,U(U),A,A,A,A,A,A,A,A,A,A),C(U))><S(LS),1*U(A,1*U)><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ @ dom
                   (w :: Language.Haskell.Tools.AST.SemaInfoClasses.HasNameInfo dom)
                   (w1 :: Language.Haskell.Tools.AST.ElementTypes.DataOrNewtypeKeyword
                            dom)
                   (w2 :: Language.Haskell.Tools.AST.Ann.AnnMaybeG
                            Language.Haskell.Tools.AST.Representation.Decls.UDeriving
                            dom
                            Language.Haskell.Tools.AST.Ann.SrcTemplateStage) ->
                 case w1 of ww { Language.Haskell.Tools.AST.Ann.Ann ww7 ww8 ->
                 DerivingsChecker.$wseparateByKeyword @ dom w ww8 w2 }) -}
a35fde45e5587c1d5aca6af5e767f6d7
  skipParens ::
    Language.Haskell.Tools.AST.ElementTypes.InstanceHead dom
    -> Language.Haskell.Tools.AST.ElementTypes.InstanceHead dom
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LS),1*U(U,U)>m,
     Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ @ dom
                   (w :: Language.Haskell.Tools.AST.ElementTypes.InstanceHead dom) ->
                 case w of ww { Language.Haskell.Tools.AST.Ann.Ann ww7 ww8 ->
                 case DerivingsChecker.$wskipParens
                        @ dom
                        ww7
                        ww8 of ww9 { (#,#) ww10 ww11 ->
                 Language.Haskell.Tools.AST.Ann.Ann
                   @ Language.Haskell.Tools.AST.Representation.Decls.UInstanceHead
                   @ dom
                   @ Language.Haskell.Tools.AST.Ann.SrcTemplateStage
                   ww10
                   ww11 } }) -}
fd8efaadfca8de6d781d380844163415
  tyconFromGHCType :: TyCoRep.Type -> GHC.Base.Maybe TyCon.TyCon
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U> -}
274491c5cce7620eb5e75bbdc5879636
  tyconFromTyThing :: TyCoRep.TyThing -> GHC.Base.Maybe TyCon.TyCon
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: TyCoRep.TyThing) ->
                 case ds of wild {
                   DEFAULT -> GHC.Base.Nothing @ TyCon.TyCon
                   TyCoRep.ATyCon tycon -> GHC.Base.Just @ TyCon.TyCon tycon }) -}
9ee208d94cd6b13a40941b37a818386b
  whichExtension ::
    DerivingsChecker.DerivableClass
    -> GHC.Base.Maybe GHC.LanguageExtensions.Type.Extension
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: DerivingsChecker.DerivableClass) ->
                 case ds of wild {
                   DEFAULT -> GHC.Base.Nothing @ GHC.LanguageExtensions.Type.Extension
                   DerivingsChecker.ClsData -> DerivingsChecker.readIntoExt5
                   DerivingsChecker.ClsTypeable -> DerivingsChecker.readIntoExt5
                   DerivingsChecker.ClsGeneric -> DerivingsChecker.readIntoExt4
                   DerivingsChecker.ClsFunctor -> DerivingsChecker.readIntoExt3
                   DerivingsChecker.ClsFoldable -> DerivingsChecker.readIntoExt2
                   DerivingsChecker.ClsTraversable
                   -> DerivingsChecker.readIntoExt1 }) -}
03ff142183c79a80acbee9e8f1374330
  wiredInClasses :: [Name.Name]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Name.Name
                   PrelNames.eqClassName
                   DerivingsChecker.wiredInClasses1) -}
1ccc4f697d95f0595940ccafdf2b6cf4
  wiredInClasses1 :: [Name.Name]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Name.Name
                   PrelNames.ordClassName
                   DerivingsChecker.wiredInClasses2) -}
b9e14f1d96236b79b73dfb00084be075
  wiredInClasses10 :: [Name.Name]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Name.Name
                   PrelNames.functorClassName
                   DerivingsChecker.wiredInClasses11) -}
9b69b940c6c1466f7b08aca7b22fdc00
  wiredInClasses11 :: [Name.Name]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Name.Name
                   PrelNames.foldableClassName
                   DerivingsChecker.wiredInClasses12) -}
6eadb2d15de3315a461e1323dc02b2ef
  wiredInClasses12 :: [Name.Name]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Name.Name
                   PrelNames.traversableClassName
                   (GHC.Types.[] @ Name.Name)) -}
983b634526820562c0e399cdb909897e
  wiredInClasses2 :: [Name.Name]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Name.Name
                   PrelNames.ixClassName
                   DerivingsChecker.wiredInClasses3) -}
9e6cd02e4fa2979b7fc730027300436f
  wiredInClasses3 :: [Name.Name]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Name.Name
                   PrelNames.showClassName
                   DerivingsChecker.wiredInClasses4) -}
041082b0e92cb885f7e3f40f2c0e1b8a
  wiredInClasses4 :: [Name.Name]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Name.Name
                   PrelNames.readClassName
                   DerivingsChecker.wiredInClasses5) -}
df20ccc2e41907bdd172b7056097f68a
  wiredInClasses5 :: [Name.Name]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Name.Name
                   PrelNames.enumClassName
                   DerivingsChecker.wiredInClasses6) -}
beaac550ee3219a2a9a2376583cc8eec
  wiredInClasses6 :: [Name.Name]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Name.Name
                   PrelNames.boundedClassName
                   DerivingsChecker.wiredInClasses7) -}
8edeba2a9548fa25abd23489997633de
  wiredInClasses7 :: [Name.Name]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Name.Name
                   PrelNames.dataClassName
                   DerivingsChecker.wiredInClasses8) -}
53cb4440cde1ac813c25d438d3f4ff76
  wiredInClasses8 :: [Name.Name]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Name.Name
                   PrelNames.typeableClassName
                   DerivingsChecker.wiredInClasses9) -}
eb29b5f48116ed1268f560c483adbd44
  wiredInClasses9 :: [Name.Name]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Name.Name
                   PrelNames.genClassName
                   DerivingsChecker.wiredInClasses10) -}
instance GHC.Classes.Eq [DerivingsChecker.DerivableClass]
  = DerivingsChecker.$fEqDerivableClass
instance GHC.Classes.Ord [DerivingsChecker.DerivableClass]
  = DerivingsChecker.$fOrdDerivableClass
instance GHC.Read.Read [DerivingsChecker.DerivableClass]
  = DerivingsChecker.$fReadDerivableClass
instance GHC.Show.Show [DerivingsChecker.DerivableClass]
  = DerivingsChecker.$fShowDerivableClass
"SPEC/DerivingsChecker $fApplicativeStateT @ Ghc _" [ALWAYS] forall @ s
                                                                    ($dMonad :: GHC.Base.Monad
                                                                                  GhcMonad.Ghc)
                                                                    ($dFunctor :: GHC.Base.Functor
                                                                                    GhcMonad.Ghc)
  Control.Monad.Trans.State.Lazy.$fApplicativeStateT @ GhcMonad.Ghc
                                                     @ s
                                                     $dFunctor
                                                     $dMonad
  = DerivingsChecker.$s$fApplicativeStateT @ s
"SPEC/DerivingsChecker $fApplicativeStateT_$c<*> @ Ghc _" [ALWAYS] forall @ s
                                                                          ($dMonad :: GHC.Base.Monad
                                                                                        GhcMonad.Ghc)
                                                                          ($dFunctor :: GHC.Base.Functor
                                                                                          GhcMonad.Ghc)
  Control.Monad.Trans.State.Lazy.$fApplicativeStateT_$c<*> @ GhcMonad.Ghc
                                                           @ s
                                                           $dFunctor
                                                           $dMonad
  = DerivingsChecker.$s$fApplicativeStateT_$s$fApplicativeStateT_$c<*>
      @ s
"SPEC/DerivingsChecker $fApplicativeStateT_$cp1Applicative @ Ghc _" [ALWAYS] forall @ s
                                                                                    ($dMonad :: GHC.Base.Monad
                                                                                                  GhcMonad.Ghc)
                                                                                    ($dFunctor :: GHC.Base.Functor
                                                                                                    GhcMonad.Ghc)
  Control.Monad.Trans.State.Lazy.$fApplicativeStateT_$cp1Applicative @ GhcMonad.Ghc
                                                                     @ s
                                                                     $dFunctor
                                                                     $dMonad
  = DerivingsChecker.$s$fApplicativeStateT_$s$fApplicativeStateT_$cp1Applicative
      @ s
"SPEC/DerivingsChecker $fApplicativeStateT_$cpure @ Ghc _" [ALWAYS] forall @ s
                                                                           ($dMonad :: GHC.Base.Monad
                                                                                         GhcMonad.Ghc)
                                                                           ($dFunctor :: GHC.Base.Functor
                                                                                           GhcMonad.Ghc)
  Control.Monad.Trans.State.Lazy.$fApplicativeStateT_$cpure @ GhcMonad.Ghc
                                                            @ s
                                                            $dFunctor
                                                            $dMonad
  = DerivingsChecker.$s$fApplicativeStateT_$s$fApplicativeStateT_$cpure
      @ s
"SPEC/DerivingsChecker $fExceptionMonadStateT @ Ghc _" [ALWAYS] forall @ s
                                                                       ($dExceptionMonad :: Exception.ExceptionMonad
                                                                                              GhcMonad.Ghc)
  Language.Haskell.Tools.Refactor.RefactorBase.$fExceptionMonadStateT @ GhcMonad.Ghc
                                                                      @ s
                                                                      $dExceptionMonad
  = DerivingsChecker.$s$fExceptionMonadStateT @ s
"SPEC/DerivingsChecker $fFunctorStateT @ Ghc _" [ALWAYS] forall @ s
                                                                ($dFunctor :: GHC.Base.Functor
                                                                                GhcMonad.Ghc)
  Control.Monad.Trans.State.Lazy.$fFunctorStateT @ GhcMonad.Ghc
                                                 @ s
                                                 $dFunctor
  = DerivingsChecker.$s$fApplicativeStateT_$s$fFunctorStateT @ s
"SPEC/DerivingsChecker $fFunctorStateT_$cfmap @ Ghc _" [ALWAYS] forall @ s
                                                                       ($dFunctor :: GHC.Base.Functor
                                                                                       GhcMonad.Ghc)
  Control.Monad.Trans.State.Lazy.$fFunctorStateT_$cfmap @ GhcMonad.Ghc
                                                        @ s
                                                        $dFunctor
  = DerivingsChecker.$s$fApplicativeStateT_$s$fFunctorStateT_$cfmap
      @ s
"SPEC/DerivingsChecker $fGhcMonadStateT @ Ghc _" [ALWAYS] forall @ s
                                                                 ($dGhcMonad :: GhcMonad.GhcMonad
                                                                                  GhcMonad.Ghc)
  Language.Haskell.Tools.Refactor.RefactorBase.$fGhcMonadStateT @ GhcMonad.Ghc
                                                                @ s
                                                                $dGhcMonad
  = DerivingsChecker.$s$fGhcMonadStateT @ s
"SPEC/DerivingsChecker $fGhcMonadStateT_$cp2GhcMonad @ Ghc _" [ALWAYS] forall @ s
                                                                              ($dGhcMonad :: GhcMonad.GhcMonad
                                                                                               GhcMonad.Ghc)
  Language.Haskell.Tools.Refactor.RefactorBase.$fGhcMonadStateT_$cp2GhcMonad @ GhcMonad.Ghc
                                                                             @ s
                                                                             $dGhcMonad
  = DerivingsChecker.$s$fExceptionMonadStateT_$s$fGhcMonadStateT_$cp2GhcMonad
      @ s
"SPEC/DerivingsChecker $fGhcMonadStateT_$cp3GhcMonad @ Ghc _" [ALWAYS] forall @ s
                                                                              ($dGhcMonad :: GhcMonad.GhcMonad
                                                                                               GhcMonad.Ghc)
  Language.Haskell.Tools.Refactor.RefactorBase.$fGhcMonadStateT_$cp3GhcMonad @ GhcMonad.Ghc
                                                                             @ s
                                                                             $dGhcMonad
  = DerivingsChecker.$s$fGhcMonadStateT_$s$fGhcMonadStateT_$cp3GhcMonad
      @ s
"SPEC/DerivingsChecker $fMonadIOStateT @ Ghc _" [ALWAYS] forall @ s
                                                                ($dMonadIO :: Control.Monad.IO.Class.MonadIO
                                                                                GhcMonad.Ghc)
  Control.Monad.Trans.State.Lazy.$fMonadIOStateT @ GhcMonad.Ghc
                                                 @ s
                                                 $dMonadIO
  = DerivingsChecker.$s$fExceptionMonadStateT_$s$fMonadIOStateT @ s
"SPEC/DerivingsChecker $fMonadIOStateT_$cp1MonadIO @ Ghc _" [ALWAYS] forall @ s
                                                                            ($dMonadIO :: Control.Monad.IO.Class.MonadIO
                                                                                            GhcMonad.Ghc)
  Control.Monad.Trans.State.Lazy.$fMonadIOStateT_$cp1MonadIO @ GhcMonad.Ghc
                                                             @ s
                                                             $dMonadIO
  = DerivingsChecker.$s$fExceptionMonadStateT_$s$fMonadIOStateT_$cp1MonadIO
      @ s
"SPEC/DerivingsChecker $fMonadStateT @ Ghc _" [ALWAYS] forall @ s
                                                              ($dMonad :: GHC.Base.Monad
                                                                            GhcMonad.Ghc)
  Control.Monad.Trans.State.Lazy.$fMonadStateT @ GhcMonad.Ghc
                                               @ s
                                               $dMonad
  = DerivingsChecker.$s$fExceptionMonadStateT_$s$fMonadStateT @ s
"SPEC/DerivingsChecker $fMonadStateT_$c>> @ Ghc _" [ALWAYS] forall @ s
                                                                   ($dMonad :: GHC.Base.Monad
                                                                                 GhcMonad.Ghc)
  Control.Monad.Trans.State.Lazy.$fMonadStateT_$c>> @ GhcMonad.Ghc
                                                    @ s
                                                    $dMonad
  = DerivingsChecker.$s$fExceptionMonadStateT_$s$fMonadStateT_$c>>
      @ s
"SPEC/DerivingsChecker $fMonadStateT_$c>>= @ Ghc _" [ALWAYS] forall @ s
                                                                    ($dMonad :: GHC.Base.Monad
                                                                                  GhcMonad.Ghc)
  Control.Monad.Trans.State.Lazy.$fMonadStateT_$c>>= @ GhcMonad.Ghc
                                                     @ s
                                                     $dMonad
  = DerivingsChecker.$s$fExceptionMonadStateT_$s$fMonadStateT_$c>>=
      @ s
"SPEC/DerivingsChecker $fMonadStateT_$cfail @ Ghc _" [ALWAYS] forall @ s
                                                                     ($dMonad :: GHC.Base.Monad
                                                                                   GhcMonad.Ghc)
  Control.Monad.Trans.State.Lazy.$fMonadStateT_$cfail @ GhcMonad.Ghc
                                                      @ s
                                                      $dMonad
  = DerivingsChecker.$s$fExceptionMonadStateT_$s$fMonadStateT_$cfail
      @ s
"SPEC/DerivingsChecker $fMonadStateT_$cp1Monad @ Ghc _" [ALWAYS] forall @ s
                                                                        ($dMonad :: GHC.Base.Monad
                                                                                      GhcMonad.Ghc)
  Control.Monad.Trans.State.Lazy.$fMonadStateT_$cp1Monad @ GhcMonad.Ghc
                                                         @ s
                                                         $dMonad
  = DerivingsChecker.$s$fExceptionMonadStateT_$s$fMonadStateT_$cp1Monad
      @ s
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

