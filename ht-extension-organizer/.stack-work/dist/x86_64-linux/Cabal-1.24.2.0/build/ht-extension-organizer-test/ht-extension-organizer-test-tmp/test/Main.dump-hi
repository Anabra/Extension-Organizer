
==================== FINAL INTERFACE ====================
2017-09-04 20:04:06.733034 UTC

interface main@main:Main 8002
  interface hash: 80d0cac58a15454c3e4ba45c20c7b598
  ABI hash: 6ec5236fec9d33898a7bff9a87e2769c
  export-list hash: 6b783e9eea531602f1cf162b24aaf5b9
  orphan hash: 6be3e5723c6abe8a639883f5174d2a85
  flag hash: ccf1cf6c4a769ce9a094061d778c3c71
  sig of: Nothing
  used TH splices: False
  where
exports:
  Main.derivingsModules
  Main.derivingsRoot
  Main.derivingsTest
  Main.flexibleInstancesModules
  Main.flexibleInstancesRoot
  Main.flexibleInstancesTest
  Main.getExtAnnotsFrom
  Main.getExtensionsFrom
  Main.loadModuleAST
  Main.main
  Main.mkAssertion
  Main.mkModulePath
  Main.mkTest
  Main.mkTests
  Main.recordWildCardsModules
  Main.recordWildCardsRoot
  Main.recordWildCardsTest
  Main.simplifyExtMap
  Main.spanToLine
  Main.testRoot
  Main.Line
  Main.ModuleName
  Main.SimpleMap
  Main.TestName
  Main.TestSuite
module dependencies:
package dependencies: ansi-terminal-0.6.3.1@ansi-terminal-0.6.3.1-3RTqikoQf47ajVD9m8zgB
                      ansi-wl-pprint-0.6.7.3@ansi-wl-pprint-0.6.7.3-A79v826bgPr574HtaZPPqC
                      array-0.5.1.1@array-0.5.1.1
                      async-2.1.1.1@async-2.1.1.1-8yywY4inVGRLJSCg60gBXj base-4.9.1.0
                      binary-0.8.3.0@binary-0.8.3.0
                      bytestring-0.10.8.1@bytestring-0.10.8.1
                      clock-0.7.2@clock-0.7.2-8dRNleB7rysIZAOReuhpZA
                      containers-0.5.7.1@containers-0.5.7.1
                      deepseq-1.4.2.0@deepseq-1.4.2.0 directory-1.3.0.0@directory-1.3.0.0
                      either-4.4.1.1@either-4.4.1.1-6PiwKYkn4v6B4KO2R2Fu1b
                      filepath-1.4.1.1@filepath-1.4.1.1 ghc-8.0.2
                      ghc-boot-8.0.2@ghc-boot-8.0.2 ghc-boot-th-8.0.2@ghc-boot-th-8.0.2
                      ghc-paths-0.1.0.9@ghc-paths-0.1.0.9-AhaDlGOsRAepox069XzG
                      ghc-prim-0.5.0.0 ghci-8.0.2@ghci-8.0.2
                      hashable-1.2.6.1@hashable-1.2.6.1-2ZLNuHq395GGIHwEHuqZol
                      haskell-tools-ast-0.8.1.0@haskell-tools-ast-0.8.1.0-I9ZMaCkuuwT3FoQkwMjyW6
                      haskell-tools-backend-ghc-0.8.1.0@haskell-tools-backend-ghc-0.8.1.0-DqHnbK8OPi6CBD5cIPITWq
                      haskell-tools-prettyprint-0.8.1.0@haskell-tools-prettyprint-0.8.1.0-F9iWkGq5ppnLH6whHm0DlC
                      haskell-tools-refactor-0.8.1.0@haskell-tools-refactor-0.8.1.0-AF8Q4cA8mAnLNwu5t0Icw8
                      haskell-tools-rewrite-0.8.1.0@haskell-tools-rewrite-0.8.1.0-85A6q9dMQgvKEKG9I8fxVU
                      hoopl-3.10.2.1@hoopl-3.10.2.1 hpc-0.6.0.3@hpc-0.6.0.3
                      ht-extension-organizer-0.1.0.0@ht-extension-organizer-0.1.0.0-1NgBbe619AH4JExLErEUCI
                      instance-control-0.1.1.1@instance-control-0.1.1.1-1defRS82vAAEmZKRhe67aa
                      integer-gmp-1.0.0.1 mtl-2.2.1@mtl-2.2.1-BLKBelFsPB3BoFeSWSOYj6
                      optparse-applicative-0.13.2.0@optparse-applicative-0.13.2.0-EqIYOWOFTvf23sT5QTYn9U
                      parsec-3.1.11@parsec-3.1.11-1aqiimsgq2dCv7eoaC8WuX
                      pretty-1.1.3.3@pretty-1.1.3.3 process-1.4.3.0@process-1.4.3.0
                      references-0.3.2.2@references-0.3.2.2-y362bKYomIKNQKMTfOWVo
                      regex-base-0.93.2@regex-base-0.93.2-AYjYAsBidAc8f5XNm9b2Aa
                      regex-tdfa-1.2.2@regex-tdfa-1.2.2-CuFri6F1SLwFkkN6cPEwX5
                      safe-0.3.15@safe-0.3.15-2Yd45VWFfdcKqKyispOifY
                      split-0.2.3.2@split-0.2.3.2-CJl40zTyCIV16Pr60nb7CT
                      stm-2.4.4.1@stm-2.4.4.1-JQn4hNPyYjP5m9AcbI88Ve
                      syb-0.7@syb-0.7-4OKdCpwGutyB1rNRmoa0ya
                      tagged-0.8.5@tagged-0.8.5-1mTloBSoUxv8dqUr8XBGBt
                      tasty-0.11.2.5@tasty-0.11.2.5-9CHOVHcPPPS3fAInAil5pA
                      tasty-hunit-0.9.2@tasty-hunit-0.9.2-8EqOuwvMdXe8awhjhOAP3F
                      template-haskell-2.11.1.0
                      text-1.2.2.2@text-1.2.2.2-9UQZjEJZQFSGMffj1Z5g00
                      time-1.6.0.1@time-1.6.0.1 transformers-0.5.2.0@transformers-0.5.2.0
                      unbounded-delays-0.1.1.0@unbounded-delays-0.1.1.0-8pvOsE97fmS7WDAN5vUbqX
                      uniplate-1.6.12@uniplate-1.6.12-4PyZX21trQJ5lfk0CDvC7U
                      unix-2.7.2.1@unix-2.7.2.1
                      unordered-containers-0.2.8.0@unordered-containers-0.2.8.0-Bp9XgxjuHxcI4tFehVMDGC
orphans: base-4.9.1.0:GHC.Base base-4.9.1.0:GHC.Float
         binary-0.8.3.0@binary-0.8.3.0:Data.Binary.Generic
         bytestring-0.10.8.1@bytestring-0.10.8.1:Data.ByteString.Builder
         ghc-8.0.2:BlockId ghc-8.0.2:DsMonad ghc-8.0.2:LoadIface
         ghc-8.0.2:PPC.Ppr ghc-8.0.2:PprCmm ghc-8.0.2:PprCmmDecl
         ghc-8.0.2:PprCmmExpr ghc-8.0.2:PprCore ghc-8.0.2:SPARC.Ppr
         ghc-8.0.2:TcEnv ghc-8.0.2:TcRnMonad ghc-8.0.2:X86.Ppr
         ghc-boot-8.0.2@ghc-boot-8.0.2:GHC.LanguageExtensions
         ghci-8.0.2@ghci-8.0.2:GHCi.Message
         ghci-8.0.2@ghci-8.0.2:GHCi.TH.Binary
         hashable-1.2.6.1@hashable-1.2.6.1-2ZLNuHq395GGIHwEHuqZol:Data.Hashable.Generic
         haskell-tools-ast-0.8.1.0@haskell-tools-ast-0.8.1.0-I9ZMaCkuuwT3FoQkwMjyW6:Language.Haskell.Tools.AST.Instances.Data
         haskell-tools-ast-0.8.1.0@haskell-tools-ast-0.8.1.0-I9ZMaCkuuwT3FoQkwMjyW6:Language.Haskell.Tools.AST.Instances.Eq
         haskell-tools-ast-0.8.1.0@haskell-tools-ast-0.8.1.0-I9ZMaCkuuwT3FoQkwMjyW6:Language.Haskell.Tools.AST.Instances.Generic
         haskell-tools-ast-0.8.1.0@haskell-tools-ast-0.8.1.0-I9ZMaCkuuwT3FoQkwMjyW6:Language.Haskell.Tools.AST.Instances.SemanticTraversal
         haskell-tools-ast-0.8.1.0@haskell-tools-ast-0.8.1.0-I9ZMaCkuuwT3FoQkwMjyW6:Language.Haskell.Tools.AST.Instances.Show
         haskell-tools-ast-0.8.1.0@haskell-tools-ast-0.8.1.0-I9ZMaCkuuwT3FoQkwMjyW6:Language.Haskell.Tools.AST.Instances.SourceInfoTraversal
         haskell-tools-ast-0.8.1.0@haskell-tools-ast-0.8.1.0-I9ZMaCkuuwT3FoQkwMjyW6:Language.Haskell.Tools.AST.SemaInfoTypes
         haskell-tools-ast-0.8.1.0@haskell-tools-ast-0.8.1.0-I9ZMaCkuuwT3FoQkwMjyW6:Language.Haskell.Tools.AST.Utils.GHCInstances
         haskell-tools-backend-ghc-0.8.1.0@haskell-tools-backend-ghc-0.8.1.0-DqHnbK8OPi6CBD5cIPITWq:Language.Haskell.Tools.AST.FromGHC.Utils
         haskell-tools-prettyprint-0.8.1.0@haskell-tools-prettyprint-0.8.1.0-F9iWkGq5ppnLH6whHm0DlC:Language.Haskell.Tools.Transform.RangeTemplate
         haskell-tools-prettyprint-0.8.1.0@haskell-tools-prettyprint-0.8.1.0-F9iWkGq5ppnLH6whHm0DlC:Language.Haskell.Tools.Transform.SourceTemplate
         haskell-tools-prettyprint-0.8.1.0@haskell-tools-prettyprint-0.8.1.0-F9iWkGq5ppnLH6whHm0DlC:Language.Haskell.Tools.Transform.SourceTemplateHelpers
         haskell-tools-refactor-0.8.1.0@haskell-tools-refactor-0.8.1.0-AF8Q4cA8mAnLNwu5t0Icw8:Language.Haskell.Tools.Refactor.RefactorBase
         ht-extension-organizer-0.1.0.0@ht-extension-organizer-0.1.0.0-1NgBbe619AH4JExLErEUCI:AnnotationParser
         ht-extension-organizer-0.1.0.0@ht-extension-organizer-0.1.0.0-1NgBbe619AH4JExLErEUCI:ExtMonad
         references-0.3.2.2@references-0.3.2.2-y362bKYomIKNQKMTfOWVo:Control.Reference.Predefined.Containers.Tree
         references-0.3.2.2@references-0.3.2.2-y362bKYomIKNQKMTfOWVo:Control.Reference.TH.Records
         regex-base-0.93.2@regex-base-0.93.2-AYjYAsBidAc8f5XNm9b2Aa:Text.Regex.Base.Context
         regex-tdfa-1.2.2@regex-tdfa-1.2.2-CuFri6F1SLwFkkN6cPEwX5:Text.Regex.TDFA.ByteString
         regex-tdfa-1.2.2@regex-tdfa-1.2.2-CuFri6F1SLwFkkN6cPEwX5:Text.Regex.TDFA.ByteString.Lazy
         regex-tdfa-1.2.2@regex-tdfa-1.2.2-CuFri6F1SLwFkkN6cPEwX5:Text.Regex.TDFA.Sequence
         regex-tdfa-1.2.2@regex-tdfa-1.2.2-CuFri6F1SLwFkkN6cPEwX5:Text.Regex.TDFA.String
         stm-2.4.4.1@stm-2.4.4.1-JQn4hNPyYjP5m9AcbI88Ve:Control.Monad.STM
         syb-0.7@syb-0.7-4OKdCpwGutyB1rNRmoa0ya:Data.Generics.Instances
         text-1.2.2.2@text-1.2.2.2-9UQZjEJZQFSGMffj1Z5g00:Data.Text
         text-1.2.2.2@text-1.2.2.2-9UQZjEJZQFSGMffj1Z5g00:Data.Text.Lazy
         text-1.2.2.2@text-1.2.2.2-9UQZjEJZQFSGMffj1Z5g00:Data.Text.Show
         time-1.6.0.1@time-1.6.0.1:Data.Time.Calendar.Gregorian
         time-1.6.0.1@time-1.6.0.1:Data.Time.Format.Parse
         time-1.6.0.1@time-1.6.0.1:Data.Time.LocalTime.LocalTime
         transformers-0.5.2.0@transformers-0.5.2.0:Control.Monad.Trans.Error
         uniplate-1.6.12@uniplate-1.6.12-4PyZX21trQJ5lfk0CDvC7U:Data.Generics.Uniplate.Data
family instance modules: base-4.9.1.0:Control.Applicative
                         base-4.9.1.0:Data.Complex base-4.9.1.0:Data.Either
                         base-4.9.1.0:Data.Functor.Compose base-4.9.1.0:Data.Functor.Const
                         base-4.9.1.0:Data.Functor.Identity
                         base-4.9.1.0:Data.Functor.Product base-4.9.1.0:Data.Functor.Sum
                         base-4.9.1.0:Data.List.NonEmpty base-4.9.1.0:Data.Monoid
                         base-4.9.1.0:Data.Semigroup base-4.9.1.0:Data.Type.Equality
                         base-4.9.1.0:Data.Version base-4.9.1.0:Data.Void
                         base-4.9.1.0:GHC.Exts base-4.9.1.0:GHC.Generics
                         base-4.9.1.0:GHC.IO.Exception base-4.9.1.0:GHC.TypeLits
                         clock-0.7.2@clock-0.7.2-8dRNleB7rysIZAOReuhpZA:System.Clock
                         containers-0.5.7.1@containers-0.5.7.1:Data.IntMap.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.IntSet.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.Map.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.Sequence
                         containers-0.5.7.1@containers-0.5.7.1:Data.Set.Base
                         ghc-8.0.2:PlaceHolder ghc-8.0.2:TrieMap
                         ghc-boot-th-8.0.2@ghc-boot-th-8.0.2:GHC.LanguageExtensions.Type
                         ghci-8.0.2@ghci-8.0.2:GHCi.FFI ghci-8.0.2@ghci-8.0.2:GHCi.Message
                         ghci-8.0.2@ghci-8.0.2:GHCi.ResolvedBCO
                         ghci-8.0.2@ghci-8.0.2:SizedSeq
                         haskell-tools-ast-0.8.1.0@haskell-tools-ast-0.8.1.0-I9ZMaCkuuwT3FoQkwMjyW6:Language.Haskell.Tools.AST.Ann
                         haskell-tools-ast-0.8.1.0@haskell-tools-ast-0.8.1.0-I9ZMaCkuuwT3FoQkwMjyW6:Language.Haskell.Tools.AST.Instances.Generic
                         haskell-tools-prettyprint-0.8.1.0@haskell-tools-prettyprint-0.8.1.0-F9iWkGq5ppnLH6whHm0DlC:Language.Haskell.Tools.Transform.RangeTemplate
                         haskell-tools-prettyprint-0.8.1.0@haskell-tools-prettyprint-0.8.1.0-F9iWkGq5ppnLH6whHm0DlC:Language.Haskell.Tools.Transform.SourceTemplate
                         hoopl-3.10.2.1@hoopl-3.10.2.1:Compiler.Hoopl.Block
                         hoopl-3.10.2.1@hoopl-3.10.2.1:Compiler.Hoopl.Dataflow
                         hoopl-3.10.2.1@hoopl-3.10.2.1:Compiler.Hoopl.Fuel
                         hoopl-3.10.2.1@hoopl-3.10.2.1:Compiler.Hoopl.Label
                         hoopl-3.10.2.1@hoopl-3.10.2.1:Compiler.Hoopl.Unique
                         pretty-1.1.3.3@pretty-1.1.3.3:Text.PrettyPrint.Annotated.HughesPJ
                         pretty-1.1.3.3@pretty-1.1.3.3:Text.PrettyPrint.HughesPJ
                         references-0.3.2.2@references-0.3.2.2-y362bKYomIKNQKMTfOWVo:Control.Reference.Predefined.Containers
                         references-0.3.2.2@references-0.3.2.2-y362bKYomIKNQKMTfOWVo:Control.Reference.Predefined.Containers.Tree
                         references-0.3.2.2@references-0.3.2.2-y362bKYomIKNQKMTfOWVo:Control.Reference.Types
                         tagged-0.8.5@tagged-0.8.5-1mTloBSoUxv8dqUr8XBGBt:Data.Tagged
                         tasty-0.11.2.5@tasty-0.11.2.5-9CHOVHcPPPS3fAInAil5pA:Test.Tasty.Core
                         template-haskell-2.11.1.0:Language.Haskell.TH.Syntax
                         text-1.2.2.2@text-1.2.2.2-9UQZjEJZQFSGMffj1Z5g00:Data.Text
                         text-1.2.2.2@text-1.2.2.2-9UQZjEJZQFSGMffj1Z5g00:Data.Text.Lazy
                         unordered-containers-0.2.8.0@unordered-containers-0.2.8.0-Bp9XgxjuHxcI4tFehVMDGC:Data.HashMap.Base
                         unordered-containers-0.2.8.0@unordered-containers-0.2.8.0-Bp9XgxjuHxcI4tFehVMDGC:Data.HashSet
import  -/  base-4.9.1.0:Data.List 07ae2acca6538aa0800bd0a993ac6ac1
import  -/  base-4.9.1.0:Data.OldList 27987919d8da2f92e3f472ca81f730f8
import  -/  base-4.9.1.0:Debug.Trace a9edf3aec504f4423d8ba829ab373a25
import  -/  base-4.9.1.0:GHC.Base c4231c43c07e46080a26bf94094c7aa1
import  -/  base-4.9.1.0:GHC.IO eb504c57b397cf133849f8586f15dafb
import  -/  base-4.9.1.0:Prelude 22dd289b8469a8fa8dc81cab7b237771
import  -/  base-4.9.1.0:System.IO e4a64a8e3dce8616da54f0ee7104f7db
import  -/  containers-0.5.7.1@containers-0.5.7.1:Data.Map.Base d432f6875983131473086af8cb290590
import  -/  containers-0.5.7.1@containers-0.5.7.1:Data.Map.Strict 9d0c0962e53270a0a3fb5cb63723a381
import  -/  directory-1.3.0.0@directory-1.3.0.0:System.Directory 8ff5ebd6a93811413df021d2be39a158
import  -/  filepath-1.4.1.1@filepath-1.4.1.1:System.FilePath a3d1d13ac7dd86705b5dfaf58a5c0b9e
import  -/  filepath-1.4.1.1@filepath-1.4.1.1:System.FilePath.Posix 6a5e3ee74184fdcc5da09a368e7c40f5
import  -/  ghc-8.0.2:GHC 2331686350095b94008a49ce7901eaa2
import  -/  ghc-8.0.2:GhcMonad fe90acc3f77ca6bdb0686328a3d31d0f
import  -/  ghc-8.0.2:SrcLoc ae8e460a2b77026f9c6a4d6cdcc5d57e
import  -/  ghc-boot-th-8.0.2@ghc-boot-th-8.0.2:GHC.LanguageExtensions.Type 92441ea50916fa3940e20fae60f255d7
import  -/  ghc-paths-0.1.0.9@ghc-paths-0.1.0.9-AhaDlGOsRAepox069XzG:GHC.Paths ac6199ac2bb4710a40d06f6d09a37983
import  -/  ghc-prim-0.5.0.0:GHC.Types 89f8de4f08018c9177c98d979eae0e45
import  -/  haskell-tools-prettyprint-0.8.1.0@haskell-tools-prettyprint-0.8.1.0-F9iWkGq5ppnLH6whHm0DlC:Language.Haskell.Tools.PrettyPrint da7dea6ac299ef1620d7160216fb97b0
import  -/  haskell-tools-refactor-0.8.1.0@haskell-tools-refactor-0.8.1.0-AF8Q4cA8mAnLNwu5t0Icw8:Language.Haskell.Tools.Refactor 84acc8d60e278de91351468f26f90e1c
import  -/  haskell-tools-refactor-0.8.1.0@haskell-tools-refactor-0.8.1.0-AF8Q4cA8mAnLNwu5t0Icw8:Language.Haskell.Tools.Refactor.Prepare 06c995907993af4dca8399eaa224a412
import  -/  ht-extension-organizer-0.1.0.0@ht-extension-organizer-0.1.0.0-1NgBbe619AH4JExLErEUCI:AnnotationParser 997a9807aaa4027ae152123ee93e5201
import  -/  ht-extension-organizer-0.1.0.0@ht-extension-organizer-0.1.0.0-1NgBbe619AH4JExLErEUCI:ExtensionOrganizer c3ec034cfdf8d27e82e026d5f40fc218
import  -/  tasty-0.11.2.5@tasty-0.11.2.5-9CHOVHcPPPS3fAInAil5pA:Test.Tasty 195b167c336d9a923d4ad9d6346408fc
import  -/  tasty-0.11.2.5@tasty-0.11.2.5-9CHOVHcPPPS3fAInAil5pA:Test.Tasty.Core bde15bbc7e9c0cafa410fe290b644921
import  -/  tasty-hunit-0.9.2@tasty-hunit-0.9.2-8EqOuwvMdXe8awhjhOAP3F:Test.Tasty.HUnit b76eb16e90e5f18943bf39820b0509f5
import  -/  tasty-hunit-0.9.2@tasty-hunit-0.9.2-8EqOuwvMdXe8awhjhOAP3F:Test.Tasty.HUnit.Orig 6fb02f2910bbd54df12313c60e73becc
fdab416ae3db9b946ce06f4df3af3519
  $s$fEqMap ::
    GHC.Classes.Eq
      (Data.Map.Base.Map
         GHC.LanguageExtensions.Type.Extension [Main.Line])
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (Data.Map.Base.Map
                       GHC.LanguageExtensions.Type.Extension [Main.Line])
                  (Data.Map.Base.$fEqMap_$c==
                     @ GHC.LanguageExtensions.Type.Extension
                     @ [Main.Line]
                     GHC.LanguageExtensions.Type.$fEqExtension
                     Main.$s$fEqMap1)
                  Main.$s$fEqMap_$s$fEqMap_$c/= -}
1ef5807f154a6efb94620287a07da277
  $s$fEqMap1 :: GHC.Classes.Eq [Main.Line]
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                GHC.Classes.$fEq[]_$s$fEq[] -}
3b0942045ebcff32ff7152d010936ee4
  $s$fEqMap_$s$fEqMap_$c/= ::
    Data.Map.Base.Map GHC.LanguageExtensions.Type.Extension [Main.Line]
    -> Data.Map.Base.Map
         GHC.LanguageExtensions.Type.Extension [Main.Line]
    -> GHC.Types.Bool
  {- Arity: 2, Strictness: <L,U><L,U>, Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (x :: Data.Map.Base.Map
                           GHC.LanguageExtensions.Type.Extension [Main.Line])
                   (y :: Data.Map.Base.Map
                           GHC.LanguageExtensions.Type.Extension [Main.Line]) ->
                 GHC.Classes.not
                   (Data.Map.Base.$fEqMap_$c==
                      @ GHC.LanguageExtensions.Type.Extension
                      @ [Main.Line]
                      GHC.LanguageExtensions.Type.$fEqExtension
                      Main.$s$fEqMap1
                      x
                      y)) -}
cea23d1f02af85f62cd3f18544ab0da7
  $s$fShowMap ::
    GHC.Show.Show
      (Data.Map.Base.Map
         GHC.LanguageExtensions.Type.Extension [Main.Line])
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (Data.Map.Base.Map
                       GHC.LanguageExtensions.Type.Extension [Main.Line])
                  (Data.Map.Base.$fShowMap_$cshowsPrec
                     @ GHC.LanguageExtensions.Type.Extension
                     @ [Main.Line]
                     GHC.LanguageExtensions.Type.$fShowExtension
                     Main.$s$fShowMap1)
                  (Data.Map.Base.$fShowMap_$cshow
                     @ GHC.LanguageExtensions.Type.Extension
                     @ [Main.Line]
                     GHC.LanguageExtensions.Type.$fShowExtension
                     Main.$s$fShowMap1)
                  Main.$s$fShowMap_$s$fShowMap_$cshowList -}
5d06d4a5cb2c21c16bc4c4559837bbfb
  $s$fShowMap1 :: GHC.Show.Show [Main.Line]
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                GHC.Show.$fShow[]_$s$fShow[] -}
88914014831edac92a3f2e7fc84f1811
  $s$fShowMap_$s$fShowMap_$cshowList ::
    [Data.Map.Base.Map
       GHC.LanguageExtensions.Type.Extension [Main.Line]]
    -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [Data.Map.Base.Map
                             GHC.LanguageExtensions.Type.Extension [Main.Line]])
                   (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ (Data.Map.Base.Map
                        GHC.LanguageExtensions.Type.Extension [Main.Line])
                   (Data.Map.Base.$fShowMap_$cshowsPrec
                      @ GHC.LanguageExtensions.Type.Extension
                      @ [Main.Line]
                      GHC.LanguageExtensions.Type.$fShowExtension
                      Main.$s$fShowMap1
                      GHC.Show.shows22)
                   ls
                   s) -}
0b048e0faf41695d8586f8fd87a74eb0
  $ssort :: [Main.Line] -> [Main.Line]
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (eta :: [Main.Line]) ->
                 Data.OldList.sortBy @ Main.Line GHC.Classes.compareInt eta) -}
d6831ef04cb9301b090dfae6f7bb7ec7
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module Main.$trModule2 Main.$trModule1) -}
847d9fc3b8e6f0b424199f36b4999bb2
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Main"#) -}
24ef6042833e75ffd7aa98b83ecca98d
  $trModule2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "main"#) -}
7af240b6ee374790e44b8cf722c97ed2
  type Line = GHC.Types.Int
69cefa388be49c50c1f4617683a15f66
  type ModuleName = GHC.Base.String
5a8054876d8c7fb6c39bf0a93c13752b
  type SimpleMap =
    Data.Map.Base.Map GHC.LanguageExtensions.Type.Extension [Main.Line]
ac591eb9759f42c740e55bbe2c0673aa
  type TestName = GHC.Base.String
d4fa7246dc264273548aacc630b4bc5a
  type TestSuite = (GHC.IO.FilePath, [Main.TestName])
3f84020ec2a0b8875f9a9d44ba2baf50
  derivingsModules :: [[GHC.Types.Char]]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ [GHC.Types.Char]
                   Main.derivingsModules15
                   Main.derivingsModules1) -}
0611ef993a7bb9f07203c3fc06865f98
  derivingsModules1 :: [[GHC.Types.Char]]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ [GHC.Types.Char]
                   Main.derivingsModules14
                   Main.derivingsModules2) -}
6d46cff66186ef7bf217cc2656386b53
  derivingsModules10 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   "StandaloneNewtypeAny"#) -}
26f2c0fd8e02f7c539ce7549774ae317
  derivingsModules11 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "StandaloneNewtype"#) -}
a4c0cf304eb35cdb44af4bf3bc61dfe0
  derivingsModules12 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   "StandaloneDataSynonyms"#) -}
d26241c5f9a481a63b26707bfb117510
  derivingsModules13 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "StandaloneData"#) -}
ee090f3d0090ad53b9919cb46097a264
  derivingsModules14 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "NewtypeDeriving"#) -}
003f9e810ac9ac9663ab64b9b50e6561
  derivingsModules15 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "DataDeriving"#) -}
485409fba839a802ac8848c144100aab
  derivingsModules2 :: [[GHC.Types.Char]]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ [GHC.Types.Char]
                   Main.derivingsModules13
                   Main.derivingsModules3) -}
0db26de3446188b68848842e933e037c
  derivingsModules3 :: [[GHC.Types.Char]]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ [GHC.Types.Char]
                   Main.derivingsModules12
                   Main.derivingsModules4) -}
a1d4b993f5feb7297ec56940b2e7436e
  derivingsModules4 :: [[GHC.Types.Char]]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ [GHC.Types.Char]
                   Main.derivingsModules11
                   Main.derivingsModules5) -}
de0e6e23418584f972dd06d34966299d
  derivingsModules5 :: [[GHC.Types.Char]]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ [GHC.Types.Char]
                   Main.derivingsModules10
                   Main.derivingsModules6) -}
4df9732a87d7ac15c709118ccce0f121
  derivingsModules6 :: [[GHC.Types.Char]]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ [GHC.Types.Char]
                   Main.derivingsModules9
                   Main.derivingsModules7) -}
55ba89fc172cc4d91488ebf8f8f63aaa
  derivingsModules7 :: [[GHC.Types.Char]]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ [GHC.Types.Char]
                   Main.derivingsModules8
                   (GHC.Types.[] @ [GHC.Types.Char])) -}
e8c4d4c50354874505d139c2b8d54efe
  derivingsModules8 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   "StandaloneNewtypeSynonymsAny"#) -}
8b653b4213c87fedec73b1b282bd86d4
  derivingsModules9 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   "StandaloneNewtypeSynonyms"#) -}
334b56ff81c178da87581a441b34ee8b
  derivingsRoot :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "DerivingsTest"#) -}
d1e100a04fb71c52d5e8d37a29bbf10d
  derivingsTest :: ([GHC.Types.Char], [[GHC.Types.Char]])
  {- Strictness: m,
     Unfolding: ((Main.derivingsRoot, Main.derivingsModules)) -}
bf87dc1635ba7bda83618f1af1400b41
  flexibleInstancesModules :: [[GHC.Types.Char]]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ [GHC.Types.Char]
                   Main.flexibleInstancesModules15
                   Main.flexibleInstancesModules1) -}
d3215dd7e32124d426192478f041b735
  flexibleInstancesModules1 :: [[GHC.Types.Char]]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ [GHC.Types.Char]
                   Main.flexibleInstancesModules14
                   Main.flexibleInstancesModules2) -}
9954869703edac6da41816d18acb185e
  flexibleInstancesModules10 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "SameTyVars"#) -}
90cac01525c455dd26d4ae5c7b66a7b9
  flexibleInstancesModules11 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "NoFlexInst"#) -}
9b7cb9804457d5020df60bc02b1c20e0
  flexibleInstancesModules12 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "NestedWiredInType"#) -}
82e65cff40ab101f2eab17864a4409ce
  flexibleInstancesModules13 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "NestedUnitTyCon"#) -}
e9b0ddd587d4ad904fff13be511189a9
  flexibleInstancesModules14 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "NestedTypes"#) -}
0ba3d25c9adf591e9ed0f58c7a06110f
  flexibleInstancesModules15 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Combined"#) -}
933135a459359b0ee96a3111c218d3f6
  flexibleInstancesModules2 :: [[GHC.Types.Char]]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ [GHC.Types.Char]
                   Main.flexibleInstancesModules13
                   Main.flexibleInstancesModules3) -}
193f8133144e3a0b98fbbb097240bcec
  flexibleInstancesModules3 :: [[GHC.Types.Char]]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ [GHC.Types.Char]
                   Main.flexibleInstancesModules12
                   Main.flexibleInstancesModules4) -}
94277ea6a249152b6259b15979194a5d
  flexibleInstancesModules4 :: [[GHC.Types.Char]]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ [GHC.Types.Char]
                   Main.flexibleInstancesModules11
                   Main.flexibleInstancesModules5) -}
cfbb68f88a6193899badd3647ff07734
  flexibleInstancesModules5 :: [[GHC.Types.Char]]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ [GHC.Types.Char]
                   Main.flexibleInstancesModules10
                   Main.flexibleInstancesModules6) -}
c4507ddb7d2f6ceb6b8e88da5e44269b
  flexibleInstancesModules6 :: [[GHC.Types.Char]]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ [GHC.Types.Char]
                   Main.flexibleInstancesModules9
                   Main.flexibleInstancesModules7) -}
59c7f0f9540283d4590c7165afc69d76
  flexibleInstancesModules7 :: [[GHC.Types.Char]]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ [GHC.Types.Char]
                   Main.flexibleInstancesModules8
                   (GHC.Types.[] @ [GHC.Types.Char])) -}
87d25acb5b7d9c32320ed13194708c82
  flexibleInstancesModules8 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   "TopLevelWiredInType"#) -}
defc543cbde6b685757ec57e79a60d94
  flexibleInstancesModules9 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "TopLevelTyVar"#) -}
35b5cff588c8bf14612c642a05384559
  flexibleInstancesRoot :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   "FlexibleInstancesTest"#) -}
fa2dcf154d31bfeaa13c55f596f4d33d
  flexibleInstancesTest :: ([GHC.Types.Char], [[GHC.Types.Char]])
  {- Strictness: m,
     Unfolding: ((Main.flexibleInstancesRoot,
                  Main.flexibleInstancesModules)) -}
444a72adf3e576a69057d70803f874e4
  getExtAnnotsFrom ::
    GHC.IO.FilePath -> Main.ModuleName -> GHC.Types.IO Main.SimpleMap
  {- Arity: 3, Strictness: <L,1*U><L,U><S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.getExtAnnotsFrom1
                  `cast`
                (<GHC.IO.FilePath>_R
                 ->_R <Main.ModuleName>_R
                 ->_R Sym (GHC.Types.N:IO[0] <Main.SimpleMap>_R)) -}
7153549a7a3092828e1221958d3d46ba
  getExtAnnotsFrom1 ::
    GHC.IO.FilePath
    -> Main.ModuleName
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, Main.SimpleMap #)
  {- Arity: 3, Strictness: <L,1*U><L,U><S,U>,
     Unfolding: (\ (dir :: GHC.IO.FilePath)
                   (moduleName :: Main.ModuleName)
                   (s :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case GHC.IO.Handle.FD.openFile1
                        (System.FilePath.Posix.addExtension
                           (Main.mkModulePath dir moduleName)
                           Main.getExtAnnotsFrom2)
                        GHC.IO.IOMode.ReadMode
                        s of ds1 { (#,#) ipv ipv1 ->
                 case GHC.IO.Handle.Text.hGetContents1
                        ipv1
                        ipv of ds2 { (#,#) ipv2 ipv3 ->
                 case AnnotationParser.getExtensionAnnotations_go
                        AnnotationParser.getExtensionAnnotations1
                        (Data.OldList.lines ipv3)
                        (Data.Map.Base.Tip
                           @ GHC.LanguageExtensions.Type.Extension
                           @ [GHC.Types.Int]) of vx { DEFAULT ->
                 (# ipv2, vx #) } } }) -}
08ae4287bb474c4f8b4c21f6f12f3057
  getExtAnnotsFrom2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# ".hs"#) -}
f0ef793805e2146a7870297e88344e16
  getExtensionsFrom ::
    GHC.IO.FilePath -> Main.ModuleName -> GHC.Types.IO Main.SimpleMap
  {- Arity: 3, Strictness: <L,U><L,U><S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.getExtensionsFrom1
                  `cast`
                (<GHC.IO.FilePath>_R
                 ->_R <Main.ModuleName>_R
                 ->_R Sym (GHC.Types.N:IO[0] <Main.SimpleMap>_R)) -}
e21291706dc8ba5de686b0a95323d9e5
  getExtensionsFrom1 ::
    GHC.IO.FilePath
    -> Main.ModuleName
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, Main.SimpleMap #)
  {- Arity: 3, Strictness: <L,U><L,U><S,U>,
     Unfolding: (\ (dir :: GHC.IO.FilePath)
                   (moduleName :: Main.ModuleName)
                   (eta :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 GHC.runGhc1
                   @ Main.SimpleMap
                   Main.getExtensionsFrom6
                   (let {
                      m :: GhcMonad.Ghc
                             Language.Haskell.Tools.Refactor.Prepare.TypedModule
                      = Main.loadModuleAST dir moduleName
                    } in
                    (\ (s :: GhcMonad.Session)
                       (s1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                     case (m `cast`
                           (GhcMonad.N:Ghc[0]
                                <Language.Haskell.Tools.Refactor.Prepare.TypedModule>_R)
                             s)
                            `cast`
                          (GHC.Types.N:IO[0]
                               <Language.Haskell.Tools.Refactor.Prepare.TypedModule>_R)
                            s1 of ds1 { (#,#) ipv ipv1 ->
                     case (((ExtensionOrganizer.collectExtensions6
                               (case Main.getExtensionsFrom3 of wild { SrcLoc.RealSrcSpan' ds dt dt1 dt2 dt3 ->
                                case ipv1 of wild1 { Language.Haskell.Tools.AST.Ann.Ann a ds2 ->
                                case a of wild2 { Language.Haskell.Tools.AST.Ann.NodeInfo ds3 ds4 ->
                                case ds4
                                       `cast`
                                     (Language.Haskell.Tools.Transform.SourceTemplate.D:R:SpanInfoSrcTemplateStage0[0]) of wild3 { Language.Haskell.Tools.Transform.SourceTemplate.SourceTemplateNode ds5 ds6 ds7 ds8 ->
                                case ds5 of wild4 {
                                  SrcLoc.RealSrcSpan s2
                                  -> case s2 of wild5 { SrcLoc.RealSrcSpan' ds9 dt4 dt5 dt6 dt7 ->
                                     SrcLoc.RealSrcSpan' ds9 dt dt1 dt2 dt3 }
                                  SrcLoc.UnhelpfulSpan str
                                  -> case Language.Haskell.Tools.Refactor.Prepare.correctRefactorSpan1
                                     ret_ty SrcLoc.RealSrcSpan
                                     of {} } } } } })
                               ipv1)
                              `cast`
                            (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                 <Data.Map.Base.Map
                                    GHC.LanguageExtensions.Type.Extension [SrcLoc.SrcSpan]>_N
                                 <GhcMonad.Ghc>_R
                                 <Language.Haskell.Tools.AST.Ann.Ann
                                    Language.Haskell.Tools.AST.Representation.Modules.UModule
                                    Language.Haskell.Tools.AST.Ann.IdDom
                                    Language.Haskell.Tools.AST.Ann.SrcTemplateStage>_N)
                              (Data.Map.Base.Tip
                                 @ GHC.LanguageExtensions.Type.Extension
                                 @ [SrcLoc.SrcSpan]))
                             `cast`
                           (GhcMonad.N:Ghc[0]
                                <(Language.Haskell.Tools.AST.Ann.Ann
                                    Language.Haskell.Tools.AST.Representation.Modules.UModule
                                    Language.Haskell.Tools.AST.Ann.IdDom
                                    Language.Haskell.Tools.AST.Ann.SrcTemplateStage,
                                  Data.Map.Base.Map
                                    GHC.LanguageExtensions.Type.Extension [SrcLoc.SrcSpan])>_R)
                             s)
                            `cast`
                          (GHC.Types.N:IO[0]
                               <(Language.Haskell.Tools.AST.Ann.Ann
                                   Language.Haskell.Tools.AST.Representation.Modules.UModule
                                   Language.Haskell.Tools.AST.Ann.IdDom
                                   Language.Haskell.Tools.AST.Ann.SrcTemplateStage,
                                 Data.Map.Base.Map
                                   GHC.LanguageExtensions.Type.Extension [SrcLoc.SrcSpan])>_R)
                            ipv of ds2 { (#,#) ipv2 ipv3 ->
                     case (((ExtensionOrganizer.collectExtensions1
                               (case ipv3 of wild { (,) a3 s' -> a3 }))
                              `cast`
                            (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                 <Data.Map.Base.Map
                                    GHC.LanguageExtensions.Type.Extension [SrcLoc.SrcSpan]>_N
                                 <GhcMonad.Ghc>_R
                                 <Language.Haskell.Tools.AST.Ann.Ann
                                    Language.Haskell.Tools.AST.Representation.Modules.UModule
                                    Language.Haskell.Tools.AST.Ann.IdDom
                                    Language.Haskell.Tools.AST.Ann.SrcTemplateStage>_N)
                              (case ipv3 of wild { (,) a3 s' -> s' }))
                             `cast`
                           (GhcMonad.N:Ghc[0]
                                <(Language.Haskell.Tools.AST.Ann.Ann
                                    Language.Haskell.Tools.AST.Representation.Modules.UModule
                                    Language.Haskell.Tools.AST.Ann.IdDom
                                    Language.Haskell.Tools.AST.Ann.SrcTemplateStage,
                                  Data.Map.Base.Map
                                    GHC.LanguageExtensions.Type.Extension [SrcLoc.SrcSpan])>_R)
                             s)
                            `cast`
                          (GHC.Types.N:IO[0]
                               <(Language.Haskell.Tools.AST.Ann.Ann
                                   Language.Haskell.Tools.AST.Representation.Modules.UModule
                                   Language.Haskell.Tools.AST.Ann.IdDom
                                   Language.Haskell.Tools.AST.Ann.SrcTemplateStage,
                                 Data.Map.Base.Map
                                   GHC.LanguageExtensions.Type.Extension [SrcLoc.SrcSpan])>_R)
                            ipv2 of ds3 { (#,#) ipv4 ipv5 ->
                     case ipv5 of wild { (,) ds exts ->
                     case Data.Map.Strict.map
                            @ [SrcLoc.SrcSpan]
                            @ [Main.Line]
                            @ GHC.LanguageExtensions.Type.Extension
                            Main.getExtensionsFrom2
                            exts of vx { DEFAULT ->
                     (# ipv4, vx #) } } } } })
                      `cast`
                    (Trans
                         (<GhcMonad.Session>_R
                          ->_R Sym (GHC.Types.N:IO[0] <Main.SimpleMap>_R))
                         (Sym (GhcMonad.N:Ghc[0] <Main.SimpleMap>_R))))
                   eta) -}
460e0c4b4b975622d323fe2c35b1152c
  getExtensionsFrom2 :: [SrcLoc.SrcSpan] -> [Main.Line]
  {- Arity: 1,
     Unfolding: (GHC.Base.map
                   @ SrcLoc.SrcSpan
                   @ Main.Line
                   Main.spanToLine) -}
13362a324b9a49e1c30fc5167f80cd3c
  getExtensionsFrom3 :: SrcLoc.RealSrcSpan
  {- Unfolding: (case Main.getExtensionsFrom5
                        Main.getExtensionsFrom4 of wild {
                   [] -> Language.Haskell.Tools.Refactor.Prepare.readSrcSpan1
                   : one ds
                   -> case ds of wild1 {
                        []
                        -> case Language.Haskell.Tools.Refactor.Prepare.$wreadSrcLoc
                                  one of ww { (#,,#) ww1 ww2 ww3 ->
                           case ww1 of dt2 { FastString.FastString ipv ipv1 ipv2 ipv3 ipv4 ipv5 ipv6 ->
                           SrcLoc.RealSrcSpan' dt2 ww2 ww3 ww2 ww3 } }
                        : to ds1
                        -> case ds1 of wild2 {
                             []
                             -> case Language.Haskell.Tools.Refactor.Prepare.$wreadSrcLoc
                                       one of ww { (#,,#) ww1 ww2 ww3 ->
                                case ww1 of dt2 { FastString.FastString ipv ipv1 ipv2 ipv3 ipv4 ipv5 ipv6 ->
                                case Language.Haskell.Tools.Refactor.Prepare.$wreadSrcLoc
                                       to of ww4 { (#,,#) ww5 ww6 ww7 ->
                                SrcLoc.RealSrcSpan' dt2 ww2 ww3 ww6 ww7 } } }
                             : ipv ipv1
                             -> Language.Haskell.Tools.Refactor.Prepare.readSrcSpan1 } } }) -}
c3f10f17817d9c954263a712f0d6c3d2
  getExtensionsFrom4 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "1:1-1000:1"#) -}
380d8ce2153399db09a480016a2063f6
  getExtensionsFrom5 :: [GHC.Types.Char] -> [[GHC.Types.Char]]
  {- Unfolding: (Data.List.Split.Internals.splitOn
                   @ GHC.Types.Char
                   GHC.Classes.$fEqChar
                   Language.Haskell.Tools.Refactor.Prepare.readSrcSpan2) -}
0907f92da8eceeabd79d7f7d4409a4d1
  getExtensionsFrom6 :: GHC.Base.Maybe GHC.IO.FilePath
  {- Strictness: m2,
     Unfolding: (GHC.Base.Just @ GHC.IO.FilePath GHC.Paths.libdir) -}
ac0d92fb393ae1251b4956e703e909f7
  loadModuleAST ::
    GHC.IO.FilePath
    -> Main.ModuleName
    -> GhcMonad.Ghc Language.Haskell.Tools.Refactor.Prepare.TypedModule
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: (\ (dir :: GHC.IO.FilePath)
                   (moduleName :: Main.ModuleName) ->
                 let {
                   m :: GhcMonad.Ghc HscTypes.ModSummary
                   = Language.Haskell.Tools.Refactor.Prepare.loadModule
                       (System.FilePath.Posix.combine Main.testRoot dir)
                       moduleName
                 } in
                 (\ (eta :: GhcMonad.Session)
                    (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                  case (Main.loadModuleAST1
                          `cast`
                        (GhcMonad.N:Ghc[0] <[GHC.Base.String]>_R)
                          eta)
                         `cast`
                       (GHC.Types.N:IO[0] <[GHC.Base.String]>_R)
                         eta1 of ds1 { (#,#) ipv ipv1 ->
                  case (m `cast` (GhcMonad.N:Ghc[0] <HscTypes.ModSummary>_R) eta)
                         `cast`
                       (GHC.Types.N:IO[0] <HscTypes.ModSummary>_R)
                         ipv of ds2 { (#,#) ipv2 ipv3 ->
                  Language.Haskell.Tools.Refactor.Prepare.$wparseTyped
                    ipv3
                    eta
                    ipv2 } })
                   `cast`
                 (Trans
                      (<GhcMonad.Session>_R
                       ->_R Sym (GHC.Types.N:IO[0]
                                     <Language.Haskell.Tools.Refactor.Prepare.TypedModule>_R))
                      (Sym (GhcMonad.N:Ghc[0]
                                <Language.Haskell.Tools.Refactor.Prepare.TypedModule>_R)))) -}
426afadb3e496781e8b9bba44d389abc
  loadModuleAST1 :: GhcMonad.Ghc [GHC.Base.String]
  {- Unfolding: (Language.Haskell.Tools.Refactor.Prepare.useFlags
                   Main.loadModuleAST2) -}
4ab16fd2ef7ef42bc85b5cf46b7819b5
  loadModuleAST2 :: [GHC.Base.String]
  {- Unfolding: (GHC.Types.:
                   @ GHC.Base.String
                   Main.loadModuleAST3
                   (GHC.Types.[] @ GHC.Base.String)) -}
45dac10961750443034cd033db16cc06
  loadModuleAST3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "-w"#) -}
aaf1a42a5c955a117bac3842218d7503
  main :: GHC.Types.IO ()
  {- Arity: 1,
     Unfolding: InlineRule (0, True, True)
                Main.main1 `cast` (Sym (GHC.Types.N:IO[0] <()>_R)) -}
105a6d1fbb45f4437b64120568158f39
  main1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1,
     Unfolding: (Test.Tasty.CmdLine.defaultMainWithIngredients1
                   Test.Tasty.defaultIngredients
                   Main.main2) -}
8583aa338bc5acf288f7e61365fc12fe
  main10 :: [Test.Tasty.Core.TestTree]
  {- Unfolding: (GHC.Base.map
                   @ [GHC.Types.Char]
                   @ Test.Tasty.Core.TestTree
                   Main.main11
                   Main.flexibleInstancesModules) -}
e1a7c67936bf316ee413692294f0db33
  main11 :: Main.ModuleName -> Test.Tasty.Core.TestTree
  {- Arity: 1, Unfolding: (Main.mkTest Main.flexibleInstancesRoot) -}
0ce7627d616312e931c39fc5895b1182
  main12 :: Test.Tasty.Core.TestTree
  {- Strictness: m2,
     Unfolding: (Test.Tasty.Core.TestGroup
                   Main.recordWildCardsRoot
                   Main.main13) -}
e3dc16abc8d7ecbac078e442c548bc5c
  main13 :: [Test.Tasty.Core.TestTree]
  {- Unfolding: (GHC.Base.map
                   @ [GHC.Types.Char]
                   @ Test.Tasty.Core.TestTree
                   Main.main14
                   Main.recordWildCardsModules) -}
32859d24d7490a1487af7ca38c72a5da
  main14 :: Main.ModuleName -> Test.Tasty.Core.TestTree
  {- Arity: 1, Unfolding: (Main.mkTest Main.recordWildCardsRoot) -}
55c30feccd765deec651b006fa14aaa9
  main15 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "All tests"#) -}
25808567cf85259fb8ccf5e1459545d7
  main16 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1,
     Unfolding: (GHC.TopHandler.runMainIO1
                   @ ()
                   Main.main1 `cast` (Sym (GHC.Types.N:IO[0] <()>_R))) -}
044bf04cc72983e3c7d7662b96fdeee2
  main2 :: Test.Tasty.Core.TestTree
  {- Strictness: m2,
     Unfolding: (Test.Tasty.Core.TestGroup Main.main15 Main.main3) -}
6bd2e0891598ddc77a0e89e9f5bb7d55
  main3 :: [Test.Tasty.Core.TestTree]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Test.Tasty.Core.TestTree
                   Main.main12
                   Main.main4) -}
c775a902105697313e69cb2edc1fae85
  main4 :: [Test.Tasty.Core.TestTree]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Test.Tasty.Core.TestTree
                   Main.main9
                   Main.main5) -}
fab7edfa63e8d0f713f413a0a12ce2f3
  main5 :: [Test.Tasty.Core.TestTree]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Test.Tasty.Core.TestTree
                   Main.main6
                   (GHC.Types.[] @ Test.Tasty.Core.TestTree)) -}
3aca9e3a6000cda88569c4e961443503
  main6 :: Test.Tasty.Core.TestTree
  {- Strictness: m2,
     Unfolding: (Test.Tasty.Core.TestGroup
                   Main.derivingsRoot
                   Main.main7) -}
191a0e5b328cf99786a97754cf2fc7a4
  main7 :: [Test.Tasty.Core.TestTree]
  {- Unfolding: (GHC.Base.map
                   @ [GHC.Types.Char]
                   @ Test.Tasty.Core.TestTree
                   Main.main8
                   Main.derivingsModules) -}
2c15aaab8618aa577724db8a64c8af35
  main8 :: Main.ModuleName -> Test.Tasty.Core.TestTree
  {- Arity: 1, Unfolding: (Main.mkTest Main.derivingsRoot) -}
46786c3aee5a9dde1a66f466e6eef3d8
  main9 :: Test.Tasty.Core.TestTree
  {- Strictness: m2,
     Unfolding: (Test.Tasty.Core.TestGroup
                   Main.flexibleInstancesRoot
                   Main.main10) -}
a64aec513459efa6c21cbbd84c6f2975
  mkAssertion ::
    GHC.IO.FilePath -> Main.ModuleName -> GHC.Types.IO ()
  {- Arity: 3, Strictness: <L,U><L,U><S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.mkTest1
                  `cast`
                (<GHC.IO.FilePath>_R
                 ->_R <Main.ModuleName>_R
                 ->_R Sym (GHC.Types.N:IO[0] <()>_R)) -}
9d5440bb26a798f7a2ee50807478401b
  mkModulePath ::
    GHC.IO.FilePath -> Main.ModuleName -> GHC.IO.FilePath
  {- Arity: 2, Strictness: <L,1*U><S,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (testDir :: GHC.IO.FilePath) (testName :: Main.ModuleName) ->
                 System.FilePath.Posix.combine
                   Main.testRoot
                   (System.FilePath.Posix.combine testDir testName)) -}
be88bf7a8164334d90a84383ae9f4356
  mkTest ::
    GHC.IO.FilePath -> Main.ModuleName -> Test.Tasty.Core.TestTree
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (dir :: GHC.IO.FilePath) (moduleName :: Main.ModuleName) ->
                 Test.Tasty.Core.SingleTest
                   @ Test.Tasty.HUnit.TestCase
                   Test.Tasty.HUnit.$fIsTestTestCase
                   moduleName
                   (\ (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                    case Main.mkTest1 dir moduleName eta1 of ds { (#,#) ipv ipv1 ->
                    (# ipv, GHC.Types.[] @ GHC.Types.Char #) })
                     `cast`
                   (Trans
                        (Sym (GHC.Types.N:IO[0] <[GHC.Types.Char]>_R))
                        (Sym (Test.Tasty.HUnit.N:TestCase[0])))) -}
2a2ff5536b5b8f87468feb5e5aa50650
  mkTest1 ::
    GHC.IO.FilePath
    -> Main.ModuleName
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 3, Strictness: <L,U><L,U><S,U>,
     Unfolding: (\ (dir :: GHC.IO.FilePath)
                   (moduleName :: Main.ModuleName)
                   (s :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case Main.getExtensionsFrom1
                        dir
                        moduleName
                        s of ds1 { (#,#) ipv ipv1 ->
                 case Main.getExtAnnotsFrom1
                        dir
                        moduleName
                        ipv of ds2 { (#,#) ipv2 ipv3 ->
                 Test.Tasty.HUnit.Orig.@=?2
                   @ (Data.Map.Base.Map
                        GHC.LanguageExtensions.Type.Extension [Main.Line])
                   Main.$s$fEqMap
                   Main.$s$fShowMap
                   Main.mkTest2
                   (Data.Map.Strict.map
                      @ [Main.Line]
                      @ [Main.Line]
                      @ GHC.LanguageExtensions.Type.Extension
                      Main.$ssort
                      ipv3)
                   (Data.Map.Strict.map
                      @ [Main.Line]
                      @ [Main.Line]
                      @ GHC.LanguageExtensions.Type.Extension
                      Main.$ssort
                      ipv1)
                   ipv2 } }) -}
36d1d3b644eb25015180a4d5d79c624a
  mkTest2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Failure"#) -}
8b0c1b93266dca6238d1a064bf76bfa2
  mkTests :: Main.TestSuite -> Test.Tasty.Core.TestTree
  {- Arity: 1, Strictness: <S,1*U(U,1*U)>m2,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: (GHC.IO.FilePath, [Main.TestName])) ->
                 case ds of wild { (,) testDir tests ->
                 Test.Tasty.Core.TestGroup
                   testDir
                   (GHC.Base.build
                      @ Test.Tasty.Core.TestTree
                      (\ @ b1
                         (c :: Test.Tasty.Core.TestTree -> b1 -> b1)[OneShot]
                         (n :: b1)[OneShot] ->
                       GHC.Base.foldr
                         @ [GHC.Types.Char]
                         @ b1
                         (GHC.Base.mapFB
                            @ Test.Tasty.Core.TestTree
                            @ b1
                            @ [GHC.Types.Char]
                            c
                            (Main.mkTest testDir))
                         n
                         tests)) }) -}
0fb3c23323ce7f4efc7af96caecaff41
  recordWildCardsModules :: [[GHC.Types.Char]]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ [GHC.Types.Char]
                   Main.recordWildCardsModules1
                   (GHC.Types.[] @ [GHC.Types.Char])) -}
e01e2a3a0299f6ae8723e7451729a376
  recordWildCardsModules1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Simple"#) -}
65837ce0a9cac2898856bee5b3da70ab
  recordWildCardsRoot :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   "RecordWildCardsTest"#) -}
e3e119b2d92ba4548075f397a0e91757
  recordWildCardsTest :: ([GHC.Types.Char], [[GHC.Types.Char]])
  {- Strictness: m,
     Unfolding: ((Main.recordWildCardsRoot,
                  Main.recordWildCardsModules)) -}
cc19905ef3b806fb2a2e1df5e7e968fd
  simplifyExtMap ::
    Data.Map.Base.Map
      GHC.LanguageExtensions.Type.Extension [SrcLoc.SrcSpan]
    -> Main.SimpleMap
  {- Arity: 1,
     Unfolding: (Data.Map.Strict.map
                   @ [SrcLoc.SrcSpan]
                   @ [Main.Line]
                   @ GHC.LanguageExtensions.Type.Extension
                   Main.getExtensionsFrom2) -}
fd1b74381642bb227af1548d8ad903df
  spanToLine :: SrcLoc.SrcSpan -> Main.Line
  {- Arity: 1, Strictness: <S,1*U>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: SrcLoc.SrcSpan) ->
                 case ds of wild {
                   SrcLoc.RealSrcSpan s
                   -> case s of wild1 { SrcLoc.RealSrcSpan' ds1 dt dt1 dt2 dt3 ->
                      GHC.Types.I# dt2 }
                   SrcLoc.UnhelpfulSpan ipv -> Main.spanToLine1 }) -}
649a00f1d5ad10af098c48dbe5830626
  spanToLine1 :: Main.Line
  {- Strictness: x -}
5929189f95e54ac5738439752429a699
  testRoot :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "test"#) -}
"SPEC/Main $fEqMap @ Extension @ [Line]" [ALWAYS] forall ($dEq1 :: GHC.Classes.Eq
                                                                     [Main.Line])
                                                         ($dEq :: GHC.Classes.Eq
                                                                    GHC.LanguageExtensions.Type.Extension)
  Data.Map.Base.$fEqMap @ GHC.LanguageExtensions.Type.Extension
                        @ [Main.Line]
                        $dEq
                        $dEq1
  = Main.$s$fEqMap
"SPEC/Main $fEqMap_$c/= @ Extension @ [Line]" [ALWAYS] forall ($dEq1 :: GHC.Classes.Eq
                                                                          [Main.Line])
                                                              ($dEq :: GHC.Classes.Eq
                                                                         GHC.LanguageExtensions.Type.Extension)
  Data.Map.Base.$fEqMap_$c/= @ GHC.LanguageExtensions.Type.Extension
                             @ [Main.Line]
                             $dEq
                             $dEq1
  = Main.$s$fEqMap_$s$fEqMap_$c/=
"SPEC/Main $fShowMap @ Extension @ [Line]" [ALWAYS] forall ($dShow1 :: GHC.Show.Show
                                                                         [Main.Line])
                                                           ($dShow :: GHC.Show.Show
                                                                        GHC.LanguageExtensions.Type.Extension)
  Data.Map.Base.$fShowMap @ GHC.LanguageExtensions.Type.Extension
                          @ [Main.Line]
                          $dShow
                          $dShow1
  = Main.$s$fShowMap
"SPEC/Main $fShowMap_$cshowList @ Extension @ [Line]" [ALWAYS] forall ($dShow1 :: GHC.Show.Show
                                                                                    [Main.Line])
                                                                      ($dShow :: GHC.Show.Show
                                                                                   GHC.LanguageExtensions.Type.Extension)
  Data.Map.Base.$fShowMap_$cshowList @ GHC.LanguageExtensions.Type.Extension
                                     @ [Main.Line]
                                     $dShow
                                     $dShow1
  = Main.$s$fShowMap_$s$fShowMap_$cshowList
"SPEC/Main sort @ Line" [ALWAYS] forall ($dOrd :: GHC.Classes.Ord
                                                    Main.Line)
  Data.OldList.sort @ GHC.Types.Int $dOrd = Main.$ssort
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

