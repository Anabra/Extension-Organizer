
==================== FINAL INTERFACE ====================
2017-09-20 23:02:23.042082 UTC

interface main@main:Main 8002
  interface hash: bb2be03c6b4f641245337fa466170c15
  ABI hash: a10e88f4c545e54cfffef766cc40b20f
  export-list hash: a0a51d177aa4e2c38eda9b5e60348869
  orphan hash: a3ac865c7bb566e48a741dd4484cba63
  flag hash: ccf1cf6c4a769ce9a094061d778c3c71
  sig of: Nothing
  used TH splices: False
  where
exports:
  Main.bangPatternsModules
  Main.bangPatternsRoot
  Main.bangPatternsTest
  Main.derivingsModules
  Main.derivingsRoot
  Main.derivingsTest
  Main.flexibleInstancesModules
  Main.flexibleInstancesRoot
  Main.flexibleInstancesTest
  Main.getExtAnnotsFrom
  Main.getExtensionsFrom
  Main.lambdaCasePatternsTest
  Main.lcModules
  Main.lcRoot
  Main.loadModuleAST
  Main.main
  Main.mkAssertion
  Main.mkModulePath
  Main.mkTest
  Main.mkTests
  Main.patSynModules
  Main.patSynRoot
  Main.patternSynonymsTest
  Main.recordWildCardsModules
  Main.recordWildCardsRoot
  Main.recordWildCardsTest
  Main.simplifyExtMap
  Main.spanToLine
  Main.templateHaskellTest
  Main.testRoot
  Main.thModules
  Main.thRoot
  Main.viewPatternsTest
  Main.vpModules
  Main.vpRoot
  Main.Line
  Main.ModuleName
  Main.SimpleMap
  Main.TestName
  Main.TestSuite
module dependencies:
package dependencies: ansi-terminal-0.6.3.1@ansi-terminal-0.6.3.1-3RTqikoQf47ajVD9m8zgB
                      ansi-wl-pprint-0.6.7.3@ansi-wl-pprint-0.6.7.3-A79v826bgPr574HtaZPPqC
                      array-0.5.1.1@array-0.5.1.1
                      async-2.1.1.1@async-2.1.1.1-8yywY4inVGRLJSCg60gBXj base-4.9.1.0
                      binary-0.8.3.0@binary-0.8.3.0
                      bytestring-0.10.8.1@bytestring-0.10.8.1
                      clock-0.7.2@clock-0.7.2-8dRNleB7rysIZAOReuhpZA
                      containers-0.5.7.1@containers-0.5.7.1
                      deepseq-1.4.2.0@deepseq-1.4.2.0 directory-1.3.0.0@directory-1.3.0.0
                      either-4.4.1.1@either-4.4.1.1-6PiwKYkn4v6B4KO2R2Fu1b
                      filepath-1.4.1.1@filepath-1.4.1.1 ghc-8.0.2
                      ghc-boot-8.0.2@ghc-boot-8.0.2 ghc-boot-th-8.0.2@ghc-boot-th-8.0.2
                      ghc-paths-0.1.0.9@ghc-paths-0.1.0.9-AhaDlGOsRAepox069XzG
                      ghc-prim-0.5.0.0 ghci-8.0.2@ghci-8.0.2
                      hashable-1.2.6.1@hashable-1.2.6.1-2ZLNuHq395GGIHwEHuqZol
                      haskell-tools-ast-0.8.1.0@haskell-tools-ast-0.8.1.0-I9ZMaCkuuwT3FoQkwMjyW6
                      haskell-tools-backend-ghc-0.8.1.0@haskell-tools-backend-ghc-0.8.1.0-DqHnbK8OPi6CBD5cIPITWq
                      haskell-tools-prettyprint-0.8.1.0@haskell-tools-prettyprint-0.8.1.0-F9iWkGq5ppnLH6whHm0DlC
                      haskell-tools-refactor-0.8.1.0@haskell-tools-refactor-0.8.1.0-AF8Q4cA8mAnLNwu5t0Icw8
                      haskell-tools-rewrite-0.8.1.0@haskell-tools-rewrite-0.8.1.0-85A6q9dMQgvKEKG9I8fxVU
                      hoopl-3.10.2.1@hoopl-3.10.2.1 hpc-0.6.0.3@hpc-0.6.0.3
                      ht-extension-organizer-0.1.0.0@ht-extension-organizer-0.1.0.0-y3uypH7gCtA60AaWeuyZL
                      instance-control-0.1.1.1@instance-control-0.1.1.1-1defRS82vAAEmZKRhe67aa
                      integer-gmp-1.0.0.1 mtl-2.2.1@mtl-2.2.1-BLKBelFsPB3BoFeSWSOYj6
                      optparse-applicative-0.13.2.0@optparse-applicative-0.13.2.0-EqIYOWOFTvf23sT5QTYn9U
                      parsec-3.1.11@parsec-3.1.11-1aqiimsgq2dCv7eoaC8WuX
                      pretty-1.1.3.3@pretty-1.1.3.3 process-1.4.3.0@process-1.4.3.0
                      references-0.3.2.2@references-0.3.2.2-y362bKYomIKNQKMTfOWVo
                      regex-base-0.93.2@regex-base-0.93.2-AYjYAsBidAc8f5XNm9b2Aa
                      regex-tdfa-1.2.2@regex-tdfa-1.2.2-CuFri6F1SLwFkkN6cPEwX5
                      safe-0.3.15@safe-0.3.15-2Yd45VWFfdcKqKyispOifY
                      split-0.2.3.2@split-0.2.3.2-CJl40zTyCIV16Pr60nb7CT
                      stm-2.4.4.1@stm-2.4.4.1-JQn4hNPyYjP5m9AcbI88Ve
                      syb-0.7@syb-0.7-4OKdCpwGutyB1rNRmoa0ya
                      tagged-0.8.5@tagged-0.8.5-1mTloBSoUxv8dqUr8XBGBt
                      tasty-0.11.2.5@tasty-0.11.2.5-9CHOVHcPPPS3fAInAil5pA
                      tasty-hunit-0.9.2@tasty-hunit-0.9.2-8EqOuwvMdXe8awhjhOAP3F
                      template-haskell-2.11.1.0
                      text-1.2.2.2@text-1.2.2.2-9UQZjEJZQFSGMffj1Z5g00
                      time-1.6.0.1@time-1.6.0.1 transformers-0.5.2.0@transformers-0.5.2.0
                      unbounded-delays-0.1.1.0@unbounded-delays-0.1.1.0-8pvOsE97fmS7WDAN5vUbqX
                      uniplate-1.6.12@uniplate-1.6.12-4PyZX21trQJ5lfk0CDvC7U
                      unix-2.7.2.1@unix-2.7.2.1
                      unordered-containers-0.2.8.0@unordered-containers-0.2.8.0-Bp9XgxjuHxcI4tFehVMDGC
orphans: base-4.9.1.0:GHC.Base base-4.9.1.0:GHC.Float
         binary-0.8.3.0@binary-0.8.3.0:Data.Binary.Generic
         bytestring-0.10.8.1@bytestring-0.10.8.1:Data.ByteString.Builder
         ghc-8.0.2:BlockId ghc-8.0.2:DsMonad ghc-8.0.2:LoadIface
         ghc-8.0.2:PPC.Ppr ghc-8.0.2:PprCmm ghc-8.0.2:PprCmmDecl
         ghc-8.0.2:PprCmmExpr ghc-8.0.2:PprCore ghc-8.0.2:SPARC.Ppr
         ghc-8.0.2:TcEnv ghc-8.0.2:TcRnMonad ghc-8.0.2:X86.Ppr
         ghc-boot-8.0.2@ghc-boot-8.0.2:GHC.LanguageExtensions
         ghci-8.0.2@ghci-8.0.2:GHCi.Message
         ghci-8.0.2@ghci-8.0.2:GHCi.TH.Binary
         hashable-1.2.6.1@hashable-1.2.6.1-2ZLNuHq395GGIHwEHuqZol:Data.Hashable.Generic
         haskell-tools-ast-0.8.1.0@haskell-tools-ast-0.8.1.0-I9ZMaCkuuwT3FoQkwMjyW6:Language.Haskell.Tools.AST.Instances.Data
         haskell-tools-ast-0.8.1.0@haskell-tools-ast-0.8.1.0-I9ZMaCkuuwT3FoQkwMjyW6:Language.Haskell.Tools.AST.Instances.Eq
         haskell-tools-ast-0.8.1.0@haskell-tools-ast-0.8.1.0-I9ZMaCkuuwT3FoQkwMjyW6:Language.Haskell.Tools.AST.Instances.Generic
         haskell-tools-ast-0.8.1.0@haskell-tools-ast-0.8.1.0-I9ZMaCkuuwT3FoQkwMjyW6:Language.Haskell.Tools.AST.Instances.SemanticTraversal
         haskell-tools-ast-0.8.1.0@haskell-tools-ast-0.8.1.0-I9ZMaCkuuwT3FoQkwMjyW6:Language.Haskell.Tools.AST.Instances.Show
         haskell-tools-ast-0.8.1.0@haskell-tools-ast-0.8.1.0-I9ZMaCkuuwT3FoQkwMjyW6:Language.Haskell.Tools.AST.Instances.SourceInfoTraversal
         haskell-tools-ast-0.8.1.0@haskell-tools-ast-0.8.1.0-I9ZMaCkuuwT3FoQkwMjyW6:Language.Haskell.Tools.AST.SemaInfoTypes
         haskell-tools-ast-0.8.1.0@haskell-tools-ast-0.8.1.0-I9ZMaCkuuwT3FoQkwMjyW6:Language.Haskell.Tools.AST.Utils.GHCInstances
         haskell-tools-backend-ghc-0.8.1.0@haskell-tools-backend-ghc-0.8.1.0-DqHnbK8OPi6CBD5cIPITWq:Language.Haskell.Tools.AST.FromGHC.Utils
         haskell-tools-prettyprint-0.8.1.0@haskell-tools-prettyprint-0.8.1.0-F9iWkGq5ppnLH6whHm0DlC:Language.Haskell.Tools.Transform.RangeTemplate
         haskell-tools-prettyprint-0.8.1.0@haskell-tools-prettyprint-0.8.1.0-F9iWkGq5ppnLH6whHm0DlC:Language.Haskell.Tools.Transform.SourceTemplate
         haskell-tools-prettyprint-0.8.1.0@haskell-tools-prettyprint-0.8.1.0-F9iWkGq5ppnLH6whHm0DlC:Language.Haskell.Tools.Transform.SourceTemplateHelpers
         haskell-tools-refactor-0.8.1.0@haskell-tools-refactor-0.8.1.0-AF8Q4cA8mAnLNwu5t0Icw8:Language.Haskell.Tools.Refactor.RefactorBase
         ht-extension-organizer-0.1.0.0@ht-extension-organizer-0.1.0.0-y3uypH7gCtA60AaWeuyZL:ExtMonad
         references-0.3.2.2@references-0.3.2.2-y362bKYomIKNQKMTfOWVo:Control.Reference.Predefined.Containers.Tree
         references-0.3.2.2@references-0.3.2.2-y362bKYomIKNQKMTfOWVo:Control.Reference.TH.Records
         regex-base-0.93.2@regex-base-0.93.2-AYjYAsBidAc8f5XNm9b2Aa:Text.Regex.Base.Context
         regex-tdfa-1.2.2@regex-tdfa-1.2.2-CuFri6F1SLwFkkN6cPEwX5:Text.Regex.TDFA.ByteString
         regex-tdfa-1.2.2@regex-tdfa-1.2.2-CuFri6F1SLwFkkN6cPEwX5:Text.Regex.TDFA.ByteString.Lazy
         regex-tdfa-1.2.2@regex-tdfa-1.2.2-CuFri6F1SLwFkkN6cPEwX5:Text.Regex.TDFA.Sequence
         regex-tdfa-1.2.2@regex-tdfa-1.2.2-CuFri6F1SLwFkkN6cPEwX5:Text.Regex.TDFA.String
         stm-2.4.4.1@stm-2.4.4.1-JQn4hNPyYjP5m9AcbI88Ve:Control.Monad.STM
         syb-0.7@syb-0.7-4OKdCpwGutyB1rNRmoa0ya:Data.Generics.Instances
         text-1.2.2.2@text-1.2.2.2-9UQZjEJZQFSGMffj1Z5g00:Data.Text
         text-1.2.2.2@text-1.2.2.2-9UQZjEJZQFSGMffj1Z5g00:Data.Text.Lazy
         text-1.2.2.2@text-1.2.2.2-9UQZjEJZQFSGMffj1Z5g00:Data.Text.Show
         time-1.6.0.1@time-1.6.0.1:Data.Time.Calendar.Gregorian
         time-1.6.0.1@time-1.6.0.1:Data.Time.Format.Parse
         time-1.6.0.1@time-1.6.0.1:Data.Time.LocalTime.LocalTime
         transformers-0.5.2.0@transformers-0.5.2.0:Control.Monad.Trans.Error
         uniplate-1.6.12@uniplate-1.6.12-4PyZX21trQJ5lfk0CDvC7U:Data.Generics.Uniplate.Data
family instance modules: base-4.9.1.0:Control.Applicative
                         base-4.9.1.0:Data.Complex base-4.9.1.0:Data.Either
                         base-4.9.1.0:Data.Functor.Compose base-4.9.1.0:Data.Functor.Const
                         base-4.9.1.0:Data.Functor.Identity
                         base-4.9.1.0:Data.Functor.Product base-4.9.1.0:Data.Functor.Sum
                         base-4.9.1.0:Data.List.NonEmpty base-4.9.1.0:Data.Monoid
                         base-4.9.1.0:Data.Semigroup base-4.9.1.0:Data.Type.Equality
                         base-4.9.1.0:Data.Version base-4.9.1.0:Data.Void
                         base-4.9.1.0:GHC.Exts base-4.9.1.0:GHC.Generics
                         base-4.9.1.0:GHC.IO.Exception base-4.9.1.0:GHC.TypeLits
                         clock-0.7.2@clock-0.7.2-8dRNleB7rysIZAOReuhpZA:System.Clock
                         containers-0.5.7.1@containers-0.5.7.1:Data.IntMap.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.IntSet.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.Map.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.Sequence
                         containers-0.5.7.1@containers-0.5.7.1:Data.Set.Base
                         ghc-8.0.2:PlaceHolder ghc-8.0.2:TrieMap
                         ghc-boot-th-8.0.2@ghc-boot-th-8.0.2:GHC.LanguageExtensions.Type
                         ghci-8.0.2@ghci-8.0.2:GHCi.FFI ghci-8.0.2@ghci-8.0.2:GHCi.Message
                         ghci-8.0.2@ghci-8.0.2:GHCi.ResolvedBCO
                         ghci-8.0.2@ghci-8.0.2:SizedSeq
                         haskell-tools-ast-0.8.1.0@haskell-tools-ast-0.8.1.0-I9ZMaCkuuwT3FoQkwMjyW6:Language.Haskell.Tools.AST.Ann
                         haskell-tools-ast-0.8.1.0@haskell-tools-ast-0.8.1.0-I9ZMaCkuuwT3FoQkwMjyW6:Language.Haskell.Tools.AST.Instances.Generic
                         haskell-tools-prettyprint-0.8.1.0@haskell-tools-prettyprint-0.8.1.0-F9iWkGq5ppnLH6whHm0DlC:Language.Haskell.Tools.Transform.RangeTemplate
                         haskell-tools-prettyprint-0.8.1.0@haskell-tools-prettyprint-0.8.1.0-F9iWkGq5ppnLH6whHm0DlC:Language.Haskell.Tools.Transform.SourceTemplate
                         hoopl-3.10.2.1@hoopl-3.10.2.1:Compiler.Hoopl.Block
                         hoopl-3.10.2.1@hoopl-3.10.2.1:Compiler.Hoopl.Dataflow
                         hoopl-3.10.2.1@hoopl-3.10.2.1:Compiler.Hoopl.Fuel
                         hoopl-3.10.2.1@hoopl-3.10.2.1:Compiler.Hoopl.Label
                         hoopl-3.10.2.1@hoopl-3.10.2.1:Compiler.Hoopl.Unique
                         pretty-1.1.3.3@pretty-1.1.3.3:Text.PrettyPrint.Annotated.HughesPJ
                         pretty-1.1.3.3@pretty-1.1.3.3:Text.PrettyPrint.HughesPJ
                         references-0.3.2.2@references-0.3.2.2-y362bKYomIKNQKMTfOWVo:Control.Reference.Predefined.Containers
                         references-0.3.2.2@references-0.3.2.2-y362bKYomIKNQKMTfOWVo:Control.Reference.Predefined.Containers.Tree
                         references-0.3.2.2@references-0.3.2.2-y362bKYomIKNQKMTfOWVo:Control.Reference.Types
                         tagged-0.8.5@tagged-0.8.5-1mTloBSoUxv8dqUr8XBGBt:Data.Tagged
                         tasty-0.11.2.5@tasty-0.11.2.5-9CHOVHcPPPS3fAInAil5pA:Test.Tasty.Core
                         template-haskell-2.11.1.0:Language.Haskell.TH.Syntax
                         text-1.2.2.2@text-1.2.2.2-9UQZjEJZQFSGMffj1Z5g00:Data.Text
                         text-1.2.2.2@text-1.2.2.2-9UQZjEJZQFSGMffj1Z5g00:Data.Text.Lazy
                         unordered-containers-0.2.8.0@unordered-containers-0.2.8.0-Bp9XgxjuHxcI4tFehVMDGC:Data.HashMap.Base
                         unordered-containers-0.2.8.0@unordered-containers-0.2.8.0-Bp9XgxjuHxcI4tFehVMDGC:Data.HashSet
import  -/  base-4.9.1.0:Data.List 07ae2acca6538aa0800bd0a993ac6ac1
import  -/  base-4.9.1.0:Data.OldList 27987919d8da2f92e3f472ca81f730f8
import  -/  base-4.9.1.0:Debug.Trace a9edf3aec504f4423d8ba829ab373a25
import  -/  base-4.9.1.0:GHC.Base c4231c43c07e46080a26bf94094c7aa1
import  -/  base-4.9.1.0:GHC.IO eb504c57b397cf133849f8586f15dafb
import  -/  base-4.9.1.0:Prelude 22dd289b8469a8fa8dc81cab7b237771
import  -/  base-4.9.1.0:System.IO e4a64a8e3dce8616da54f0ee7104f7db
import  -/  containers-0.5.7.1@containers-0.5.7.1:Data.Map.Base d432f6875983131473086af8cb290590
import  -/  containers-0.5.7.1@containers-0.5.7.1:Data.Map.Strict 9d0c0962e53270a0a3fb5cb63723a381
import  -/  directory-1.3.0.0@directory-1.3.0.0:System.Directory 8ff5ebd6a93811413df021d2be39a158
import  -/  filepath-1.4.1.1@filepath-1.4.1.1:System.FilePath a3d1d13ac7dd86705b5dfaf58a5c0b9e
import  -/  filepath-1.4.1.1@filepath-1.4.1.1:System.FilePath.Posix 6a5e3ee74184fdcc5da09a368e7c40f5
import  -/  ghc-8.0.2:GHC 2331686350095b94008a49ce7901eaa2
import  -/  ghc-8.0.2:GhcMonad fe90acc3f77ca6bdb0686328a3d31d0f
import  -/  ghc-8.0.2:SrcLoc ae8e460a2b77026f9c6a4d6cdcc5d57e
import  -/  ghc-boot-th-8.0.2@ghc-boot-th-8.0.2:GHC.LanguageExtensions.Type 92441ea50916fa3940e20fae60f255d7
import  -/  ghc-paths-0.1.0.9@ghc-paths-0.1.0.9-AhaDlGOsRAepox069XzG:GHC.Paths ac6199ac2bb4710a40d06f6d09a37983
import  -/  ghc-prim-0.5.0.0:GHC.Types 89f8de4f08018c9177c98d979eae0e45
import  -/  haskell-tools-prettyprint-0.8.1.0@haskell-tools-prettyprint-0.8.1.0-F9iWkGq5ppnLH6whHm0DlC:Language.Haskell.Tools.PrettyPrint da7dea6ac299ef1620d7160216fb97b0
import  -/  haskell-tools-refactor-0.8.1.0@haskell-tools-refactor-0.8.1.0-AF8Q4cA8mAnLNwu5t0Icw8:Language.Haskell.Tools.Refactor 84acc8d60e278de91351468f26f90e1c
import  -/  haskell-tools-refactor-0.8.1.0@haskell-tools-refactor-0.8.1.0-AF8Q4cA8mAnLNwu5t0Icw8:Language.Haskell.Tools.Refactor.Prepare 06c995907993af4dca8399eaa224a412
import  -/  ht-extension-organizer-0.1.0.0@ht-extension-organizer-0.1.0.0-y3uypH7gCtA60AaWeuyZL:AnnotationParser f78aabf0e2d657a79857d2d0d402ed8c
import  -/  ht-extension-organizer-0.1.0.0@ht-extension-organizer-0.1.0.0-y3uypH7gCtA60AaWeuyZL:ExtMap ce208fa2f233772cc4b03c60efef446e
import  -/  ht-extension-organizer-0.1.0.0@ht-extension-organizer-0.1.0.0-y3uypH7gCtA60AaWeuyZL:ExtensionOrganizer a3b17db1c45307edc6e5a4c4d6152e61
import  -/  tasty-0.11.2.5@tasty-0.11.2.5-9CHOVHcPPPS3fAInAil5pA:Test.Tasty 195b167c336d9a923d4ad9d6346408fc
import  -/  tasty-0.11.2.5@tasty-0.11.2.5-9CHOVHcPPPS3fAInAil5pA:Test.Tasty.Core bde15bbc7e9c0cafa410fe290b644921
import  -/  tasty-hunit-0.9.2@tasty-hunit-0.9.2-8EqOuwvMdXe8awhjhOAP3F:Test.Tasty.HUnit b76eb16e90e5f18943bf39820b0509f5
import  -/  tasty-hunit-0.9.2@tasty-hunit-0.9.2-8EqOuwvMdXe8awhjhOAP3F:Test.Tasty.HUnit.Orig 6fb02f2910bbd54df12313c60e73becc
779b44a2e144a82cd5ef668765926d93
  $s$fDataImportInfo ::
    Data.Data.Data
      (Language.Haskell.Tools.AST.SemaInfoTypes.ImportInfo Var.Var)
  {- Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (Language.Haskell.Tools.AST.SemaInfoTypes.ImportInfo Var.Var)
                  (Language.Haskell.Tools.AST.SemaInfoTypes.$fDataImportInfo_$cp1Data
                     @ Var.Var
                     Var.$fDataVar)
                  (Language.Haskell.Tools.AST.SemaInfoTypes.$fDataImportInfo_$cgfoldl
                     @ Var.Var
                     Var.$fDataVar)
                  (Language.Haskell.Tools.AST.SemaInfoTypes.$fDataImportInfo_$cgunfold
                     @ Var.Var
                     Var.$fDataVar)
                  Main.$s$fDataImportInfo_$s$fDataImportInfo_$ctoConstr
                  Main.$s$fDataImportInfo_$s$fDataImportInfo_$cdataTypeOf
                  (Language.Haskell.Tools.AST.SemaInfoTypes.$fDataImportInfo_$cdataCast1
                     @ Var.Var
                     Var.$fDataVar)
                  Main.$s$fDataImportInfo_$s$fDataImportInfo_$cdataCast2
                  (Language.Haskell.Tools.AST.SemaInfoTypes.$fDataImportInfo_$cgmapT
                     @ Var.Var
                     Var.$fDataVar)
                  (Language.Haskell.Tools.AST.SemaInfoTypes.$fDataImportInfo_$cgmapQl
                     @ Var.Var
                     Var.$fDataVar)
                  (Language.Haskell.Tools.AST.SemaInfoTypes.$fDataImportInfo_$cgmapQr
                     @ Var.Var
                     Var.$fDataVar)
                  (Language.Haskell.Tools.AST.SemaInfoTypes.$fDataImportInfo_$cgmapQ
                     @ Var.Var
                     Var.$fDataVar)
                  (Language.Haskell.Tools.AST.SemaInfoTypes.$fDataImportInfo_$cgmapQi
                     @ Var.Var
                     Var.$fDataVar)
                  (Language.Haskell.Tools.AST.SemaInfoTypes.$fDataImportInfo_$cgmapM
                     @ Var.Var
                     Var.$fDataVar)
                  (Language.Haskell.Tools.AST.SemaInfoTypes.$fDataImportInfo_$cgmapMp
                     @ Var.Var
                     Var.$fDataVar)
                  (Language.Haskell.Tools.AST.SemaInfoTypes.$fDataImportInfo_$cgmapMo
                     @ Var.Var
                     Var.$fDataVar) -}
dfc039ff7032bc62a2454ec34dfc5fc5
  $s$fDataImportInfo_$s$fDataImportInfo_$cdataCast2 ::
    Data.Typeable.Internal.Typeable t =>
    (forall d e. (Data.Data.Data d, Data.Data.Data e) => c (t d e))
    -> GHC.Base.Maybe
         (c (Language.Haskell.Tools.AST.SemaInfoTypes.ImportInfo Var.Var))
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><L,A>,
     Unfolding: InlineRule (2, True, True)
                (\ @ (t :: * -> * -> *)
                   @ (c :: * -> *)
                   ($dTypeable :: Data.Typeable.Internal.Typeable t)
                   (ds1 :: forall d e.
                           (Data.Data.Data d, Data.Data.Data e) =>
                           c (t d e)) ->
                 GHC.Base.Nothing
                   @ (c (Language.Haskell.Tools.AST.SemaInfoTypes.ImportInfo
                           Var.Var))) -}
f305fdbd283d6d795755b032f996cba9
  $s$fDataImportInfo_$s$fDataImportInfo_$cdataTypeOf ::
    Language.Haskell.Tools.AST.SemaInfoTypes.ImportInfo Var.Var
    -> Data.Data.DataType
  {- Arity: 1, Strictness: <L,A>m,
     Unfolding: InlineRule (1, True, True)
                (\ (ds1 :: Language.Haskell.Tools.AST.SemaInfoTypes.ImportInfo
                             Var.Var) ->
                 Language.Haskell.Tools.AST.SemaInfoTypes.$tCGCyyeAJlLA79SU0hhqeif) -}
a875dd1f2cf42586fd5855c8d3367e82
  $s$fDataImportInfo_$s$fDataImportInfo_$ctoConstr ::
    Language.Haskell.Tools.AST.SemaInfoTypes.ImportInfo Var.Var
    -> Data.Data.Constr
  {- Arity: 1, Strictness: <S,1*H>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds1 :: Language.Haskell.Tools.AST.SemaInfoTypes.ImportInfo
                             Var.Var) ->
                 case ds1 of wild { Language.Haskell.Tools.AST.SemaInfoTypes.ImportInfo ds2 ds3 ds4 ds5 ds6 ->
                 Language.Haskell.Tools.AST.SemaInfoTypes.$cCGCyyeAJlLA79SU0hhqeif }) -}
44cdf8dd9b5b2f46bc875337c591ff2e
  $s$fDataModuleInfo ::
    Data.Data.Data
      (Language.Haskell.Tools.AST.SemaInfoTypes.ModuleInfo Var.Var)
  {- Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (Language.Haskell.Tools.AST.SemaInfoTypes.ModuleInfo Var.Var)
                  (Language.Haskell.Tools.AST.SemaInfoTypes.$fDataModuleInfo_$cp1Data
                     @ Var.Var
                     Var.$fDataVar)
                  (Language.Haskell.Tools.AST.SemaInfoTypes.$fDataModuleInfo_$cgfoldl
                     @ Var.Var
                     Var.$fDataVar)
                  (Language.Haskell.Tools.AST.SemaInfoTypes.$fDataModuleInfo_$cgunfold
                     @ Var.Var
                     Var.$fDataVar)
                  Main.$s$fDataModuleInfo_$s$fDataModuleInfo_$ctoConstr
                  Main.$s$fDataModuleInfo_$s$fDataModuleInfo_$cdataTypeOf
                  (Language.Haskell.Tools.AST.SemaInfoTypes.$fDataModuleInfo_$cdataCast1
                     @ Var.Var
                     Var.$fDataVar)
                  Main.$s$fDataModuleInfo_$s$fDataModuleInfo_$cdataCast2
                  (Language.Haskell.Tools.AST.SemaInfoTypes.$fDataModuleInfo_$cgmapT
                     @ Var.Var
                     Var.$fDataVar)
                  (Language.Haskell.Tools.AST.SemaInfoTypes.$fDataModuleInfo_$cgmapQl
                     @ Var.Var
                     Var.$fDataVar)
                  (Language.Haskell.Tools.AST.SemaInfoTypes.$fDataModuleInfo_$cgmapQr
                     @ Var.Var
                     Var.$fDataVar)
                  (Language.Haskell.Tools.AST.SemaInfoTypes.$fDataModuleInfo_$cgmapQ
                     @ Var.Var
                     Var.$fDataVar)
                  (Language.Haskell.Tools.AST.SemaInfoTypes.$fDataModuleInfo_$cgmapQi
                     @ Var.Var
                     Var.$fDataVar)
                  (Language.Haskell.Tools.AST.SemaInfoTypes.$fDataModuleInfo_$cgmapM
                     @ Var.Var
                     Var.$fDataVar)
                  (Language.Haskell.Tools.AST.SemaInfoTypes.$fDataModuleInfo_$cgmapMp
                     @ Var.Var
                     Var.$fDataVar)
                  (Language.Haskell.Tools.AST.SemaInfoTypes.$fDataModuleInfo_$cgmapMo
                     @ Var.Var
                     Var.$fDataVar) -}
c6bd97ca6fc8d3881afc0ad3cd026f7b
  $s$fDataModuleInfo_$s$fDataModuleInfo_$cdataCast2 ::
    Data.Typeable.Internal.Typeable t =>
    (forall d e. (Data.Data.Data d, Data.Data.Data e) => c (t d e))
    -> GHC.Base.Maybe
         (c (Language.Haskell.Tools.AST.SemaInfoTypes.ModuleInfo Var.Var))
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><L,A>,
     Unfolding: InlineRule (2, True, True)
                (\ @ (t :: * -> * -> *)
                   @ (c :: * -> *)
                   ($dTypeable :: Data.Typeable.Internal.Typeable t)
                   (ds1 :: forall d e.
                           (Data.Data.Data d, Data.Data.Data e) =>
                           c (t d e)) ->
                 GHC.Base.Nothing
                   @ (c (Language.Haskell.Tools.AST.SemaInfoTypes.ModuleInfo
                           Var.Var))) -}
22a57732800a562f635f5caa5a6f6061
  $s$fDataModuleInfo_$s$fDataModuleInfo_$cdataTypeOf ::
    Language.Haskell.Tools.AST.SemaInfoTypes.ModuleInfo Var.Var
    -> Data.Data.DataType
  {- Arity: 1, Strictness: <L,A>m,
     Unfolding: InlineRule (1, True, True)
                (\ (ds1 :: Language.Haskell.Tools.AST.SemaInfoTypes.ModuleInfo
                             Var.Var) ->
                 Language.Haskell.Tools.AST.SemaInfoTypes.$t8kQvtqUmj9O26DNBHuLtDJ) -}
171c97e13a576c2d9f686019aed4e008
  $s$fDataModuleInfo_$s$fDataModuleInfo_$ctoConstr ::
    Language.Haskell.Tools.AST.SemaInfoTypes.ModuleInfo Var.Var
    -> Data.Data.Constr
  {- Arity: 1, Strictness: <S,1*H>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds1 :: Language.Haskell.Tools.AST.SemaInfoTypes.ModuleInfo
                             Var.Var) ->
                 case ds1 of wild { Language.Haskell.Tools.AST.SemaInfoTypes.ModuleInfo ds2 ds3 ds4 ds5 ds6 ds7 ->
                 Language.Haskell.Tools.AST.SemaInfoTypes.$c8kQvtqUmj9O26DNBHuLtDJ }) -}
efdb72e3a7389f33b847408622f48fd6
  $s$fDomaind ::
    Language.Haskell.Tools.AST.Ann.Domain
      Language.Haskell.Tools.AST.Ann.IdDom
  {- Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Language.Haskell.Tools.AST.Ann.IdDom
                  Main.$s$fDomaind7
                  Main.$s$fDomaind_$s$fDomaind_$cp2Domain
                  Main.$s$fDomaind_$s$fDomaind_$cp3Domain
                  Main.$s$fDomaind_$s$fDomaind_$cp4Domain
                  Main.$s$fDomaind_$s$fDomaind_$cp5Domain
                  Main.$s$fDomaind_$s$fDomaind_$cp6Domain
                  Main.$s$fDomaind_$s$fDomaind_$cp7Domain
                  Main.$s$fDomaind_$s$fDomaind_$cp8Domain
                  Main.$s$fDomaind_$s$fDomaind_$cp9Domain
                  Main.$s$fDomaind_$s$fDomaind_$cp10Domain
                  Main.$s$fDomaind_$s$fDomaind_$cp11Domain
                  Main.$s$fDomaind_$s$fDomaind_$cp12Domain
                  Main.$s$fDomaind_$s$fDomaind_$cp13Domain -}
2549f98d1a866c0aaac1f1712c78d502
  $s$fDomaind1 ::
    GHC.Show.Show
      (Language.Haskell.Tools.AST.SemaInfoTypes.ModuleInfo Var.Id)
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                Main.$s$fDomaind_$s$fShowModuleInfo -}
4fddde215526ee166066de8848ccad08
  $s$fDomaind10 :: GHC.Fingerprint.Type.Fingerprint
  {- HasNoCafRefs,
     Unfolding: (GHC.Fingerprint.Type.Fingerprint
                   11145549849738423769##
                   13393259708013230772##) -}
3b3c4675bac475dc4779ba378d5b539c
  $s$fDomaind2 ::
    GHC.Show.Show
      (Language.Haskell.Tools.AST.SemaInfoTypes.ImportInfo Var.Id)
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                Main.$s$fDomaind_$s$fShowImportInfo -}
9e3aea66d00b5499cd55f3e462713116
  $s$fDomaind3 ::
    Data.Data.Data
      (Language.Haskell.Tools.AST.SemaInfoTypes.ModuleInfo Var.Id)
  {- Unfolding: InlineRule (0, True, True) Main.$s$fDataModuleInfo -}
e4edeac3e408e0edb6ab8131a30f8bdc
  $s$fDomaind4 ::
    Data.Data.Data
      (Language.Haskell.Tools.AST.SemaInfoTypes.ImportInfo Var.Id)
  {- Unfolding: InlineRule (0, True, True) Main.$s$fDataImportInfo -}
bf0c847f957974b00c530cae98a9d46b
  $s$fDomaind5 ::
    Language.Haskell.Tools.AST.SemaInfoTypes.NoSemanticInfo
    Data.Type.Equality.~ Language.Haskell.Tools.AST.SemaInfoTypes.NoSemanticInfo
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                Main.$s$fDomaind6
                  `cast`
                (Sym (Data.Type.Equality.N:~[0]
                          <*>_N) <Language.Haskell.Tools.AST.SemaInfoTypes.NoSemanticInfo>_N <Language.Haskell.Tools.AST.SemaInfoTypes.NoSemanticInfo>_N) -}
5e4805d233cd4ae5a534d049b3d86b9c
  $s$fDomaind6 ::
    Language.Haskell.Tools.AST.SemaInfoTypes.NoSemanticInfo
    GHC.Types.~~ Language.Haskell.Tools.AST.SemaInfoTypes.NoSemanticInfo
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Eq#
                   @ *
                   @ *
                   @ Language.Haskell.Tools.AST.SemaInfoTypes.NoSemanticInfo
                   @ Language.Haskell.Tools.AST.SemaInfoTypes.NoSemanticInfo
                   @~ <Language.Haskell.Tools.AST.SemaInfoTypes.NoSemanticInfo>_N) -}
5491fe2f63e15519c830aba0f0cf471b
  $s$fDomaind7 ::
    Data.Typeable.Internal.Typeable
      Language.Haskell.Tools.AST.Ann.IdDom
  {- Arity: 1, Strictness: <L,A>,
     Unfolding: InlineRule (0, True, True)
                Main.$s$fDomaind8
                  `cast`
                (Sym (Data.Typeable.Internal.N:Typeable[0]
                          <*>_N <Language.Haskell.Tools.AST.Ann.IdDom>_N)) -}
dfbf39e21930ea6fe7f417ed050763df
  $s$fDomaind8 ::
    GHC.Prim.Proxy# Language.Haskell.Tools.AST.Ann.IdDom
    -> Data.Typeable.Internal.TypeRep
  {- Arity: 1, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ (wild :: GHC.Prim.Proxy#
                              Language.Haskell.Tools.AST.Ann.IdDom) ->
                 Main.$s$fDomaind9) -}
88ccbb73a28fd419dcd0048c16592b99
  $s$fDomaind9 :: Data.Typeable.Internal.TypeRep
  {- Unfolding: (case Data.Typeable.Internal.typeRepFingerprints
                        (GHC.Types.[] @ Data.Typeable.Internal.TypeRep)
                        (GHC.Types.[]
                           @ Data.Typeable.Internal.TypeRep) of kt_fps { DEFAULT ->
                 case GHC.Fingerprint.fingerprintFingerprints
                        (GHC.Types.:
                           @ GHC.Fingerprint.Type.Fingerprint
                           Main.$s$fDomaind10
                           kt_fps) of dt { GHC.Fingerprint.Type.Fingerprint dt1 dt2 ->
                 Data.Typeable.Internal.TypeRep
                   dt1
                   dt2
                   Language.Haskell.Tools.AST.Ann.$tcIdDom
                   (GHC.Types.[] @ Data.Typeable.Internal.TypeRep)
                   (GHC.Types.[] @ Data.Typeable.Internal.TypeRep) } }) -}
8d32839dee3cf59cb03b2390d2726b61
  $s$fDomaind_$s$fDomaind_$cp10Domain ::
    GHC.Show.Show
      (Language.Haskell.Tools.AST.Ann.SemanticInfo'
         Language.Haskell.Tools.AST.Ann.IdDom
         Language.Haskell.Tools.AST.Ann.SameInfoExprCls)
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                Language.Haskell.Tools.AST.SemaInfoTypes.$fShowScopeInfo
                  `cast`
                (GHC.Show.Show
                   (Sym (Language.Haskell.Tools.AST.Ann.D:R:SemanticInfo'IdDomSameInfoExprCls[0])))_R -}
9c28c66ca95eeb47f7babe091f297aff
  $s$fDomaind_$s$fDomaind_$cp11Domain ::
    GHC.Show.Show
      (Language.Haskell.Tools.AST.Ann.SemanticInfo'
         Language.Haskell.Tools.AST.Ann.IdDom
         Language.Haskell.Tools.AST.Ann.SameInfoImportCls)
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                Main.$s$fDomaind2
                  `cast`
                (GHC.Show.Show
                   (Sym (Language.Haskell.Tools.AST.Ann.D:R:SemanticInfo'IdDomSameInfoImportCls[0])))_R -}
cff916c7951f88d19154c219f0f5bf0c
  $s$fDomaind_$s$fDomaind_$cp12Domain ::
    GHC.Show.Show
      (Language.Haskell.Tools.AST.Ann.SemanticInfo'
         Language.Haskell.Tools.AST.Ann.IdDom
         Language.Haskell.Tools.AST.Ann.SameInfoModuleCls)
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                Main.$s$fDomaind1
                  `cast`
                (GHC.Show.Show
                   (Sym (Language.Haskell.Tools.AST.Ann.D:R:SemanticInfo'IdDomSameInfoModuleCls[0])))_R -}
5144d505054c89d4b68d41f93d126b88
  $s$fDomaind_$s$fDomaind_$cp13Domain ::
    GHC.Show.Show
      (Language.Haskell.Tools.AST.Ann.SemanticInfo'
         Language.Haskell.Tools.AST.Ann.IdDom
         Language.Haskell.Tools.AST.Ann.SameInfoWildcardCls)
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                Language.Haskell.Tools.AST.SemaInfoTypes.$fShowImplicitFieldInfo
                  `cast`
                (GHC.Show.Show
                   (Sym (Language.Haskell.Tools.AST.Ann.D:R:SemanticInfo'IdDomSameInfoWildcardCls[0])))_R -}
e12f55c7d9911873eac87042049df685
  $s$fDomaind_$s$fDomaind_$cp2Domain ::
    Data.Data.Data Language.Haskell.Tools.AST.Ann.IdDom
  {- Unfolding: InlineRule (0, True, True)
                Language.Haskell.Tools.AST.Ann.$fDataIdDom -}
ba375b5679fe8c6a2035fa2d427cabb9
  $s$fDomaind_$s$fDomaind_$cp3Domain ::
    Language.Haskell.Tools.AST.Ann.SemanticInfo'
      Language.Haskell.Tools.AST.Ann.IdDom
      Language.Haskell.Tools.AST.Ann.SameInfoDefaultCls
    Data.Type.Equality.~ Language.Haskell.Tools.AST.SemaInfoTypes.NoSemanticInfo
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                Main.$s$fDomaind5
                  `cast`
                ((Data.Type.Equality.~)
                   <*>_N
                   (Sym (Language.Haskell.Tools.AST.Ann.D:R:SemanticInfo'IdDomSameInfoDefaultCls[0]))
                   <Language.Haskell.Tools.AST.SemaInfoTypes.NoSemanticInfo>_N)_R -}
15a29af09bb235bee509d53ab684b0a6
  $s$fDomaind_$s$fDomaind_$cp4Domain ::
    Data.Data.Data
      (Language.Haskell.Tools.AST.Ann.SemanticInfo'
         Language.Haskell.Tools.AST.Ann.IdDom
         Language.Haskell.Tools.AST.Ann.SameInfoNameCls)
  {- Unfolding: InlineRule (0, True, True)
                Language.Haskell.Tools.AST.SemaInfoTypes.$fDataCNameInfo
                  `cast`
                (Data.Data.Data
                   (Sym (Language.Haskell.Tools.AST.Ann.D:R:SemanticInfo'IdDomSameInfoNameCls[0])))_R -}
b9b414b5aa534231c8d33677beace835
  $s$fDomaind_$s$fDomaind_$cp5Domain ::
    Data.Data.Data
      (Language.Haskell.Tools.AST.Ann.SemanticInfo'
         Language.Haskell.Tools.AST.Ann.IdDom
         Language.Haskell.Tools.AST.Ann.SameInfoExprCls)
  {- Unfolding: InlineRule (0, True, True)
                Language.Haskell.Tools.AST.SemaInfoTypes.$fDataScopeInfo
                  `cast`
                (Data.Data.Data
                   (Sym (Language.Haskell.Tools.AST.Ann.D:R:SemanticInfo'IdDomSameInfoExprCls[0])))_R -}
3eb93907e64507f96fe11b77913ebb1c
  $s$fDomaind_$s$fDomaind_$cp6Domain ::
    Data.Data.Data
      (Language.Haskell.Tools.AST.Ann.SemanticInfo'
         Language.Haskell.Tools.AST.Ann.IdDom
         Language.Haskell.Tools.AST.Ann.SameInfoImportCls)
  {- Unfolding: InlineRule (0, True, True)
                Main.$s$fDomaind4
                  `cast`
                (Data.Data.Data
                   (Sym (Language.Haskell.Tools.AST.Ann.D:R:SemanticInfo'IdDomSameInfoImportCls[0])))_R -}
b01745e66cbb7f33f437fe8fed1fe91c
  $s$fDomaind_$s$fDomaind_$cp7Domain ::
    Data.Data.Data
      (Language.Haskell.Tools.AST.Ann.SemanticInfo'
         Language.Haskell.Tools.AST.Ann.IdDom
         Language.Haskell.Tools.AST.Ann.SameInfoModuleCls)
  {- Unfolding: InlineRule (0, True, True)
                Main.$s$fDomaind3
                  `cast`
                (Data.Data.Data
                   (Sym (Language.Haskell.Tools.AST.Ann.D:R:SemanticInfo'IdDomSameInfoModuleCls[0])))_R -}
bbadef693fa0a5ce07d86b2dff5f4bbf
  $s$fDomaind_$s$fDomaind_$cp8Domain ::
    Data.Data.Data
      (Language.Haskell.Tools.AST.Ann.SemanticInfo'
         Language.Haskell.Tools.AST.Ann.IdDom
         Language.Haskell.Tools.AST.Ann.SameInfoWildcardCls)
  {- Unfolding: InlineRule (0, True, True)
                Language.Haskell.Tools.AST.SemaInfoTypes.$fDataImplicitFieldInfo
                  `cast`
                (Data.Data.Data
                   (Sym (Language.Haskell.Tools.AST.Ann.D:R:SemanticInfo'IdDomSameInfoWildcardCls[0])))_R -}
d0599d40db052aaf8c0be0051cc8c13f
  $s$fDomaind_$s$fDomaind_$cp9Domain ::
    GHC.Show.Show
      (Language.Haskell.Tools.AST.Ann.SemanticInfo'
         Language.Haskell.Tools.AST.Ann.IdDom
         Language.Haskell.Tools.AST.Ann.SameInfoNameCls)
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                Language.Haskell.Tools.AST.SemaInfoTypes.$fShowCNameInfo
                  `cast`
                (GHC.Show.Show
                   (Sym (Language.Haskell.Tools.AST.Ann.D:R:SemanticInfo'IdDomSameInfoNameCls[0])))_R -}
4c36d2f1a2c39b4cf747fdde562ff7f8
  $s$fDomaind_$s$fShowImportInfo ::
    GHC.Show.Show
      (Language.Haskell.Tools.AST.SemaInfoTypes.ImportInfo Var.Var)
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (Language.Haskell.Tools.AST.SemaInfoTypes.ImportInfo Var.Var)
                  Main.$s$fDomaind_$s$fShowImportInfo_$cshowsPrec
                  (Language.Haskell.Tools.AST.SemaInfoTypes.$fShowImportInfo_$cshow
                     @ Var.Var
                     Var.$fOutputableVar)
                  (Language.Haskell.Tools.AST.SemaInfoTypes.$fShowImportInfo_$cshowList
                     @ Var.Var
                     Var.$fOutputableVar) -}
59a994187f9e09447cad302d88ba5538
  $s$fDomaind_$s$fShowImportInfo_$cshowsPrec ::
    GHC.Types.Int
    -> Language.Haskell.Tools.AST.SemaInfoTypes.ImportInfo Var.Var
    -> GHC.Show.ShowS
  {- Arity: 3,
     Strictness: <L,A><S,1*U(1*U(U(U,U,U,U,U,U,U),U(U,U,U,U,U,U,U)),1*U,1*U,1*U,1*U)><L,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ (ds1 :: GHC.Types.Int)
                   (x :: Language.Haskell.Tools.AST.SemaInfoTypes.ImportInfo Var.Var)
                   (s :: GHC.Base.String) ->
                 GHC.Base.augment
                   @ GHC.Types.Char
                   (\ @ b
                      (c :: GHC.Types.Char -> b -> b)[OneShot]
                      (n1 :: b)[OneShot] ->
                    GHC.Base.foldr
                      @ GHC.Types.Char
                      @ b
                      c
                      n1
                      (Language.Haskell.Tools.AST.SemaInfoTypes.$fShowImportInfo_$cshow
                         @ Var.Var
                         Var.$fOutputableVar
                         x))
                   s) -}
f2f1dc7360175c7a33408ce59df1e171
  $s$fDomaind_$s$fShowModuleInfo ::
    GHC.Show.Show
      (Language.Haskell.Tools.AST.SemaInfoTypes.ModuleInfo Var.Var)
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (Language.Haskell.Tools.AST.SemaInfoTypes.ModuleInfo Var.Var)
                  Main.$s$fDomaind_$s$fShowModuleInfo_$cshowsPrec
                  (Language.Haskell.Tools.AST.SemaInfoTypes.$fShowModuleInfo_$cshow
                     @ Var.Var
                     Var.$fOutputableVar)
                  (Language.Haskell.Tools.AST.SemaInfoTypes.$fShowModuleInfo_$cshowList
                     @ Var.Var
                     Var.$fOutputableVar) -}
fe21de8fb6be01368eb530ba7f3fe9a2
  $s$fDomaind_$s$fShowModuleInfo_$cshowsPrec ::
    GHC.Types.Int
    -> Language.Haskell.Tools.AST.SemaInfoTypes.ModuleInfo Var.Var
    -> GHC.Show.ShowS
  {- Arity: 3,
     Strictness: <L,A><S,1*U(1*U(U(U,U,U,U,U,U,U),U(U,U,U,U,U,U,U)),A,1*U,1*U,1*U,1*U)><L,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ (ds1 :: GHC.Types.Int)
                   (x :: Language.Haskell.Tools.AST.SemaInfoTypes.ModuleInfo Var.Var)
                   (s :: GHC.Base.String) ->
                 GHC.Base.augment
                   @ GHC.Types.Char
                   (\ @ b
                      (c :: GHC.Types.Char -> b -> b)[OneShot]
                      (n1 :: b)[OneShot] ->
                    GHC.Base.foldr
                      @ GHC.Types.Char
                      @ b
                      c
                      n1
                      (Language.Haskell.Tools.AST.SemaInfoTypes.$fShowModuleInfo_$cshow
                         @ Var.Var
                         Var.$fOutputableVar
                         x))
                   s) -}
f55a55711c1df029b1336aec4adf906c
  $s$fEqMap ::
    GHC.Classes.Eq
      (Data.Map.Base.Map
         (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
         [Main.Line])
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (Data.Map.Base.Map
                       (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                       [Main.Line])
                  (Data.Map.Base.$fEqMap_$c==
                     @ (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                     @ [Main.Line]
                     Main.$s$fEqMap2
                     Main.$s$fEqMap1)
                  Main.$s$fEqMap_$s$fEqMap_$c/= -}
1ef5807f154a6efb94620287a07da277
  $s$fEqMap1 :: GHC.Classes.Eq [Main.Line]
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                GHC.Classes.$fEq[]_$s$fEq[] -}
8427c59e197ac88adc7c7d3c34e7b2db
  $s$fEqMap2 ::
    GHC.Classes.Eq
      (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                ExtMonad.$s$fEqLogicalRelation -}
167019da22b8caa22e927ff9808feab6
  $s$fEqMap_$s$fEqMap_$c/= ::
    Data.Map.Base.Map
      (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
      [Main.Line]
    -> Data.Map.Base.Map
         (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
         [Main.Line]
    -> GHC.Types.Bool
  {- Arity: 2, Strictness: <L,U><L,U>, Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (x :: Data.Map.Base.Map
                           (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                           [Main.Line])
                   (y :: Data.Map.Base.Map
                           (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                           [Main.Line]) ->
                 GHC.Classes.not
                   (Data.Map.Base.$fEqMap_$c==
                      @ (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                      @ [Main.Line]
                      Main.$s$fEqMap2
                      Main.$s$fEqMap1
                      x
                      y)) -}
aef04c7b3fe10935eee7beada8768236
  $s$fShowLogicalRelation ::
    GHC.Show.Show
      (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                  (ExtMap.$fShowLogicalRelation_$cshowsPrec
                     @ GHC.LanguageExtensions.Type.Extension
                     GHC.LanguageExtensions.Type.$fShowExtension)
                  Main.$s$fShowLogicalRelation_$s$fShowLogicalRelation_$cshow
                  Main.$s$fShowLogicalRelation_$s$fShowLogicalRelation_$cshowList -}
a2bfedec67f2e89bc6d5afe528b440b9
  $s$fShowLogicalRelation_$s$fShowLogicalRelation_$cshow ::
    ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension
    -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: ExtMap.LogicalRelation
                           GHC.LanguageExtensions.Type.Extension) ->
                 ExtMap.$fShowLogicalRelation_$cshowsPrec
                   @ GHC.LanguageExtensions.Type.Extension
                   GHC.LanguageExtensions.Type.$fShowExtension
                   GHC.Show.shows22
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
a56e096abaddfe29c564bdb766684157
  $s$fShowLogicalRelation_$s$fShowLogicalRelation_$cshowList ::
    [ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension]
    -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (eta :: [ExtMap.LogicalRelation
                              GHC.LanguageExtensions.Type.Extension])
                   (eta1 :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                   (ExtMap.$fShowLogicalRelation_$cshowsPrec
                      @ GHC.LanguageExtensions.Type.Extension
                      GHC.LanguageExtensions.Type.$fShowExtension
                      ExtMap.$fShowLogicalRelation1)
                   eta
                   eta1) -}
e9a3d4e03d33a6a40290ea16a35706e9
  $s$fShowMap ::
    GHC.Show.Show
      (Data.Map.Base.Map
         (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
         [Main.Line])
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (Data.Map.Base.Map
                       (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                       [Main.Line])
                  (Data.Map.Base.$fShowMap_$cshowsPrec
                     @ (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                     @ [Main.Line]
                     Main.$s$fShowMap2
                     Main.$s$fShowMap1)
                  (Data.Map.Base.$fShowMap_$cshow
                     @ (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                     @ [Main.Line]
                     Main.$s$fShowMap2
                     Main.$s$fShowMap1)
                  Main.$s$fShowMap_$s$fShowMap_$cshowList -}
5d06d4a5cb2c21c16bc4c4559837bbfb
  $s$fShowMap1 :: GHC.Show.Show [Main.Line]
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                GHC.Show.$fShow[]_$s$fShow[] -}
af82a058fd4d2c376cd038d76cb4578a
  $s$fShowMap2 ::
    GHC.Show.Show
      (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                Main.$s$fShowLogicalRelation -}
d45b606a6169e6e390ed38c0c39fe197
  $s$fShowMap_$s$fShowMap_$cshowList ::
    [Data.Map.Base.Map
       (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
       [Main.Line]]
    -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [Data.Map.Base.Map
                             (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                             [Main.Line]])
                   (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ (Data.Map.Base.Map
                        (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                        [Main.Line])
                   (Data.Map.Base.$fShowMap_$cshowsPrec
                      @ (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                      @ [Main.Line]
                      Main.$s$fShowMap2
                      Main.$s$fShowMap1
                      GHC.Show.shows22)
                   ls
                   s) -}
d6831ef04cb9301b090dfae6f7bb7ec7
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module Main.$trModule2 Main.$trModule1) -}
847d9fc3b8e6f0b424199f36b4999bb2
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Main"#) -}
24ef6042833e75ffd7aa98b83ecca98d
  $trModule2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "main"#) -}
7af240b6ee374790e44b8cf722c97ed2
  type Line = GHC.Types.Int
69cefa388be49c50c1f4617683a15f66
  type ModuleName = GHC.Base.String
00ee6e5de6d68262e83bc75f983ce276
  type SimpleMap =
    Data.Map.Base.Map
      (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
      [Main.Line]
ac591eb9759f42c740e55bbe2c0673aa
  type TestName = GHC.Base.String
d4fa7246dc264273548aacc630b4bc5a
  type TestSuite = (GHC.IO.FilePath, [Main.TestName])
f0547d2e69a5046b646d61f5851d0c4b
  bangPatternsModules :: [[GHC.Types.Char]]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ [GHC.Types.Char]
                   Main.bangPatternsModules17
                   Main.bangPatternsModules1) -}
30f24ce83abf4e5db373fa6fdfaae521
  bangPatternsModules1 :: [[GHC.Types.Char]]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ [GHC.Types.Char]
                   Main.bangPatternsModules16
                   Main.bangPatternsModules2) -}
9048534094b767f1ecc982942f27b7b8
  bangPatternsModules10 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "InStmt"#) -}
af5d1eb938c84e0b0dd6f6318dd9b906
  bangPatternsModules11 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "InRhsGuard"#) -}
783e2b4818b50ce60eaa2a06952ada3c
  bangPatternsModules12 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "InPattern"#) -}
0cd44b51f53daf418cca61ebb49421c5
  bangPatternsModules13 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "InPatSynRhs"#) -}
1ed36f0e592ca26893e4aebcf3a1837f
  bangPatternsModules14 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "InMatchLhs"#) -}
e7cd7d8cf7798eafd7b18ded33c85b3d
  bangPatternsModules15 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "InExpr"#) -}
59e4d816203b30de0474526abb1b9231
  bangPatternsModules16 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "InAlt"#) -}
70a46e73c7f5fa4800b5731582cb425e
  bangPatternsModules17 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Combined"#) -}
881ac0e4a728e7557827f79bd1de6651
  bangPatternsModules2 :: [[GHC.Types.Char]]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ [GHC.Types.Char]
                   Main.bangPatternsModules15
                   Main.bangPatternsModules3) -}
12d61956138a804e089d75ed43a15f7b
  bangPatternsModules3 :: [[GHC.Types.Char]]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ [GHC.Types.Char]
                   Main.bangPatternsModules14
                   Main.bangPatternsModules4) -}
a30df90e8b70c25693f98c57a175b1c8
  bangPatternsModules4 :: [[GHC.Types.Char]]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ [GHC.Types.Char]
                   Main.bangPatternsModules13
                   Main.bangPatternsModules5) -}
3eebbeb2b5141d06dcd2ebe63bafbbbc
  bangPatternsModules5 :: [[GHC.Types.Char]]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ [GHC.Types.Char]
                   Main.bangPatternsModules12
                   Main.bangPatternsModules6) -}
0253e134f3c0e39bb8b85f8932019dc9
  bangPatternsModules6 :: [[GHC.Types.Char]]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ [GHC.Types.Char]
                   Main.bangPatternsModules11
                   Main.bangPatternsModules7) -}
44979c73501bf00b81fd376ce656e56b
  bangPatternsModules7 :: [[GHC.Types.Char]]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ [GHC.Types.Char]
                   Main.bangPatternsModules10
                   Main.bangPatternsModules8) -}
180d393ed71f6a731e6fbcc94dfe4bfe
  bangPatternsModules8 :: [[GHC.Types.Char]]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ [GHC.Types.Char]
                   Main.bangPatternsModules9
                   (GHC.Types.[] @ [GHC.Types.Char])) -}
2e2a8a2b614a8c0d09f2f39ef0399e26
  bangPatternsModules9 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "InValueBind"#) -}
c6fa2917a0c98fa82c79a3d6d6118a6b
  bangPatternsRoot :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "BangPatternsTest"#) -}
4c316cecf41294bc3cf986a252cb01b1
  bangPatternsTest :: ([GHC.Types.Char], [[GHC.Types.Char]])
  {- Strictness: m,
     Unfolding: ((Main.bangPatternsRoot, Main.bangPatternsModules)) -}
3f84020ec2a0b8875f9a9d44ba2baf50
  derivingsModules :: [[GHC.Types.Char]]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ [GHC.Types.Char]
                   Main.derivingsModules15
                   Main.derivingsModules1) -}
0611ef993a7bb9f07203c3fc06865f98
  derivingsModules1 :: [[GHC.Types.Char]]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ [GHC.Types.Char]
                   Main.derivingsModules14
                   Main.derivingsModules2) -}
6d46cff66186ef7bf217cc2656386b53
  derivingsModules10 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   "StandaloneNewtypeAny"#) -}
26f2c0fd8e02f7c539ce7549774ae317
  derivingsModules11 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "StandaloneNewtype"#) -}
a4c0cf304eb35cdb44af4bf3bc61dfe0
  derivingsModules12 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   "StandaloneDataSynonyms"#) -}
d26241c5f9a481a63b26707bfb117510
  derivingsModules13 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "StandaloneData"#) -}
ee090f3d0090ad53b9919cb46097a264
  derivingsModules14 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "NewtypeDeriving"#) -}
003f9e810ac9ac9663ab64b9b50e6561
  derivingsModules15 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "DataDeriving"#) -}
485409fba839a802ac8848c144100aab
  derivingsModules2 :: [[GHC.Types.Char]]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ [GHC.Types.Char]
                   Main.derivingsModules13
                   Main.derivingsModules3) -}
0db26de3446188b68848842e933e037c
  derivingsModules3 :: [[GHC.Types.Char]]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ [GHC.Types.Char]
                   Main.derivingsModules12
                   Main.derivingsModules4) -}
a1d4b993f5feb7297ec56940b2e7436e
  derivingsModules4 :: [[GHC.Types.Char]]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ [GHC.Types.Char]
                   Main.derivingsModules11
                   Main.derivingsModules5) -}
de0e6e23418584f972dd06d34966299d
  derivingsModules5 :: [[GHC.Types.Char]]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ [GHC.Types.Char]
                   Main.derivingsModules10
                   Main.derivingsModules6) -}
4df9732a87d7ac15c709118ccce0f121
  derivingsModules6 :: [[GHC.Types.Char]]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ [GHC.Types.Char]
                   Main.derivingsModules9
                   Main.derivingsModules7) -}
55ba89fc172cc4d91488ebf8f8f63aaa
  derivingsModules7 :: [[GHC.Types.Char]]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ [GHC.Types.Char]
                   Main.derivingsModules8
                   (GHC.Types.[] @ [GHC.Types.Char])) -}
e8c4d4c50354874505d139c2b8d54efe
  derivingsModules8 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   "StandaloneNewtypeSynonymsAny"#) -}
8b653b4213c87fedec73b1b282bd86d4
  derivingsModules9 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   "StandaloneNewtypeSynonyms"#) -}
334b56ff81c178da87581a441b34ee8b
  derivingsRoot :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "DerivingsTest"#) -}
d1e100a04fb71c52d5e8d37a29bbf10d
  derivingsTest :: ([GHC.Types.Char], [[GHC.Types.Char]])
  {- Strictness: m,
     Unfolding: ((Main.derivingsRoot, Main.derivingsModules)) -}
f3110d6a70c40a631023ad01671f87e2
  flexibleInstancesModules :: [[GHC.Types.Char]]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ [GHC.Types.Char]
                   Main.bangPatternsModules17
                   Main.flexibleInstancesModules1) -}
f4bca34c7e536b267021104728cda15b
  flexibleInstancesModules1 :: [[GHC.Types.Char]]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ [GHC.Types.Char]
                   Main.flexibleInstancesModules16
                   Main.flexibleInstancesModules2) -}
f1c8c713c55eae8e29a1b38a2c33e641
  flexibleInstancesModules10 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "TopLevelTyVar"#) -}
300f025e9ecda8d001531579305b8df5
  flexibleInstancesModules11 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "SameTyVars"#) -}
1c4f3aece76eed627f099f970a393960
  flexibleInstancesModules12 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "NoOccurenceOFF"#) -}
c5ff53e9d587948f0c7d6d34a3dd5703
  flexibleInstancesModules13 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "NoOccurenceON"#) -}
d62a88d2c4438e5801ef96f39cd01a69
  flexibleInstancesModules14 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "NestedWiredInType"#) -}
e8fc27bfe5cf43412131887b9ea58ba7
  flexibleInstancesModules15 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "NestedUnitTyCon"#) -}
946db993d192386f1f68b17abb83c2bd
  flexibleInstancesModules16 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "NestedTypes"#) -}
beb5dcf6cc9648680c754b5862504f7f
  flexibleInstancesModules2 :: [[GHC.Types.Char]]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ [GHC.Types.Char]
                   Main.flexibleInstancesModules15
                   Main.flexibleInstancesModules3) -}
eadbed3803b2e4b5374d9bc49492da28
  flexibleInstancesModules3 :: [[GHC.Types.Char]]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ [GHC.Types.Char]
                   Main.flexibleInstancesModules14
                   Main.flexibleInstancesModules4) -}
2b72a9bc2ddc1e63dca6d002e28c9ba7
  flexibleInstancesModules4 :: [[GHC.Types.Char]]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ [GHC.Types.Char]
                   Main.flexibleInstancesModules13
                   Main.flexibleInstancesModules5) -}
9919e819df5137b161ee68a3de3fd146
  flexibleInstancesModules5 :: [[GHC.Types.Char]]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ [GHC.Types.Char]
                   Main.flexibleInstancesModules12
                   Main.flexibleInstancesModules6) -}
82e383ea58c1f3ebae6199ba95ad3956
  flexibleInstancesModules6 :: [[GHC.Types.Char]]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ [GHC.Types.Char]
                   Main.flexibleInstancesModules11
                   Main.flexibleInstancesModules7) -}
dadc6ede0fcb62fcdd0b4224aa2996eb
  flexibleInstancesModules7 :: [[GHC.Types.Char]]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ [GHC.Types.Char]
                   Main.flexibleInstancesModules10
                   Main.flexibleInstancesModules8) -}
1cf7ad966c919f886dc94e7e59320c0a
  flexibleInstancesModules8 :: [[GHC.Types.Char]]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ [GHC.Types.Char]
                   Main.flexibleInstancesModules9
                   (GHC.Types.[] @ [GHC.Types.Char])) -}
4fa0e37bf6cffc8eda935877746d7f59
  flexibleInstancesModules9 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   "TopLevelWiredInType"#) -}
35b5cff588c8bf14612c642a05384559
  flexibleInstancesRoot :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   "FlexibleInstancesTest"#) -}
70a3d4715e7f9a1fd934438bd9d9c407
  flexibleInstancesTest :: ([GHC.Types.Char], [[GHC.Types.Char]])
  {- Strictness: m,
     Unfolding: ((Main.flexibleInstancesRoot,
                  Main.flexibleInstancesModules)) -}
b46145ead61e299c855e0554420bc226
  getExtAnnotsFrom ::
    GHC.IO.FilePath -> Main.ModuleName -> GHC.Types.IO Main.SimpleMap
  {- Arity: 3, Strictness: <L,1*U><L,U><S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.getExtAnnotsFrom1
                  `cast`
                (<GHC.IO.FilePath>_R
                 ->_R <Main.ModuleName>_R
                 ->_R Sym (GHC.Types.N:IO[0] <Main.SimpleMap>_R)) -}
7d1ba0ece8b72fc8054d609045232a67
  getExtAnnotsFrom1 ::
    GHC.IO.FilePath
    -> Main.ModuleName
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, Main.SimpleMap #)
  {- Arity: 3, Strictness: <L,1*U><L,U><S,U>,
     Unfolding: (\ (dir :: GHC.IO.FilePath)
                   (moduleName :: Main.ModuleName)
                   (s :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case GHC.IO.Handle.FD.openFile1
                        (System.FilePath.Posix.addExtension
                           (Main.mkModulePath dir moduleName)
                           Main.getExtAnnotsFrom2)
                        GHC.IO.IOMode.ReadMode
                        s of ds1 { (#,#) ipv ipv1 ->
                 case GHC.IO.Handle.Text.hGetContents1
                        ipv1
                        ipv of ds2 { (#,#) ipv2 ipv3 ->
                 case AnnotationParser.getExtensionAnnotations_go
                        AnnotationParser.getExtensionAnnotations1
                        (Data.OldList.lines ipv3)
                        (Data.Map.Base.Tip
                           @ (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                           @ [GHC.Types.Int]) of vx { DEFAULT ->
                 (# ipv2, vx #) } } }) -}
08ae4287bb474c4f8b4c21f6f12f3057
  getExtAnnotsFrom2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# ".hs"#) -}
65462fe1c82c728c2546fd372bceb4ea
  getExtensionsFrom ::
    GHC.IO.FilePath -> Main.ModuleName -> GHC.Types.IO Main.SimpleMap
  {- Arity: 3, Strictness: <L,U><L,U><S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.getExtensionsFrom1
                  `cast`
                (<GHC.IO.FilePath>_R
                 ->_R <Main.ModuleName>_R
                 ->_R Sym (GHC.Types.N:IO[0] <Main.SimpleMap>_R)) -}
92f49b190e9b991277c8de30f8ac6c77
  getExtensionsFrom1 ::
    GHC.IO.FilePath
    -> Main.ModuleName
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, Main.SimpleMap #)
  {- Arity: 3, Strictness: <L,U><L,U><S,U>,
     Unfolding: (\ (dir :: GHC.IO.FilePath)
                   (moduleName :: Main.ModuleName)
                   (eta :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 GHC.runGhc1
                   @ Main.SimpleMap
                   Main.getExtensionsFrom5
                   (let {
                      m :: GhcMonad.Ghc
                             Language.Haskell.Tools.Refactor.Prepare.TypedModule
                      = Main.loadModuleAST dir moduleName
                    } in
                    (\ (s :: GhcMonad.Session)
                       (s1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                     case (m `cast`
                           (GhcMonad.N:Ghc[0]
                                <Language.Haskell.Tools.Refactor.Prepare.TypedModule>_R)
                             s)
                            `cast`
                          (GHC.Types.N:IO[0]
                               <Language.Haskell.Tools.Refactor.Prepare.TypedModule>_R)
                            s1 of ds1 { (#,#) ipv ipv1 ->
                     case TraverseAST.traverseModule1
                            @ Language.Haskell.Tools.AST.Ann.IdDom of wild { Control.Reference.Representation.Reference ds2 ds3 ds4 ds5 ds6 ds7 ->
                     case ((((ds4 Main.getExtensionsFrom3 ipv1)
                               `cast`
                             (Control.Monad.Trans.Reader.N:ReaderT[0]
                                  <*>_N
                                  <[GHC.LanguageExtensions.Type.Extension]>_R
                                  <Control.Monad.Trans.State.Lazy.StateT
                                     ExtMap.ExtMap GhcMonad.Ghc>_R
                                  <Language.Haskell.Tools.Refactor.RefactorBase.UnnamedModule
                                     Language.Haskell.Tools.AST.Ann.IdDom>_N)
                               (ExtensionOrganizer.collectDefaultExtensions
                                  @ Language.Haskell.Tools.AST.Ann.IdDom
                                  ipv1))
                              `cast`
                            (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                 <Data.Map.Base.Map
                                    (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                                    [SrcLoc.SrcSpan]>_N
                                 <GhcMonad.Ghc>_R
                                 <Language.Haskell.Tools.AST.Ann.Ann
                                    Language.Haskell.Tools.AST.Representation.Modules.UModule
                                    Language.Haskell.Tools.AST.Ann.IdDom
                                    Language.Haskell.Tools.AST.Ann.SrcTemplateStage>_N)
                              (Data.Map.Base.Tip
                                 @ (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                                 @ [SrcLoc.SrcSpan]))
                             `cast`
                           (GhcMonad.N:Ghc[0]
                                <(Language.Haskell.Tools.AST.Ann.Ann
                                    Language.Haskell.Tools.AST.Representation.Modules.UModule
                                    Language.Haskell.Tools.AST.Ann.IdDom
                                    Language.Haskell.Tools.AST.Ann.SrcTemplateStage,
                                  Data.Map.Base.Map
                                    (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                                    [SrcLoc.SrcSpan])>_R)
                             s)
                            `cast`
                          (GHC.Types.N:IO[0]
                               <(Language.Haskell.Tools.AST.Ann.Ann
                                   Language.Haskell.Tools.AST.Representation.Modules.UModule
                                   Language.Haskell.Tools.AST.Ann.IdDom
                                   Language.Haskell.Tools.AST.Ann.SrcTemplateStage,
                                 Data.Map.Base.Map
                                   (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                                   [SrcLoc.SrcSpan])>_R)
                            ipv of ds8 { (#,#) ipv2 ipv3 ->
                     case ipv3 of wild1 { (,) ds9 s' ->
                     case Data.Map.Strict.map
                            @ [SrcLoc.SrcSpan]
                            @ [Main.Line]
                            @ (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                            Main.getExtensionsFrom2
                            s' of vx { DEFAULT ->
                     (# ipv2, vx #) } } } } })
                      `cast`
                    (Trans
                         (<GhcMonad.Session>_R
                          ->_R Sym (GHC.Types.N:IO[0] <Main.SimpleMap>_R))
                         (Sym (GhcMonad.N:Ghc[0] <Main.SimpleMap>_R))))
                   eta) -}
460e0c4b4b975622d323fe2c35b1152c
  getExtensionsFrom2 :: [SrcLoc.SrcSpan] -> [Main.Line]
  {- Arity: 1,
     Unfolding: (GHC.Base.map
                   @ SrcLoc.SrcSpan
                   @ Main.Line
                   Main.spanToLine) -}
7478d3cdc6ff8b00cb7d16023965bdb2
  getExtensionsFrom3 ::
    Language.Haskell.Tools.AST.ElementTypes.Decl
      Language.Haskell.Tools.AST.Ann.IdDom
    -> ExtMonad.ExtMonad
         (Language.Haskell.Tools.AST.ElementTypes.Decl
            Language.Haskell.Tools.AST.Ann.IdDom)
  {- Unfolding: (TraverseAST.traverseDecl
                   @ Language.Haskell.Tools.AST.Ann.IdDom
                   Main.getExtensionsFrom4
                     `cast`
                   (GHC.Classes.(%,%)
                      <Language.Haskell.Tools.AST.Ann.Domain
                         Language.Haskell.Tools.AST.Ann.IdDom>_N
                      (Language.Haskell.Tools.AST.SemaInfoClasses.HasNameInfo'
                         (Trans
                              (Sym (Language.Haskell.Tools.AST.Ann.D:R:SemanticInfo'IdDomSameInfoNameCls[0]))
                              (Language.Haskell.Tools.AST.Ann.SemanticInfo'
                                 <Language.Haskell.Tools.AST.Ann.IdDom>_N
                                 (Sym (Language.Haskell.Tools.AST.Ann.D:R:SemaInfoClassify[0])))_N))_N)_R) -}
ea3a5dcd276fd2867780e11b234287cf
  getExtensionsFrom4 ::
    (Language.Haskell.Tools.AST.Ann.Domain
       Language.Haskell.Tools.AST.Ann.IdDom,
     Language.Haskell.Tools.AST.SemaInfoClasses.HasNameInfo'
       Language.Haskell.Tools.AST.SemaInfoTypes.CNameInfo)
  {- Strictness: m,
     Unfolding: ((Main.$s$fDomaind,
                  Language.Haskell.Tools.AST.SemaInfoClasses.$fHasIdInfo'CNameInfo_$csemanticsName
                    `cast`
                  (Sym (Language.Haskell.Tools.AST.SemaInfoClasses.N:HasNameInfo'[0]
                            <Language.Haskell.Tools.AST.SemaInfoTypes.CNameInfo>_N)))) -}
c220c7729d09e9920ab72e81eeabb643
  getExtensionsFrom5 :: GHC.Base.Maybe GHC.IO.FilePath
  {- Strictness: m2,
     Unfolding: (GHC.Base.Just @ GHC.IO.FilePath GHC.Paths.libdir) -}
531689932a0606966cee8c22423e1803
  lambdaCasePatternsTest :: ([GHC.Types.Char], [[GHC.Types.Char]])
  {- Strictness: m, Unfolding: ((Main.lcRoot, Main.lcModules)) -}
aec5af6f01d1402d4397abe883a1c0e2
  lcModules :: [[GHC.Types.Char]]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ [GHC.Types.Char]
                   Main.lcModules13
                   Main.lcModules1) -}
f8b24055ab6de4569730158a313e1dc7
  lcModules1 :: [[GHC.Types.Char]]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ [GHC.Types.Char]
                   Main.lcModules12
                   Main.lcModules2) -}
bd6fcd229568154fca6baeadcc619920
  lcModules10 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "InRhs"#) -}
ef6a9bd215a025aef45db2edb15bf8a5
  lcModules11 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "InFieldUpdate"#) -}
0b58f6e49b8ffe95e43df3cc717a94f4
  lcModules12 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "InCompStmt"#) -}
b4ac30b851f24dcb4662a9535413038b
  lcModules13 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "InCaseRhs"#) -}
5847427804559d76ee0f2684b9f4c750
  lcModules2 :: [[GHC.Types.Char]]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ [GHC.Types.Char]
                   Main.bangPatternsModules15
                   Main.lcModules3) -}
93a192f30e9b14c8c0fde3cea05074a3
  lcModules3 :: [[GHC.Types.Char]]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ [GHC.Types.Char]
                   Main.lcModules11
                   Main.lcModules4) -}
1503be11a2dab13aef48731b127dd66c
  lcModules4 :: [[GHC.Types.Char]]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ [GHC.Types.Char]
                   Main.bangPatternsModules12
                   Main.lcModules5) -}
9459dcb6f7d48cf1abf8a190b2b1305b
  lcModules5 :: [[GHC.Types.Char]]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ [GHC.Types.Char]
                   Main.lcModules10
                   Main.lcModules6) -}
e114095e3f230e1a5be33b70652d21b3
  lcModules6 :: [[GHC.Types.Char]]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ [GHC.Types.Char]
                   Main.bangPatternsModules11
                   Main.lcModules7) -}
393296443eba82b78dfb9a91ea705edd
  lcModules7 :: [[GHC.Types.Char]]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ [GHC.Types.Char]
                   Main.bangPatternsModules10
                   Main.lcModules8) -}
dfa31e01c104c60c34c35094d5ef4d83
  lcModules8 :: [[GHC.Types.Char]]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ [GHC.Types.Char]
                   Main.lcModules9
                   (GHC.Types.[] @ [GHC.Types.Char])) -}
bd7533ef9f781880140ba978981b6fba
  lcModules9 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "InTupSecElem"#) -}
216085c029653066848fc4ddd44d2e57
  lcRoot :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "LambdaCaseTest"#) -}
ac0d92fb393ae1251b4956e703e909f7
  loadModuleAST ::
    GHC.IO.FilePath
    -> Main.ModuleName
    -> GhcMonad.Ghc Language.Haskell.Tools.Refactor.Prepare.TypedModule
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: (\ (dir :: GHC.IO.FilePath)
                   (moduleName :: Main.ModuleName) ->
                 let {
                   m :: GhcMonad.Ghc HscTypes.ModSummary
                   = Language.Haskell.Tools.Refactor.Prepare.loadModule
                       (System.FilePath.Posix.combine Main.testRoot dir)
                       moduleName
                 } in
                 (\ (eta :: GhcMonad.Session)
                    (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                  case (Main.loadModuleAST1
                          `cast`
                        (GhcMonad.N:Ghc[0] <[GHC.Base.String]>_R)
                          eta)
                         `cast`
                       (GHC.Types.N:IO[0] <[GHC.Base.String]>_R)
                         eta1 of ds1 { (#,#) ipv ipv1 ->
                  case (m `cast` (GhcMonad.N:Ghc[0] <HscTypes.ModSummary>_R) eta)
                         `cast`
                       (GHC.Types.N:IO[0] <HscTypes.ModSummary>_R)
                         ipv of ds2 { (#,#) ipv2 ipv3 ->
                  Language.Haskell.Tools.Refactor.Prepare.$wparseTyped
                    ipv3
                    eta
                    ipv2 } })
                   `cast`
                 (Trans
                      (<GhcMonad.Session>_R
                       ->_R Sym (GHC.Types.N:IO[0]
                                     <Language.Haskell.Tools.Refactor.Prepare.TypedModule>_R))
                      (Sym (GhcMonad.N:Ghc[0]
                                <Language.Haskell.Tools.Refactor.Prepare.TypedModule>_R)))) -}
426afadb3e496781e8b9bba44d389abc
  loadModuleAST1 :: GhcMonad.Ghc [GHC.Base.String]
  {- Unfolding: (Language.Haskell.Tools.Refactor.Prepare.useFlags
                   Main.loadModuleAST2) -}
4ab16fd2ef7ef42bc85b5cf46b7819b5
  loadModuleAST2 :: [GHC.Base.String]
  {- Unfolding: (GHC.Types.:
                   @ GHC.Base.String
                   Main.loadModuleAST3
                   (GHC.Types.[] @ GHC.Base.String)) -}
45dac10961750443034cd033db16cc06
  loadModuleAST3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "-w"#) -}
594aea3d365f373f71164ac0756c0b12
  main :: GHC.Types.IO ()
  {- Arity: 1,
     Unfolding: InlineRule (0, True, True)
                Main.main1 `cast` (Sym (GHC.Types.N:IO[0] <()>_R)) -}
b9740cecd6a56221c7923c6451764961
  main1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1,
     Unfolding: (Test.Tasty.CmdLine.defaultMainWithIngredients1
                   Test.Tasty.defaultIngredients
                   Main.main2) -}
4d8edb876f9c4b1e7e0128f53b9ecc0f
  main10 :: [Test.Tasty.Core.TestTree]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Test.Tasty.Core.TestTree
                   Main.main11
                   (GHC.Types.[] @ Test.Tasty.Core.TestTree)) -}
aa9698e351c38fe36c35936ed7cd607e
  main11 :: Test.Tasty.Core.TestTree
  {- Strictness: m2,
     Unfolding: (Test.Tasty.Core.TestGroup Main.lcRoot Main.main12) -}
f03a4014421c39cda91d86a5bd2c6682
  main12 :: [Test.Tasty.Core.TestTree]
  {- Unfolding: (GHC.Base.map
                   @ [GHC.Types.Char]
                   @ Test.Tasty.Core.TestTree
                   Main.main13
                   Main.lcModules) -}
a9da3fa25c9d533bb24f6c5c669337ee
  main13 :: Main.ModuleName -> Test.Tasty.Core.TestTree
  {- Arity: 1, Unfolding: (Main.mkTest Main.lcRoot) -}
f188c6a17c1c263540f1f873f4792742
  main14 :: Test.Tasty.Core.TestTree
  {- Strictness: m2,
     Unfolding: (Test.Tasty.Core.TestGroup Main.vpRoot Main.main15) -}
eab08550ae901ec879dc8574c6ab3490
  main15 :: [Test.Tasty.Core.TestTree]
  {- Unfolding: (GHC.Base.map
                   @ [GHC.Types.Char]
                   @ Test.Tasty.Core.TestTree
                   Main.main16
                   Main.vpModules) -}
6acad45eb8ab6a0c0b7f52a3773e3842
  main16 :: Main.ModuleName -> Test.Tasty.Core.TestTree
  {- Arity: 1, Unfolding: (Main.mkTest Main.vpRoot) -}
331dc3eff855396df554a08f7186c05c
  main17 :: Test.Tasty.Core.TestTree
  {- Strictness: m2,
     Unfolding: (Test.Tasty.Core.TestGroup Main.thRoot Main.main18) -}
1305a7e4106b283baa827ca81035035a
  main18 :: [Test.Tasty.Core.TestTree]
  {- Unfolding: (GHC.Base.map
                   @ [GHC.Types.Char]
                   @ Test.Tasty.Core.TestTree
                   Main.main19
                   Main.thModules) -}
1fdb5b3691c11c37679bfcc608fa71f8
  main19 :: Main.ModuleName -> Test.Tasty.Core.TestTree
  {- Arity: 1, Unfolding: (Main.mkTest Main.thRoot) -}
018950524e78abcbb783659ec11e2456
  main2 :: Test.Tasty.Core.TestTree
  {- Strictness: m2,
     Unfolding: (Test.Tasty.Core.TestGroup Main.main35 Main.main3) -}
94c9f4e641c4538b80ebdea60b01572b
  main20 :: Test.Tasty.Core.TestTree
  {- Strictness: m2,
     Unfolding: (Test.Tasty.Core.TestGroup
                   Main.bangPatternsRoot
                   Main.main21) -}
ff23560272068ba34be7a3f3ba288992
  main21 :: [Test.Tasty.Core.TestTree]
  {- Unfolding: (GHC.Base.map
                   @ [GHC.Types.Char]
                   @ Test.Tasty.Core.TestTree
                   Main.main22
                   Main.bangPatternsModules) -}
74deccfbfec4a3797839719ebc03adce
  main22 :: Main.ModuleName -> Test.Tasty.Core.TestTree
  {- Arity: 1, Unfolding: (Main.mkTest Main.bangPatternsRoot) -}
d2812218d73b8359a5c2b6100e2973ad
  main23 :: Test.Tasty.Core.TestTree
  {- Strictness: m2,
     Unfolding: (Test.Tasty.Core.TestGroup
                   Main.patSynRoot
                   Main.main24) -}
aece131ea4d10c5fb10da3b9b248350f
  main24 :: [Test.Tasty.Core.TestTree]
  {- Unfolding: (GHC.Base.map
                   @ [GHC.Types.Char]
                   @ Test.Tasty.Core.TestTree
                   Main.main25
                   Main.patSynModules) -}
fd3ca0cd24577efed33abe22cc10fa03
  main25 :: Main.ModuleName -> Test.Tasty.Core.TestTree
  {- Arity: 1, Unfolding: (Main.mkTest Main.patSynRoot) -}
b88cb69fd29b12bea9c9a02bf38a1e4c
  main26 :: Test.Tasty.Core.TestTree
  {- Strictness: m2,
     Unfolding: (Test.Tasty.Core.TestGroup
                   Main.derivingsRoot
                   Main.main27) -}
d8ba71d79234aa83b51889eeb8dcc118
  main27 :: [Test.Tasty.Core.TestTree]
  {- Unfolding: (GHC.Base.map
                   @ [GHC.Types.Char]
                   @ Test.Tasty.Core.TestTree
                   Main.main28
                   Main.derivingsModules) -}
d21cc72aa75f38a58a9ffef81196b5f9
  main28 :: Main.ModuleName -> Test.Tasty.Core.TestTree
  {- Arity: 1, Unfolding: (Main.mkTest Main.derivingsRoot) -}
70061df650701877f5c421236152b995
  main29 :: Test.Tasty.Core.TestTree
  {- Strictness: m2,
     Unfolding: (Test.Tasty.Core.TestGroup
                   Main.flexibleInstancesRoot
                   Main.main30) -}
692f13a255d5b6cefe520ae436abdce9
  main3 :: [Test.Tasty.Core.TestTree]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Test.Tasty.Core.TestTree
                   Main.main32
                   Main.main4) -}
360ad8b09163b6aa55e430081687e0dd
  main30 :: [Test.Tasty.Core.TestTree]
  {- Unfolding: (GHC.Base.map
                   @ [GHC.Types.Char]
                   @ Test.Tasty.Core.TestTree
                   Main.main31
                   Main.flexibleInstancesModules) -}
ad0cf959c98cbec28ba604a31db3647f
  main31 :: Main.ModuleName -> Test.Tasty.Core.TestTree
  {- Arity: 1, Unfolding: (Main.mkTest Main.flexibleInstancesRoot) -}
449dc17f565d95447823db65402fd9ef
  main32 :: Test.Tasty.Core.TestTree
  {- Strictness: m2,
     Unfolding: (Test.Tasty.Core.TestGroup
                   Main.recordWildCardsRoot
                   Main.main33) -}
80f3273e58c4f4b0e934171cb0aaf513
  main33 :: [Test.Tasty.Core.TestTree]
  {- Unfolding: (GHC.Base.map
                   @ [GHC.Types.Char]
                   @ Test.Tasty.Core.TestTree
                   Main.main34
                   Main.recordWildCardsModules) -}
41349dfff70b619664a527efc1bd78d2
  main34 :: Main.ModuleName -> Test.Tasty.Core.TestTree
  {- Arity: 1, Unfolding: (Main.mkTest Main.recordWildCardsRoot) -}
30f2bbd5667b169a1468c7393d904613
  main35 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "All tests"#) -}
61c92c8bf2f05798cf88170e413290ee
  main36 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1,
     Unfolding: (GHC.TopHandler.runMainIO1
                   @ ()
                   Main.main1 `cast` (Sym (GHC.Types.N:IO[0] <()>_R))) -}
5a920c251d5711dcdcfee1ff59857c27
  main4 :: [Test.Tasty.Core.TestTree]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Test.Tasty.Core.TestTree
                   Main.main29
                   Main.main5) -}
13ae9fd5c4470e0913dd2203817e9bc7
  main5 :: [Test.Tasty.Core.TestTree]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Test.Tasty.Core.TestTree
                   Main.main26
                   Main.main6) -}
c457c8cb1e6ef24debe22f961a8fca82
  main6 :: [Test.Tasty.Core.TestTree]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Test.Tasty.Core.TestTree
                   Main.main23
                   Main.main7) -}
1dc8d5e4c6908c8d4dca5e8b37d229ff
  main7 :: [Test.Tasty.Core.TestTree]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Test.Tasty.Core.TestTree
                   Main.main20
                   Main.main8) -}
5a1ed78b157f0fe050e90eb4ed8c009d
  main8 :: [Test.Tasty.Core.TestTree]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Test.Tasty.Core.TestTree
                   Main.main17
                   Main.main9) -}
d1e9c30cf2a5592e9601440f1e3359c7
  main9 :: [Test.Tasty.Core.TestTree]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Test.Tasty.Core.TestTree
                   Main.main14
                   Main.main10) -}
ec6da98ff92019942387a85de226b890
  mkAssertion ::
    GHC.IO.FilePath -> Main.ModuleName -> GHC.Types.IO ()
  {- Arity: 3, Strictness: <L,U><L,U><S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.mkTest1
                  `cast`
                (<GHC.IO.FilePath>_R
                 ->_R <Main.ModuleName>_R
                 ->_R Sym (GHC.Types.N:IO[0] <()>_R)) -}
9d5440bb26a798f7a2ee50807478401b
  mkModulePath ::
    GHC.IO.FilePath -> Main.ModuleName -> GHC.IO.FilePath
  {- Arity: 2, Strictness: <L,1*U><S,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (testDir :: GHC.IO.FilePath) (testName :: Main.ModuleName) ->
                 System.FilePath.Posix.combine
                   Main.testRoot
                   (System.FilePath.Posix.combine testDir testName)) -}
ff6663a5ec8dcb2d7733c2fb27b95d88
  mkTest ::
    GHC.IO.FilePath -> Main.ModuleName -> Test.Tasty.Core.TestTree
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (dir :: GHC.IO.FilePath) (moduleName :: Main.ModuleName) ->
                 Test.Tasty.Core.SingleTest
                   @ Test.Tasty.HUnit.TestCase
                   Test.Tasty.HUnit.$fIsTestTestCase
                   moduleName
                   (\ (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                    case Main.mkTest1 dir moduleName eta1 of ds { (#,#) ipv ipv1 ->
                    (# ipv, GHC.Types.[] @ GHC.Types.Char #) })
                     `cast`
                   (Trans
                        (Sym (GHC.Types.N:IO[0] <[GHC.Types.Char]>_R))
                        (Sym (Test.Tasty.HUnit.N:TestCase[0])))) -}
8b08793892ebe6ccdf3125a2d14621ba
  mkTest1 ::
    GHC.IO.FilePath
    -> Main.ModuleName
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 3, Strictness: <L,U><L,U><S,U>,
     Unfolding: (\ (dir :: GHC.IO.FilePath)
                   (moduleName :: Main.ModuleName)
                   (s :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case Main.getExtAnnotsFrom1
                        dir
                        moduleName
                        s of ds1 { (#,#) ipv ipv1 ->
                 case Main.getExtensionsFrom1
                        dir
                        moduleName
                        ipv of ds2 { (#,#) ipv2 ipv3 ->
                 Test.Tasty.HUnit.Orig.@=?2
                   @ (Data.Map.Base.Map
                        (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                        [Main.Line])
                   Main.$s$fEqMap
                   Main.$s$fShowMap
                   Main.mkTest3
                   (Data.Map.Strict.map
                      @ [Main.Line]
                      @ [Main.Line]
                      @ (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                      Main.mkTest2
                      ipv1)
                   (Data.Map.Strict.map
                      @ [Main.Line]
                      @ [Main.Line]
                      @ (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                      Main.mkTest2
                      ipv3)
                   ipv2 } }) -}
ea51d7161b21374195ab0a06476ec1c2
  mkTest2 :: [Main.Line] -> [Main.Line]
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (eta :: [Main.Line]) ->
                 Data.OldList.sortBy @ Main.Line GHC.Classes.compareInt eta) -}
6d90334f42732faea674cc6c4fa94683
  mkTest3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Failure"#) -}
98dcbf78489f53f5415f91d0b3cbfe1b
  mkTests :: Main.TestSuite -> Test.Tasty.Core.TestTree
  {- Arity: 1, Strictness: <S,1*U(U,1*U)>m2,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: (GHC.IO.FilePath, [Main.TestName])) ->
                 case ds of wild { (,) testDir tests ->
                 Test.Tasty.Core.TestGroup
                   testDir
                   (GHC.Base.build
                      @ Test.Tasty.Core.TestTree
                      (\ @ b1
                         (c :: Test.Tasty.Core.TestTree -> b1 -> b1)[OneShot]
                         (n :: b1)[OneShot] ->
                       GHC.Base.foldr
                         @ [GHC.Types.Char]
                         @ b1
                         (GHC.Base.mapFB
                            @ Test.Tasty.Core.TestTree
                            @ b1
                            @ [GHC.Types.Char]
                            c
                            (Main.mkTest testDir))
                         n
                         tests)) }) -}
091c66d9c4768f62e5cd7aa1162af49f
  patSynModules :: [[GHC.Types.Char]]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ [GHC.Types.Char]
                   Main.patSynModules3
                   Main.patSynModules1) -}
02691799984433237c2f53905075fdda
  patSynModules1 :: [[GHC.Types.Char]]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ [GHC.Types.Char]
                   Main.patSynModules2
                   (GHC.Types.[] @ [GHC.Types.Char])) -}
5aa9c5bc240e082575734a001edba059
  patSynModules2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "BiDirectional"#) -}
d596adf5fd951378a0c7a05912aae61a
  patSynModules3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "UniDirectional"#) -}
863d30207d592fe9283e7aae06bca9fc
  patSynRoot :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   "PatternSynonymsTest"#) -}
05eab7c68eabc330ea406a1b84e13a5e
  patternSynonymsTest :: ([GHC.Types.Char], [[GHC.Types.Char]])
  {- Strictness: m,
     Unfolding: ((Main.patSynRoot, Main.patSynModules)) -}
d50ff39db500125c79002e3244d2d455
  recordWildCardsModules :: [[GHC.Types.Char]]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ [GHC.Types.Char]
                   Main.recordWildCardsModules2
                   Main.recordWildCardsModules1) -}
8dd20198597c53b0f6b9315662c8846b
  recordWildCardsModules1 :: [[GHC.Types.Char]]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ [GHC.Types.Char]
                   Main.bangPatternsModules12
                   (GHC.Types.[] @ [GHC.Types.Char])) -}
a2ddc21790372146e11bd4757ac762f5
  recordWildCardsModules2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "InExpression"#) -}
65837ce0a9cac2898856bee5b3da70ab
  recordWildCardsRoot :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   "RecordWildCardsTest"#) -}
d2305f7fed87fd74dfe33976e41de6e3
  recordWildCardsTest :: ([GHC.Types.Char], [[GHC.Types.Char]])
  {- Strictness: m,
     Unfolding: ((Main.recordWildCardsRoot,
                  Main.recordWildCardsModules)) -}
c6f33b25e519a4805bb997b665b33db2
  simplifyExtMap :: ExtMap.ExtMap -> Main.SimpleMap
  {- Arity: 1,
     Unfolding: (Data.Map.Strict.map
                   @ [SrcLoc.SrcSpan]
                   @ [Main.Line]
                   @ (ExtMap.LogicalRelation GHC.LanguageExtensions.Type.Extension)
                   Main.getExtensionsFrom2) -}
fd1b74381642bb227af1548d8ad903df
  spanToLine :: SrcLoc.SrcSpan -> Main.Line
  {- Arity: 1, Strictness: <S,1*U>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: SrcLoc.SrcSpan) ->
                 case ds of wild {
                   SrcLoc.RealSrcSpan s
                   -> case s of wild1 { SrcLoc.RealSrcSpan' ds1 dt dt1 dt2 dt3 ->
                      GHC.Types.I# dt2 }
                   SrcLoc.UnhelpfulSpan ipv -> Main.spanToLine1 }) -}
649a00f1d5ad10af098c48dbe5830626
  spanToLine1 :: Main.Line
  {- Strictness: x -}
3d6b3c9b16e7fb9a2db90779789829d9
  templateHaskellTest :: ([GHC.Types.Char], [[GHC.Types.Char]])
  {- Strictness: m, Unfolding: ((Main.thRoot, Main.thModules)) -}
5929189f95e54ac5738439752429a699
  testRoot :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "test"#) -}
5e762699a9f0fcdb2c53db2638d3e95d
  thModules :: [[GHC.Types.Char]]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ [GHC.Types.Char]
                   Main.thModules3
                   Main.thModules1) -}
d13ca44bd43ec0b153c1df9d6bc06c64
  thModules1 :: [[GHC.Types.Char]]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ [GHC.Types.Char]
                   Main.thModules2
                   (GHC.Types.[] @ [GHC.Types.Char])) -}
5e24821ace60782ca1d53526087e92fa
  thModules2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Splice"#) -}
7fb6e20b151aa5b2296604ea7c60c8d3
  thModules3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Quote"#) -}
90f5c616ad66ecf385f5e5cadeccd648
  thRoot :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   "TemplateHaskellTest"#) -}
e64ac34693b3efa11beb2693edba3a8c
  viewPatternsTest :: ([GHC.Types.Char], [[GHC.Types.Char]])
  {- Strictness: m, Unfolding: ((Main.vpRoot, Main.vpModules)) -}
aa36134ad8e9255a7cc0efbd71513844
  vpModules :: [[GHC.Types.Char]]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ [GHC.Types.Char]
                   Main.bangPatternsModules16
                   Main.vpModules1) -}
95a3c1db4a5b1ccdd15bf5c1652daf2e
  vpModules1 :: [[GHC.Types.Char]]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ [GHC.Types.Char]
                   Main.bangPatternsModules15
                   Main.vpModules2) -}
5de0383deff6a112da94fd335e59d2fd
  vpModules2 :: [[GHC.Types.Char]]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ [GHC.Types.Char]
                   Main.bangPatternsModules14
                   Main.vpModules3) -}
ecafe418fdf88daca863949a3952208a
  vpModules3 :: [[GHC.Types.Char]]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ [GHC.Types.Char]
                   Main.vpModules4
                   (GHC.Types.[] @ [GHC.Types.Char])) -}
109784b5608e6a6cf05bfd57c274d7cf
  vpModules4 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "InMatchLhsNested"#) -}
9dcb9d6578fe40473573d77eb833df26
  vpRoot :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "ViewPatternsTest"#) -}
"SPEC/Main $fDataImportInfo @ Var" [ALWAYS] forall ($dData :: Data.Data.Data
                                                                Var.Var)
  Language.Haskell.Tools.AST.SemaInfoTypes.$fDataImportInfo @ Var.Var
                                                            $dData
  = Main.$s$fDataImportInfo
"SPEC/Main $fDataImportInfo_$cdataCast2 @ Var" [ALWAYS] forall ($dData :: Data.Data.Data
                                                                            Var.Var)
  Language.Haskell.Tools.AST.SemaInfoTypes.$fDataImportInfo_$cdataCast2 @ Var.Var
                                                                        $dData
  = Main.$s$fDataImportInfo_$s$fDataImportInfo_$cdataCast2
"SPEC/Main $fDataImportInfo_$cdataTypeOf @ Var" [ALWAYS] forall ($dData :: Data.Data.Data
                                                                             Var.Var)
  Language.Haskell.Tools.AST.SemaInfoTypes.$fDataImportInfo_$cdataTypeOf @ Var.Var
                                                                         $dData
  = Main.$s$fDataImportInfo_$s$fDataImportInfo_$cdataTypeOf
"SPEC/Main $fDataImportInfo_$ctoConstr @ Var" [ALWAYS] forall ($dData :: Data.Data.Data
                                                                           Var.Var)
  Language.Haskell.Tools.AST.SemaInfoTypes.$fDataImportInfo_$ctoConstr @ Var.Var
                                                                       $dData
  = Main.$s$fDataImportInfo_$s$fDataImportInfo_$ctoConstr
"SPEC/Main $fDataModuleInfo @ Var" [ALWAYS] forall ($dData :: Data.Data.Data
                                                                Var.Var)
  Language.Haskell.Tools.AST.SemaInfoTypes.$fDataModuleInfo @ Var.Var
                                                            $dData
  = Main.$s$fDataModuleInfo
"SPEC/Main $fDataModuleInfo_$cdataCast2 @ Var" [ALWAYS] forall ($dData :: Data.Data.Data
                                                                            Var.Var)
  Language.Haskell.Tools.AST.SemaInfoTypes.$fDataModuleInfo_$cdataCast2 @ Var.Var
                                                                        $dData
  = Main.$s$fDataModuleInfo_$s$fDataModuleInfo_$cdataCast2
"SPEC/Main $fDataModuleInfo_$cdataTypeOf @ Var" [ALWAYS] forall ($dData :: Data.Data.Data
                                                                             Var.Var)
  Language.Haskell.Tools.AST.SemaInfoTypes.$fDataModuleInfo_$cdataTypeOf @ Var.Var
                                                                         $dData
  = Main.$s$fDataModuleInfo_$s$fDataModuleInfo_$cdataTypeOf
"SPEC/Main $fDataModuleInfo_$ctoConstr @ Var" [ALWAYS] forall ($dData :: Data.Data.Data
                                                                           Var.Var)
  Language.Haskell.Tools.AST.SemaInfoTypes.$fDataModuleInfo_$ctoConstr @ Var.Var
                                                                       $dData
  = Main.$s$fDataModuleInfo_$s$fDataModuleInfo_$ctoConstr
"SPEC/Main $fDomaind @ IdDom" [ALWAYS] forall ($dShow4 :: GHC.Show.Show
                                                            (Language.Haskell.Tools.AST.Ann.SemanticInfo'
                                                               Language.Haskell.Tools.AST.Ann.IdDom
                                                               Language.Haskell.Tools.AST.Ann.SameInfoWildcardCls))
                                              ($dShow3 :: GHC.Show.Show
                                                            (Language.Haskell.Tools.AST.Ann.SemanticInfo'
                                                               Language.Haskell.Tools.AST.Ann.IdDom
                                                               Language.Haskell.Tools.AST.Ann.SameInfoModuleCls))
                                              ($dShow2 :: GHC.Show.Show
                                                            (Language.Haskell.Tools.AST.Ann.SemanticInfo'
                                                               Language.Haskell.Tools.AST.Ann.IdDom
                                                               Language.Haskell.Tools.AST.Ann.SameInfoImportCls))
                                              ($dShow1 :: GHC.Show.Show
                                                            (Language.Haskell.Tools.AST.Ann.SemanticInfo'
                                                               Language.Haskell.Tools.AST.Ann.IdDom
                                                               Language.Haskell.Tools.AST.Ann.SameInfoExprCls))
                                              ($dShow :: GHC.Show.Show
                                                           (Language.Haskell.Tools.AST.Ann.SemanticInfo'
                                                              Language.Haskell.Tools.AST.Ann.IdDom
                                                              Language.Haskell.Tools.AST.Ann.SameInfoNameCls))
                                              ($dData5 :: Data.Data.Data
                                                            (Language.Haskell.Tools.AST.Ann.SemanticInfo'
                                                               Language.Haskell.Tools.AST.Ann.IdDom
                                                               Language.Haskell.Tools.AST.Ann.SameInfoWildcardCls))
                                              ($dData4 :: Data.Data.Data
                                                            (Language.Haskell.Tools.AST.Ann.SemanticInfo'
                                                               Language.Haskell.Tools.AST.Ann.IdDom
                                                               Language.Haskell.Tools.AST.Ann.SameInfoModuleCls))
                                              ($dData3 :: Data.Data.Data
                                                            (Language.Haskell.Tools.AST.Ann.SemanticInfo'
                                                               Language.Haskell.Tools.AST.Ann.IdDom
                                                               Language.Haskell.Tools.AST.Ann.SameInfoImportCls))
                                              ($dData2 :: Data.Data.Data
                                                            (Language.Haskell.Tools.AST.Ann.SemanticInfo'
                                                               Language.Haskell.Tools.AST.Ann.IdDom
                                                               Language.Haskell.Tools.AST.Ann.SameInfoExprCls))
                                              ($dData1 :: Data.Data.Data
                                                            (Language.Haskell.Tools.AST.Ann.SemanticInfo'
                                                               Language.Haskell.Tools.AST.Ann.IdDom
                                                               Language.Haskell.Tools.AST.Ann.SameInfoNameCls))
                                              ($d~ :: Language.Haskell.Tools.AST.Ann.SemanticInfo'
                                                        Language.Haskell.Tools.AST.Ann.IdDom
                                                        Language.Haskell.Tools.AST.Ann.SameInfoDefaultCls
                                                      Data.Type.Equality.~ Language.Haskell.Tools.AST.SemaInfoTypes.NoSemanticInfo)
                                              ($dData :: Data.Data.Data
                                                           Language.Haskell.Tools.AST.Ann.IdDom)
                                              ($dTypeable :: Data.Typeable.Internal.Typeable
                                                               Language.Haskell.Tools.AST.Ann.IdDom)
  Language.Haskell.Tools.AST.Ann.$fDomaind @ Language.Haskell.Tools.AST.Ann.IdDom
                                           $dTypeable
                                           $dData
                                           $d~
                                           $dData1
                                           $dData2
                                           $dData3
                                           $dData4
                                           $dData5
                                           $dShow
                                           $dShow1
                                           $dShow2
                                           $dShow3
                                           $dShow4
  = Main.$s$fDomaind
"SPEC/Main $fDomaind_$cp10Domain @ IdDom" [ALWAYS] forall ($dShow4 :: GHC.Show.Show
                                                                        (Language.Haskell.Tools.AST.Ann.SemanticInfo'
                                                                           Language.Haskell.Tools.AST.Ann.IdDom
                                                                           Language.Haskell.Tools.AST.Ann.SameInfoWildcardCls))
                                                          ($dShow3 :: GHC.Show.Show
                                                                        (Language.Haskell.Tools.AST.Ann.SemanticInfo'
                                                                           Language.Haskell.Tools.AST.Ann.IdDom
                                                                           Language.Haskell.Tools.AST.Ann.SameInfoModuleCls))
                                                          ($dShow2 :: GHC.Show.Show
                                                                        (Language.Haskell.Tools.AST.Ann.SemanticInfo'
                                                                           Language.Haskell.Tools.AST.Ann.IdDom
                                                                           Language.Haskell.Tools.AST.Ann.SameInfoImportCls))
                                                          ($dShow1 :: GHC.Show.Show
                                                                        (Language.Haskell.Tools.AST.Ann.SemanticInfo'
                                                                           Language.Haskell.Tools.AST.Ann.IdDom
                                                                           Language.Haskell.Tools.AST.Ann.SameInfoExprCls))
                                                          ($dShow :: GHC.Show.Show
                                                                       (Language.Haskell.Tools.AST.Ann.SemanticInfo'
                                                                          Language.Haskell.Tools.AST.Ann.IdDom
                                                                          Language.Haskell.Tools.AST.Ann.SameInfoNameCls))
                                                          ($dData5 :: Data.Data.Data
                                                                        (Language.Haskell.Tools.AST.Ann.SemanticInfo'
                                                                           Language.Haskell.Tools.AST.Ann.IdDom
                                                                           Language.Haskell.Tools.AST.Ann.SameInfoWildcardCls))
                                                          ($dData4 :: Data.Data.Data
                                                                        (Language.Haskell.Tools.AST.Ann.SemanticInfo'
                                                                           Language.Haskell.Tools.AST.Ann.IdDom
                                                                           Language.Haskell.Tools.AST.Ann.SameInfoModuleCls))
                                                          ($dData3 :: Data.Data.Data
                                                                        (Language.Haskell.Tools.AST.Ann.SemanticInfo'
                                                                           Language.Haskell.Tools.AST.Ann.IdDom
                                                                           Language.Haskell.Tools.AST.Ann.SameInfoImportCls))
                                                          ($dData2 :: Data.Data.Data
                                                                        (Language.Haskell.Tools.AST.Ann.SemanticInfo'
                                                                           Language.Haskell.Tools.AST.Ann.IdDom
                                                                           Language.Haskell.Tools.AST.Ann.SameInfoExprCls))
                                                          ($dData1 :: Data.Data.Data
                                                                        (Language.Haskell.Tools.AST.Ann.SemanticInfo'
                                                                           Language.Haskell.Tools.AST.Ann.IdDom
                                                                           Language.Haskell.Tools.AST.Ann.SameInfoNameCls))
                                                          ($d~ :: Language.Haskell.Tools.AST.Ann.SemanticInfo'
                                                                    Language.Haskell.Tools.AST.Ann.IdDom
                                                                    Language.Haskell.Tools.AST.Ann.SameInfoDefaultCls
                                                                  Data.Type.Equality.~ Language.Haskell.Tools.AST.SemaInfoTypes.NoSemanticInfo)
                                                          ($dData :: Data.Data.Data
                                                                       Language.Haskell.Tools.AST.Ann.IdDom)
                                                          ($dTypeable :: Data.Typeable.Internal.Typeable
                                                                           Language.Haskell.Tools.AST.Ann.IdDom)
  Language.Haskell.Tools.AST.Ann.$fDomaind_$cp10Domain @ Language.Haskell.Tools.AST.Ann.IdDom
                                                       $dTypeable
                                                       $dData
                                                       $d~
                                                       $dData1
                                                       $dData2
                                                       $dData3
                                                       $dData4
                                                       $dData5
                                                       $dShow
                                                       $dShow1
                                                       $dShow2
                                                       $dShow3
                                                       $dShow4
  = Main.$s$fDomaind_$s$fDomaind_$cp10Domain
"SPEC/Main $fDomaind_$cp11Domain @ IdDom" [ALWAYS] forall ($dShow4 :: GHC.Show.Show
                                                                        (Language.Haskell.Tools.AST.Ann.SemanticInfo'
                                                                           Language.Haskell.Tools.AST.Ann.IdDom
                                                                           Language.Haskell.Tools.AST.Ann.SameInfoWildcardCls))
                                                          ($dShow3 :: GHC.Show.Show
                                                                        (Language.Haskell.Tools.AST.Ann.SemanticInfo'
                                                                           Language.Haskell.Tools.AST.Ann.IdDom
                                                                           Language.Haskell.Tools.AST.Ann.SameInfoModuleCls))
                                                          ($dShow2 :: GHC.Show.Show
                                                                        (Language.Haskell.Tools.AST.Ann.SemanticInfo'
                                                                           Language.Haskell.Tools.AST.Ann.IdDom
                                                                           Language.Haskell.Tools.AST.Ann.SameInfoImportCls))
                                                          ($dShow1 :: GHC.Show.Show
                                                                        (Language.Haskell.Tools.AST.Ann.SemanticInfo'
                                                                           Language.Haskell.Tools.AST.Ann.IdDom
                                                                           Language.Haskell.Tools.AST.Ann.SameInfoExprCls))
                                                          ($dShow :: GHC.Show.Show
                                                                       (Language.Haskell.Tools.AST.Ann.SemanticInfo'
                                                                          Language.Haskell.Tools.AST.Ann.IdDom
                                                                          Language.Haskell.Tools.AST.Ann.SameInfoNameCls))
                                                          ($dData5 :: Data.Data.Data
                                                                        (Language.Haskell.Tools.AST.Ann.SemanticInfo'
                                                                           Language.Haskell.Tools.AST.Ann.IdDom
                                                                           Language.Haskell.Tools.AST.Ann.SameInfoWildcardCls))
                                                          ($dData4 :: Data.Data.Data
                                                                        (Language.Haskell.Tools.AST.Ann.SemanticInfo'
                                                                           Language.Haskell.Tools.AST.Ann.IdDom
                                                                           Language.Haskell.Tools.AST.Ann.SameInfoModuleCls))
                                                          ($dData3 :: Data.Data.Data
                                                                        (Language.Haskell.Tools.AST.Ann.SemanticInfo'
                                                                           Language.Haskell.Tools.AST.Ann.IdDom
                                                                           Language.Haskell.Tools.AST.Ann.SameInfoImportCls))
                                                          ($dData2 :: Data.Data.Data
                                                                        (Language.Haskell.Tools.AST.Ann.SemanticInfo'
                                                                           Language.Haskell.Tools.AST.Ann.IdDom
                                                                           Language.Haskell.Tools.AST.Ann.SameInfoExprCls))
                                                          ($dData1 :: Data.Data.Data
                                                                        (Language.Haskell.Tools.AST.Ann.SemanticInfo'
                                                                           Language.Haskell.Tools.AST.Ann.IdDom
                                                                           Language.Haskell.Tools.AST.Ann.SameInfoNameCls))
                                                          ($d~ :: Language.Haskell.Tools.AST.Ann.SemanticInfo'
                                                                    Language.Haskell.Tools.AST.Ann.IdDom
                                                                    Language.Haskell.Tools.AST.Ann.SameInfoDefaultCls
                                                                  Data.Type.Equality.~ Language.Haskell.Tools.AST.SemaInfoTypes.NoSemanticInfo)
                                                          ($dData :: Data.Data.Data
                                                                       Language.Haskell.Tools.AST.Ann.IdDom)
                                                          ($dTypeable :: Data.Typeable.Internal.Typeable
                                                                           Language.Haskell.Tools.AST.Ann.IdDom)
  Language.Haskell.Tools.AST.Ann.$fDomaind_$cp11Domain @ Language.Haskell.Tools.AST.Ann.IdDom
                                                       $dTypeable
                                                       $dData
                                                       $d~
                                                       $dData1
                                                       $dData2
                                                       $dData3
                                                       $dData4
                                                       $dData5
                                                       $dShow
                                                       $dShow1
                                                       $dShow2
                                                       $dShow3
                                                       $dShow4
  = Main.$s$fDomaind_$s$fDomaind_$cp11Domain
"SPEC/Main $fDomaind_$cp12Domain @ IdDom" [ALWAYS] forall ($dShow4 :: GHC.Show.Show
                                                                        (Language.Haskell.Tools.AST.Ann.SemanticInfo'
                                                                           Language.Haskell.Tools.AST.Ann.IdDom
                                                                           Language.Haskell.Tools.AST.Ann.SameInfoWildcardCls))
                                                          ($dShow3 :: GHC.Show.Show
                                                                        (Language.Haskell.Tools.AST.Ann.SemanticInfo'
                                                                           Language.Haskell.Tools.AST.Ann.IdDom
                                                                           Language.Haskell.Tools.AST.Ann.SameInfoModuleCls))
                                                          ($dShow2 :: GHC.Show.Show
                                                                        (Language.Haskell.Tools.AST.Ann.SemanticInfo'
                                                                           Language.Haskell.Tools.AST.Ann.IdDom
                                                                           Language.Haskell.Tools.AST.Ann.SameInfoImportCls))
                                                          ($dShow1 :: GHC.Show.Show
                                                                        (Language.Haskell.Tools.AST.Ann.SemanticInfo'
                                                                           Language.Haskell.Tools.AST.Ann.IdDom
                                                                           Language.Haskell.Tools.AST.Ann.SameInfoExprCls))
                                                          ($dShow :: GHC.Show.Show
                                                                       (Language.Haskell.Tools.AST.Ann.SemanticInfo'
                                                                          Language.Haskell.Tools.AST.Ann.IdDom
                                                                          Language.Haskell.Tools.AST.Ann.SameInfoNameCls))
                                                          ($dData5 :: Data.Data.Data
                                                                        (Language.Haskell.Tools.AST.Ann.SemanticInfo'
                                                                           Language.Haskell.Tools.AST.Ann.IdDom
                                                                           Language.Haskell.Tools.AST.Ann.SameInfoWildcardCls))
                                                          ($dData4 :: Data.Data.Data
                                                                        (Language.Haskell.Tools.AST.Ann.SemanticInfo'
                                                                           Language.Haskell.Tools.AST.Ann.IdDom
                                                                           Language.Haskell.Tools.AST.Ann.SameInfoModuleCls))
                                                          ($dData3 :: Data.Data.Data
                                                                        (Language.Haskell.Tools.AST.Ann.SemanticInfo'
                                                                           Language.Haskell.Tools.AST.Ann.IdDom
                                                                           Language.Haskell.Tools.AST.Ann.SameInfoImportCls))
                                                          ($dData2 :: Data.Data.Data
                                                                        (Language.Haskell.Tools.AST.Ann.SemanticInfo'
                                                                           Language.Haskell.Tools.AST.Ann.IdDom
                                                                           Language.Haskell.Tools.AST.Ann.SameInfoExprCls))
                                                          ($dData1 :: Data.Data.Data
                                                                        (Language.Haskell.Tools.AST.Ann.SemanticInfo'
                                                                           Language.Haskell.Tools.AST.Ann.IdDom
                                                                           Language.Haskell.Tools.AST.Ann.SameInfoNameCls))
                                                          ($d~ :: Language.Haskell.Tools.AST.Ann.SemanticInfo'
                                                                    Language.Haskell.Tools.AST.Ann.IdDom
                                                                    Language.Haskell.Tools.AST.Ann.SameInfoDefaultCls
                                                                  Data.Type.Equality.~ Language.Haskell.Tools.AST.SemaInfoTypes.NoSemanticInfo)
                                                          ($dData :: Data.Data.Data
                                                                       Language.Haskell.Tools.AST.Ann.IdDom)
                                                          ($dTypeable :: Data.Typeable.Internal.Typeable
                                                                           Language.Haskell.Tools.AST.Ann.IdDom)
  Language.Haskell.Tools.AST.Ann.$fDomaind_$cp12Domain @ Language.Haskell.Tools.AST.Ann.IdDom
                                                       $dTypeable
                                                       $dData
                                                       $d~
                                                       $dData1
                                                       $dData2
                                                       $dData3
                                                       $dData4
                                                       $dData5
                                                       $dShow
                                                       $dShow1
                                                       $dShow2
                                                       $dShow3
                                                       $dShow4
  = Main.$s$fDomaind_$s$fDomaind_$cp12Domain
"SPEC/Main $fDomaind_$cp13Domain @ IdDom" [ALWAYS] forall ($dShow4 :: GHC.Show.Show
                                                                        (Language.Haskell.Tools.AST.Ann.SemanticInfo'
                                                                           Language.Haskell.Tools.AST.Ann.IdDom
                                                                           Language.Haskell.Tools.AST.Ann.SameInfoWildcardCls))
                                                          ($dShow3 :: GHC.Show.Show
                                                                        (Language.Haskell.Tools.AST.Ann.SemanticInfo'
                                                                           Language.Haskell.Tools.AST.Ann.IdDom
                                                                           Language.Haskell.Tools.AST.Ann.SameInfoModuleCls))
                                                          ($dShow2 :: GHC.Show.Show
                                                                        (Language.Haskell.Tools.AST.Ann.SemanticInfo'
                                                                           Language.Haskell.Tools.AST.Ann.IdDom
                                                                           Language.Haskell.Tools.AST.Ann.SameInfoImportCls))
                                                          ($dShow1 :: GHC.Show.Show
                                                                        (Language.Haskell.Tools.AST.Ann.SemanticInfo'
                                                                           Language.Haskell.Tools.AST.Ann.IdDom
                                                                           Language.Haskell.Tools.AST.Ann.SameInfoExprCls))
                                                          ($dShow :: GHC.Show.Show
                                                                       (Language.Haskell.Tools.AST.Ann.SemanticInfo'
                                                                          Language.Haskell.Tools.AST.Ann.IdDom
                                                                          Language.Haskell.Tools.AST.Ann.SameInfoNameCls))
                                                          ($dData5 :: Data.Data.Data
                                                                        (Language.Haskell.Tools.AST.Ann.SemanticInfo'
                                                                           Language.Haskell.Tools.AST.Ann.IdDom
                                                                           Language.Haskell.Tools.AST.Ann.SameInfoWildcardCls))
                                                          ($dData4 :: Data.Data.Data
                                                                        (Language.Haskell.Tools.AST.Ann.SemanticInfo'
                                                                           Language.Haskell.Tools.AST.Ann.IdDom
                                                                           Language.Haskell.Tools.AST.Ann.SameInfoModuleCls))
                                                          ($dData3 :: Data.Data.Data
                                                                        (Language.Haskell.Tools.AST.Ann.SemanticInfo'
                                                                           Language.Haskell.Tools.AST.Ann.IdDom
                                                                           Language.Haskell.Tools.AST.Ann.SameInfoImportCls))
                                                          ($dData2 :: Data.Data.Data
                                                                        (Language.Haskell.Tools.AST.Ann.SemanticInfo'
                                                                           Language.Haskell.Tools.AST.Ann.IdDom
                                                                           Language.Haskell.Tools.AST.Ann.SameInfoExprCls))
                                                          ($dData1 :: Data.Data.Data
                                                                        (Language.Haskell.Tools.AST.Ann.SemanticInfo'
                                                                           Language.Haskell.Tools.AST.Ann.IdDom
                                                                           Language.Haskell.Tools.AST.Ann.SameInfoNameCls))
                                                          ($d~ :: Language.Haskell.Tools.AST.Ann.SemanticInfo'
                                                                    Language.Haskell.Tools.AST.Ann.IdDom
                                                                    Language.Haskell.Tools.AST.Ann.SameInfoDefaultCls
                                                                  Data.Type.Equality.~ Language.Haskell.Tools.AST.SemaInfoTypes.NoSemanticInfo)
                                                          ($dData :: Data.Data.Data
                                                                       Language.Haskell.Tools.AST.Ann.IdDom)
                                                          ($dTypeable :: Data.Typeable.Internal.Typeable
                                                                           Language.Haskell.Tools.AST.Ann.IdDom)
  Language.Haskell.Tools.AST.Ann.$fDomaind_$cp13Domain @ Language.Haskell.Tools.AST.Ann.IdDom
                                                       $dTypeable
                                                       $dData
                                                       $d~
                                                       $dData1
                                                       $dData2
                                                       $dData3
                                                       $dData4
                                                       $dData5
                                                       $dShow
                                                       $dShow1
                                                       $dShow2
                                                       $dShow3
                                                       $dShow4
  = Main.$s$fDomaind_$s$fDomaind_$cp13Domain
"SPEC/Main $fDomaind_$cp2Domain @ IdDom" [ALWAYS] forall ($dShow4 :: GHC.Show.Show
                                                                       (Language.Haskell.Tools.AST.Ann.SemanticInfo'
                                                                          Language.Haskell.Tools.AST.Ann.IdDom
                                                                          Language.Haskell.Tools.AST.Ann.SameInfoWildcardCls))
                                                         ($dShow3 :: GHC.Show.Show
                                                                       (Language.Haskell.Tools.AST.Ann.SemanticInfo'
                                                                          Language.Haskell.Tools.AST.Ann.IdDom
                                                                          Language.Haskell.Tools.AST.Ann.SameInfoModuleCls))
                                                         ($dShow2 :: GHC.Show.Show
                                                                       (Language.Haskell.Tools.AST.Ann.SemanticInfo'
                                                                          Language.Haskell.Tools.AST.Ann.IdDom
                                                                          Language.Haskell.Tools.AST.Ann.SameInfoImportCls))
                                                         ($dShow1 :: GHC.Show.Show
                                                                       (Language.Haskell.Tools.AST.Ann.SemanticInfo'
                                                                          Language.Haskell.Tools.AST.Ann.IdDom
                                                                          Language.Haskell.Tools.AST.Ann.SameInfoExprCls))
                                                         ($dShow :: GHC.Show.Show
                                                                      (Language.Haskell.Tools.AST.Ann.SemanticInfo'
                                                                         Language.Haskell.Tools.AST.Ann.IdDom
                                                                         Language.Haskell.Tools.AST.Ann.SameInfoNameCls))
                                                         ($dData5 :: Data.Data.Data
                                                                       (Language.Haskell.Tools.AST.Ann.SemanticInfo'
                                                                          Language.Haskell.Tools.AST.Ann.IdDom
                                                                          Language.Haskell.Tools.AST.Ann.SameInfoWildcardCls))
                                                         ($dData4 :: Data.Data.Data
                                                                       (Language.Haskell.Tools.AST.Ann.SemanticInfo'
                                                                          Language.Haskell.Tools.AST.Ann.IdDom
                                                                          Language.Haskell.Tools.AST.Ann.SameInfoModuleCls))
                                                         ($dData3 :: Data.Data.Data
                                                                       (Language.Haskell.Tools.AST.Ann.SemanticInfo'
                                                                          Language.Haskell.Tools.AST.Ann.IdDom
                                                                          Language.Haskell.Tools.AST.Ann.SameInfoImportCls))
                                                         ($dData2 :: Data.Data.Data
                                                                       (Language.Haskell.Tools.AST.Ann.SemanticInfo'
                                                                          Language.Haskell.Tools.AST.Ann.IdDom
                                                                          Language.Haskell.Tools.AST.Ann.SameInfoExprCls))
                                                         ($dData1 :: Data.Data.Data
                                                                       (Language.Haskell.Tools.AST.Ann.SemanticInfo'
                                                                          Language.Haskell.Tools.AST.Ann.IdDom
                                                                          Language.Haskell.Tools.AST.Ann.SameInfoNameCls))
                                                         ($d~ :: Language.Haskell.Tools.AST.Ann.SemanticInfo'
                                                                   Language.Haskell.Tools.AST.Ann.IdDom
                                                                   Language.Haskell.Tools.AST.Ann.SameInfoDefaultCls
                                                                 Data.Type.Equality.~ Language.Haskell.Tools.AST.SemaInfoTypes.NoSemanticInfo)
                                                         ($dData :: Data.Data.Data
                                                                      Language.Haskell.Tools.AST.Ann.IdDom)
                                                         ($dTypeable :: Data.Typeable.Internal.Typeable
                                                                          Language.Haskell.Tools.AST.Ann.IdDom)
  Language.Haskell.Tools.AST.Ann.$fDomaind_$cp2Domain @ Language.Haskell.Tools.AST.Ann.IdDom
                                                      $dTypeable
                                                      $dData
                                                      $d~
                                                      $dData1
                                                      $dData2
                                                      $dData3
                                                      $dData4
                                                      $dData5
                                                      $dShow
                                                      $dShow1
                                                      $dShow2
                                                      $dShow3
                                                      $dShow4
  = Main.$s$fDomaind_$s$fDomaind_$cp2Domain
"SPEC/Main $fDomaind_$cp3Domain @ IdDom" [ALWAYS] forall ($dShow4 :: GHC.Show.Show
                                                                       (Language.Haskell.Tools.AST.Ann.SemanticInfo'
                                                                          Language.Haskell.Tools.AST.Ann.IdDom
                                                                          Language.Haskell.Tools.AST.Ann.SameInfoWildcardCls))
                                                         ($dShow3 :: GHC.Show.Show
                                                                       (Language.Haskell.Tools.AST.Ann.SemanticInfo'
                                                                          Language.Haskell.Tools.AST.Ann.IdDom
                                                                          Language.Haskell.Tools.AST.Ann.SameInfoModuleCls))
                                                         ($dShow2 :: GHC.Show.Show
                                                                       (Language.Haskell.Tools.AST.Ann.SemanticInfo'
                                                                          Language.Haskell.Tools.AST.Ann.IdDom
                                                                          Language.Haskell.Tools.AST.Ann.SameInfoImportCls))
                                                         ($dShow1 :: GHC.Show.Show
                                                                       (Language.Haskell.Tools.AST.Ann.SemanticInfo'
                                                                          Language.Haskell.Tools.AST.Ann.IdDom
                                                                          Language.Haskell.Tools.AST.Ann.SameInfoExprCls))
                                                         ($dShow :: GHC.Show.Show
                                                                      (Language.Haskell.Tools.AST.Ann.SemanticInfo'
                                                                         Language.Haskell.Tools.AST.Ann.IdDom
                                                                         Language.Haskell.Tools.AST.Ann.SameInfoNameCls))
                                                         ($dData5 :: Data.Data.Data
                                                                       (Language.Haskell.Tools.AST.Ann.SemanticInfo'
                                                                          Language.Haskell.Tools.AST.Ann.IdDom
                                                                          Language.Haskell.Tools.AST.Ann.SameInfoWildcardCls))
                                                         ($dData4 :: Data.Data.Data
                                                                       (Language.Haskell.Tools.AST.Ann.SemanticInfo'
                                                                          Language.Haskell.Tools.AST.Ann.IdDom
                                                                          Language.Haskell.Tools.AST.Ann.SameInfoModuleCls))
                                                         ($dData3 :: Data.Data.Data
                                                                       (Language.Haskell.Tools.AST.Ann.SemanticInfo'
                                                                          Language.Haskell.Tools.AST.Ann.IdDom
                                                                          Language.Haskell.Tools.AST.Ann.SameInfoImportCls))
                                                         ($dData2 :: Data.Data.Data
                                                                       (Language.Haskell.Tools.AST.Ann.SemanticInfo'
                                                                          Language.Haskell.Tools.AST.Ann.IdDom
                                                                          Language.Haskell.Tools.AST.Ann.SameInfoExprCls))
                                                         ($dData1 :: Data.Data.Data
                                                                       (Language.Haskell.Tools.AST.Ann.SemanticInfo'
                                                                          Language.Haskell.Tools.AST.Ann.IdDom
                                                                          Language.Haskell.Tools.AST.Ann.SameInfoNameCls))
                                                         ($d~ :: Language.Haskell.Tools.AST.Ann.SemanticInfo'
                                                                   Language.Haskell.Tools.AST.Ann.IdDom
                                                                   Language.Haskell.Tools.AST.Ann.SameInfoDefaultCls
                                                                 Data.Type.Equality.~ Language.Haskell.Tools.AST.SemaInfoTypes.NoSemanticInfo)
                                                         ($dData :: Data.Data.Data
                                                                      Language.Haskell.Tools.AST.Ann.IdDom)
                                                         ($dTypeable :: Data.Typeable.Internal.Typeable
                                                                          Language.Haskell.Tools.AST.Ann.IdDom)
  Language.Haskell.Tools.AST.Ann.$fDomaind_$cp3Domain @ Language.Haskell.Tools.AST.Ann.IdDom
                                                      $dTypeable
                                                      $dData
                                                      $d~
                                                      $dData1
                                                      $dData2
                                                      $dData3
                                                      $dData4
                                                      $dData5
                                                      $dShow
                                                      $dShow1
                                                      $dShow2
                                                      $dShow3
                                                      $dShow4
  = Main.$s$fDomaind_$s$fDomaind_$cp3Domain
"SPEC/Main $fDomaind_$cp4Domain @ IdDom" [ALWAYS] forall ($dShow4 :: GHC.Show.Show
                                                                       (Language.Haskell.Tools.AST.Ann.SemanticInfo'
                                                                          Language.Haskell.Tools.AST.Ann.IdDom
                                                                          Language.Haskell.Tools.AST.Ann.SameInfoWildcardCls))
                                                         ($dShow3 :: GHC.Show.Show
                                                                       (Language.Haskell.Tools.AST.Ann.SemanticInfo'
                                                                          Language.Haskell.Tools.AST.Ann.IdDom
                                                                          Language.Haskell.Tools.AST.Ann.SameInfoModuleCls))
                                                         ($dShow2 :: GHC.Show.Show
                                                                       (Language.Haskell.Tools.AST.Ann.SemanticInfo'
                                                                          Language.Haskell.Tools.AST.Ann.IdDom
                                                                          Language.Haskell.Tools.AST.Ann.SameInfoImportCls))
                                                         ($dShow1 :: GHC.Show.Show
                                                                       (Language.Haskell.Tools.AST.Ann.SemanticInfo'
                                                                          Language.Haskell.Tools.AST.Ann.IdDom
                                                                          Language.Haskell.Tools.AST.Ann.SameInfoExprCls))
                                                         ($dShow :: GHC.Show.Show
                                                                      (Language.Haskell.Tools.AST.Ann.SemanticInfo'
                                                                         Language.Haskell.Tools.AST.Ann.IdDom
                                                                         Language.Haskell.Tools.AST.Ann.SameInfoNameCls))
                                                         ($dData5 :: Data.Data.Data
                                                                       (Language.Haskell.Tools.AST.Ann.SemanticInfo'
                                                                          Language.Haskell.Tools.AST.Ann.IdDom
                                                                          Language.Haskell.Tools.AST.Ann.SameInfoWildcardCls))
                                                         ($dData4 :: Data.Data.Data
                                                                       (Language.Haskell.Tools.AST.Ann.SemanticInfo'
                                                                          Language.Haskell.Tools.AST.Ann.IdDom
                                                                          Language.Haskell.Tools.AST.Ann.SameInfoModuleCls))
                                                         ($dData3 :: Data.Data.Data
                                                                       (Language.Haskell.Tools.AST.Ann.SemanticInfo'
                                                                          Language.Haskell.Tools.AST.Ann.IdDom
                                                                          Language.Haskell.Tools.AST.Ann.SameInfoImportCls))
                                                         ($dData2 :: Data.Data.Data
                                                                       (Language.Haskell.Tools.AST.Ann.SemanticInfo'
                                                                          Language.Haskell.Tools.AST.Ann.IdDom
                                                                          Language.Haskell.Tools.AST.Ann.SameInfoExprCls))
                                                         ($dData1 :: Data.Data.Data
                                                                       (Language.Haskell.Tools.AST.Ann.SemanticInfo'
                                                                          Language.Haskell.Tools.AST.Ann.IdDom
                                                                          Language.Haskell.Tools.AST.Ann.SameInfoNameCls))
                                                         ($d~ :: Language.Haskell.Tools.AST.Ann.SemanticInfo'
                                                                   Language.Haskell.Tools.AST.Ann.IdDom
                                                                   Language.Haskell.Tools.AST.Ann.SameInfoDefaultCls
                                                                 Data.Type.Equality.~ Language.Haskell.Tools.AST.SemaInfoTypes.NoSemanticInfo)
                                                         ($dData :: Data.Data.Data
                                                                      Language.Haskell.Tools.AST.Ann.IdDom)
                                                         ($dTypeable :: Data.Typeable.Internal.Typeable
                                                                          Language.Haskell.Tools.AST.Ann.IdDom)
  Language.Haskell.Tools.AST.Ann.$fDomaind_$cp4Domain @ Language.Haskell.Tools.AST.Ann.IdDom
                                                      $dTypeable
                                                      $dData
                                                      $d~
                                                      $dData1
                                                      $dData2
                                                      $dData3
                                                      $dData4
                                                      $dData5
                                                      $dShow
                                                      $dShow1
                                                      $dShow2
                                                      $dShow3
                                                      $dShow4
  = Main.$s$fDomaind_$s$fDomaind_$cp4Domain
"SPEC/Main $fDomaind_$cp5Domain @ IdDom" [ALWAYS] forall ($dShow4 :: GHC.Show.Show
                                                                       (Language.Haskell.Tools.AST.Ann.SemanticInfo'
                                                                          Language.Haskell.Tools.AST.Ann.IdDom
                                                                          Language.Haskell.Tools.AST.Ann.SameInfoWildcardCls))
                                                         ($dShow3 :: GHC.Show.Show
                                                                       (Language.Haskell.Tools.AST.Ann.SemanticInfo'
                                                                          Language.Haskell.Tools.AST.Ann.IdDom
                                                                          Language.Haskell.Tools.AST.Ann.SameInfoModuleCls))
                                                         ($dShow2 :: GHC.Show.Show
                                                                       (Language.Haskell.Tools.AST.Ann.SemanticInfo'
                                                                          Language.Haskell.Tools.AST.Ann.IdDom
                                                                          Language.Haskell.Tools.AST.Ann.SameInfoImportCls))
                                                         ($dShow1 :: GHC.Show.Show
                                                                       (Language.Haskell.Tools.AST.Ann.SemanticInfo'
                                                                          Language.Haskell.Tools.AST.Ann.IdDom
                                                                          Language.Haskell.Tools.AST.Ann.SameInfoExprCls))
                                                         ($dShow :: GHC.Show.Show
                                                                      (Language.Haskell.Tools.AST.Ann.SemanticInfo'
                                                                         Language.Haskell.Tools.AST.Ann.IdDom
                                                                         Language.Haskell.Tools.AST.Ann.SameInfoNameCls))
                                                         ($dData5 :: Data.Data.Data
                                                                       (Language.Haskell.Tools.AST.Ann.SemanticInfo'
                                                                          Language.Haskell.Tools.AST.Ann.IdDom
                                                                          Language.Haskell.Tools.AST.Ann.SameInfoWildcardCls))
                                                         ($dData4 :: Data.Data.Data
                                                                       (Language.Haskell.Tools.AST.Ann.SemanticInfo'
                                                                          Language.Haskell.Tools.AST.Ann.IdDom
                                                                          Language.Haskell.Tools.AST.Ann.SameInfoModuleCls))
                                                         ($dData3 :: Data.Data.Data
                                                                       (Language.Haskell.Tools.AST.Ann.SemanticInfo'
                                                                          Language.Haskell.Tools.AST.Ann.IdDom
                                                                          Language.Haskell.Tools.AST.Ann.SameInfoImportCls))
                                                         ($dData2 :: Data.Data.Data
                                                                       (Language.Haskell.Tools.AST.Ann.SemanticInfo'
                                                                          Language.Haskell.Tools.AST.Ann.IdDom
                                                                          Language.Haskell.Tools.AST.Ann.SameInfoExprCls))
                                                         ($dData1 :: Data.Data.Data
                                                                       (Language.Haskell.Tools.AST.Ann.SemanticInfo'
                                                                          Language.Haskell.Tools.AST.Ann.IdDom
                                                                          Language.Haskell.Tools.AST.Ann.SameInfoNameCls))
                                                         ($d~ :: Language.Haskell.Tools.AST.Ann.SemanticInfo'
                                                                   Language.Haskell.Tools.AST.Ann.IdDom
                                                                   Language.Haskell.Tools.AST.Ann.SameInfoDefaultCls
                                                                 Data.Type.Equality.~ Language.Haskell.Tools.AST.SemaInfoTypes.NoSemanticInfo)
                                                         ($dData :: Data.Data.Data
                                                                      Language.Haskell.Tools.AST.Ann.IdDom)
                                                         ($dTypeable :: Data.Typeable.Internal.Typeable
                                                                          Language.Haskell.Tools.AST.Ann.IdDom)
  Language.Haskell.Tools.AST.Ann.$fDomaind_$cp5Domain @ Language.Haskell.Tools.AST.Ann.IdDom
                                                      $dTypeable
                                                      $dData
                                                      $d~
                                                      $dData1
                                                      $dData2
                                                      $dData3
                                                      $dData4
                                                      $dData5
                                                      $dShow
                                                      $dShow1
                                                      $dShow2
                                                      $dShow3
                                                      $dShow4
  = Main.$s$fDomaind_$s$fDomaind_$cp5Domain
"SPEC/Main $fDomaind_$cp6Domain @ IdDom" [ALWAYS] forall ($dShow4 :: GHC.Show.Show
                                                                       (Language.Haskell.Tools.AST.Ann.SemanticInfo'
                                                                          Language.Haskell.Tools.AST.Ann.IdDom
                                                                          Language.Haskell.Tools.AST.Ann.SameInfoWildcardCls))
                                                         ($dShow3 :: GHC.Show.Show
                                                                       (Language.Haskell.Tools.AST.Ann.SemanticInfo'
                                                                          Language.Haskell.Tools.AST.Ann.IdDom
                                                                          Language.Haskell.Tools.AST.Ann.SameInfoModuleCls))
                                                         ($dShow2 :: GHC.Show.Show
                                                                       (Language.Haskell.Tools.AST.Ann.SemanticInfo'
                                                                          Language.Haskell.Tools.AST.Ann.IdDom
                                                                          Language.Haskell.Tools.AST.Ann.SameInfoImportCls))
                                                         ($dShow1 :: GHC.Show.Show
                                                                       (Language.Haskell.Tools.AST.Ann.SemanticInfo'
                                                                          Language.Haskell.Tools.AST.Ann.IdDom
                                                                          Language.Haskell.Tools.AST.Ann.SameInfoExprCls))
                                                         ($dShow :: GHC.Show.Show
                                                                      (Language.Haskell.Tools.AST.Ann.SemanticInfo'
                                                                         Language.Haskell.Tools.AST.Ann.IdDom
                                                                         Language.Haskell.Tools.AST.Ann.SameInfoNameCls))
                                                         ($dData5 :: Data.Data.Data
                                                                       (Language.Haskell.Tools.AST.Ann.SemanticInfo'
                                                                          Language.Haskell.Tools.AST.Ann.IdDom
                                                                          Language.Haskell.Tools.AST.Ann.SameInfoWildcardCls))
                                                         ($dData4 :: Data.Data.Data
                                                                       (Language.Haskell.Tools.AST.Ann.SemanticInfo'
                                                                          Language.Haskell.Tools.AST.Ann.IdDom
                                                                          Language.Haskell.Tools.AST.Ann.SameInfoModuleCls))
                                                         ($dData3 :: Data.Data.Data
                                                                       (Language.Haskell.Tools.AST.Ann.SemanticInfo'
                                                                          Language.Haskell.Tools.AST.Ann.IdDom
                                                                          Language.Haskell.Tools.AST.Ann.SameInfoImportCls))
                                                         ($dData2 :: Data.Data.Data
                                                                       (Language.Haskell.Tools.AST.Ann.SemanticInfo'
                                                                          Language.Haskell.Tools.AST.Ann.IdDom
                                                                          Language.Haskell.Tools.AST.Ann.SameInfoExprCls))
                                                         ($dData1 :: Data.Data.Data
                                                                       (Language.Haskell.Tools.AST.Ann.SemanticInfo'
                                                                          Language.Haskell.Tools.AST.Ann.IdDom
                                                                          Language.Haskell.Tools.AST.Ann.SameInfoNameCls))
                                                         ($d~ :: Language.Haskell.Tools.AST.Ann.SemanticInfo'
                                                                   Language.Haskell.Tools.AST.Ann.IdDom
                                                                   Language.Haskell.Tools.AST.Ann.SameInfoDefaultCls
                                                                 Data.Type.Equality.~ Language.Haskell.Tools.AST.SemaInfoTypes.NoSemanticInfo)
                                                         ($dData :: Data.Data.Data
                                                                      Language.Haskell.Tools.AST.Ann.IdDom)
                                                         ($dTypeable :: Data.Typeable.Internal.Typeable
                                                                          Language.Haskell.Tools.AST.Ann.IdDom)
  Language.Haskell.Tools.AST.Ann.$fDomaind_$cp6Domain @ Language.Haskell.Tools.AST.Ann.IdDom
                                                      $dTypeable
                                                      $dData
                                                      $d~
                                                      $dData1
                                                      $dData2
                                                      $dData3
                                                      $dData4
                                                      $dData5
                                                      $dShow
                                                      $dShow1
                                                      $dShow2
                                                      $dShow3
                                                      $dShow4
  = Main.$s$fDomaind_$s$fDomaind_$cp6Domain
"SPEC/Main $fDomaind_$cp7Domain @ IdDom" [ALWAYS] forall ($dShow4 :: GHC.Show.Show
                                                                       (Language.Haskell.Tools.AST.Ann.SemanticInfo'
                                                                          Language.Haskell.Tools.AST.Ann.IdDom
                                                                          Language.Haskell.Tools.AST.Ann.SameInfoWildcardCls))
                                                         ($dShow3 :: GHC.Show.Show
                                                                       (Language.Haskell.Tools.AST.Ann.SemanticInfo'
                                                                          Language.Haskell.Tools.AST.Ann.IdDom
                                                                          Language.Haskell.Tools.AST.Ann.SameInfoModuleCls))
                                                         ($dShow2 :: GHC.Show.Show
                                                                       (Language.Haskell.Tools.AST.Ann.SemanticInfo'
                                                                          Language.Haskell.Tools.AST.Ann.IdDom
                                                                          Language.Haskell.Tools.AST.Ann.SameInfoImportCls))
                                                         ($dShow1 :: GHC.Show.Show
                                                                       (Language.Haskell.Tools.AST.Ann.SemanticInfo'
                                                                          Language.Haskell.Tools.AST.Ann.IdDom
                                                                          Language.Haskell.Tools.AST.Ann.SameInfoExprCls))
                                                         ($dShow :: GHC.Show.Show
                                                                      (Language.Haskell.Tools.AST.Ann.SemanticInfo'
                                                                         Language.Haskell.Tools.AST.Ann.IdDom
                                                                         Language.Haskell.Tools.AST.Ann.SameInfoNameCls))
                                                         ($dData5 :: Data.Data.Data
                                                                       (Language.Haskell.Tools.AST.Ann.SemanticInfo'
                                                                          Language.Haskell.Tools.AST.Ann.IdDom
                                                                          Language.Haskell.Tools.AST.Ann.SameInfoWildcardCls))
                                                         ($dData4 :: Data.Data.Data
                                                                       (Language.Haskell.Tools.AST.Ann.SemanticInfo'
                                                                          Language.Haskell.Tools.AST.Ann.IdDom
                                                                          Language.Haskell.Tools.AST.Ann.SameInfoModuleCls))
                                                         ($dData3 :: Data.Data.Data
                                                                       (Language.Haskell.Tools.AST.Ann.SemanticInfo'
                                                                          Language.Haskell.Tools.AST.Ann.IdDom
                                                                          Language.Haskell.Tools.AST.Ann.SameInfoImportCls))
                                                         ($dData2 :: Data.Data.Data
                                                                       (Language.Haskell.Tools.AST.Ann.SemanticInfo'
                                                                          Language.Haskell.Tools.AST.Ann.IdDom
                                                                          Language.Haskell.Tools.AST.Ann.SameInfoExprCls))
                                                         ($dData1 :: Data.Data.Data
                                                                       (Language.Haskell.Tools.AST.Ann.SemanticInfo'
                                                                          Language.Haskell.Tools.AST.Ann.IdDom
                                                                          Language.Haskell.Tools.AST.Ann.SameInfoNameCls))
                                                         ($d~ :: Language.Haskell.Tools.AST.Ann.SemanticInfo'
                                                                   Language.Haskell.Tools.AST.Ann.IdDom
                                                                   Language.Haskell.Tools.AST.Ann.SameInfoDefaultCls
                                                                 Data.Type.Equality.~ Language.Haskell.Tools.AST.SemaInfoTypes.NoSemanticInfo)
                                                         ($dData :: Data.Data.Data
                                                                      Language.Haskell.Tools.AST.Ann.IdDom)
                                                         ($dTypeable :: Data.Typeable.Internal.Typeable
                                                                          Language.Haskell.Tools.AST.Ann.IdDom)
  Language.Haskell.Tools.AST.Ann.$fDomaind_$cp7Domain @ Language.Haskell.Tools.AST.Ann.IdDom
                                                      $dTypeable
                                                      $dData
                                                      $d~
                                                      $dData1
                                                      $dData2
                                                      $dData3
                                                      $dData4
                                                      $dData5
                                                      $dShow
                                                      $dShow1
                                                      $dShow2
                                                      $dShow3
                                                      $dShow4
  = Main.$s$fDomaind_$s$fDomaind_$cp7Domain
"SPEC/Main $fDomaind_$cp8Domain @ IdDom" [ALWAYS] forall ($dShow4 :: GHC.Show.Show
                                                                       (Language.Haskell.Tools.AST.Ann.SemanticInfo'
                                                                          Language.Haskell.Tools.AST.Ann.IdDom
                                                                          Language.Haskell.Tools.AST.Ann.SameInfoWildcardCls))
                                                         ($dShow3 :: GHC.Show.Show
                                                                       (Language.Haskell.Tools.AST.Ann.SemanticInfo'
                                                                          Language.Haskell.Tools.AST.Ann.IdDom
                                                                          Language.Haskell.Tools.AST.Ann.SameInfoModuleCls))
                                                         ($dShow2 :: GHC.Show.Show
                                                                       (Language.Haskell.Tools.AST.Ann.SemanticInfo'
                                                                          Language.Haskell.Tools.AST.Ann.IdDom
                                                                          Language.Haskell.Tools.AST.Ann.SameInfoImportCls))
                                                         ($dShow1 :: GHC.Show.Show
                                                                       (Language.Haskell.Tools.AST.Ann.SemanticInfo'
                                                                          Language.Haskell.Tools.AST.Ann.IdDom
                                                                          Language.Haskell.Tools.AST.Ann.SameInfoExprCls))
                                                         ($dShow :: GHC.Show.Show
                                                                      (Language.Haskell.Tools.AST.Ann.SemanticInfo'
                                                                         Language.Haskell.Tools.AST.Ann.IdDom
                                                                         Language.Haskell.Tools.AST.Ann.SameInfoNameCls))
                                                         ($dData5 :: Data.Data.Data
                                                                       (Language.Haskell.Tools.AST.Ann.SemanticInfo'
                                                                          Language.Haskell.Tools.AST.Ann.IdDom
                                                                          Language.Haskell.Tools.AST.Ann.SameInfoWildcardCls))
                                                         ($dData4 :: Data.Data.Data
                                                                       (Language.Haskell.Tools.AST.Ann.SemanticInfo'
                                                                          Language.Haskell.Tools.AST.Ann.IdDom
                                                                          Language.Haskell.Tools.AST.Ann.SameInfoModuleCls))
                                                         ($dData3 :: Data.Data.Data
                                                                       (Language.Haskell.Tools.AST.Ann.SemanticInfo'
                                                                          Language.Haskell.Tools.AST.Ann.IdDom
                                                                          Language.Haskell.Tools.AST.Ann.SameInfoImportCls))
                                                         ($dData2 :: Data.Data.Data
                                                                       (Language.Haskell.Tools.AST.Ann.SemanticInfo'
                                                                          Language.Haskell.Tools.AST.Ann.IdDom
                                                                          Language.Haskell.Tools.AST.Ann.SameInfoExprCls))
                                                         ($dData1 :: Data.Data.Data
                                                                       (Language.Haskell.Tools.AST.Ann.SemanticInfo'
                                                                          Language.Haskell.Tools.AST.Ann.IdDom
                                                                          Language.Haskell.Tools.AST.Ann.SameInfoNameCls))
                                                         ($d~ :: Language.Haskell.Tools.AST.Ann.SemanticInfo'
                                                                   Language.Haskell.Tools.AST.Ann.IdDom
                                                                   Language.Haskell.Tools.AST.Ann.SameInfoDefaultCls
                                                                 Data.Type.Equality.~ Language.Haskell.Tools.AST.SemaInfoTypes.NoSemanticInfo)
                                                         ($dData :: Data.Data.Data
                                                                      Language.Haskell.Tools.AST.Ann.IdDom)
                                                         ($dTypeable :: Data.Typeable.Internal.Typeable
                                                                          Language.Haskell.Tools.AST.Ann.IdDom)
  Language.Haskell.Tools.AST.Ann.$fDomaind_$cp8Domain @ Language.Haskell.Tools.AST.Ann.IdDom
                                                      $dTypeable
                                                      $dData
                                                      $d~
                                                      $dData1
                                                      $dData2
                                                      $dData3
                                                      $dData4
                                                      $dData5
                                                      $dShow
                                                      $dShow1
                                                      $dShow2
                                                      $dShow3
                                                      $dShow4
  = Main.$s$fDomaind_$s$fDomaind_$cp8Domain
"SPEC/Main $fDomaind_$cp9Domain @ IdDom" [ALWAYS] forall ($dShow4 :: GHC.Show.Show
                                                                       (Language.Haskell.Tools.AST.Ann.SemanticInfo'
                                                                          Language.Haskell.Tools.AST.Ann.IdDom
                                                                          Language.Haskell.Tools.AST.Ann.SameInfoWildcardCls))
                                                         ($dShow3 :: GHC.Show.Show
                                                                       (Language.Haskell.Tools.AST.Ann.SemanticInfo'
                                                                          Language.Haskell.Tools.AST.Ann.IdDom
                                                                          Language.Haskell.Tools.AST.Ann.SameInfoModuleCls))
                                                         ($dShow2 :: GHC.Show.Show
                                                                       (Language.Haskell.Tools.AST.Ann.SemanticInfo'
                                                                          Language.Haskell.Tools.AST.Ann.IdDom
                                                                          Language.Haskell.Tools.AST.Ann.SameInfoImportCls))
                                                         ($dShow1 :: GHC.Show.Show
                                                                       (Language.Haskell.Tools.AST.Ann.SemanticInfo'
                                                                          Language.Haskell.Tools.AST.Ann.IdDom
                                                                          Language.Haskell.Tools.AST.Ann.SameInfoExprCls))
                                                         ($dShow :: GHC.Show.Show
                                                                      (Language.Haskell.Tools.AST.Ann.SemanticInfo'
                                                                         Language.Haskell.Tools.AST.Ann.IdDom
                                                                         Language.Haskell.Tools.AST.Ann.SameInfoNameCls))
                                                         ($dData5 :: Data.Data.Data
                                                                       (Language.Haskell.Tools.AST.Ann.SemanticInfo'
                                                                          Language.Haskell.Tools.AST.Ann.IdDom
                                                                          Language.Haskell.Tools.AST.Ann.SameInfoWildcardCls))
                                                         ($dData4 :: Data.Data.Data
                                                                       (Language.Haskell.Tools.AST.Ann.SemanticInfo'
                                                                          Language.Haskell.Tools.AST.Ann.IdDom
                                                                          Language.Haskell.Tools.AST.Ann.SameInfoModuleCls))
                                                         ($dData3 :: Data.Data.Data
                                                                       (Language.Haskell.Tools.AST.Ann.SemanticInfo'
                                                                          Language.Haskell.Tools.AST.Ann.IdDom
                                                                          Language.Haskell.Tools.AST.Ann.SameInfoImportCls))
                                                         ($dData2 :: Data.Data.Data
                                                                       (Language.Haskell.Tools.AST.Ann.SemanticInfo'
                                                                          Language.Haskell.Tools.AST.Ann.IdDom
                                                                          Language.Haskell.Tools.AST.Ann.SameInfoExprCls))
                                                         ($dData1 :: Data.Data.Data
                                                                       (Language.Haskell.Tools.AST.Ann.SemanticInfo'
                                                                          Language.Haskell.Tools.AST.Ann.IdDom
                                                                          Language.Haskell.Tools.AST.Ann.SameInfoNameCls))
                                                         ($d~ :: Language.Haskell.Tools.AST.Ann.SemanticInfo'
                                                                   Language.Haskell.Tools.AST.Ann.IdDom
                                                                   Language.Haskell.Tools.AST.Ann.SameInfoDefaultCls
                                                                 Data.Type.Equality.~ Language.Haskell.Tools.AST.SemaInfoTypes.NoSemanticInfo)
                                                         ($dData :: Data.Data.Data
                                                                      Language.Haskell.Tools.AST.Ann.IdDom)
                                                         ($dTypeable :: Data.Typeable.Internal.Typeable
                                                                          Language.Haskell.Tools.AST.Ann.IdDom)
  Language.Haskell.Tools.AST.Ann.$fDomaind_$cp9Domain @ Language.Haskell.Tools.AST.Ann.IdDom
                                                      $dTypeable
                                                      $dData
                                                      $d~
                                                      $dData1
                                                      $dData2
                                                      $dData3
                                                      $dData4
                                                      $dData5
                                                      $dShow
                                                      $dShow1
                                                      $dShow2
                                                      $dShow3
                                                      $dShow4
  = Main.$s$fDomaind_$s$fDomaind_$cp9Domain
"SPEC/Main $fEqMap @ (LogicalRelation Extension) @ [Line]" [ALWAYS] forall ($dEq1 :: GHC.Classes.Eq
                                                                                       [Main.Line])
                                                                           ($dEq :: GHC.Classes.Eq
                                                                                      (ExtMap.LogicalRelation
                                                                                         GHC.LanguageExtensions.Type.Extension))
  Data.Map.Base.$fEqMap @ (ExtMap.LogicalRelation
                             GHC.LanguageExtensions.Type.Extension)
                        @ [Main.Line]
                        $dEq
                        $dEq1
  = Main.$s$fEqMap
"SPEC/Main $fEqMap_$c/= @ (LogicalRelation Extension) @ [Line]" [ALWAYS] forall ($dEq1 :: GHC.Classes.Eq
                                                                                            [Main.Line])
                                                                                ($dEq :: GHC.Classes.Eq
                                                                                           (ExtMap.LogicalRelation
                                                                                              GHC.LanguageExtensions.Type.Extension))
  Data.Map.Base.$fEqMap_$c/= @ (ExtMap.LogicalRelation
                                  GHC.LanguageExtensions.Type.Extension)
                             @ [Main.Line]
                             $dEq
                             $dEq1
  = Main.$s$fEqMap_$s$fEqMap_$c/=
"SPEC/Main $fShowImportInfo @ Var" [ALWAYS] forall ($dOutputable :: Outputable.Outputable
                                                                      Var.Var)
  Language.Haskell.Tools.AST.SemaInfoTypes.$fShowImportInfo @ Var.Var
                                                            $dOutputable
  = Main.$s$fDomaind_$s$fShowImportInfo
"SPEC/Main $fShowImportInfo_$cshowsPrec @ Var" [ALWAYS] forall ($dOutputable :: Outputable.Outputable
                                                                                  Var.Var)
  Language.Haskell.Tools.AST.SemaInfoTypes.$fShowImportInfo_$cshowsPrec @ Var.Var
                                                                        $dOutputable
  = Main.$s$fDomaind_$s$fShowImportInfo_$cshowsPrec
"SPEC/Main $fShowLogicalRelation @ Extension" [ALWAYS] forall ($dShow :: GHC.Show.Show
                                                                           GHC.LanguageExtensions.Type.Extension)
  ExtMap.$fShowLogicalRelation @ GHC.LanguageExtensions.Type.Extension
                               $dShow
  = Main.$s$fShowLogicalRelation
"SPEC/Main $fShowLogicalRelation_$cshow @ Extension" [ALWAYS] forall ($dShow :: GHC.Show.Show
                                                                                  GHC.LanguageExtensions.Type.Extension)
  ExtMap.$fShowLogicalRelation_$cshow @ GHC.LanguageExtensions.Type.Extension
                                      $dShow
  = Main.$s$fShowLogicalRelation_$s$fShowLogicalRelation_$cshow
"SPEC/Main $fShowLogicalRelation_$cshowList @ Extension" [ALWAYS] forall ($dShow :: GHC.Show.Show
                                                                                      GHC.LanguageExtensions.Type.Extension)
  ExtMap.$fShowLogicalRelation_$cshowList @ GHC.LanguageExtensions.Type.Extension
                                          $dShow
  = Main.$s$fShowLogicalRelation_$s$fShowLogicalRelation_$cshowList
"SPEC/Main $fShowMap @ (LogicalRelation Extension) @ [Line]" [ALWAYS] forall ($dShow1 :: GHC.Show.Show
                                                                                           [Main.Line])
                                                                             ($dShow :: GHC.Show.Show
                                                                                          (ExtMap.LogicalRelation
                                                                                             GHC.LanguageExtensions.Type.Extension))
  Data.Map.Base.$fShowMap @ (ExtMap.LogicalRelation
                               GHC.LanguageExtensions.Type.Extension)
                          @ [Main.Line]
                          $dShow
                          $dShow1
  = Main.$s$fShowMap
"SPEC/Main $fShowMap_$cshowList @ (LogicalRelation
                                    Extension) @ [Line]" [ALWAYS] forall ($dShow1 :: GHC.Show.Show
                                                                                                                                          [Main.Line])
                                                                                                                            ($dShow :: GHC.Show.Show
                                                                                                                                         (ExtMap.LogicalRelation
                                                                                                                                            GHC.LanguageExtensions.Type.Extension))
  Data.Map.Base.$fShowMap_$cshowList @ (ExtMap.LogicalRelation
                                          GHC.LanguageExtensions.Type.Extension)
                                     @ [Main.Line]
                                     $dShow
                                     $dShow1
  = Main.$s$fShowMap_$s$fShowMap_$cshowList
"SPEC/Main $fShowModuleInfo @ Var" [ALWAYS] forall ($dOutputable :: Outputable.Outputable
                                                                      Var.Var)
  Language.Haskell.Tools.AST.SemaInfoTypes.$fShowModuleInfo @ Var.Var
                                                            $dOutputable
  = Main.$s$fDomaind_$s$fShowModuleInfo
"SPEC/Main $fShowModuleInfo_$cshowsPrec @ Var" [ALWAYS] forall ($dOutputable :: Outputable.Outputable
                                                                                  Var.Var)
  Language.Haskell.Tools.AST.SemaInfoTypes.$fShowModuleInfo_$cshowsPrec @ Var.Var
                                                                        $dOutputable
  = Main.$s$fDomaind_$s$fShowModuleInfo_$cshowsPrec
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

